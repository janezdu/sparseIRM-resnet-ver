hello
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_213140-8j8ujsvm
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/8j8ujsvm
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=200, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=5, fraction_z=0.99)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1246
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5996, 3, 32, 32) (6004, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:44,  1.80s/it] 19%|#9        | 5/26 [00:01<00:06,  3.39it/s] 35%|###4      | 9/26 [00:02<00:02,  6.65it/s] 50%|#####     | 13/26 [00:02<00:01, 10.13it/s] 65%|######5   | 17/26 [00:02<00:00, 13.59it/s] 81%|########  | 21/26 [00:02<00:00, 17.01it/s] 96%|#########6| 25/26 [00:02<00:00, 20.08it/s]100%|##########| 26/26 [00:02<00:00,  8.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [0][  26/  26]	Loss 10.060 (12.589)	train_nll   0.51 (  0.61)	train_penalty   0.12 (  0.46)	weight_norm   9.55 ( 11.98)	train_acc   0.80 (  0.78)	train_minacc   0.02 (  0.10)	train_majacc   1.00 (  0.90)	train_corr   0.00 (  0.00)	l1 6.5351 (7.3161)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.65it/s] 23%|##3       | 6/26 [00:00<00:00, 25.37it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.37it/s] 42%|####2     | 11/26 [00:00<00:00, 33.65it/s] 62%|######1   | 16/26 [00:00<00:00, 38.72it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.72it/s] 81%|########  | 21/26 [00:00<00:00, 39.63it/s]100%|##########| 26/26 [00:00<00:00, 34.06it/s]
Test: [   0/  26]	Loss 0.394 (0.394)	test_acc   0.87 (  0.87)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.394 (0.394)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.419 (0.425)	test_acc   0.85 (  0.84)	test_minacc   0.00 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.419 (0.425)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.00 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.97)
Test: [  20/  26]	Loss 0.390 (0.424)	test_acc   0.87 (  0.85)	test_minacc   0.04 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.390 (0.424)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.04 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.494 (0.423)	test_acc   0.80 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.494 (0.423)	test_acc_d   0.80 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.54it/s]100%|##########| 1/1 [00:00<00:00,  2.54it/s]
Test: [  0/  1]	Loss 1.570 (1.570)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.570 (1.570)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 1.570 (1.570)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.570 (1.570)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/178/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0797 (0.0797)	validation_time 0.0067 (0.0067)	train_time 0.0715 (0.0715)
record: (train_acc, test_acc) (0.8460000184774399, 0.10600000619888306)
last accs (train_acc, test_acc) (0.8460000184774399, 0.10600000619888306)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.89it/s] 19%|#9        | 5/26 [00:00<00:00, 22.65it/s] 35%|###4      | 9/26 [00:00<00:00, 26.16it/s] 50%|#####     | 13/26 [00:00<00:00, 27.79it/s] 65%|######5   | 17/26 [00:00<00:00, 28.61it/s] 81%|########  | 21/26 [00:00<00:00, 29.96it/s] 96%|#########6| 25/26 [00:00<00:00, 30.62it/s]100%|##########| 26/26 [00:00<00:00, 26.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [1][  26/  26]	Loss 5.295 (7.229)	train_nll   0.48 (  0.42)	train_penalty   0.09 (  0.06)	weight_norm   4.81 (  6.81)	train_acc   0.80 (  0.85)	train_minacc   0.00 (  0.01)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 6.3716 (6.4790)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.65it/s] 23%|##3       | 6/26 [00:00<00:00, 26.91it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.91it/s] 42%|####2     | 11/26 [00:00<00:00, 31.49it/s] 62%|######1   | 16/26 [00:00<00:00, 36.85it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.85it/s] 81%|########  | 21/26 [00:00<00:00, 39.77it/s]100%|##########| 26/26 [00:00<00:00, 42.16it/s]100%|##########| 26/26 [00:00<00:00, 34.50it/s]
Test: [   0/  26]	Loss 0.391 (0.391)	test_acc   0.87 (  0.87)	test_minacc   0.08 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.391 (0.391)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.434 (0.415)	test_acc   0.85 (  0.84)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.434 (0.415)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.93)
Test: [  20/  26]	Loss 0.384 (0.411)	test_acc   0.87 (  0.85)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.384 (0.411)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.94)
Test: [  26/  26]	Loss 0.471 (0.410)	test_acc   0.79 (  0.85)	test_minacc   0.02 (  0.03)	test_majacc   0.98 (  0.99)	Loss_d 0.471 (0.410)	test_acc_d   0.79 (  0.85)	test_minacc_d   0.02 (  0.03)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.93 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.71it/s]
Test: [  0/  1]	Loss 1.482 (1.482)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.482 (1.482)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.92)
Test: [  1/  1]	Loss 1.482 (1.482)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.482 (1.482)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.92)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/178/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0429 (0.0613)	validation_time 0.0006 (0.0037)	train_time 0.0423 (0.0569)
record: (train_acc, test_acc) (0.8465000286102294, 0.11500000208616257)
last accs (train_acc, test_acc) (0.8465000286102294, 0.11500000208616257)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.16it/s] 19%|#9        | 5/26 [00:00<00:00, 22.83it/s] 35%|###4      | 9/26 [00:00<00:00, 26.48it/s] 50%|#####     | 13/26 [00:00<00:00, 28.32it/s] 62%|######1   | 16/26 [00:00<00:00, 28.78it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.70it/s] 88%|########8 | 23/26 [00:00<00:00, 29.40it/s]100%|##########| 26/26 [00:00<00:00, 26.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [2][  26/  26]	Loss 3.280 (4.046)	train_nll   0.48 (  0.40)	train_penalty   0.13 (  0.05)	weight_norm   2.80 (  3.64)	train_acc   0.80 (  0.84)	train_minacc   0.00 (  0.03)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.7428 (6.0575)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 10.09it/s] 27%|##6       | 7/26 [00:00<00:00, 25.90it/s]                                               27%|##6       | 7/26 [00:00<00:00, 25.90it/s] 46%|####6     | 12/26 [00:00<00:00, 33.96it/s] 65%|######5   | 17/26 [00:00<00:00, 38.04it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.04it/s] 85%|########4 | 22/26 [00:00<00:00, 37.62it/s]100%|##########| 26/26 [00:00<00:00, 33.27it/s]
Test: [   0/  26]	Loss 0.377 (0.377)	test_acc   0.87 (  0.87)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.377 (0.377)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.402 (0.391)	test_acc   0.85 (  0.85)	test_minacc   0.05 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.402 (0.391)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.05 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.92)
Test: [  20/  26]	Loss 0.359 (0.386)	test_acc   0.87 (  0.85)	test_minacc   0.04 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.359 (0.386)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.04 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.92)
Test: [  26/  26]	Loss 0.434 (0.384)	test_acc   0.80 (  0.85)	test_minacc   0.04 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.434 (0.384)	test_acc_d   0.80 (  0.85)	test_minacc_d   0.04 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.48it/s]
Test: [  0/  1]	Loss 1.345 (1.345)	test_acc   0.14 (  0.14)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 1.345 (1.345)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.87 (  0.87)
Test: [  1/  1]	Loss 1.345 (1.345)	test_acc   0.14 (  0.14)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 1.345 (1.345)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.87 (  0.87)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/178/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0444 (0.0557)	validation_time 0.0003 (0.0026)	train_time 0.0440 (0.0526)
record: (train_acc, test_acc) (0.8484000206589699, 0.14000000059604645)
last accs (train_acc, test_acc) (0.8484000206589699, 0.14000000059604645)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.86it/s] 15%|#5        | 4/26 [00:00<00:01, 17.02it/s] 27%|##6       | 7/26 [00:00<00:00, 21.42it/s] 38%|###8      | 10/26 [00:00<00:00, 24.18it/s] 50%|#####     | 13/26 [00:00<00:00, 25.83it/s] 62%|######1   | 16/26 [00:00<00:00, 26.70it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.09it/s] 88%|########8 | 23/26 [00:00<00:00, 28.37it/s]100%|##########| 26/26 [00:01<00:00, 28.82it/s]100%|##########| 26/26 [00:01<00:00, 23.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [3][  26/  26]	Loss 2.240 (2.605)	train_nll   0.47 (  0.38)	train_penalty   0.14 (  0.04)	weight_norm   1.77 (  2.22)	train_acc   0.80 (  0.85)	train_minacc   0.00 (  0.08)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 5.3517 (5.3816)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.71it/s] 15%|#5        | 4/26 [00:00<00:01, 19.90it/s] 35%|###4      | 9/26 [00:00<00:00, 31.82it/s]                                               35%|###4      | 9/26 [00:00<00:00, 31.82it/s] 54%|#####3    | 14/26 [00:00<00:00, 38.39it/s] 69%|######9   | 18/26 [00:00<00:00, 38.88it/s]                                                69%|######9   | 18/26 [00:00<00:00, 38.88it/s] 88%|########8 | 23/26 [00:00<00:00, 37.59it/s]100%|##########| 26/26 [00:00<00:00, 33.50it/s]
Test: [   0/  26]	Loss 0.384 (0.384)	test_acc   0.87 (  0.87)	test_minacc   0.24 (  0.24)	test_majacc   0.96 (  0.96)	Loss_d 0.384 (0.384)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.404 (0.398)	test_acc   0.85 (  0.85)	test_minacc   0.18 (  0.21)	test_majacc   0.96 (  0.97)	Loss_d 0.404 (0.398)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.18 (  0.21)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.86 (  0.86)
Test: [  20/  26]	Loss 0.355 (0.393)	test_acc   0.87 (  0.85)	test_minacc   0.16 (  0.18)	test_majacc   0.97 (  0.97)	Loss_d 0.355 (0.393)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.16 (  0.18)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.88 (  0.86)
Test: [  26/  26]	Loss 0.411 (0.389)	test_acc   0.81 (  0.85)	test_minacc   0.14 (  0.19)	test_majacc   0.98 (  0.97)	Loss_d 0.411 (0.389)	test_acc_d   0.81 (  0.85)	test_minacc_d   0.14 (  0.19)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.86 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.12it/s]
Test: [  0/  1]	Loss 1.266 (1.266)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 1.266 (1.266)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.73 (  0.73)
Test: [  1/  1]	Loss 1.266 (1.266)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 1.266 (1.266)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.73 (  0.73)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/178/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0418 (0.0522)	validation_time 0.0005 (0.0020)	train_time 0.0413 (0.0498)
record: (train_acc, test_acc) (0.8506000292897224, 0.24900001287460327)
last accs (train_acc, test_acc) (0.8506000292897224, 0.24900001287460327)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.95it/s] 15%|#5        | 4/26 [00:00<00:01, 18.31it/s] 27%|##6       | 7/26 [00:00<00:00, 21.72it/s] 38%|###8      | 10/26 [00:00<00:00, 23.80it/s] 50%|#####     | 13/26 [00:00<00:00, 25.42it/s] 62%|######1   | 16/26 [00:00<00:00, 26.76it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.65it/s] 88%|########8 | 23/26 [00:00<00:00, 28.76it/s]100%|##########| 26/26 [00:01<00:00, 24.57it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [4][  26/  26]	Loss 1.628 (1.807)	train_nll   0.46 (  0.37)	train_penalty   0.11 (  0.03)	weight_norm   1.17 (  1.44)	train_acc   0.80 (  0.85)	train_minacc   0.04 (  0.12)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 5.6044 (5.2254)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 18.95it/s] 38%|###8      | 10/26 [00:00<00:00, 39.89it/s]                                                38%|###8      | 10/26 [00:00<00:00, 39.89it/s] 58%|#####7    | 15/26 [00:00<00:00, 39.18it/s] 77%|#######6  | 20/26 [00:00<00:00, 42.41it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 42.41it/s] 96%|#########6| 25/26 [00:00<00:00, 43.85it/s]100%|##########| 26/26 [00:00<00:00, 37.65it/s]
Test: [   0/  26]	Loss 0.347 (0.347)	test_acc   0.87 (  0.87)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.347 (0.347)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.376 (0.368)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 0.376 (0.368)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Test: [  20/  26]	Loss 0.320 (0.362)	test_acc   0.87 (  0.85)	test_minacc   0.02 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.320 (0.362)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.02 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.93)
Test: [  26/  26]	Loss 0.397 (0.357)	test_acc   0.81 (  0.85)	test_minacc   0.08 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.397 (0.357)	test_acc_d   0.81 (  0.85)	test_minacc_d   0.08 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.93 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.73it/s]
Test: [  0/  1]	Loss 1.563 (1.563)	test_acc   0.16 (  0.16)	test_minacc   0.06 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 1.563 (1.563)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.84 (  0.84)
Test: [  1/  1]	Loss 1.563 (1.563)	test_acc   0.16 (  0.16)	test_minacc   0.06 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 1.563 (1.563)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.84 (  0.84)
Overall Timing[  4/  1]	epoch_time 0.0444 (0.0506)	validation_time 0.0004 (0.0017)	train_time 0.0440 (0.0486)
record: (train_acc, test_acc) (0.8506000292897224, 0.24900001287460327)
last accs (train_acc, test_acc) (0.8487000235915184, 0.15600000321865082)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.54it/s] 19%|#9        | 5/26 [00:00<00:01, 16.46it/s] 35%|###4      | 9/26 [00:00<00:00, 21.85it/s] 50%|#####     | 13/26 [00:00<00:00, 25.13it/s] 65%|######5   | 17/26 [00:00<00:00, 26.83it/s] 81%|########  | 21/26 [00:00<00:00, 29.15it/s] 96%|#########6| 25/26 [00:00<00:00, 30.27it/s]100%|##########| 26/26 [00:01<00:00, 24.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [5][  26/  26]	Loss 1.179 (1.313)	train_nll   0.40 (  0.36)	train_penalty   0.04 (  0.03)	weight_norm   0.77 (  0.95)	train_acc   0.82 (  0.85)	train_minacc   0.18 (  0.12)	train_majacc   0.98 (  0.98)	train_corr   0.00 (  0.00)	l1 6.2035 (5.7050)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.04it/s] 23%|##3       | 6/26 [00:00<00:00, 27.11it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.11it/s] 42%|####2     | 11/26 [00:00<00:00, 34.13it/s] 62%|######1   | 16/26 [00:00<00:00, 39.14it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.14it/s] 81%|########  | 21/26 [00:00<00:00, 38.29it/s]100%|##########| 26/26 [00:00<00:00, 40.66it/s]100%|##########| 26/26 [00:00<00:00, 33.49it/s]
Test: [   0/  26]	Loss 0.355 (0.355)	test_acc   0.87 (  0.87)	test_minacc   0.30 (  0.30)	test_majacc   0.95 (  0.95)	Loss_d 0.355 (0.355)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.85 (  0.85)
Test: [  10/  26]	Loss 0.380 (0.352)	test_acc   0.84 (  0.85)	test_minacc   0.21 (  0.28)	test_majacc   0.94 (  0.95)	Loss_d 0.380 (0.352)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.21 (  0.28)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.84 (  0.84)
Test: [  20/  26]	Loss 0.323 (0.351)	test_acc   0.87 (  0.85)	test_minacc   0.28 (  0.28)	test_majacc   0.96 (  0.95)	Loss_d 0.323 (0.351)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.86 (  0.84)
Test: [  26/  26]	Loss 0.357 (0.345)	test_acc   0.84 (  0.85)	test_minacc   0.29 (  0.28)	test_majacc   0.97 (  0.95)	Loss_d 0.357 (0.345)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.29 (  0.28)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.82 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.57it/s]
Test: [  0/  1]	Loss 1.416 (1.416)	test_acc   0.31 (  0.31)	test_minacc   0.24 (  0.24)	test_majacc   0.94 (  0.94)	Loss_d 1.416 (1.416)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.54 (  0.54)
Test: [  1/  1]	Loss 1.416 (1.416)	test_acc   0.31 (  0.31)	test_minacc   0.24 (  0.24)	test_majacc   0.94 (  0.94)	Loss_d 1.416 (1.416)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.54 (  0.54)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/178/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0443 (0.0496)	validation_time 0.0003 (0.0015)	train_time 0.0440 (0.0478)
record: (train_acc, test_acc) (0.8498000244498253, 0.30800002813339233)
last accs (train_acc, test_acc) (0.8498000244498253, 0.30800002813339233)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.14it/s] 15%|#5        | 4/26 [00:00<00:01, 18.26it/s] 27%|##6       | 7/26 [00:00<00:00, 22.56it/s] 38%|###8      | 10/26 [00:00<00:00, 24.94it/s] 50%|#####     | 13/26 [00:00<00:00, 25.82it/s] 62%|######1   | 16/26 [00:00<00:00, 26.48it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.04it/s] 88%|########8 | 23/26 [00:00<00:00, 28.19it/s]100%|##########| 26/26 [00:01<00:00, 24.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [6][  26/  26]	Loss 0.942 (0.987)	train_nll   0.41 (  0.35)	train_penalty   0.07 (  0.03)	weight_norm   0.53 (  0.63)	train_acc   0.81 (  0.85)	train_minacc   0.08 (  0.13)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 7.2897 (6.5941)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.76it/s] 19%|#9        | 5/26 [00:00<00:00, 25.99it/s] 38%|###8      | 10/26 [00:00<00:00, 34.92it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.92it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.17it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.04it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.04it/s] 96%|#########6| 25/26 [00:00<00:00, 41.26it/s]100%|##########| 26/26 [00:00<00:00, 34.67it/s]
Test: [   0/  26]	Loss 0.360 (0.360)	test_acc   0.83 (  0.83)	test_minacc   0.46 (  0.46)	test_majacc   0.89 (  0.89)	Loss_d 0.360 (0.360)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.83 (  0.83)
Test: [  10/  26]	Loss 0.369 (0.361)	test_acc   0.82 (  0.84)	test_minacc   0.45 (  0.47)	test_majacc   0.88 (  0.91)	Loss_d 0.369 (0.361)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.45 (  0.47)	test_majacc_d   0.88 (  0.91)	test_corr_d   0.81 (  0.81)
Test: [  20/  26]	Loss 0.314 (0.356)	test_acc   0.85 (  0.84)	test_minacc   0.40 (  0.45)	test_majacc   0.92 (  0.91)	Loss_d 0.314 (0.356)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.40 (  0.45)	test_majacc_d   0.92 (  0.91)	test_corr_d   0.85 (  0.81)
Test: [  26/  26]	Loss 0.339 (0.349)	test_acc   0.87 (  0.84)	test_minacc   0.55 (  0.46)	test_majacc   0.95 (  0.91)	Loss_d 0.339 (0.349)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.55 (  0.46)	test_majacc_d   0.95 (  0.91)	test_corr_d   0.80 (  0.81)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.67it/s]
Test: [  0/  1]	Loss 1.364 (1.364)	test_acc   0.47 (  0.47)	test_minacc   0.43 (  0.43)	test_majacc   0.87 (  0.87)	Loss_d 1.364 (1.364)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.40 (  0.40)
Test: [  1/  1]	Loss 1.364 (1.364)	test_acc   0.47 (  0.47)	test_minacc   0.43 (  0.43)	test_majacc   0.87 (  0.87)	Loss_d 1.364 (1.364)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.40 (  0.40)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/178/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0441 (0.0488)	validation_time 0.0005 (0.0013)	train_time 0.0436 (0.0472)
record: (train_acc, test_acc) (0.8428000264167785, 0.4710000157356262)
last accs (train_acc, test_acc) (0.8428000264167785, 0.4710000157356262)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.12it/s] 15%|#5        | 4/26 [00:00<00:01, 15.17it/s] 27%|##6       | 7/26 [00:00<00:00, 19.98it/s] 38%|###8      | 10/26 [00:00<00:00, 23.26it/s] 50%|#####     | 13/26 [00:00<00:00, 24.54it/s] 65%|######5   | 17/26 [00:00<00:00, 27.10it/s] 81%|########  | 21/26 [00:00<00:00, 28.68it/s] 96%|#########6| 25/26 [00:01<00:00, 29.69it/s]100%|##########| 26/26 [00:01<00:00, 23.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [7][  26/  26]	Loss 0.018 (0.577)	train_nll   0.49 (  0.37)	train_penalty   0.02 (  0.02)	weight_norm   0.40 (  0.44)	train_acc   0.78 (  0.84)	train_minacc   0.27 (  0.22)	train_majacc   0.91 (  0.95)	train_corr   0.00 (  0.00)	l1 7.7618 (7.5983)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.42it/s] 27%|##6       | 7/26 [00:00<00:00, 33.26it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.26it/s] 46%|####6     | 12/26 [00:00<00:00, 40.17it/s] 65%|######5   | 17/26 [00:00<00:00, 42.20it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.20it/s] 85%|########4 | 22/26 [00:00<00:00, 44.45it/s]100%|##########| 26/26 [00:00<00:00, 37.56it/s]
Test: [   0/  26]	Loss 0.486 (0.486)	test_acc   0.76 (  0.76)	test_minacc   0.40 (  0.40)	test_majacc   0.81 (  0.81)	Loss_d 0.486 (0.486)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.487 (0.472)	test_acc   0.76 (  0.78)	test_minacc   0.43 (  0.48)	test_majacc   0.82 (  0.84)	Loss_d 0.487 (0.472)	test_acc_d   0.76 (  0.78)	test_minacc_d   0.43 (  0.48)	test_majacc_d   0.82 (  0.84)	test_corr_d   0.68 (  0.67)
Test: [  20/  26]	Loss 0.457 (0.476)	test_acc   0.78 (  0.78)	test_minacc   0.52 (  0.49)	test_majacc   0.82 (  0.83)	Loss_d 0.457 (0.476)	test_acc_d   0.78 (  0.78)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.82 (  0.83)	test_corr_d   0.68 (  0.66)
Test: [  26/  26]	Loss 0.490 (0.475)	test_acc   0.76 (  0.78)	test_minacc   0.61 (  0.48)	test_majacc   0.80 (  0.83)	Loss_d 0.490 (0.475)	test_acc_d   0.76 (  0.78)	test_minacc_d   0.61 (  0.48)	test_majacc_d   0.80 (  0.83)	test_corr_d   0.63 (  0.66)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.15it/s]
Test: [  0/  1]	Loss 0.951 (0.951)	test_acc   0.42 (  0.42)	test_minacc   0.37 (  0.37)	test_majacc   0.85 (  0.85)	Loss_d 0.951 (0.951)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.34 (  0.34)
Test: [  1/  1]	Loss 0.951 (0.951)	test_acc   0.42 (  0.42)	test_minacc   0.37 (  0.37)	test_majacc   0.85 (  0.85)	Loss_d 0.951 (0.951)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.34 (  0.34)
Overall Timing[  7/  1]	epoch_time 0.0431 (0.0481)	validation_time 0.0006 (0.0013)	train_time 0.0425 (0.0466)
record: (train_acc, test_acc) (0.8428000264167785, 0.4710000157356262)
last accs (train_acc, test_acc) (0.7808000292778016, 0.4180000126361847)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.98it/s] 15%|#5        | 4/26 [00:00<00:01, 14.68it/s] 27%|##6       | 7/26 [00:00<00:00, 19.12it/s] 42%|####2     | 11/26 [00:00<00:00, 23.42it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.15it/s] 65%|######5   | 17/26 [00:00<00:00, 26.16it/s] 81%|########  | 21/26 [00:00<00:00, 28.09it/s] 96%|#########6| 25/26 [00:01<00:00, 29.21it/s]100%|##########| 26/26 [00:01<00:00, 23.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [8][  26/  26]	Loss 0.000 (0.002)	train_nll   0.67 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.46)	train_acc   0.60 (  0.62)	train_minacc   0.67 (  0.63)	train_majacc   0.58 (  0.61)	train_corr   0.00 (  0.00)	l1 7.2159 (7.4440)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.35it/s] 27%|##6       | 7/26 [00:00<00:00, 31.93it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.93it/s] 46%|####6     | 12/26 [00:00<00:00, 37.70it/s] 65%|######5   | 17/26 [00:00<00:00, 40.57it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.57it/s] 85%|########4 | 22/26 [00:00<00:00, 38.93it/s]100%|##########| 26/26 [00:00<00:00, 35.90it/s]
Test: [   0/  26]	Loss 0.682 (0.682)	test_acc   0.58 (  0.58)	test_minacc   0.62 (  0.62)	test_majacc   0.58 (  0.58)	Loss_d 0.682 (0.682)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.682 (0.671)	test_acc   0.57 (  0.61)	test_minacc   0.57 (  0.65)	test_majacc   0.57 (  0.60)	Loss_d 0.682 (0.671)	test_acc_d   0.57 (  0.61)	test_minacc_d   0.57 (  0.65)	test_majacc_d   0.57 (  0.60)	test_corr_d   0.09 (  0.11)
Test: [  20/  26]	Loss 0.672 (0.672)	test_acc   0.60 (  0.60)	test_minacc   0.54 (  0.63)	test_majacc   0.61 (  0.60)	Loss_d 0.672 (0.672)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.54 (  0.63)	test_majacc_d   0.61 (  0.60)	test_corr_d   0.17 (  0.10)
Test: [  26/  26]	Loss 0.674 (0.672)	test_acc   0.60 (  0.60)	test_minacc   0.67 (  0.63)	test_majacc   0.58 (  0.60)	Loss_d 0.674 (0.672)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.67 (  0.63)	test_majacc_d   0.58 (  0.60)	test_corr_d  -0.01 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.17it/s]
Test: [  0/  1]	Loss 0.656 (0.656)	test_acc   0.60 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.61 (  0.61)	Loss_d 0.656 (0.656)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.656 (0.656)	test_acc   0.60 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.61 (  0.61)	Loss_d 0.656 (0.656)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.31 ( -0.31)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/178/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0398 (0.0472)	validation_time 0.0004 (0.0012)	train_time 0.0394 (0.0458)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.89it/s] 12%|#1        | 3/26 [00:00<00:01, 12.85it/s] 23%|##3       | 6/26 [00:00<00:01, 19.71it/s] 35%|###4      | 9/26 [00:00<00:00, 23.43it/s] 50%|#####     | 13/26 [00:00<00:00, 26.36it/s] 65%|######5   | 17/26 [00:00<00:00, 27.88it/s] 81%|########  | 21/26 [00:00<00:00, 28.63it/s] 96%|#########6| 25/26 [00:00<00:00, 29.55it/s]100%|##########| 26/26 [00:01<00:00, 24.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [9][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.51 (  0.50)	train_acc   0.54 (  0.59)	train_minacc   0.63 (  0.62)	train_majacc   0.52 (  0.59)	train_corr   0.00 (  0.00)	l1 7.1231 (7.1554)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.36it/s] 23%|##3       | 6/26 [00:00<00:00, 23.81it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.81it/s] 42%|####2     | 11/26 [00:00<00:00, 33.04it/s] 62%|######1   | 16/26 [00:00<00:00, 37.05it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.05it/s] 81%|########  | 21/26 [00:00<00:00, 39.67it/s]100%|##########| 26/26 [00:00<00:00, 42.38it/s]100%|##########| 26/26 [00:00<00:00, 33.44it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.53 (  0.53)	test_minacc   0.64 (  0.64)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.695 (0.688)	test_acc   0.51 (  0.55)	test_minacc   0.52 (  0.59)	test_majacc   0.51 (  0.54)	Loss_d 0.695 (0.688)	test_acc_d   0.51 (  0.55)	test_minacc_d   0.52 (  0.59)	test_majacc_d   0.51 (  0.54)	test_corr_d   0.03 (  0.05)
Test: [  20/  26]	Loss 0.688 (0.689)	test_acc   0.55 (  0.54)	test_minacc   0.54 (  0.57)	test_majacc   0.55 (  0.54)	Loss_d 0.688 (0.689)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.54 (  0.57)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.11 (  0.05)
Test: [  26/  26]	Loss 0.688 (0.689)	test_acc   0.54 (  0.54)	test_minacc   0.63 (  0.57)	test_majacc   0.52 (  0.53)	Loss_d 0.688 (0.689)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.63 (  0.57)	test_majacc_d   0.52 (  0.53)	test_corr_d  -0.07 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.15it/s]
Test: [  0/  1]	Loss 0.680 (0.680)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.57 (  0.57)	Loss_d 0.680 (0.680)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.35 ( -0.35)
Test: [  1/  1]	Loss 0.680 (0.680)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.57 (  0.57)	Loss_d 0.680 (0.680)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.35 ( -0.35)
Overall Timing[  9/  1]	epoch_time 0.0432 (0.0468)	validation_time 0.0004 (0.0011)	train_time 0.0428 (0.0455)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.5402000135183335, 0.5570000410079956)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.33it/s] 12%|#1        | 3/26 [00:00<00:02,  9.45it/s] 27%|##6       | 7/26 [00:00<00:01, 17.58it/s] 42%|####2     | 11/26 [00:00<00:00, 22.24it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.05it/s] 69%|######9   | 18/26 [00:00<00:00, 25.93it/s] 85%|########4 | 22/26 [00:00<00:00, 27.71it/s]100%|##########| 26/26 [00:01<00:00, 28.53it/s]100%|##########| 26/26 [00:01<00:00, 22.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [10][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.51 (  0.51)	train_acc   0.52 (  0.53)	train_minacc   0.57 (  0.55)	train_majacc   0.51 (  0.53)	train_corr   0.00 (  0.00)	l1 7.1048 (7.1113)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 20.38it/s] 31%|###       | 8/26 [00:00<00:00, 33.72it/s]                                               31%|###       | 8/26 [00:00<00:00, 33.72it/s] 50%|#####     | 13/26 [00:00<00:00, 38.32it/s] 69%|######9   | 18/26 [00:00<00:00, 42.01it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.01it/s] 88%|########8 | 23/26 [00:00<00:00, 39.53it/s]100%|##########| 26/26 [00:00<00:00, 36.52it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.62 (  0.62)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.698 (0.693)	test_acc   0.50 (  0.53)	test_minacc   0.50 (  0.56)	test_majacc   0.50 (  0.52)	Loss_d 0.698 (0.693)	test_acc_d   0.50 (  0.53)	test_minacc_d   0.50 (  0.56)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.00 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.52 (  0.54)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.52 (  0.54)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.03 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.57 (  0.54)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.57 (  0.54)	test_majacc_d   0.51 (  0.52)	test_corr_d  -0.06 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.50it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.689 (0.689)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.689 (0.689)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 10/  1]	epoch_time 0.0434 (0.0465)	validation_time 0.0004 (0.0010)	train_time 0.0430 (0.0453)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.5245000114142895, 0.5220000147819519)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.22it/s] 19%|#9        | 5/26 [00:00<00:00, 21.45it/s] 31%|###       | 8/26 [00:00<00:00, 24.25it/s] 46%|####6     | 12/26 [00:00<00:00, 27.17it/s] 62%|######1   | 16/26 [00:00<00:00, 28.69it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.98it/s] 88%|########8 | 23/26 [00:00<00:00, 29.64it/s]100%|##########| 26/26 [00:01<00:00, 25.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [11][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.51 (  0.51)	train_acc   0.53 (  0.53)	train_minacc   0.55 (  0.54)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 7.0980 (7.1002)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.14it/s] 31%|###       | 8/26 [00:00<00:00, 36.92it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.92it/s] 50%|#####     | 13/26 [00:00<00:00, 37.32it/s] 69%|######9   | 18/26 [00:00<00:00, 40.51it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.51it/s] 88%|########8 | 23/26 [00:00<00:00, 41.51it/s]100%|##########| 26/26 [00:00<00:00, 36.21it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.62 (  0.62)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.695 (0.692)	test_acc   0.52 (  0.53)	test_minacc   0.48 (  0.55)	test_majacc   0.52 (  0.53)	Loss_d 0.695 (0.692)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.48 (  0.55)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.03 (  0.03)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.53)	test_minacc   0.52 (  0.54)	test_majacc   0.54 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.52 (  0.54)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.04 (  0.04)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.55 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.55 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.01 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.73it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 11/  1]	epoch_time 0.0431 (0.0462)	validation_time 0.0007 (0.0010)	train_time 0.0424 (0.0451)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.5327000086903572, 0.531000018119812)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.94it/s] 15%|#5        | 4/26 [00:00<00:01, 20.07it/s] 27%|##6       | 7/26 [00:00<00:00, 23.19it/s] 38%|###8      | 10/26 [00:00<00:00, 25.40it/s] 50%|#####     | 13/26 [00:00<00:00, 26.86it/s] 62%|######1   | 16/26 [00:00<00:00, 27.89it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.52it/s] 88%|########8 | 23/26 [00:00<00:00, 29.40it/s]100%|##########| 26/26 [00:01<00:00, 25.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [12][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.51 (  0.51)	train_acc   0.55 (  0.54)	train_minacc   0.57 (  0.54)	train_majacc   0.55 (  0.53)	train_corr   0.00 (  0.00)	l1 7.0964 (7.0968)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.86it/s] 15%|#5        | 4/26 [00:00<00:01, 15.67it/s] 35%|###4      | 9/26 [00:00<00:00, 27.84it/s]                                               35%|###4      | 9/26 [00:00<00:00, 27.84it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.29it/s] 73%|#######3  | 19/26 [00:00<00:00, 34.83it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 34.83it/s] 92%|#########2| 24/26 [00:00<00:00, 38.45it/s]100%|##########| 26/26 [00:00<00:00, 31.78it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.62 (  0.62)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.694 (0.692)	test_acc   0.52 (  0.54)	test_minacc   0.48 (  0.56)	test_majacc   0.53 (  0.54)	Loss_d 0.694 (0.692)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.48 (  0.56)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.04 (  0.03)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.54)	test_majacc   0.55 (  0.54)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.54)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.03 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.54)	test_minacc   0.57 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.57 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.00 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.67it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 12/  1]	epoch_time 0.0453 (0.0461)	validation_time 0.0004 (0.0009)	train_time 0.0448 (0.0450)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.5376000127196312, 0.5380000472068787)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.04it/s] 15%|#5        | 4/26 [00:00<00:01, 16.99it/s] 27%|##6       | 7/26 [00:00<00:00, 21.71it/s] 38%|###8      | 10/26 [00:00<00:00, 24.44it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.78it/s] 65%|######5   | 17/26 [00:00<00:00, 27.75it/s] 81%|########  | 21/26 [00:00<00:00, 28.82it/s] 96%|#########6| 25/26 [00:00<00:00, 29.17it/s]100%|##########| 26/26 [00:01<00:00, 23.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [13][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.51 (  0.51)	train_acc   0.55 (  0.54)	train_minacc   0.57 (  0.54)	train_majacc   0.55 (  0.54)	train_corr   0.00 (  0.00)	l1 7.0964 (7.0963)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.35it/s] 23%|##3       | 6/26 [00:00<00:00, 26.49it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.49it/s] 42%|####2     | 11/26 [00:00<00:00, 34.49it/s] 62%|######1   | 16/26 [00:00<00:00, 38.76it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.76it/s] 81%|########  | 21/26 [00:00<00:00, 38.05it/s]100%|##########| 26/26 [00:00<00:00, 33.38it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.62 (  0.62)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.53 (  0.55)	test_minacc   0.52 (  0.57)	test_majacc   0.53 (  0.54)	Loss_d 0.693 (0.692)	test_acc_d   0.53 (  0.55)	test_minacc_d   0.52 (  0.57)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.06 (  0.04)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.54)	test_majacc   0.55 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.54)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.04 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.55 (  0.54)	test_minacc   0.57 (  0.54)	test_majacc   0.55 (  0.54)	Loss_d 0.693 (0.692)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.57 (  0.54)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.01 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.19it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 13/  1]	epoch_time 0.0460 (0.0461)	validation_time 0.0003 (0.0009)	train_time 0.0456 (0.0451)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.5410000115633011, 0.5410000085830688)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.20it/s] 19%|#9        | 5/26 [00:00<00:01, 20.75it/s] 35%|###4      | 9/26 [00:00<00:00, 25.21it/s] 50%|#####     | 13/26 [00:00<00:00, 27.00it/s] 65%|######5   | 17/26 [00:00<00:00, 28.30it/s] 81%|########  | 21/26 [00:00<00:00, 29.43it/s] 96%|#########6| 25/26 [00:00<00:00, 30.05it/s]100%|##########| 26/26 [00:01<00:00, 25.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [14][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.51 (  0.51)	train_acc   0.56 (  0.54)	train_minacc   0.59 (  0.54)	train_majacc   0.55 (  0.54)	train_corr   0.00 (  0.00)	l1 7.0965 (7.0965)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.39it/s] 23%|##3       | 6/26 [00:00<00:00, 30.41it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.41it/s] 42%|####2     | 11/26 [00:00<00:00, 34.09it/s] 62%|######1   | 16/26 [00:00<00:00, 39.67it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.67it/s] 81%|########  | 21/26 [00:00<00:00, 39.58it/s]100%|##########| 26/26 [00:00<00:00, 42.20it/s]100%|##########| 26/26 [00:00<00:00, 35.01it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.62 (  0.62)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.53 (  0.55)	test_minacc   0.52 (  0.57)	test_majacc   0.53 (  0.55)	Loss_d 0.693 (0.692)	test_acc_d   0.53 (  0.55)	test_minacc_d   0.52 (  0.57)	test_majacc_d   0.53 (  0.55)	test_corr_d   0.08 (  0.06)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.54 (  0.54)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.06 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.57 (  0.55)	test_minacc   0.59 (  0.55)	test_majacc   0.56 (  0.55)	Loss_d 0.693 (0.692)	test_acc_d   0.57 (  0.55)	test_minacc_d   0.59 (  0.55)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.02 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.05it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.54 (  0.54)	test_majacc   0.58 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.54 (  0.54)	test_majacc   0.58 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 14/  1]	epoch_time 0.0416 (0.0458)	validation_time 0.0006 (0.0009)	train_time 0.0410 (0.0448)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.5484000081419945, 0.5460000038146973)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.98it/s] 15%|#5        | 4/26 [00:00<00:01, 14.87it/s] 27%|##6       | 7/26 [00:00<00:00, 20.20it/s] 38%|###8      | 10/26 [00:00<00:00, 23.49it/s] 50%|#####     | 13/26 [00:00<00:00, 25.30it/s] 62%|######1   | 16/26 [00:00<00:00, 26.51it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.39it/s] 88%|########8 | 23/26 [00:00<00:00, 28.75it/s]100%|##########| 26/26 [00:01<00:00, 23.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [15][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.51 (  0.51)	train_acc   0.56 (  0.55)	train_minacc   0.59 (  0.54)	train_majacc   0.56 (  0.55)	train_corr   0.00 (  0.00)	l1 7.0965 (7.0966)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.44it/s] 23%|##3       | 6/26 [00:00<00:00, 31.67it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.67it/s] 42%|####2     | 11/26 [00:00<00:00, 37.69it/s] 62%|######1   | 16/26 [00:00<00:00, 41.77it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.77it/s] 81%|########  | 21/26 [00:00<00:00, 39.28it/s]100%|##########| 26/26 [00:00<00:00, 41.72it/s]100%|##########| 26/26 [00:00<00:00, 35.26it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.62 (  0.62)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.56)	test_minacc   0.52 (  0.57)	test_majacc   0.52 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.56)	test_minacc_d   0.52 (  0.57)	test_majacc_d   0.52 (  0.55)	test_corr_d   0.09 (  0.06)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.54 (  0.54)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.07 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.56 (  0.55)	test_minacc   0.59 (  0.54)	test_majacc   0.56 (  0.55)	Loss_d 0.693 (0.692)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.59 (  0.54)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.03 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.28it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.58 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.58 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.01 (  0.01)
Overall Timing[ 15/  1]	epoch_time 0.0421 (0.0456)	validation_time 0.0004 (0.0009)	train_time 0.0417 (0.0446)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.5504000113010407, 0.5440000295639038)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.99it/s] 23%|##3       | 6/26 [00:00<00:00, 24.01it/s] 35%|###4      | 9/26 [00:00<00:00, 26.20it/s] 46%|####6     | 12/26 [00:00<00:00, 27.32it/s] 62%|######1   | 16/26 [00:00<00:00, 28.71it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.53it/s] 88%|########8 | 23/26 [00:00<00:00, 29.30it/s]100%|##########| 26/26 [00:00<00:00, 26.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.51 (  0.51)	train_acc   0.56 (  0.55)	train_minacc   0.57 (  0.54)	train_majacc   0.55 (  0.55)	train_corr   0.00 (  0.00)	l1 7.0964 (7.0965)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.96it/s] 15%|#5        | 4/26 [00:00<00:01, 18.86it/s] 35%|###4      | 9/26 [00:00<00:00, 30.49it/s]                                               35%|###4      | 9/26 [00:00<00:00, 30.49it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.44it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.53it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 36.53it/s] 92%|#########2| 24/26 [00:00<00:00, 39.60it/s]100%|##########| 26/26 [00:00<00:00, 32.97it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.55 (  0.55)	test_minacc   0.64 (  0.64)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.691)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.56)	test_minacc   0.52 (  0.57)	test_majacc   0.53 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.56)	test_minacc_d   0.52 (  0.57)	test_majacc_d   0.53 (  0.56)	test_corr_d   0.10 (  0.07)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.55)	test_minacc   0.54 (  0.54)	test_majacc   0.57 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.08 (  0.07)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.56 (  0.55)	test_minacc   0.57 (  0.54)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.692)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.57 (  0.54)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.03 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.50it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.03 (  0.03)
Overall Timing[ 16/  1]	epoch_time 0.0421 (0.0454)	validation_time 0.0004 (0.0008)	train_time 0.0416 (0.0444)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.5532000145316124, 0.5420000553131104)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.33it/s] 12%|#1        | 3/26 [00:00<00:02,  9.21it/s] 23%|##3       | 6/26 [00:00<00:01, 15.94it/s] 35%|###4      | 9/26 [00:00<00:00, 20.29it/s] 50%|#####     | 13/26 [00:00<00:00, 24.08it/s] 62%|######1   | 16/26 [00:00<00:00, 25.55it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.73it/s] 85%|########4 | 22/26 [00:00<00:00, 27.58it/s]100%|##########| 26/26 [00:01<00:00, 29.13it/s]100%|##########| 26/26 [00:01<00:00, 21.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.51 (  0.51)	train_acc   0.56 (  0.55)	train_minacc   0.57 (  0.54)	train_majacc   0.55 (  0.55)	train_corr   0.00 (  0.00)	l1 7.0961 (7.0963)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.70it/s] 23%|##3       | 6/26 [00:00<00:00, 31.15it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.15it/s] 42%|####2     | 11/26 [00:00<00:00, 38.21it/s] 62%|######1   | 16/26 [00:00<00:00, 41.70it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.70it/s] 81%|########  | 21/26 [00:00<00:00, 42.65it/s]100%|##########| 26/26 [00:00<00:00, 43.39it/s]100%|##########| 26/26 [00:00<00:00, 36.39it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.62 (  0.62)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.56)	test_minacc   0.52 (  0.56)	test_majacc   0.53 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.56)	test_minacc_d   0.52 (  0.56)	test_majacc_d   0.53 (  0.56)	test_corr_d   0.10 (  0.07)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.55)	test_minacc   0.54 (  0.54)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.09 (  0.07)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.56 (  0.55)	test_minacc   0.59 (  0.54)	test_majacc   0.55 (  0.56)	Loss_d 0.693 (0.692)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.59 (  0.54)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.04 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.50it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.03 (  0.03)
Overall Timing[ 17/  1]	epoch_time 0.0427 (0.0452)	validation_time 0.0003 (0.0008)	train_time 0.0424 (0.0443)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.5538000143766403, 0.5410000085830688)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.31it/s] 19%|#9        | 5/26 [00:00<00:01, 19.44it/s] 35%|###4      | 9/26 [00:00<00:00, 24.39it/s] 50%|#####     | 13/26 [00:00<00:00, 26.65it/s] 65%|######5   | 17/26 [00:00<00:00, 28.26it/s] 81%|########  | 21/26 [00:00<00:00, 29.34it/s] 96%|#########6| 25/26 [00:00<00:00, 29.93it/s]100%|##########| 26/26 [00:01<00:00, 25.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.51 (  0.51)	train_acc   0.56 (  0.54)	train_minacc   0.57 (  0.53)	train_majacc   0.55 (  0.54)	train_corr   0.00 (  0.00)	l1 7.0957 (7.0960)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.64it/s] 12%|#1        | 3/26 [00:00<00:02, 11.04it/s] 31%|###       | 8/26 [00:00<00:00, 24.56it/s]                                               31%|###       | 8/26 [00:00<00:00, 24.56it/s] 50%|#####     | 13/26 [00:00<00:00, 32.31it/s] 69%|######9   | 18/26 [00:00<00:00, 36.92it/s]                                                69%|######9   | 18/26 [00:00<00:00, 36.92it/s] 88%|########8 | 23/26 [00:00<00:00, 36.91it/s]100%|##########| 26/26 [00:00<00:00, 30.52it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.62 (  0.62)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.56)	test_minacc   0.54 (  0.56)	test_majacc   0.53 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.56)	test_minacc_d   0.54 (  0.56)	test_majacc_d   0.53 (  0.56)	test_corr_d   0.10 (  0.08)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.55)	test_minacc   0.54 (  0.54)	test_majacc   0.57 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.09 (  0.07)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.56 (  0.55)	test_minacc   0.59 (  0.54)	test_majacc   0.55 (  0.56)	Loss_d 0.693 (0.692)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.59 (  0.54)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.04 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.34it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.04 (  0.04)
Overall Timing[ 18/  1]	epoch_time 0.0448 (0.0452)	validation_time 0.0004 (0.0008)	train_time 0.0444 (0.0443)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.5542000190019608, 0.5400000214576721)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.32it/s] 19%|#9        | 5/26 [00:00<00:00, 22.59it/s] 31%|###       | 8/26 [00:00<00:00, 25.28it/s] 42%|####2     | 11/26 [00:00<00:00, 26.36it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.91it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.67it/s] 88%|########8 | 23/26 [00:00<00:00, 29.33it/s]100%|##########| 26/26 [00:00<00:00, 26.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.51 (  0.51)	train_acc   0.56 (  0.54)	train_minacc   0.57 (  0.53)	train_majacc   0.56 (  0.54)	train_corr   0.00 (  0.00)	l1 7.0954 (7.0956)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.87it/s] 23%|##3       | 6/26 [00:00<00:00, 29.34it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.34it/s] 42%|####2     | 11/26 [00:00<00:00, 37.26it/s] 62%|######1   | 16/26 [00:00<00:00, 40.96it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.96it/s] 81%|########  | 21/26 [00:00<00:00, 37.27it/s]100%|##########| 26/26 [00:00<00:00, 40.25it/s]100%|##########| 26/26 [00:00<00:00, 33.87it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.62 (  0.62)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.56)	test_minacc   0.54 (  0.56)	test_majacc   0.54 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.56)	test_minacc_d   0.54 (  0.56)	test_majacc_d   0.54 (  0.56)	test_corr_d   0.11 (  0.08)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.55)	test_minacc   0.54 (  0.54)	test_majacc   0.57 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.10 (  0.07)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.56 (  0.55)	test_minacc   0.57 (  0.54)	test_majacc   0.55 (  0.56)	Loss_d 0.693 (0.692)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.57 (  0.54)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.04 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.79it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.04 (  0.04)
Overall Timing[ 19/  1]	epoch_time 0.0429 (0.0451)	validation_time 0.0003 (0.0008)	train_time 0.0425 (0.0442)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.5545000156164169, 0.5360000133514404)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.14it/s] 15%|#5        | 4/26 [00:00<00:01, 17.25it/s] 31%|###       | 8/26 [00:00<00:00, 23.75it/s] 46%|####6     | 12/26 [00:00<00:00, 26.89it/s] 62%|######1   | 16/26 [00:00<00:00, 27.56it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.92it/s] 88%|########8 | 23/26 [00:00<00:00, 28.18it/s]100%|##########| 26/26 [00:01<00:00, 24.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.56 (  0.54)	train_minacc   0.57 (  0.53)	train_majacc   0.56 (  0.54)	train_corr   0.00 (  0.00)	l1 7.0950 (7.0952)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.42it/s] 23%|##3       | 6/26 [00:00<00:00, 30.08it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.08it/s] 42%|####2     | 11/26 [00:00<00:00, 35.94it/s] 62%|######1   | 16/26 [00:00<00:00, 39.92it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.92it/s] 81%|########  | 21/26 [00:00<00:00, 41.72it/s]100%|##########| 26/26 [00:00<00:00, 43.84it/s]100%|##########| 26/26 [00:00<00:00, 34.56it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.62 (  0.62)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.56)	test_minacc   0.55 (  0.56)	test_majacc   0.55 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.56)	test_minacc_d   0.55 (  0.56)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.11 (  0.08)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.54 (  0.54)	test_majacc   0.57 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.10 (  0.07)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.54)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.54)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.05 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.23it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.04 (  0.04)
Overall Timing[ 20/  1]	epoch_time 0.0452 (0.0451)	validation_time 0.0007 (0.0008)	train_time 0.0445 (0.0443)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.5553000168204307, 0.534000039100647)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.61it/s] 23%|##3       | 6/26 [00:00<00:00, 27.04it/s] 38%|###8      | 10/26 [00:00<00:00, 29.14it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.15it/s] 69%|######9   | 18/26 [00:00<00:00, 30.50it/s] 85%|########4 | 22/26 [00:00<00:00, 30.92it/s]100%|##########| 26/26 [00:00<00:00, 31.24it/s]100%|##########| 26/26 [00:00<00:00, 28.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.56 (  0.54)	train_minacc   0.57 (  0.52)	train_majacc   0.56 (  0.54)	train_corr   0.00 (  0.00)	l1 7.0947 (7.0949)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.22it/s] 12%|#1        | 3/26 [00:00<00:02,  8.44it/s] 35%|###4      | 9/26 [00:00<00:00, 23.66it/s]                                               35%|###4      | 9/26 [00:00<00:00, 23.66it/s] 58%|#####7    | 15/26 [00:00<00:00, 31.90it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.15it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 36.15it/s] 96%|#########6| 25/26 [00:00<00:00, 38.68it/s]100%|##########| 26/26 [00:00<00:00, 29.27it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.62 (  0.62)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.56)	test_minacc   0.55 (  0.56)	test_majacc   0.55 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.56)	test_minacc_d   0.55 (  0.56)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.11 (  0.08)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.55)	test_minacc   0.52 (  0.53)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.52 (  0.53)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.10 (  0.07)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.56 (  0.55)	test_minacc   0.57 (  0.53)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.692)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.57 (  0.53)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.05 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.42it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.04 (  0.04)
Overall Timing[ 21/  1]	epoch_time 0.0462 (0.0451)	validation_time 0.0004 (0.0007)	train_time 0.0458 (0.0443)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.5543000122308731, 0.531000018119812)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.27it/s] 15%|#5        | 4/26 [00:00<00:01, 18.13it/s] 27%|##6       | 7/26 [00:00<00:00, 22.61it/s] 38%|###8      | 10/26 [00:00<00:00, 25.22it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.28it/s] 69%|######9   | 18/26 [00:00<00:00, 28.45it/s] 85%|########4 | 22/26 [00:00<00:00, 29.18it/s] 96%|#########6| 25/26 [00:00<00:00, 29.36it/s]100%|##########| 26/26 [00:01<00:00, 25.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.56 (  0.54)	train_minacc   0.57 (  0.52)	train_majacc   0.56 (  0.54)	train_corr   0.00 (  0.00)	l1 7.0944 (7.0946)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.81it/s] 23%|##3       | 6/26 [00:00<00:00, 27.63it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.63it/s] 42%|####2     | 11/26 [00:00<00:00, 35.65it/s] 62%|######1   | 16/26 [00:00<00:00, 39.48it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.48it/s] 81%|########  | 21/26 [00:00<00:00, 37.99it/s]100%|##########| 26/26 [00:00<00:00, 40.80it/s]100%|##########| 26/26 [00:00<00:00, 34.22it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.64 (  0.64)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.55 (  0.56)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.55 (  0.56)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.11 (  0.08)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.52 (  0.54)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.52 (  0.54)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.10 (  0.07)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.55)	test_minacc   0.57 (  0.53)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.57 (  0.53)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.05 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.87it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.04 (  0.04)
Overall Timing[ 22/  1]	epoch_time 0.0432 (0.0451)	validation_time 0.0004 (0.0007)	train_time 0.0428 (0.0443)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.554600005030632, 0.531000018119812)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02,  9.70it/s] 19%|#9        | 5/26 [00:00<00:01, 17.39it/s] 31%|###       | 8/26 [00:00<00:00, 19.45it/s] 42%|####2     | 11/26 [00:00<00:00, 22.41it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.23it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.02it/s] 88%|########8 | 23/26 [00:00<00:00, 28.07it/s]100%|##########| 26/26 [00:01<00:00, 22.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 200
penalty weights 10000.0
l1 at pgd_anneal_iters 7.094383716583252
set z to 7.0234398794174195
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 200
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 200
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 200
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 200
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 200
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
rho, theta 390 tensor(-0.0113, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 200
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 200
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 200
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 200
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 200
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 200
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 200
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 200
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 200
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 200
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 200
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 200
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 200
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 200
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 200
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 200
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 200
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 200
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
final projection at end of training
dim_v 512
Epoch: [23][  26/  26]	Loss 0.000 (0.003)	train_nll   0.69 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.66 (  0.55)	train_acc   0.38 (  0.50)	train_minacc   0.84 (  0.59)	train_majacc   0.27 (  0.48)	train_corr   0.00 (  0.00)	l1 5.2834 (6.2696)	zero_count 0.0000 (4.7190)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.80it/s] 23%|##3       | 6/26 [00:00<00:01, 19.74it/s]                                               23%|##3       | 6/26 [00:00<00:01, 19.74it/s] 42%|####2     | 11/26 [00:00<00:00, 28.44it/s] 62%|######1   | 16/26 [00:00<00:00, 34.43it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.43it/s] 81%|########  | 21/26 [00:00<00:00, 35.21it/s]100%|##########| 26/26 [00:00<00:00, 38.52it/s]100%|##########| 26/26 [00:00<00:00, 28.97it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.36 (  0.36)	test_minacc   0.76 (  0.76)	test_majacc   0.30 (  0.30)	Loss_d 0.689 (0.689)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.30 (  0.30)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.688 (0.690)	test_acc   0.35 (  0.36)	test_minacc   0.84 (  0.84)	test_majacc   0.27 (  0.28)	Loss_d 0.688 (0.690)	test_acc_d   0.35 (  0.36)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.27 (  0.28)	test_corr_d  -0.05 ( -0.06)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.34 (  0.36)	test_minacc   0.84 (  0.84)	test_majacc   0.26 (  0.27)	Loss_d 0.692 (0.693)	test_acc_d   0.34 (  0.36)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.26 (  0.27)	test_corr_d  -0.02 ( -0.07)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.37 (  0.36)	test_minacc   0.86 (  0.85)	test_majacc   0.25 (  0.27)	Loss_d 0.695 (0.693)	test_acc_d   0.37 (  0.36)	test_minacc_d   0.86 (  0.85)	test_majacc_d   0.25 (  0.27)	test_corr_d  -0.16 ( -0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.61it/s]
Test: [  0/  1]	Loss 0.675 (0.675)	test_acc   0.80 (  0.80)	test_minacc   0.85 (  0.85)	test_majacc   0.26 (  0.26)	Loss_d 0.675 (0.675)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.26 (  0.26)	test_corr_d  -0.27 ( -0.27)
Test: [  1/  1]	Loss 0.675 (0.675)	test_acc   0.80 (  0.80)	test_minacc   0.85 (  0.85)	test_majacc   0.26 (  0.26)	Loss_d 0.675 (0.675)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.26 (  0.26)	test_corr_d  -0.27 ( -0.27)
Overall Timing[ 23/  1]	epoch_time 0.0465 (0.0451)	validation_time 0.0005 (0.0007)	train_time 0.0461 (0.0443)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.3561000086069107, 0.7950000166893005)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.65it/s] 19%|#9        | 5/26 [00:00<00:00, 21.75it/s] 35%|###4      | 9/26 [00:00<00:00, 25.97it/s] 46%|####6     | 12/26 [00:00<00:00, 25.27it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.25it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.65it/s] 88%|########8 | 23/26 [00:00<00:00, 28.53it/s]100%|##########| 26/26 [00:01<00:00, 25.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 200
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 200
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 200
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 200
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 200
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 200
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 200
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 200
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 200
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 200
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 200
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 200
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 200
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 200
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 200
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 200
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 200
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 200
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 200
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 200
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 200
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 200
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 200
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 200
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 200
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 200
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
final projection at end of training
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.75 (  0.72)	train_acc   0.54 (  0.42)	train_minacc   0.55 (  0.74)	train_majacc   0.54 (  0.37)	train_corr   0.00 (  0.00)	l1 5.0838 (5.1429)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.05it/s] 27%|##6       | 7/26 [00:00<00:00, 33.28it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.28it/s] 46%|####6     | 12/26 [00:00<00:00, 38.47it/s] 65%|######5   | 17/26 [00:00<00:00, 37.85it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.85it/s] 85%|########4 | 22/26 [00:00<00:00, 40.87it/s]100%|##########| 26/26 [00:00<00:00, 35.62it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.55 (  0.55)	test_minacc   0.58 (  0.58)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.690 (0.691)	test_acc   0.59 (  0.57)	test_minacc   0.59 (  0.59)	test_majacc   0.59 (  0.57)	Loss_d 0.690 (0.691)	test_acc_d   0.59 (  0.57)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.59 (  0.57)	test_corr_d   0.03 (  0.04)
Test: [  20/  26]	Loss 0.691 (0.691)	test_acc   0.56 (  0.56)	test_minacc   0.50 (  0.56)	test_majacc   0.57 (  0.56)	Loss_d 0.691 (0.691)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.50 (  0.56)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.08 (  0.03)
Test: [  26/  26]	Loss 0.692 (0.691)	test_acc   0.55 (  0.56)	test_minacc   0.55 (  0.55)	test_majacc   0.55 (  0.57)	Loss_d 0.692 (0.691)	test_acc_d   0.55 (  0.56)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.55 (  0.57)	test_corr_d  -0.03 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.29it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.60 (  0.60)	Loss_d 0.689 (0.689)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.60 (  0.60)	Loss_d 0.689 (0.689)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 24/  1]	epoch_time 0.0462 (0.0452)	validation_time 0.0003 (0.0007)	train_time 0.0458 (0.0444)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.5638000125288963, 0.5380000472068787)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.52it/s] 19%|#9        | 5/26 [00:00<00:00, 22.69it/s] 35%|###4      | 9/26 [00:00<00:00, 26.44it/s] 50%|#####     | 13/26 [00:00<00:00, 27.94it/s] 65%|######5   | 17/26 [00:00<00:00, 29.03it/s] 81%|########  | 21/26 [00:00<00:00, 29.60it/s] 96%|#########6| 25/26 [00:00<00:00, 30.19it/s]100%|##########| 26/26 [00:00<00:00, 26.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 200
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 200
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 200
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 200
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 200
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 200
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 200
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 200
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 200
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 200
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 200
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 200
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 200
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 200
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 200
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 200
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 200
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 200
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 200
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 200
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 200
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 200
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 200
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 200
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 200
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 200
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.75 (  0.75)	train_acc   0.56 (  0.55)	train_minacc   0.59 (  0.55)	train_majacc   0.56 (  0.55)	train_corr   0.00 (  0.00)	l1 5.0778 (5.0851)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.87it/s] 31%|###       | 8/26 [00:00<00:00, 38.92it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.92it/s] 50%|#####     | 13/26 [00:00<00:00, 37.38it/s] 69%|######9   | 18/26 [00:00<00:00, 40.61it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.61it/s] 88%|########8 | 23/26 [00:00<00:00, 42.11it/s]100%|##########| 26/26 [00:00<00:00, 36.67it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.58 (  0.58)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.57 (  0.56)	test_minacc   0.61 (  0.58)	test_majacc   0.57 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.56)	test_minacc_d   0.61 (  0.58)	test_majacc_d   0.57 (  0.56)	test_corr_d  -0.02 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.46 (  0.53)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.46 (  0.53)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.05 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.59 (  0.54)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.59 (  0.54)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.05 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.27it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.60 (  0.60)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.60 (  0.60)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 25/  1]	epoch_time 0.0409 (0.0450)	validation_time 0.0004 (0.0007)	train_time 0.0405 (0.0442)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.5557000191211701, 0.531000018119812)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.12it/s] 15%|#5        | 4/26 [00:00<00:01, 17.75it/s] 27%|##6       | 7/26 [00:00<00:00, 22.57it/s] 38%|###8      | 10/26 [00:00<00:00, 24.78it/s] 50%|#####     | 13/26 [00:00<00:00, 26.25it/s] 62%|######1   | 16/26 [00:00<00:00, 26.47it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.96it/s] 88%|########8 | 23/26 [00:00<00:00, 28.17it/s]100%|##########| 26/26 [00:01<00:00, 24.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 200
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 200
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 200
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 200
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 200
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 200
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 200
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 200
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 200
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 200
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 200
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 200
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 200
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 200
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 200
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 200
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 200
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 200
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 200
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 200
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 200
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 200
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 200
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 200
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 200
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 200
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
final projection at end of training
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.75 (  0.75)	train_acc   0.56 (  0.55)	train_minacc   0.59 (  0.53)	train_majacc   0.55 (  0.55)	train_corr   0.00 (  0.00)	l1 5.0792 (5.0787)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 21.38it/s] 31%|###       | 8/26 [00:00<00:00, 31.57it/s]                                               31%|###       | 8/26 [00:00<00:00, 31.57it/s] 50%|#####     | 13/26 [00:00<00:00, 37.04it/s] 69%|######9   | 18/26 [00:00<00:00, 40.40it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.40it/s] 88%|########8 | 23/26 [00:00<00:00, 40.89it/s]100%|##########| 26/26 [00:00<00:00, 35.10it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.60 (  0.60)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.61 (  0.57)	test_majacc   0.54 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.61 (  0.57)	test_majacc_d   0.54 (  0.55)	test_corr_d  -0.06 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.54)	test_minacc   0.46 (  0.53)	test_majacc   0.56 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.46 (  0.53)	test_majacc_d   0.56 (  0.54)	test_corr_d   0.03 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.55)	test_minacc   0.59 (  0.53)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.06 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.07it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.60 (  0.60)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.60 (  0.60)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 26/  1]	epoch_time 0.0424 (0.0449)	validation_time 0.0003 (0.0007)	train_time 0.0420 (0.0442)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.5450000057220459, 0.5260000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.25it/s] 19%|#9        | 5/26 [00:00<00:00, 21.69it/s] 35%|###4      | 9/26 [00:00<00:00, 25.76it/s] 50%|#####     | 13/26 [00:00<00:00, 28.43it/s] 65%|######5   | 17/26 [00:00<00:00, 29.33it/s] 81%|########  | 21/26 [00:00<00:00, 29.75it/s] 96%|#########6| 25/26 [00:00<00:00, 29.95it/s]100%|##########| 26/26 [00:00<00:00, 26.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 200
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 200
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 200
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 200
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 200
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 200
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 200
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 200
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 200
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 200
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 200
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 200
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 200
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 200
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 200
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 200
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 200
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 200
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 200
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 200
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 200
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 200
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 200
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 200
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 200
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 200
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
final projection at end of training
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.75 (  0.75)	train_acc   0.54 (  0.54)	train_minacc   0.59 (  0.53)	train_majacc   0.53 (  0.55)	train_corr   0.00 (  0.00)	l1 5.0792 (5.0791)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.08it/s] 23%|##3       | 6/26 [00:00<00:00, 21.54it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.54it/s] 42%|####2     | 11/26 [00:00<00:00, 30.06it/s] 62%|######1   | 16/26 [00:00<00:00, 35.33it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.33it/s] 81%|########  | 21/26 [00:00<00:00, 38.20it/s]100%|##########| 26/26 [00:00<00:00, 40.91it/s]100%|##########| 26/26 [00:00<00:00, 31.39it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.60 (  0.60)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.62 (  0.57)	test_majacc   0.53 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.62 (  0.57)	test_majacc_d   0.53 (  0.54)	test_corr_d  -0.05 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.54)	test_minacc   0.48 (  0.53)	test_majacc   0.56 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.48 (  0.53)	test_majacc_d   0.56 (  0.54)	test_corr_d   0.03 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.59 (  0.53)	test_majacc   0.53 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.53 (  0.54)	test_corr_d  -0.05 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.85it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.60 (  0.60)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.60 (  0.60)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 27/  1]	epoch_time 0.0415 (0.0448)	validation_time 0.0004 (0.0007)	train_time 0.0410 (0.0440)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.5415000087916851, 0.5220000147819519)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.69it/s] 15%|#5        | 4/26 [00:00<00:01, 17.51it/s] 27%|##6       | 7/26 [00:00<00:00, 21.77it/s] 38%|###8      | 10/26 [00:00<00:00, 24.68it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.04it/s] 69%|######9   | 18/26 [00:00<00:00, 28.50it/s] 81%|########  | 21/26 [00:00<00:00, 28.47it/s] 92%|#########2| 24/26 [00:00<00:00, 28.78it/s]100%|##########| 26/26 [00:01<00:00, 24.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 200
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 200
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 200
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 200
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 200
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 200
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 200
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 200
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 200
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 200
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 200
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 200
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 200
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 200
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 200
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 200
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 200
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 200
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 200
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 200
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 200
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 200
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 200
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 200
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 200
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 200
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
final projection at end of training
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.75 (  0.75)	train_acc   0.54 (  0.54)	train_minacc   0.59 (  0.53)	train_majacc   0.53 (  0.54)	train_corr   0.00 (  0.00)	l1 5.0797 (5.0796)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.80it/s] 23%|##3       | 6/26 [00:00<00:00, 22.57it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.57it/s] 42%|####2     | 11/26 [00:00<00:00, 31.45it/s] 62%|######1   | 16/26 [00:00<00:00, 33.73it/s]                                                62%|######1   | 16/26 [00:00<00:00, 33.73it/s] 81%|########  | 21/26 [00:00<00:00, 37.60it/s]100%|##########| 26/26 [00:00<00:00, 40.93it/s]100%|##########| 26/26 [00:00<00:00, 31.28it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.60 (  0.60)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.62 (  0.57)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.62 (  0.57)	test_majacc_d   0.52 (  0.53)	test_corr_d  -0.05 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.53)	test_minacc   0.50 (  0.53)	test_majacc   0.55 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.50 (  0.53)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.04 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.59 (  0.53)	test_majacc   0.53 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.53 (  0.54)	test_corr_d  -0.05 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.14it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.60 (  0.60)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.60 (  0.60)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 28/  1]	epoch_time 0.0420 (0.0447)	validation_time 0.0004 (0.0007)	train_time 0.0415 (0.0440)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.535100007802248, 0.5250000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.59it/s] 19%|#9        | 5/26 [00:00<00:01, 20.79it/s] 31%|###       | 8/26 [00:00<00:00, 24.27it/s] 42%|####2     | 11/26 [00:00<00:00, 26.18it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.08it/s] 69%|######9   | 18/26 [00:00<00:00, 27.92it/s] 85%|########4 | 22/26 [00:00<00:00, 29.08it/s]100%|##########| 26/26 [00:00<00:00, 29.64it/s]100%|##########| 26/26 [00:01<00:00, 25.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 200
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 200
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 200
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 200
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 200
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 200
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 200
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 200
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 200
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 200
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 200
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 200
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 200
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 200
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 200
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 200
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 200
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 200
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 200
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 200
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 200
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 200
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 200
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 200
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 200
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 200
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
final projection at end of training
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.74 (  0.74)	train_acc   0.52 (  0.53)	train_minacc   0.57 (  0.53)	train_majacc   0.51 (  0.53)	train_corr   0.00 (  0.00)	l1 5.0802 (5.0800)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.97it/s] 23%|##3       | 6/26 [00:00<00:00, 25.69it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.69it/s] 42%|####2     | 11/26 [00:00<00:00, 32.33it/s] 62%|######1   | 16/26 [00:00<00:00, 37.15it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.15it/s] 81%|########  | 21/26 [00:00<00:00, 37.52it/s]100%|##########| 26/26 [00:00<00:00, 40.98it/s]100%|##########| 26/26 [00:00<00:00, 32.62it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.60 (  0.60)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.61 (  0.56)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.61 (  0.56)	test_majacc_d   0.51 (  0.52)	test_corr_d  -0.06 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.52 (  0.53)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.52 (  0.53)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.04 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.53)	test_minacc   0.57 (  0.53)	test_majacc   0.51 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.57 (  0.53)	test_majacc_d   0.51 (  0.53)	test_corr_d  -0.04 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.47it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.59 (  0.59)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.59 (  0.59)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 29/  1]	epoch_time 0.0414 (0.0446)	validation_time 0.0004 (0.0007)	train_time 0.0410 (0.0439)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.5258000101745128, 0.5220000147819519)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.05it/s]  8%|7         | 2/26 [00:00<00:03,  7.70it/s] 19%|#9        | 5/26 [00:00<00:01, 16.18it/s] 31%|###       | 8/26 [00:00<00:00, 20.62it/s] 42%|####2     | 11/26 [00:00<00:00, 23.69it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.61it/s] 65%|######5   | 17/26 [00:00<00:00, 26.57it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.58it/s] 88%|########8 | 23/26 [00:00<00:00, 28.28it/s]100%|##########| 26/26 [00:01<00:00, 22.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 200
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 200
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 200
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 200
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 200
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 200
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 200
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 200
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 200
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 200
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 200
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 200
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 200
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 200
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 200
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 200
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 200
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 200
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 200
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 200
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 200
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 200
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 200
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 200
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 200
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 200
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.74 (  0.74)	train_acc   0.52 (  0.53)	train_minacc   0.55 (  0.53)	train_majacc   0.51 (  0.52)	train_corr   0.00 (  0.00)	l1 5.0807 (5.0803)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.03it/s] 12%|#1        | 3/26 [00:00<00:02, 10.92it/s] 31%|###       | 8/26 [00:00<00:00, 24.55it/s]                                               31%|###       | 8/26 [00:00<00:00, 24.55it/s] 50%|#####     | 13/26 [00:00<00:00, 31.98it/s] 69%|######9   | 18/26 [00:00<00:00, 34.58it/s]                                                69%|######9   | 18/26 [00:00<00:00, 34.58it/s] 88%|########8 | 23/26 [00:00<00:00, 38.60it/s]100%|##########| 26/26 [00:00<00:00, 30.07it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.64 (  0.64)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.61 (  0.56)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.61 (  0.56)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.06 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.52 (  0.53)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.52 (  0.53)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.04 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.51 (  0.52)	test_corr_d  -0.04 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.73it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.59 (  0.59)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.59 (  0.59)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 30/  1]	epoch_time 0.0432 (0.0445)	validation_time 0.0006 (0.0006)	train_time 0.0426 (0.0438)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.520900010049343, 0.5250000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 22.07it/s] 27%|##6       | 7/26 [00:00<00:00, 26.67it/s] 38%|###8      | 10/26 [00:00<00:00, 26.14it/s] 50%|#####     | 13/26 [00:00<00:00, 27.12it/s] 65%|######5   | 17/26 [00:00<00:00, 28.44it/s] 81%|########  | 21/26 [00:00<00:00, 29.43it/s] 96%|#########6| 25/26 [00:00<00:00, 29.41it/s]100%|##########| 26/26 [00:00<00:00, 26.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 200
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 200
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 200
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 200
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 200
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 200
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 200
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 200
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 200
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 200
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 200
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 200
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 200
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 200
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 200
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 200
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 200
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 200
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 200
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 200
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 200
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 200
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 200
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 200
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 200
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 200
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
final projection at end of training
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.74 (  0.74)	train_acc   0.52 (  0.52)	train_minacc   0.55 (  0.53)	train_majacc   0.51 (  0.52)	train_corr   0.00 (  0.00)	l1 5.0811 (5.0806)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.17it/s] 23%|##3       | 6/26 [00:00<00:00, 29.35it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.35it/s] 42%|####2     | 11/26 [00:00<00:00, 37.06it/s] 62%|######1   | 16/26 [00:00<00:00, 41.07it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.07it/s] 81%|########  | 21/26 [00:00<00:00, 41.63it/s]100%|##########| 26/26 [00:00<00:00, 36.18it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.62 (  0.62)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.61 (  0.56)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.61 (  0.56)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.07 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.52 (  0.53)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.52 (  0.53)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.03 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.55 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.55 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.04 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.73it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.60 (  0.60)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.60 (  0.60)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 31/  1]	epoch_time 0.0449 (0.0445)	validation_time 0.0005 (0.0006)	train_time 0.0444 (0.0438)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.5162000117003918, 0.5260000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.13it/s] 15%|#5        | 4/26 [00:00<00:01, 18.13it/s] 31%|###       | 8/26 [00:00<00:00, 24.18it/s] 42%|####2     | 11/26 [00:00<00:00, 25.32it/s] 54%|#####3    | 14/26 [00:00<00:00, 24.46it/s] 69%|######9   | 18/26 [00:00<00:00, 26.82it/s] 85%|########4 | 22/26 [00:00<00:00, 28.90it/s]100%|##########| 26/26 [00:00<00:00, 30.41it/s]100%|##########| 26/26 [00:01<00:00, 24.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 200
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 200
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 200
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 200
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 200
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 200
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 200
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 200
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 200
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 200
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 200
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 200
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 200
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 200
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 200
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 200
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 200
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 200
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 200
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 200
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 200
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 200
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 200
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 200
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 200
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 200
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
final projection at end of training
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.74 (  0.74)	train_acc   0.51 (  0.52)	train_minacc   0.55 (  0.53)	train_majacc   0.50 (  0.52)	train_corr   0.00 (  0.00)	l1 5.0814 (5.0808)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.81it/s] 12%|#1        | 3/26 [00:00<00:01, 14.09it/s] 31%|###       | 8/26 [00:00<00:00, 28.11it/s]                                               31%|###       | 8/26 [00:00<00:00, 28.11it/s] 50%|#####     | 13/26 [00:00<00:00, 34.72it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.19it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.19it/s] 92%|#########2| 24/26 [00:00<00:00, 41.46it/s]100%|##########| 26/26 [00:00<00:00, 32.91it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.60 (  0.60)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.62 (  0.56)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.62 (  0.56)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.08 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.50 (  0.53)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.50 (  0.53)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.03 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.55 (  0.53)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.55 (  0.53)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.41it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.60 (  0.60)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.60 (  0.60)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 32/  1]	epoch_time 0.0444 (0.0445)	validation_time 0.0003 (0.0006)	train_time 0.0440 (0.0438)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.5077000080943107, 0.527999997138977)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.38it/s] 15%|#5        | 4/26 [00:00<00:01, 18.31it/s] 27%|##6       | 7/26 [00:00<00:00, 22.87it/s] 42%|####2     | 11/26 [00:00<00:00, 25.74it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.84it/s] 65%|######5   | 17/26 [00:00<00:00, 27.47it/s] 81%|########  | 21/26 [00:00<00:00, 28.38it/s] 96%|#########6| 25/26 [00:00<00:00, 29.27it/s]100%|##########| 26/26 [00:01<00:00, 25.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 200
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 200
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 200
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 200
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 200
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 200
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 200
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 200
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 200
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 200
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 200
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 200
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 200
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 200
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 200
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 200
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 200
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 200
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 200
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 200
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 200
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 200
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 200
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 200
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 200
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 200
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
final projection at end of training
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.73 (  0.74)	train_acc   0.51 (  0.51)	train_minacc   0.55 (  0.53)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 5.0815 (5.0809)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.26it/s] 31%|###       | 8/26 [00:00<00:00, 39.45it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.45it/s] 50%|#####     | 13/26 [00:00<00:00, 41.49it/s] 69%|######9   | 18/26 [00:00<00:00, 42.86it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.86it/s] 88%|########8 | 23/26 [00:00<00:00, 43.54it/s]100%|##########| 26/26 [00:00<00:00, 38.21it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.60 (  0.60)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.62 (  0.55)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.62 (  0.55)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.08 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.48 (  0.53)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.48 (  0.53)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.03 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.52)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.52)	test_majacc_d   0.49 (  0.50)	test_corr_d  -0.04 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.97it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.59 (  0.59)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.59 (  0.59)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 33/  1]	epoch_time 0.0464 (0.0446)	validation_time 0.0004 (0.0006)	train_time 0.0459 (0.0439)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.5015000105798244, 0.527999997138977)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.66it/s] 19%|#9        | 5/26 [00:00<00:01, 14.55it/s] 35%|###4      | 9/26 [00:00<00:00, 20.49it/s] 50%|#####     | 13/26 [00:00<00:00, 23.68it/s] 65%|######5   | 17/26 [00:00<00:00, 25.83it/s] 81%|########  | 21/26 [00:00<00:00, 27.35it/s] 92%|#########2| 24/26 [00:01<00:00, 28.00it/s]100%|##########| 26/26 [00:01<00:00, 22.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 200
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 200
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 200
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 200
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 200
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 200
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 200
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 200
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 200
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 200
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 200
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 200
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 200
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 200
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 200
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 200
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 200
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 200
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 200
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 200
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 200
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 200
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 200
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 200
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 200
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 200
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
final projection at end of training
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.73 (  0.73)	train_acc   0.51 (  0.51)	train_minacc   0.53 (  0.52)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 5.0816 (5.0809)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.91it/s] 27%|##6       | 7/26 [00:00<00:00, 33.27it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.27it/s] 46%|####6     | 12/26 [00:00<00:00, 39.75it/s] 65%|######5   | 17/26 [00:00<00:00, 42.02it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.02it/s] 85%|########4 | 22/26 [00:00<00:00, 39.33it/s]100%|##########| 26/26 [00:00<00:00, 36.86it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.60 (  0.60)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.64 (  0.56)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.64 (  0.56)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.09 ( -0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.48 (  0.53)	test_majacc   0.51 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.48 (  0.53)	test_majacc_d   0.51 (  0.49)	test_corr_d   0.02 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.53 (  0.53)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.05 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.52it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.58 (  0.58)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.58 (  0.58)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 34/  1]	epoch_time 0.0427 (0.0445)	validation_time 0.0004 (0.0006)	train_time 0.0422 (0.0439)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.49650001204013827, 0.5300000309944153)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.43it/s] 23%|##3       | 6/26 [00:00<00:00, 26.88it/s] 38%|###8      | 10/26 [00:00<00:00, 28.78it/s] 50%|#####     | 13/26 [00:00<00:00, 27.75it/s] 65%|######5   | 17/26 [00:00<00:00, 28.79it/s] 81%|########  | 21/26 [00:00<00:00, 29.65it/s] 96%|#########6| 25/26 [00:00<00:00, 30.47it/s]100%|##########| 26/26 [00:00<00:00, 27.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 200
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 200
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 200
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 200
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 200
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 200
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 200
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 200
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 200
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 200
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 200
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 200
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 200
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 200
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 200
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 200
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 200
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 200
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 200
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 200
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 200
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 200
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 200
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 200
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 200
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 200
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.73 (  0.73)	train_acc   0.51 (  0.50)	train_minacc   0.57 (  0.53)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 5.0817 (5.0809)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.71it/s] 15%|#5        | 4/26 [00:00<00:02,  9.80it/s] 35%|###4      | 9/26 [00:00<00:00, 20.39it/s]                                               35%|###4      | 9/26 [00:00<00:00, 20.39it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.68it/s] 73%|#######3  | 19/26 [00:00<00:00, 32.82it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 32.82it/s] 92%|#########2| 24/26 [00:00<00:00, 35.10it/s]100%|##########| 26/26 [00:00<00:00, 26.93it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.58 (  0.58)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.64 (  0.55)	test_majacc   0.49 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.64 (  0.55)	test_majacc_d   0.49 (  0.48)	test_corr_d  -0.09 ( -0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.48 (  0.53)	test_majacc   0.51 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.48 (  0.53)	test_majacc_d   0.51 (  0.48)	test_corr_d   0.02 ( -0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.57 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.57 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.05 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.80it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 35/  1]	epoch_time 0.0461 (0.0446)	validation_time 0.0003 (0.0006)	train_time 0.0458 (0.0439)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.49150001445412633, 0.5260000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 11.45it/s] 19%|#9        | 5/26 [00:00<00:01, 19.76it/s] 35%|###4      | 9/26 [00:00<00:00, 24.66it/s] 50%|#####     | 13/26 [00:00<00:00, 27.24it/s] 65%|######5   | 17/26 [00:00<00:00, 29.07it/s] 81%|########  | 21/26 [00:00<00:00, 29.34it/s] 92%|#########2| 24/26 [00:00<00:00, 29.45it/s]100%|##########| 26/26 [00:01<00:00, 25.57it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 200
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 200
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 200
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 200
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 200
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 200
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 200
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 200
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 200
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 200
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 200
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 200
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 200
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 200
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 200
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 200
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 200
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 200
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 200
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 200
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 200
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 200
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 200
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 200
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 200
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 200
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
final projection at end of training
dim_v 512
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.73 (  0.73)	train_acc   0.50 (  0.50)	train_minacc   0.57 (  0.53)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 5.0817 (5.0809)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.10it/s] 12%|#1        | 3/26 [00:00<00:01, 13.42it/s] 31%|###       | 8/26 [00:00<00:00, 27.64it/s]                                               31%|###       | 8/26 [00:00<00:00, 27.64it/s] 50%|#####     | 13/26 [00:00<00:00, 34.59it/s] 69%|######9   | 18/26 [00:00<00:00, 35.45it/s]                                                69%|######9   | 18/26 [00:00<00:00, 35.45it/s] 88%|########8 | 23/26 [00:00<00:00, 38.64it/s]100%|##########| 26/26 [00:00<00:00, 32.14it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.56 (  0.56)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.62 (  0.55)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.62 (  0.55)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.09 ( -0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.50 (  0.53)	test_majacc   0.51 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.50 (  0.53)	test_majacc_d   0.51 (  0.48)	test_corr_d   0.02 ( -0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.57 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.57 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.05 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.73it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 36/  1]	epoch_time 0.0427 (0.0445)	validation_time 0.0004 (0.0006)	train_time 0.0422 (0.0439)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.48920000994205476, 0.5300000309944153)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.87it/s] 12%|#1        | 3/26 [00:00<00:02,  9.24it/s] 23%|##3       | 6/26 [00:00<00:01, 16.03it/s] 38%|###8      | 10/26 [00:00<00:00, 21.78it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.08it/s] 69%|######9   | 18/26 [00:00<00:00, 27.14it/s] 85%|########4 | 22/26 [00:00<00:00, 28.46it/s] 96%|#########6| 25/26 [00:01<00:00, 28.79it/s]100%|##########| 26/26 [00:01<00:00, 22.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 200
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 200
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 200
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 200
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 200
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 200
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 200
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 200
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 200
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 200
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 200
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 200
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 200
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 200
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 200
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 200
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 200
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 200
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 200
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 200
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 200
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 200
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 200
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 200
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 200
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 200
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
final projection at end of training
dim_v 512
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.72 (  0.73)	train_acc   0.50 (  0.50)	train_minacc   0.57 (  0.53)	train_majacc   0.48 (  0.49)	train_corr   0.00 (  0.00)	l1 5.0818 (5.0809)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.58it/s] 27%|##6       | 7/26 [00:00<00:00, 29.81it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.81it/s] 46%|####6     | 12/26 [00:00<00:00, 37.12it/s] 65%|######5   | 17/26 [00:00<00:00, 40.04it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.04it/s] 85%|########4 | 22/26 [00:00<00:00, 40.03it/s]100%|##########| 26/26 [00:00<00:00, 34.19it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.58 (  0.58)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.48)	test_minacc   0.61 (  0.55)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.61 (  0.55)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.10 ( -0.06)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.50 (  0.53)	test_majacc   0.50 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.50 (  0.53)	test_majacc_d   0.50 (  0.48)	test_corr_d   0.02 ( -0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.48)	test_minacc   0.57 (  0.53)	test_majacc   0.47 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.57 (  0.53)	test_majacc_d   0.47 (  0.48)	test_corr_d  -0.05 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.74it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 37/  1]	epoch_time 0.0450 (0.0445)	validation_time 0.0004 (0.0006)	train_time 0.0446 (0.0439)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.4844000064432621, 0.5290000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.80it/s] 19%|#9        | 5/26 [00:00<00:00, 21.16it/s] 35%|###4      | 9/26 [00:00<00:00, 25.38it/s] 46%|####6     | 12/26 [00:00<00:00, 23.72it/s] 62%|######1   | 16/26 [00:00<00:00, 26.32it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.12it/s] 88%|########8 | 23/26 [00:00<00:00, 28.51it/s]100%|##########| 26/26 [00:01<00:00, 25.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 200
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 200
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 200
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 200
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 200
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 200
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 200
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 200
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 200
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 200
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 200
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 200
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 200
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 200
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 200
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 200
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 200
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 200
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 200
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 200
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 200
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 200
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 200
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 200
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 200
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 200
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
final projection at end of training
dim_v 512
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.72 (  0.72)	train_acc   0.49 (  0.50)	train_minacc   0.59 (  0.52)	train_majacc   0.47 (  0.49)	train_corr   0.00 (  0.00)	l1 5.0819 (5.0809)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.20it/s]  8%|7         | 2/26 [00:00<00:04,  5.58it/s] 27%|##6       | 7/26 [00:00<00:00, 19.20it/s]                                               27%|##6       | 7/26 [00:00<00:00, 19.20it/s] 46%|####6     | 12/26 [00:00<00:00, 27.94it/s] 65%|######5   | 17/26 [00:00<00:00, 33.70it/s]                                                65%|######5   | 17/26 [00:00<00:00, 33.70it/s] 85%|########4 | 22/26 [00:00<00:00, 33.94it/s]100%|##########| 26/26 [00:00<00:00, 27.07it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.58 (  0.58)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.61 (  0.55)	test_majacc   0.46 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.61 (  0.55)	test_majacc_d   0.46 (  0.47)	test_corr_d  -0.10 ( -0.06)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.48)	test_minacc   0.52 (  0.53)	test_majacc   0.51 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.52 (  0.53)	test_majacc_d   0.51 (  0.47)	test_corr_d   0.01 ( -0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.48)	test_minacc   0.59 (  0.53)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.05 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.29it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 38/  1]	epoch_time 0.0457 (0.0446)	validation_time 0.0003 (0.0006)	train_time 0.0453 (0.0439)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.48380000361800196, 0.5290000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.77it/s] 15%|#5        | 4/26 [00:00<00:01, 14.94it/s] 27%|##6       | 7/26 [00:00<00:00, 19.95it/s] 38%|###8      | 10/26 [00:00<00:00, 23.10it/s] 50%|#####     | 13/26 [00:00<00:00, 24.93it/s] 65%|######5   | 17/26 [00:00<00:00, 26.79it/s] 81%|########  | 21/26 [00:00<00:00, 28.05it/s] 96%|#########6| 25/26 [00:01<00:00, 29.03it/s]100%|##########| 26/26 [00:01<00:00, 23.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 200
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 200
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 200
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 200
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 200
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 200
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 200
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 200
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 200
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 200
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 200
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 200
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 200
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 200
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 200
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 200
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 200
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 200
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 200
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 200
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 200
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 200
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 200
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 200
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 200
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 200
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
final projection at end of training
dim_v 512
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.72 (  0.72)	train_acc   0.49 (  0.50)	train_minacc   0.57 (  0.53)	train_majacc   0.47 (  0.49)	train_corr   0.00 (  0.00)	l1 5.0819 (5.0809)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.96it/s] 23%|##3       | 6/26 [00:00<00:00, 27.83it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.83it/s] 42%|####2     | 11/26 [00:00<00:00, 35.09it/s] 62%|######1   | 16/26 [00:00<00:00, 39.04it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.04it/s] 81%|########  | 21/26 [00:00<00:00, 37.89it/s]100%|##########| 26/26 [00:00<00:00, 40.65it/s]100%|##########| 26/26 [00:00<00:00, 33.28it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.58 (  0.58)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.61 (  0.56)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.61 (  0.56)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.11 ( -0.06)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.48)	test_minacc   0.54 (  0.54)	test_majacc   0.50 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.50 (  0.47)	test_corr_d   0.01 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.48)	test_minacc   0.57 (  0.54)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.57 (  0.54)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.05 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.78it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 39/  1]	epoch_time 0.0420 (0.0445)	validation_time 0.0005 (0.0006)	train_time 0.0415 (0.0439)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.4809000078141689, 0.5300000309944153)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.92it/s] 15%|#5        | 4/26 [00:00<00:01, 13.26it/s] 27%|##6       | 7/26 [00:00<00:01, 18.40it/s] 42%|####2     | 11/26 [00:00<00:00, 23.00it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.81it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.73it/s] 88%|########8 | 23/26 [00:00<00:00, 28.91it/s]100%|##########| 26/26 [00:01<00:00, 22.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 200
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 200
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 200
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 200
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 200
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 200
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 200
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 200
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 200
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 200
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 200
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 200
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 200
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 200
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 200
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 200
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 200
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 200
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 200
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 200
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 200
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 200
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 200
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 200
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 200
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 200
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.72 (  0.72)	train_acc   0.49 (  0.50)	train_minacc   0.57 (  0.54)	train_majacc   0.47 (  0.49)	train_corr   0.00 (  0.00)	l1 5.0819 (5.0808)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.94it/s] 23%|##3       | 6/26 [00:00<00:01, 19.64it/s]                                               23%|##3       | 6/26 [00:00<00:01, 19.64it/s] 42%|####2     | 11/26 [00:00<00:00, 28.81it/s] 62%|######1   | 16/26 [00:00<00:00, 35.01it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.01it/s] 81%|########  | 21/26 [00:00<00:00, 35.01it/s]100%|##########| 26/26 [00:00<00:00, 38.78it/s]100%|##########| 26/26 [00:00<00:00, 29.23it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.56 (  0.56)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.47)	test_minacc   0.61 (  0.56)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.61 (  0.56)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.11 ( -0.06)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.54 (  0.54)	test_majacc   0.49 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.49 (  0.47)	test_corr_d   0.01 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.48)	test_minacc   0.57 (  0.54)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.57 (  0.54)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.05 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.98it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.58 (  0.58)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.58 (  0.58)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 40/  1]	epoch_time 0.0425 (0.0445)	validation_time 0.0003 (0.0006)	train_time 0.0421 (0.0438)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.4793000055849552, 0.5290000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.94it/s] 19%|#9        | 5/26 [00:00<00:00, 23.62it/s] 35%|###4      | 9/26 [00:00<00:00, 26.71it/s] 50%|#####     | 13/26 [00:00<00:00, 28.04it/s] 65%|######5   | 17/26 [00:00<00:00, 28.67it/s] 81%|########  | 21/26 [00:00<00:00, 29.56it/s] 96%|#########6| 25/26 [00:00<00:00, 29.95it/s]100%|##########| 26/26 [00:00<00:00, 26.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 200
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 200
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 200
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 200
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 200
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 200
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 200
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 200
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 200
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 200
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 200
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 200
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 200
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 200
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 200
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 200
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 200
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 200
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 200
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 200
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 200
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 200
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 200
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 200
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 200
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 200
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
final projection at end of training
dim_v 512
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.71 (  0.72)	train_acc   0.49 (  0.50)	train_minacc   0.59 (  0.53)	train_majacc   0.47 (  0.49)	train_corr   0.00 (  0.00)	l1 5.0819 (5.0808)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.83it/s] 27%|##6       | 7/26 [00:00<00:00, 31.33it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.33it/s] 46%|####6     | 12/26 [00:00<00:00, 34.55it/s] 65%|######5   | 17/26 [00:00<00:00, 37.91it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.91it/s] 85%|########4 | 22/26 [00:00<00:00, 41.20it/s]100%|##########| 26/26 [00:00<00:00, 35.68it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.56 (  0.56)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.47)	test_minacc   0.61 (  0.55)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.61 (  0.55)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.11 ( -0.07)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.52 (  0.53)	test_majacc   0.50 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.52 (  0.53)	test_majacc_d   0.50 (  0.47)	test_corr_d   0.00 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.48)	test_minacc   0.59 (  0.53)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.05 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.43it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 41/  1]	epoch_time 0.0439 (0.0444)	validation_time 0.0004 (0.0006)	train_time 0.0434 (0.0438)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.4783000085949898, 0.527999997138977)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.10it/s] 15%|#5        | 4/26 [00:00<00:01, 16.83it/s] 27%|##6       | 7/26 [00:00<00:00, 21.66it/s] 42%|####2     | 11/26 [00:00<00:00, 25.25it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.22it/s] 69%|######9   | 18/26 [00:00<00:00, 27.83it/s] 81%|########  | 21/26 [00:00<00:00, 28.23it/s] 92%|#########2| 24/26 [00:00<00:00, 28.73it/s]100%|##########| 26/26 [00:01<00:00, 24.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 200
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 200
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 200
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 200
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 200
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 200
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 200
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 200
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 200
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 200
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 200
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 200
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 200
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 200
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 200
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 200
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 200
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 200
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 200
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 200
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 200
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 200
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 200
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 200
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 200
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 200
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
final projection at end of training
dim_v 512
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.71 (  0.71)	train_acc   0.49 (  0.50)	train_minacc   0.59 (  0.53)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 5.0819 (5.0807)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.76it/s] 31%|###       | 8/26 [00:00<00:00, 35.35it/s]                                               31%|###       | 8/26 [00:00<00:00, 35.35it/s] 50%|#####     | 13/26 [00:00<00:00, 40.03it/s] 69%|######9   | 18/26 [00:00<00:00, 39.30it/s]                                                69%|######9   | 18/26 [00:00<00:00, 39.30it/s] 88%|########8 | 23/26 [00:00<00:00, 41.10it/s]100%|##########| 26/26 [00:00<00:00, 36.50it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.56 (  0.56)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.47)	test_minacc   0.61 (  0.55)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.61 (  0.55)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.11 ( -0.07)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.52 (  0.53)	test_majacc   0.49 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.52 (  0.53)	test_majacc_d   0.49 (  0.47)	test_corr_d   0.00 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.48)	test_minacc   0.59 (  0.54)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.59 (  0.54)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.05 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.99it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 42/  1]	epoch_time 0.0424 (0.0444)	validation_time 0.0004 (0.0006)	train_time 0.0419 (0.0438)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.47670000985264777, 0.5290000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.33it/s] 15%|#5        | 4/26 [00:00<00:01, 15.51it/s] 27%|##6       | 7/26 [00:00<00:00, 20.55it/s] 42%|####2     | 11/26 [00:00<00:00, 24.39it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.92it/s] 69%|######9   | 18/26 [00:00<00:00, 27.72it/s] 85%|########4 | 22/26 [00:00<00:00, 28.93it/s] 96%|#########6| 25/26 [00:00<00:00, 29.12it/s]100%|##########| 26/26 [00:01<00:00, 24.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 200
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 200
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 200
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 200
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 200
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 200
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 200
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 200
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 200
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 200
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 200
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 200
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 200
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 200
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 200
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 200
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 200
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 200
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 200
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 200
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 200
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 200
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 200
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 200
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 200
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 200
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
final projection at end of training
dim_v 512
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.71 (  0.71)	train_acc   0.50 (  0.50)	train_minacc   0.59 (  0.53)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 5.0819 (5.0807)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.11it/s] 23%|##3       | 6/26 [00:00<00:00, 27.52it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.52it/s] 42%|####2     | 11/26 [00:00<00:00, 34.35it/s] 62%|######1   | 16/26 [00:00<00:00, 39.37it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.37it/s] 81%|########  | 21/26 [00:00<00:00, 37.92it/s]100%|##########| 26/26 [00:00<00:00, 40.90it/s]100%|##########| 26/26 [00:00<00:00, 33.21it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.56 (  0.56)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.61 (  0.56)	test_majacc   0.45 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.61 (  0.56)	test_majacc_d   0.45 (  0.46)	test_corr_d  -0.12 ( -0.07)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.52 (  0.53)	test_majacc   0.49 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.52 (  0.53)	test_majacc_d   0.49 (  0.47)	test_corr_d  -0.00 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.59 (  0.53)	test_majacc   0.48 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.48 (  0.47)	test_corr_d  -0.06 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.48it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 43/  1]	epoch_time 0.0407 (0.0443)	validation_time 0.0004 (0.0006)	train_time 0.0403 (0.0437)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.4771000060141087, 0.5270000100135803)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.80it/s] 15%|#5        | 4/26 [00:00<00:01, 13.00it/s] 31%|###       | 8/26 [00:00<00:00, 20.11it/s] 46%|####6     | 12/26 [00:00<00:00, 24.13it/s] 62%|######1   | 16/26 [00:00<00:00, 26.66it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.57it/s] 88%|########8 | 23/26 [00:00<00:00, 28.75it/s]100%|##########| 26/26 [00:01<00:00, 23.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 200
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 200
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 200
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 200
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 200
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 200
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 200
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 200
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 200
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 200
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 200
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 200
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 200
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 200
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 200
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 200
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 200
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 200
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 200
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 200
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 200
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 200
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 200
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 200
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 200
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 200
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
final projection at end of training
dim_v 512
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.71 (  0.71)	train_acc   0.50 (  0.51)	train_minacc   0.59 (  0.53)	train_majacc   0.48 (  0.50)	train_corr   0.00 (  0.00)	l1 5.0818 (5.0806)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.59it/s] 23%|##3       | 6/26 [00:00<00:00, 27.51it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.51it/s] 42%|####2     | 11/26 [00:00<00:00, 35.55it/s] 62%|######1   | 16/26 [00:00<00:00, 40.12it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.12it/s] 81%|########  | 21/26 [00:00<00:00, 36.88it/s]100%|##########| 26/26 [00:00<00:00, 40.53it/s]100%|##########| 26/26 [00:00<00:00, 33.51it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.56 (  0.56)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.59 (  0.56)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.59 (  0.56)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.12 ( -0.07)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.52 (  0.53)	test_majacc   0.50 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.52 (  0.53)	test_majacc_d   0.50 (  0.47)	test_corr_d  -0.00 ( -0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.59 (  0.53)	test_majacc   0.48 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.48 (  0.47)	test_corr_d  -0.06 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.71it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 44/  1]	epoch_time 0.0454 (0.0443)	validation_time 0.0007 (0.0006)	train_time 0.0447 (0.0437)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.476200008392334, 0.5290000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.14it/s] 15%|#5        | 4/26 [00:00<00:01, 17.20it/s] 27%|##6       | 7/26 [00:00<00:00, 22.14it/s] 38%|###8      | 10/26 [00:00<00:00, 24.43it/s] 54%|#####3    | 14/26 [00:00<00:00, 28.06it/s] 69%|######9   | 18/26 [00:00<00:00, 28.87it/s] 81%|########  | 21/26 [00:00<00:00, 29.03it/s] 96%|#########6| 25/26 [00:00<00:00, 29.86it/s]100%|##########| 26/26 [00:01<00:00, 25.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 200
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 200
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 200
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 200
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 200
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 200
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 200
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 200
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 200
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 200
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 200
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 200
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 200
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 200
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 200
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 200
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 200
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 200
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 200
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 200
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 200
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 200
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 200
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 200
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 200
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 200
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.70 (  0.71)	train_acc   0.50 (  0.51)	train_minacc   0.59 (  0.52)	train_majacc   0.48 (  0.51)	train_corr   0.00 (  0.00)	l1 5.0818 (5.0805)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.23it/s] 23%|##3       | 6/26 [00:00<00:00, 23.71it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.71it/s] 42%|####2     | 11/26 [00:00<00:00, 31.96it/s] 62%|######1   | 16/26 [00:00<00:00, 37.74it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.74it/s] 81%|########  | 21/26 [00:00<00:00, 35.92it/s]100%|##########| 26/26 [00:00<00:00, 39.13it/s]100%|##########| 26/26 [00:00<00:00, 31.39it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.56 (  0.56)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.47)	test_minacc   0.59 (  0.55)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.59 (  0.55)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.12 ( -0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.48)	test_minacc   0.52 (  0.53)	test_majacc   0.51 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.52 (  0.53)	test_majacc_d   0.51 (  0.47)	test_corr_d  -0.00 ( -0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.59 (  0.53)	test_majacc   0.48 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.48 (  0.47)	test_corr_d  -0.06 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.20it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 45/  1]	epoch_time 0.0423 (0.0443)	validation_time 0.0004 (0.0006)	train_time 0.0418 (0.0437)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.47690000718832015, 0.531000018119812)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.66it/s] 15%|#5        | 4/26 [00:00<00:01, 17.61it/s] 27%|##6       | 7/26 [00:00<00:00, 22.44it/s] 38%|###8      | 10/26 [00:00<00:00, 24.77it/s] 50%|#####     | 13/26 [00:00<00:00, 24.81it/s] 62%|######1   | 16/26 [00:00<00:00, 25.85it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.52it/s] 92%|#########2| 24/26 [00:00<00:00, 28.71it/s]100%|##########| 26/26 [00:01<00:00, 24.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 200
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 200
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 200
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 200
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 200
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 200
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 200
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 200
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 200
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 200
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 200
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 200
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 200
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 200
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 200
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 200
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 200
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 200
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 200
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 200
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 200
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 200
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 200
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 200
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 200
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 200
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
final projection at end of training
dim_v 512
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.70 (  0.70)	train_acc   0.50 (  0.51)	train_minacc   0.59 (  0.52)	train_majacc   0.48 (  0.51)	train_corr   0.00 (  0.00)	l1 5.0817 (5.0804)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.07it/s] 23%|##3       | 6/26 [00:00<00:00, 31.31it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.31it/s] 42%|####2     | 11/26 [00:00<00:00, 37.66it/s] 62%|######1   | 16/26 [00:00<00:00, 40.48it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.48it/s] 81%|########  | 21/26 [00:00<00:00, 42.21it/s]100%|##########| 26/26 [00:00<00:00, 44.21it/s]100%|##########| 26/26 [00:00<00:00, 36.56it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.56 (  0.56)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.57 (  0.55)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.57 (  0.55)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.12 ( -0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.48)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.47)	test_corr_d  -0.01 ( -0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.59 (  0.52)	test_majacc   0.48 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.59 (  0.52)	test_majacc_d   0.48 (  0.47)	test_corr_d  -0.06 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.17it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 46/  1]	epoch_time 0.0407 (0.0442)	validation_time 0.0003 (0.0006)	train_time 0.0403 (0.0436)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.47700000602006914, 0.5330000519752502)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.50it/s] 12%|#1        | 3/26 [00:00<00:01, 13.70it/s] 23%|##3       | 6/26 [00:00<00:00, 20.32it/s] 35%|###4      | 9/26 [00:00<00:00, 23.43it/s] 50%|#####     | 13/26 [00:00<00:00, 26.20it/s] 65%|######5   | 17/26 [00:00<00:00, 27.27it/s] 81%|########  | 21/26 [00:00<00:00, 28.30it/s] 96%|#########6| 25/26 [00:00<00:00, 29.11it/s]100%|##########| 26/26 [00:01<00:00, 24.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 200
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 200
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 200
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 200
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 200
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 200
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 200
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 200
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 200
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 200
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 200
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 200
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 200
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 200
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 200
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 200
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 200
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 200
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 200
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 200
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 200
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 200
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 200
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 200
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 200
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 200
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
final projection at end of training
dim_v 512
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.70 (  0.70)	train_acc   0.50 (  0.51)	train_minacc   0.59 (  0.52)	train_majacc   0.48 (  0.51)	train_corr   0.00 (  0.00)	l1 5.0816 (5.0803)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.14it/s] 23%|##3       | 6/26 [00:00<00:00, 26.56it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.56it/s] 42%|####2     | 11/26 [00:00<00:00, 34.35it/s] 62%|######1   | 16/26 [00:00<00:00, 38.64it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.64it/s] 81%|########  | 21/26 [00:00<00:00, 36.72it/s]100%|##########| 26/26 [00:00<00:00, 39.79it/s]100%|##########| 26/26 [00:00<00:00, 32.70it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.56 (  0.56)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.54 (  0.55)	test_majacc   0.46 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.54 (  0.55)	test_majacc_d   0.46 (  0.47)	test_corr_d  -0.12 ( -0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.48)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.47)	test_corr_d  -0.01 ( -0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.59 (  0.52)	test_majacc   0.48 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.59 (  0.52)	test_majacc_d   0.48 (  0.47)	test_corr_d  -0.06 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.21it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 47/  1]	epoch_time 0.0445 (0.0442)	validation_time 0.0004 (0.0006)	train_time 0.0441 (0.0436)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.4783000047802925, 0.534000039100647)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.76it/s] 15%|#5        | 4/26 [00:00<00:01, 16.99it/s] 27%|##6       | 7/26 [00:00<00:00, 21.55it/s] 38%|###8      | 10/26 [00:00<00:00, 24.15it/s] 50%|#####     | 13/26 [00:00<00:00, 25.60it/s] 65%|######5   | 17/26 [00:00<00:00, 27.42it/s] 81%|########  | 21/26 [00:00<00:00, 28.35it/s] 96%|#########6| 25/26 [00:00<00:00, 28.66it/s]100%|##########| 26/26 [00:01<00:00, 24.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 200
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 200
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 200
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 200
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 200
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 200
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 200
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 200
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 200
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 200
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 200
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 200
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 200
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 200
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 200
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 200
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 200
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 200
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 200
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 200
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 200
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 200
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 200
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 200
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 200
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 200
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
final projection at end of training
dim_v 512
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.70 (  0.70)	train_acc   0.50 (  0.52)	train_minacc   0.59 (  0.52)	train_majacc   0.47 (  0.52)	train_corr   0.00 (  0.00)	l1 5.0816 (5.0802)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.11it/s] 19%|#9        | 5/26 [00:00<00:00, 21.34it/s] 38%|###8      | 10/26 [00:00<00:00, 32.11it/s]                                                38%|###8      | 10/26 [00:00<00:00, 32.11it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.12it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.62it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.62it/s] 96%|#########6| 25/26 [00:00<00:00, 41.43it/s]100%|##########| 26/26 [00:00<00:00, 33.70it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.56 (  0.56)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.48)	test_minacc   0.52 (  0.54)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.52 (  0.54)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.12 ( -0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.48)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.47)	test_corr_d  -0.01 ( -0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.48)	test_minacc   0.59 (  0.52)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.59 (  0.52)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.06 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.04it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 48/  1]	epoch_time 0.0418 (0.0442)	validation_time 0.0004 (0.0006)	train_time 0.0414 (0.0436)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.47840000393986704, 0.5330000519752502)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.24it/s] 15%|#5        | 4/26 [00:00<00:01, 16.60it/s] 27%|##6       | 7/26 [00:00<00:00, 21.35it/s] 42%|####2     | 11/26 [00:00<00:00, 24.94it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.36it/s] 65%|######5   | 17/26 [00:00<00:00, 27.32it/s] 81%|########  | 21/26 [00:00<00:00, 28.36it/s] 96%|#########6| 25/26 [00:00<00:00, 29.28it/s]100%|##########| 26/26 [00:01<00:00, 24.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 200
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 200
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 200
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 200
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 200
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 200
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 200
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 200
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 200
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 200
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 200
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 200
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 200
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 200
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 200
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 200
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 200
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 200
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 200
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 200
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 200
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 200
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 200
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 200
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 200
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 200
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
final projection at end of training
dim_v 512
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.69 (  0.70)	train_acc   0.50 (  0.52)	train_minacc   0.59 (  0.51)	train_majacc   0.48 (  0.52)	train_corr   0.00 (  0.00)	l1 5.0815 (5.0801)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.82it/s] 23%|##3       | 6/26 [00:00<00:00, 31.23it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.23it/s] 42%|####2     | 11/26 [00:00<00:00, 37.69it/s] 62%|######1   | 16/26 [00:00<00:00, 38.65it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.65it/s] 81%|########  | 21/26 [00:00<00:00, 39.85it/s]100%|##########| 26/26 [00:00<00:00, 35.84it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.56 (  0.56)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.48)	test_minacc   0.52 (  0.54)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.52 (  0.54)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.12 ( -0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.48)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.47)	test_corr_d  -0.01 ( -0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.57 (  0.51)	test_majacc   0.48 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.57 (  0.51)	test_majacc_d   0.48 (  0.47)	test_corr_d  -0.06 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.13it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 49/  1]	epoch_time 0.0438 (0.0442)	validation_time 0.0004 (0.0006)	train_time 0.0433 (0.0436)
record: (train_acc, test_acc) (0.6017000095844269, 0.597000002861023)
last accs (train_acc, test_acc) (0.47880000475049017, 0.534000039100647)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.161 MB of 0.161 MB uploadedwandb: \ 0.161 MB of 0.161 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmphceaim6p'
wandb: ERROR Internal wandb error: file data was not synced
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_213435-blap4pfh
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/blap4pfh
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=200, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=5, fraction_z=0.99)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1202
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6066, 3, 32, 32) (5934, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:41,  1.64s/it] 19%|#9        | 5/26 [00:01<00:05,  3.68it/s] 35%|###4      | 9/26 [00:01<00:02,  7.12it/s] 50%|#####     | 13/26 [00:02<00:01, 10.70it/s] 65%|######5   | 17/26 [00:02<00:00, 14.43it/s] 81%|########  | 21/26 [00:02<00:00, 18.05it/s] 96%|#########6| 25/26 [00:02<00:00, 20.98it/s]100%|##########| 26/26 [00:02<00:00,  9.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [0][  26/  26]	Loss 9.015 (12.019)	train_nll   0.41 (  0.59)	train_penalty   0.06 (  0.33)	weight_norm   8.60 ( 11.43)	train_acc   0.84 (  0.79)	train_minacc   0.03 (  0.07)	train_majacc   1.00 (  0.91)	train_corr   0.00 (  0.00)	l1 6.8096 (7.2812)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.41it/s] 23%|##3       | 6/26 [00:00<00:00, 26.99it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.99it/s] 42%|####2     | 11/26 [00:00<00:00, 35.07it/s] 62%|######1   | 16/26 [00:00<00:00, 39.96it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.96it/s] 81%|########  | 21/26 [00:00<00:00, 38.46it/s]100%|##########| 26/26 [00:00<00:00, 41.32it/s]100%|##########| 26/26 [00:00<00:00, 34.02it/s]
Test: [   0/  26]	Loss 0.424 (0.424)	test_acc   0.84 (  0.84)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.424 (0.424)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.382 (0.420)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.382 (0.420)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.432 (0.421)	test_acc   0.83 (  0.84)	test_minacc   0.02 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.432 (0.421)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.02 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.410 (0.417)	test_acc   0.84 (  0.85)	test_minacc   0.03 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.410 (0.417)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.03 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.55it/s]100%|##########| 1/1 [00:00<00:00,  2.54it/s]
Test: [  0/  1]	Loss 1.743 (1.743)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.743 (1.743)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.743 (1.743)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.743 (1.743)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/180/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0803 (0.0803)	validation_time 0.0066 (0.0066)	train_time 0.0713 (0.0713)
record: (train_acc, test_acc) (0.8465000215768814, 0.10700000822544098)
last accs (train_acc, test_acc) (0.8465000215768814, 0.10700000822544098)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.54it/s] 15%|#5        | 4/26 [00:00<00:01, 16.21it/s] 27%|##6       | 7/26 [00:00<00:00, 21.07it/s] 42%|####2     | 11/26 [00:00<00:00, 24.95it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.45it/s] 88%|########8 | 23/26 [00:00<00:00, 29.66it/s]100%|##########| 26/26 [00:01<00:00, 25.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [1][  26/  26]	Loss 4.516 (6.361)	train_nll   0.39 (  0.42)	train_penalty   0.06 (  0.07)	weight_norm   4.12 (  5.94)	train_acc   0.84 (  0.85)	train_minacc   0.10 (  0.02)	train_majacc   0.98 (  1.00)	train_corr   0.00 (  0.00)	l1 6.5726 (6.8312)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.81it/s] 27%|##6       | 7/26 [00:00<00:00, 26.19it/s]                                               27%|##6       | 7/26 [00:00<00:00, 26.19it/s] 46%|####6     | 12/26 [00:00<00:00, 34.72it/s] 65%|######5   | 17/26 [00:00<00:00, 38.71it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.71it/s] 85%|########4 | 22/26 [00:00<00:00, 37.63it/s]100%|##########| 26/26 [00:00<00:00, 33.22it/s]
Test: [   0/  26]	Loss 0.457 (0.457)	test_acc   0.79 (  0.79)	test_minacc   0.27 (  0.27)	test_majacc   0.89 (  0.89)	Loss_d 0.457 (0.457)	test_acc_d   0.79 (  0.79)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.77 (  0.77)
Test: [  10/  26]	Loss 0.475 (0.471)	test_acc   0.81 (  0.79)	test_minacc   0.34 (  0.29)	test_majacc   0.88 (  0.88)	Loss_d 0.475 (0.471)	test_acc_d   0.81 (  0.79)	test_minacc_d   0.34 (  0.29)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.74 (  0.76)
Test: [  20/  26]	Loss 0.493 (0.472)	test_acc   0.77 (  0.79)	test_minacc   0.27 (  0.31)	test_majacc   0.87 (  0.88)	Loss_d 0.493 (0.472)	test_acc_d   0.77 (  0.79)	test_minacc_d   0.27 (  0.31)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.75 (  0.75)
Test: [  26/  26]	Loss 0.383 (0.463)	test_acc   0.83 (  0.79)	test_minacc   0.41 (  0.31)	test_majacc   0.91 (  0.88)	Loss_d 0.383 (0.463)	test_acc_d   0.83 (  0.79)	test_minacc_d   0.41 (  0.31)	test_majacc_d   0.91 (  0.88)	test_corr_d   0.79 (  0.75)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.12it/s]
Test: [  0/  1]	Loss 1.419 (1.419)	test_acc   0.37 (  0.37)	test_minacc   0.31 (  0.31)	test_majacc   0.92 (  0.92)	Loss_d 1.419 (1.419)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.51 (  0.51)
Test: [  1/  1]	Loss 1.419 (1.419)	test_acc   0.37 (  0.37)	test_minacc   0.31 (  0.31)	test_majacc   0.92 (  0.92)	Loss_d 1.419 (1.419)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.51 (  0.51)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/180/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0412 (0.0607)	validation_time 0.0004 (0.0035)	train_time 0.0408 (0.0561)
record: (train_acc, test_acc) (0.793100020647049, 0.3700000047683716)
last accs (train_acc, test_acc) (0.793100020647049, 0.3700000047683716)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.35it/s] 15%|#5        | 4/26 [00:00<00:01, 19.94it/s] 31%|###       | 8/26 [00:00<00:00, 25.73it/s] 42%|####2     | 11/26 [00:00<00:00, 24.52it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.87it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.35it/s] 85%|########4 | 22/26 [00:00<00:00, 28.79it/s] 96%|#########6| 25/26 [00:00<00:00, 29.07it/s]100%|##########| 26/26 [00:01<00:00, 25.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [2][  26/  26]	Loss 2.814 (3.541)	train_nll   0.41 (  0.41)	train_penalty   0.08 (  0.06)	weight_norm   2.41 (  3.13)	train_acc   0.84 (  0.84)	train_minacc   0.00 (  0.03)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.2336 (5.7797)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:10,  2.30it/s] 23%|##3       | 6/26 [00:00<00:01, 14.04it/s]                                               23%|##3       | 6/26 [00:00<00:01, 14.04it/s] 42%|####2     | 11/26 [00:00<00:00, 22.94it/s] 62%|######1   | 16/26 [00:00<00:00, 29.81it/s]                                                62%|######1   | 16/26 [00:00<00:00, 29.81it/s] 81%|########  | 21/26 [00:00<00:00, 31.86it/s]100%|##########| 26/26 [00:00<00:00, 36.27it/s]100%|##########| 26/26 [00:01<00:00, 24.77it/s]
Test: [   0/  26]	Loss 0.398 (0.398)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.398 (0.398)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.346 (0.390)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.346 (0.390)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.97)
Test: [  20/  26]	Loss 0.405 (0.392)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.405 (0.392)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.97)
Test: [  26/  26]	Loss 0.378 (0.386)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.378 (0.386)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.99it/s]
Test: [  0/  1]	Loss 1.852 (1.852)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 1.852 (1.852)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  1/  1]	Loss 1.852 (1.852)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 1.852 (1.852)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Overall Timing[  2/  1]	epoch_time 0.0440 (0.0552)	validation_time 0.0003 (0.0024)	train_time 0.0437 (0.0519)
record: (train_acc, test_acc) (0.793100020647049, 0.3700000047683716)
last accs (train_acc, test_acc) (0.8485000284314156, 0.10300000756978989)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.80it/s] 15%|#5        | 4/26 [00:00<00:01, 16.69it/s] 27%|##6       | 7/26 [00:00<00:00, 21.73it/s] 42%|####2     | 11/26 [00:00<00:00, 25.92it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.64it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.75it/s] 88%|########8 | 23/26 [00:00<00:00, 29.66it/s]100%|##########| 26/26 [00:01<00:00, 24.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [3][  26/  26]	Loss 1.871 (2.309)	train_nll   0.34 (  0.39)	train_penalty   0.03 (  0.04)	weight_norm   1.53 (  1.92)	train_acc   0.85 (  0.85)	train_minacc   0.05 (  0.03)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 4.7373 (4.7933)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.29it/s] 23%|##3       | 6/26 [00:00<00:00, 24.23it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.23it/s] 42%|####2     | 11/26 [00:00<00:00, 32.55it/s] 62%|######1   | 16/26 [00:00<00:00, 37.08it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.08it/s] 81%|########  | 21/26 [00:00<00:00, 37.86it/s]100%|##########| 26/26 [00:00<00:00, 40.95it/s]100%|##########| 26/26 [00:00<00:00, 32.12it/s]
Test: [   0/  26]	Loss 0.394 (0.394)	test_acc   0.83 (  0.83)	test_minacc   0.22 (  0.22)	test_majacc   0.95 (  0.95)	Loss_d 0.394 (0.394)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.370 (0.396)	test_acc   0.84 (  0.84)	test_minacc   0.14 (  0.18)	test_majacc   0.95 (  0.96)	Loss_d 0.370 (0.396)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.14 (  0.18)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.84 (  0.85)
Test: [  20/  26]	Loss 0.421 (0.397)	test_acc   0.84 (  0.84)	test_minacc   0.20 (  0.18)	test_majacc   0.96 (  0.96)	Loss_d 0.421 (0.397)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.20 (  0.18)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.85 (  0.85)
Test: [  26/  26]	Loss 0.318 (0.391)	test_acc   0.86 (  0.84)	test_minacc   0.23 (  0.18)	test_majacc   0.98 (  0.96)	Loss_d 0.318 (0.391)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.23 (  0.18)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.86 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.26it/s]
Test: [  0/  1]	Loss 1.616 (1.616)	test_acc   0.26 (  0.26)	test_minacc   0.18 (  0.18)	test_majacc   0.93 (  0.93)	Loss_d 1.616 (1.616)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.59 (  0.59)
Test: [  1/  1]	Loss 1.616 (1.616)	test_acc   0.26 (  0.26)	test_minacc   0.18 (  0.18)	test_majacc   0.93 (  0.93)	Loss_d 1.616 (1.616)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.59 (  0.59)
Overall Timing[  3/  1]	epoch_time 0.0424 (0.0520)	validation_time 0.0004 (0.0019)	train_time 0.0420 (0.0495)
record: (train_acc, test_acc) (0.793100020647049, 0.3700000047683716)
last accs (train_acc, test_acc) (0.8396000224947929, 0.2580000162124634)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.52it/s] 19%|#9        | 5/26 [00:00<00:01, 18.07it/s] 35%|###4      | 9/26 [00:00<00:00, 23.74it/s] 50%|#####     | 13/26 [00:00<00:00, 26.82it/s] 62%|######1   | 16/26 [00:00<00:00, 27.66it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.86it/s] 88%|########8 | 23/26 [00:00<00:00, 28.01it/s]100%|##########| 26/26 [00:01<00:00, 24.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [4][  26/  26]	Loss 1.363 (1.626)	train_nll   0.35 (  0.38)	train_penalty   0.02 (  0.04)	weight_norm   1.01 (  1.24)	train_acc   0.84 (  0.84)	train_minacc   0.00 (  0.06)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 5.0814 (4.8111)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.20it/s] 23%|##3       | 6/26 [00:00<00:01, 17.84it/s]                                               23%|##3       | 6/26 [00:00<00:01, 17.84it/s] 42%|####2     | 11/26 [00:00<00:00, 27.03it/s] 65%|######5   | 17/26 [00:00<00:00, 32.68it/s]                                                65%|######5   | 17/26 [00:00<00:00, 32.68it/s] 85%|########4 | 22/26 [00:00<00:00, 36.90it/s]100%|##########| 26/26 [00:00<00:00, 28.51it/s]
Test: [   0/  26]	Loss 0.358 (0.358)	test_acc   0.85 (  0.85)	test_minacc   0.17 (  0.17)	test_majacc   0.98 (  0.98)	Loss_d 0.358 (0.358)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.322 (0.355)	test_acc   0.87 (  0.85)	test_minacc   0.16 (  0.16)	test_majacc   0.97 (  0.98)	Loss_d 0.322 (0.355)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.88 (  0.89)
Test: [  20/  26]	Loss 0.366 (0.356)	test_acc   0.84 (  0.85)	test_minacc   0.11 (  0.15)	test_majacc   0.98 (  0.98)	Loss_d 0.366 (0.356)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.11 (  0.15)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.88 (  0.88)
Test: [  26/  26]	Loss 0.309 (0.348)	test_acc   0.87 (  0.85)	test_minacc   0.18 (  0.16)	test_majacc   1.00 (  0.98)	Loss_d 0.309 (0.348)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.18 (  0.16)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.89 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.40it/s]
Test: [  0/  1]	Loss 1.763 (1.763)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.96 (  0.96)	Loss_d 1.763 (1.763)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.73 (  0.73)
Test: [  1/  1]	Loss 1.763 (1.763)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.96 (  0.96)	Loss_d 1.763 (1.763)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.73 (  0.73)
Overall Timing[  4/  1]	epoch_time 0.0427 (0.0501)	validation_time 0.0004 (0.0016)	train_time 0.0423 (0.0480)
record: (train_acc, test_acc) (0.793100020647049, 0.3700000047683716)
last accs (train_acc, test_acc) (0.8528000221252442, 0.23900000751018524)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.83it/s] 15%|#5        | 4/26 [00:00<00:01, 18.92it/s] 27%|##6       | 7/26 [00:00<00:00, 23.27it/s] 38%|###8      | 10/26 [00:00<00:00, 25.69it/s] 50%|#####     | 13/26 [00:00<00:00, 26.89it/s] 62%|######1   | 16/26 [00:00<00:00, 27.83it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.04it/s] 92%|#########2| 24/26 [00:00<00:00, 29.55it/s]100%|##########| 26/26 [00:01<00:00, 25.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [5][  26/  26]	Loss 1.005 (1.197)	train_nll   0.33 (  0.37)	train_penalty   0.03 (  0.03)	weight_norm   0.67 (  0.83)	train_acc   0.85 (  0.85)	train_minacc   0.05 (  0.10)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 5.5451 (5.1996)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.85it/s] 23%|##3       | 6/26 [00:00<00:00, 23.13it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.13it/s] 42%|####2     | 11/26 [00:00<00:00, 31.27it/s] 62%|######1   | 16/26 [00:00<00:00, 37.06it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.06it/s] 81%|########  | 21/26 [00:00<00:00, 36.62it/s]100%|##########| 26/26 [00:00<00:00, 39.93it/s]100%|##########| 26/26 [00:00<00:00, 31.26it/s]
Test: [   0/  26]	Loss 0.361 (0.361)	test_acc   0.86 (  0.86)	test_minacc   0.25 (  0.25)	test_majacc   0.97 (  0.97)	Loss_d 0.361 (0.361)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.345 (0.370)	test_acc   0.86 (  0.85)	test_minacc   0.20 (  0.18)	test_majacc   0.95 (  0.96)	Loss_d 0.345 (0.370)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.20 (  0.18)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.89 (  0.90)
Test: [  20/  26]	Loss 0.362 (0.366)	test_acc   0.83 (  0.85)	test_minacc   0.05 (  0.18)	test_majacc   0.98 (  0.97)	Loss_d 0.362 (0.366)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.05 (  0.18)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  26/  26]	Loss 0.328 (0.361)	test_acc   0.87 (  0.85)	test_minacc   0.23 (  0.19)	test_majacc   0.99 (  0.97)	Loss_d 0.328 (0.361)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.23 (  0.19)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.90 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.91it/s]
Test: [  0/  1]	Loss 1.771 (1.771)	test_acc   0.21 (  0.21)	test_minacc   0.13 (  0.13)	test_majacc   0.97 (  0.97)	Loss_d 1.771 (1.771)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.80 (  0.80)
Test: [  1/  1]	Loss 1.771 (1.771)	test_acc   0.21 (  0.21)	test_minacc   0.13 (  0.13)	test_majacc   0.97 (  0.97)	Loss_d 1.771 (1.771)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.80 (  0.80)
Overall Timing[  5/  1]	epoch_time 0.0437 (0.0491)	validation_time 0.0005 (0.0014)	train_time 0.0433 (0.0472)
record: (train_acc, test_acc) (0.793100020647049, 0.3700000047683716)
last accs (train_acc, test_acc) (0.8509000234007835, 0.21300001442432404)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.15it/s] 15%|#5        | 4/26 [00:00<00:01, 16.71it/s] 27%|##6       | 7/26 [00:00<00:00, 20.56it/s] 38%|###8      | 10/26 [00:00<00:00, 23.75it/s] 50%|#####     | 13/26 [00:00<00:00, 25.46it/s] 62%|######1   | 16/26 [00:00<00:00, 26.38it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.13it/s] 88%|########8 | 23/26 [00:00<00:00, 28.60it/s]100%|##########| 26/26 [00:01<00:00, 24.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [6][  26/  26]	Loss 0.814 (0.907)	train_nll   0.35 (  0.36)	train_penalty   0.03 (  0.03)	weight_norm   0.46 (  0.55)	train_acc   0.85 (  0.85)	train_minacc   0.05 (  0.14)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 6.2877 (5.8394)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.57it/s] 15%|#5        | 4/26 [00:00<00:01, 15.25it/s] 35%|###4      | 9/26 [00:00<00:00, 27.24it/s]                                               35%|###4      | 9/26 [00:00<00:00, 27.24it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.48it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.34it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.34it/s] 92%|#########2| 24/26 [00:00<00:00, 39.24it/s]100%|##########| 26/26 [00:00<00:00, 31.70it/s]
Test: [   0/  26]	Loss 0.337 (0.337)	test_acc   0.85 (  0.85)	test_minacc   0.17 (  0.17)	test_majacc   0.98 (  0.98)	Loss_d 0.337 (0.337)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.313 (0.339)	test_acc   0.87 (  0.85)	test_minacc   0.14 (  0.11)	test_majacc   0.98 (  0.99)	Loss_d 0.313 (0.339)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.14 (  0.11)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  20/  26]	Loss 0.359 (0.343)	test_acc   0.83 (  0.85)	test_minacc   0.02 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 0.359 (0.343)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.02 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.306 (0.337)	test_acc   0.86 (  0.86)	test_minacc   0.13 (  0.12)	test_majacc   1.00 (  0.99)	Loss_d 0.306 (0.337)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.13 (  0.12)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.93 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.80it/s]
Test: [  0/  1]	Loss 1.733 (1.733)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 1.733 (1.733)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.81 (  0.81)
Test: [  1/  1]	Loss 1.733 (1.733)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 1.733 (1.733)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.81 (  0.81)
Overall Timing[  6/  1]	epoch_time 0.0446 (0.0484)	validation_time 0.0003 (0.0013)	train_time 0.0443 (0.0468)
record: (train_acc, test_acc) (0.793100020647049, 0.3700000047683716)
last accs (train_acc, test_acc) (0.8552000206112862, 0.19500000774860382)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.35it/s] 15%|#5        | 4/26 [00:00<00:01, 18.34it/s] 31%|###       | 8/26 [00:00<00:00, 24.13it/s] 42%|####2     | 11/26 [00:00<00:00, 25.87it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.12it/s] 65%|######5   | 17/26 [00:00<00:00, 26.87it/s] 81%|########  | 21/26 [00:00<00:00, 28.05it/s] 96%|#########6| 25/26 [00:00<00:00, 29.28it/s]100%|##########| 26/26 [00:01<00:00, 25.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [7][  26/  26]	Loss 0.008 (0.579)	train_nll   0.46 (  0.40)	train_penalty   0.01 (  0.03)	weight_norm   0.37 (  0.42)	train_acc   0.74 (  0.83)	train_minacc   0.72 (  0.21)	train_majacc   0.75 (  0.94)	train_corr   0.00 (  0.00)	l1 6.4092 (6.6925)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.01it/s] 15%|#5        | 4/26 [00:00<00:01, 19.77it/s] 35%|###4      | 9/26 [00:00<00:00, 32.58it/s]                                               35%|###4      | 9/26 [00:00<00:00, 32.58it/s] 54%|#####3    | 14/26 [00:00<00:00, 37.36it/s] 73%|#######3  | 19/26 [00:00<00:00, 40.56it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 40.56it/s] 92%|#########2| 24/26 [00:00<00:00, 40.18it/s]100%|##########| 26/26 [00:00<00:00, 34.23it/s]
Test: [   0/  26]	Loss 0.506 (0.506)	test_acc   0.73 (  0.73)	test_minacc   0.75 (  0.75)	test_majacc   0.72 (  0.72)	Loss_d 0.506 (0.506)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.50 (  0.50)
Test: [  10/  26]	Loss 0.535 (0.522)	test_acc   0.67 (  0.70)	test_minacc   0.66 (  0.67)	test_majacc   0.67 (  0.70)	Loss_d 0.535 (0.522)	test_acc_d   0.67 (  0.70)	test_minacc_d   0.66 (  0.67)	test_majacc_d   0.67 (  0.70)	test_corr_d   0.50 (  0.53)
Test: [  20/  26]	Loss 0.524 (0.523)	test_acc   0.71 (  0.70)	test_minacc   0.62 (  0.68)	test_majacc   0.72 (  0.70)	Loss_d 0.524 (0.523)	test_acc_d   0.71 (  0.70)	test_minacc_d   0.62 (  0.68)	test_majacc_d   0.72 (  0.70)	test_corr_d   0.52 (  0.51)
Test: [  26/  26]	Loss 0.477 (0.522)	test_acc   0.72 (  0.70)	test_minacc   0.74 (  0.68)	test_majacc   0.72 (  0.70)	Loss_d 0.477 (0.522)	test_acc_d   0.72 (  0.70)	test_minacc_d   0.74 (  0.68)	test_majacc_d   0.72 (  0.70)	test_corr_d   0.54 (  0.52)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.75it/s]
Test: [  0/  1]	Loss 0.744 (0.744)	test_acc   0.66 (  0.66)	test_minacc   0.65 (  0.65)	test_majacc   0.72 (  0.72)	Loss_d 0.744 (0.744)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.72 (  0.72)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.744 (0.744)	test_acc   0.66 (  0.66)	test_minacc   0.65 (  0.65)	test_majacc   0.72 (  0.72)	Loss_d 0.744 (0.744)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.72 (  0.72)	test_corr_d  -0.04 ( -0.04)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/180/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0401 (0.0474)	validation_time 0.0004 (0.0012)	train_time 0.0397 (0.0459)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.29it/s] 19%|#9        | 5/26 [00:00<00:00, 21.88it/s] 35%|###4      | 9/26 [00:00<00:00, 25.94it/s] 50%|#####     | 13/26 [00:00<00:00, 28.07it/s] 65%|######5   | 17/26 [00:00<00:00, 29.22it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.23it/s] 88%|########8 | 23/26 [00:00<00:00, 29.02it/s]100%|##########| 26/26 [00:00<00:00, 26.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [8][  26/  26]	Loss 0.001 (0.001)	train_nll   0.67 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.44)	train_acc   0.58 (  0.62)	train_minacc   0.56 (  0.62)	train_majacc   0.59 (  0.62)	train_corr   0.00 (  0.00)	l1 5.9648 (6.0801)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.26it/s] 23%|##3       | 6/26 [00:00<00:00, 30.58it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.58it/s] 42%|####2     | 11/26 [00:00<00:00, 36.49it/s] 65%|######5   | 17/26 [00:00<00:00, 39.28it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.28it/s] 85%|########4 | 22/26 [00:00<00:00, 41.28it/s]100%|##########| 26/26 [00:00<00:00, 35.66it/s]
Test: [   0/  26]	Loss 0.677 (0.677)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.58 (  0.58)	Loss_d 0.677 (0.677)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.13 (  0.13)
Test: [  10/  26]	Loss 0.700 (0.680)	test_acc   0.52 (  0.57)	test_minacc   0.50 (  0.57)	test_majacc   0.52 (  0.56)	Loss_d 0.700 (0.680)	test_acc_d   0.52 (  0.57)	test_minacc_d   0.50 (  0.57)	test_majacc_d   0.52 (  0.56)	test_corr_d   0.11 (  0.16)
Test: [  20/  26]	Loss 0.665 (0.681)	test_acc   0.60 (  0.56)	test_minacc   0.50 (  0.58)	test_majacc   0.62 (  0.56)	Loss_d 0.665 (0.681)	test_acc_d   0.60 (  0.56)	test_minacc_d   0.50 (  0.58)	test_majacc_d   0.62 (  0.56)	test_corr_d   0.20 (  0.14)
Test: [  26/  26]	Loss 0.672 (0.682)	test_acc   0.58 (  0.56)	test_minacc   0.56 (  0.57)	test_majacc   0.59 (  0.56)	Loss_d 0.672 (0.682)	test_acc_d   0.58 (  0.56)	test_minacc_d   0.56 (  0.57)	test_majacc_d   0.59 (  0.56)	test_corr_d   0.20 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.22it/s]
Test: [  0/  1]	Loss 0.683 (0.683)	test_acc   0.56 (  0.56)	test_minacc   0.55 (  0.55)	test_majacc   0.60 (  0.60)	Loss_d 0.683 (0.683)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.683 (0.683)	test_acc   0.56 (  0.56)	test_minacc   0.55 (  0.55)	test_majacc   0.60 (  0.60)	Loss_d 0.683 (0.683)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.18 ( -0.18)
Overall Timing[  8/  1]	epoch_time 0.0430 (0.0469)	validation_time 0.0004 (0.0011)	train_time 0.0426 (0.0456)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.5607000117301941, 0.5560000538825989)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.33it/s] 15%|#5        | 4/26 [00:00<00:01, 15.24it/s] 27%|##6       | 7/26 [00:00<00:00, 20.69it/s] 42%|####2     | 11/26 [00:00<00:00, 24.78it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.75it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.89it/s] 88%|########8 | 23/26 [00:00<00:00, 28.87it/s]100%|##########| 26/26 [00:01<00:00, 24.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [9][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.59 (  0.57)	train_minacc   0.56 (  0.58)	train_majacc   0.60 (  0.56)	train_corr   0.00 (  0.00)	l1 5.8053 (5.8678)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.41it/s] 27%|##6       | 7/26 [00:00<00:00, 33.22it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.22it/s] 46%|####6     | 12/26 [00:00<00:00, 39.01it/s] 65%|######5   | 17/26 [00:00<00:00, 41.04it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.04it/s] 85%|########4 | 22/26 [00:00<00:00, 39.92it/s]100%|##########| 26/26 [00:00<00:00, 36.89it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.54 (  0.54)	Loss_d 0.689 (0.689)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.695 (0.689)	test_acc   0.53 (  0.55)	test_minacc   0.52 (  0.57)	test_majacc   0.53 (  0.55)	Loss_d 0.695 (0.689)	test_acc_d   0.53 (  0.55)	test_minacc_d   0.52 (  0.57)	test_majacc_d   0.53 (  0.55)	test_corr_d   0.11 (  0.14)
Test: [  20/  26]	Loss 0.682 (0.688)	test_acc   0.59 (  0.55)	test_minacc   0.48 (  0.57)	test_majacc   0.61 (  0.55)	Loss_d 0.682 (0.688)	test_acc_d   0.59 (  0.55)	test_minacc_d   0.48 (  0.57)	test_majacc_d   0.61 (  0.55)	test_corr_d   0.16 (  0.12)
Test: [  26/  26]	Loss 0.686 (0.689)	test_acc   0.58 (  0.55)	test_minacc   0.51 (  0.56)	test_majacc   0.59 (  0.55)	Loss_d 0.686 (0.689)	test_acc_d   0.58 (  0.55)	test_minacc_d   0.51 (  0.56)	test_majacc_d   0.59 (  0.55)	test_corr_d   0.20 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.79it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.55 (  0.55)	Loss_d 0.688 (0.688)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.55 (  0.55)	Loss_d 0.688 (0.688)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.21 ( -0.21)
Overall Timing[  9/  1]	epoch_time 0.0412 (0.0463)	validation_time 0.0003 (0.0010)	train_time 0.0408 (0.0451)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.5501000133156776, 0.550000011920929)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.17it/s] 19%|#9        | 5/26 [00:00<00:00, 21.36it/s] 35%|###4      | 9/26 [00:00<00:00, 25.43it/s] 50%|#####     | 13/26 [00:00<00:00, 27.39it/s] 65%|######5   | 17/26 [00:00<00:00, 28.21it/s] 81%|########  | 21/26 [00:00<00:00, 29.16it/s] 96%|#########6| 25/26 [00:00<00:00, 29.51it/s]100%|##########| 26/26 [00:01<00:00, 25.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [10][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.59 (  0.55)	train_minacc   0.56 (  0.56)	train_majacc   0.59 (  0.55)	train_corr   0.00 (  0.00)	l1 5.7518 (5.7796)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.49it/s] 27%|##6       | 7/26 [00:00<00:00, 30.67it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.67it/s] 46%|####6     | 12/26 [00:00<00:00, 38.01it/s] 65%|######5   | 17/26 [00:00<00:00, 40.59it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.59it/s] 85%|########4 | 22/26 [00:00<00:00, 39.52it/s]100%|##########| 26/26 [00:00<00:00, 36.14it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.56 (  0.56)	Loss_d 0.691 (0.691)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.695 (0.691)	test_acc   0.54 (  0.56)	test_minacc   0.54 (  0.57)	test_majacc   0.54 (  0.56)	Loss_d 0.695 (0.691)	test_acc_d   0.54 (  0.56)	test_minacc_d   0.54 (  0.57)	test_majacc_d   0.54 (  0.56)	test_corr_d   0.06 (  0.07)
Test: [  20/  26]	Loss 0.687 (0.691)	test_acc   0.59 (  0.56)	test_minacc   0.50 (  0.57)	test_majacc   0.61 (  0.56)	Loss_d 0.687 (0.691)	test_acc_d   0.59 (  0.56)	test_minacc_d   0.50 (  0.57)	test_majacc_d   0.61 (  0.56)	test_corr_d   0.10 (  0.06)
Test: [  26/  26]	Loss 0.689 (0.691)	test_acc   0.59 (  0.56)	test_minacc   0.54 (  0.57)	test_majacc   0.60 (  0.56)	Loss_d 0.689 (0.691)	test_acc_d   0.59 (  0.56)	test_minacc_d   0.54 (  0.57)	test_majacc_d   0.60 (  0.56)	test_corr_d   0.14 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 55.70it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.55 (  0.55)	Loss_d 0.690 (0.690)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.55 (  0.55)	Loss_d 0.690 (0.690)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 10/  1]	epoch_time 0.0430 (0.0460)	validation_time 0.0004 (0.0009)	train_time 0.0425 (0.0448)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.558500011742115, 0.5540000200271606)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.35it/s] 19%|#9        | 5/26 [00:00<00:01, 20.73it/s] 35%|###4      | 9/26 [00:00<00:00, 25.63it/s] 50%|#####     | 13/26 [00:00<00:00, 28.02it/s] 62%|######1   | 16/26 [00:00<00:00, 28.53it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.60it/s] 88%|########8 | 23/26 [00:00<00:00, 28.90it/s]100%|##########| 26/26 [00:01<00:00, 25.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [11][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.60 (  0.56)	train_minacc   0.59 (  0.57)	train_majacc   0.61 (  0.56)	train_corr   0.00 (  0.00)	l1 5.7266 (5.7411)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.31it/s] 27%|##6       | 7/26 [00:00<00:00, 35.46it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.46it/s] 46%|####6     | 12/26 [00:00<00:00, 40.20it/s] 62%|######1   | 16/26 [00:00<00:00, 39.95it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.95it/s] 81%|########  | 21/26 [00:00<00:00, 42.80it/s]100%|##########| 26/26 [00:00<00:00, 44.48it/s]100%|##########| 26/26 [00:00<00:00, 37.69it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.56 (  0.56)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.694 (0.692)	test_acc   0.54 (  0.57)	test_minacc   0.54 (  0.58)	test_majacc   0.54 (  0.57)	Loss_d 0.694 (0.692)	test_acc_d   0.54 (  0.57)	test_minacc_d   0.54 (  0.58)	test_majacc_d   0.54 (  0.57)	test_corr_d   0.04 (  0.04)
Test: [  20/  26]	Loss 0.689 (0.692)	test_acc   0.60 (  0.57)	test_minacc   0.50 (  0.58)	test_majacc   0.62 (  0.57)	Loss_d 0.689 (0.692)	test_acc_d   0.60 (  0.57)	test_minacc_d   0.50 (  0.58)	test_majacc_d   0.62 (  0.57)	test_corr_d   0.07 (  0.03)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.60 (  0.57)	test_minacc   0.59 (  0.58)	test_majacc   0.60 (  0.57)	Loss_d 0.690 (0.692)	test_acc_d   0.60 (  0.57)	test_minacc_d   0.59 (  0.58)	test_majacc_d   0.60 (  0.57)	test_corr_d   0.12 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.69it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 11/  1]	epoch_time 0.0427 (0.0457)	validation_time 0.0004 (0.0009)	train_time 0.0423 (0.0446)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.5707000104784965, 0.5680000185966492)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.19it/s] 12%|#1        | 3/26 [00:00<00:01, 12.93it/s] 23%|##3       | 6/26 [00:00<00:01, 19.60it/s] 38%|###8      | 10/26 [00:00<00:00, 24.36it/s] 50%|#####     | 13/26 [00:00<00:00, 25.64it/s] 62%|######1   | 16/26 [00:00<00:00, 26.76it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.24it/s] 88%|########8 | 23/26 [00:00<00:00, 28.34it/s]100%|##########| 26/26 [00:01<00:00, 24.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [12][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.60 (  0.57)	train_minacc   0.59 (  0.58)	train_majacc   0.60 (  0.57)	train_corr   0.00 (  0.00)	l1 5.7130 (5.7215)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.88it/s] 23%|##3       | 6/26 [00:00<00:00, 32.43it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.43it/s] 42%|####2     | 11/26 [00:00<00:00, 38.58it/s] 62%|######1   | 16/26 [00:00<00:00, 41.74it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.74it/s] 81%|########  | 21/26 [00:00<00:00, 39.35it/s]100%|##########| 26/26 [00:00<00:00, 42.24it/s]100%|##########| 26/26 [00:00<00:00, 36.18it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.58 (  0.58)	test_minacc   0.56 (  0.56)	test_majacc   0.58 (  0.58)	Loss_d 0.692 (0.692)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.694 (0.692)	test_acc   0.54 (  0.58)	test_minacc   0.52 (  0.58)	test_majacc   0.55 (  0.58)	Loss_d 0.694 (0.692)	test_acc_d   0.54 (  0.58)	test_minacc_d   0.52 (  0.58)	test_majacc_d   0.55 (  0.58)	test_corr_d   0.03 (  0.02)
Test: [  20/  26]	Loss 0.690 (0.692)	test_acc   0.60 (  0.58)	test_minacc   0.50 (  0.59)	test_majacc   0.62 (  0.58)	Loss_d 0.690 (0.692)	test_acc_d   0.60 (  0.58)	test_minacc_d   0.50 (  0.59)	test_majacc_d   0.62 (  0.58)	test_corr_d   0.05 (  0.02)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.60 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.60 (  0.58)	Loss_d 0.690 (0.692)	test_acc_d   0.60 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.60 (  0.58)	test_corr_d   0.11 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.80it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 12/  1]	epoch_time 0.0401 (0.0453)	validation_time 0.0004 (0.0009)	train_time 0.0397 (0.0443)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.577000013589859, 0.5720000267028809)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.93it/s] 19%|#9        | 5/26 [00:00<00:01, 12.75it/s] 35%|###4      | 9/26 [00:00<00:00, 18.93it/s] 50%|#####     | 13/26 [00:00<00:00, 22.64it/s] 65%|######5   | 17/26 [00:00<00:00, 25.30it/s] 81%|########  | 21/26 [00:00<00:00, 27.06it/s] 92%|#########2| 24/26 [00:01<00:00, 27.75it/s]100%|##########| 26/26 [00:01<00:00, 21.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [13][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.60 (  0.57)	train_minacc   0.62 (  0.59)	train_majacc   0.60 (  0.57)	train_corr   0.00 (  0.00)	l1 5.7051 (5.7106)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.10it/s] 27%|##6       | 7/26 [00:00<00:00, 33.45it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.45it/s] 46%|####6     | 12/26 [00:00<00:00, 39.20it/s] 65%|######5   | 17/26 [00:00<00:00, 39.94it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.94it/s] 85%|########4 | 22/26 [00:00<00:00, 41.03it/s]100%|##########| 26/26 [00:00<00:00, 36.78it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.56 (  0.56)	test_majacc   0.59 (  0.59)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.694 (0.692)	test_acc   0.54 (  0.58)	test_minacc   0.52 (  0.58)	test_majacc   0.54 (  0.58)	Loss_d 0.694 (0.692)	test_acc_d   0.54 (  0.58)	test_minacc_d   0.52 (  0.58)	test_majacc_d   0.54 (  0.58)	test_corr_d   0.02 (  0.02)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.61 (  0.58)	test_minacc   0.50 (  0.59)	test_majacc   0.63 (  0.58)	Loss_d 0.691 (0.692)	test_acc_d   0.61 (  0.58)	test_minacc_d   0.50 (  0.59)	test_majacc_d   0.63 (  0.58)	test_corr_d   0.04 (  0.01)
Test: [  26/  26]	Loss 0.690 (0.693)	test_acc   0.60 (  0.58)	test_minacc   0.62 (  0.59)	test_majacc   0.60 (  0.58)	Loss_d 0.690 (0.693)	test_acc_d   0.60 (  0.58)	test_minacc_d   0.62 (  0.59)	test_majacc_d   0.60 (  0.58)	test_corr_d   0.10 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.99it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 13/  1]	epoch_time 0.0423 (0.0451)	validation_time 0.0004 (0.0008)	train_time 0.0419 (0.0441)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.5776000172495842, 0.5720000267028809)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.66it/s] 12%|#1        | 3/26 [00:00<00:01, 12.04it/s] 23%|##3       | 6/26 [00:00<00:01, 18.64it/s] 35%|###4      | 9/26 [00:00<00:00, 22.29it/s] 50%|#####     | 13/26 [00:00<00:00, 25.21it/s] 62%|######1   | 16/26 [00:00<00:00, 26.32it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.95it/s] 88%|########8 | 23/26 [00:00<00:00, 27.95it/s]100%|##########| 26/26 [00:01<00:00, 23.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [14][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.60 (  0.57)	train_minacc   0.62 (  0.58)	train_majacc   0.60 (  0.57)	train_corr   0.00 (  0.00)	l1 5.7000 (5.7039)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.57it/s] 23%|##3       | 6/26 [00:00<00:00, 27.28it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.28it/s] 42%|####2     | 11/26 [00:00<00:00, 35.02it/s] 62%|######1   | 16/26 [00:00<00:00, 39.60it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.60it/s] 81%|########  | 21/26 [00:00<00:00, 38.48it/s]100%|##########| 26/26 [00:00<00:00, 41.16it/s]100%|##########| 26/26 [00:00<00:00, 33.85it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.56 (  0.56)	test_majacc   0.58 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.694 (0.692)	test_acc   0.54 (  0.58)	test_minacc   0.52 (  0.58)	test_majacc   0.54 (  0.58)	Loss_d 0.694 (0.692)	test_acc_d   0.54 (  0.58)	test_minacc_d   0.52 (  0.58)	test_majacc_d   0.54 (  0.58)	test_corr_d   0.02 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.60 (  0.57)	test_minacc   0.50 (  0.58)	test_majacc   0.62 (  0.57)	Loss_d 0.692 (0.693)	test_acc_d   0.60 (  0.57)	test_minacc_d   0.50 (  0.58)	test_majacc_d   0.62 (  0.57)	test_corr_d   0.03 (  0.01)
Test: [  26/  26]	Loss 0.690 (0.693)	test_acc   0.60 (  0.57)	test_minacc   0.62 (  0.59)	test_majacc   0.60 (  0.57)	Loss_d 0.690 (0.693)	test_acc_d   0.60 (  0.57)	test_minacc_d   0.62 (  0.59)	test_majacc_d   0.60 (  0.57)	test_corr_d   0.10 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.71it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.58 (  0.58)	test_minacc   0.58 (  0.58)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.58 (  0.58)	test_minacc   0.58 (  0.58)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 14/  1]	epoch_time 0.0430 (0.0450)	validation_time 0.0004 (0.0008)	train_time 0.0426 (0.0440)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.5731000163555146, 0.5750000476837158)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.48it/s] 15%|#5        | 4/26 [00:00<00:01, 18.45it/s] 27%|##6       | 7/26 [00:00<00:00, 23.16it/s] 42%|####2     | 11/26 [00:00<00:00, 26.23it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.07it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.36it/s] 88%|########8 | 23/26 [00:00<00:00, 30.13it/s]100%|##########| 26/26 [00:01<00:00, 25.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [15][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.60 (  0.56)	train_minacc   0.62 (  0.58)	train_majacc   0.60 (  0.56)	train_corr   0.00 (  0.00)	l1 5.6963 (5.6995)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.32it/s]  8%|7         | 2/26 [00:00<00:04,  5.59it/s] 27%|##6       | 7/26 [00:00<00:00, 19.29it/s]                                               27%|##6       | 7/26 [00:00<00:00, 19.29it/s] 46%|####6     | 12/26 [00:00<00:00, 28.37it/s] 65%|######5   | 17/26 [00:00<00:00, 34.28it/s]                                                65%|######5   | 17/26 [00:00<00:00, 34.28it/s] 85%|########4 | 22/26 [00:00<00:00, 36.50it/s]100%|##########| 26/26 [00:00<00:00, 28.52it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.56 (  0.56)	test_majacc   0.58 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.54 (  0.57)	test_minacc   0.50 (  0.58)	test_majacc   0.54 (  0.57)	Loss_d 0.693 (0.692)	test_acc_d   0.54 (  0.57)	test_minacc_d   0.50 (  0.58)	test_majacc_d   0.54 (  0.57)	test_corr_d   0.02 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.61 (  0.57)	test_minacc   0.50 (  0.58)	test_majacc   0.63 (  0.57)	Loss_d 0.692 (0.693)	test_acc_d   0.61 (  0.57)	test_minacc_d   0.50 (  0.58)	test_majacc_d   0.63 (  0.57)	test_corr_d   0.03 (  0.01)
Test: [  26/  26]	Loss 0.690 (0.693)	test_acc   0.60 (  0.57)	test_minacc   0.62 (  0.58)	test_majacc   0.60 (  0.57)	Loss_d 0.690 (0.693)	test_acc_d   0.60 (  0.57)	test_minacc_d   0.62 (  0.58)	test_majacc_d   0.60 (  0.57)	test_corr_d   0.10 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.80it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 15/  1]	epoch_time 0.0424 (0.0448)	validation_time 0.0003 (0.0008)	train_time 0.0421 (0.0439)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.5690000084638596, 0.5700000524520874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.05it/s] 15%|#5        | 4/26 [00:00<00:01, 19.62it/s] 27%|##6       | 7/26 [00:00<00:00, 24.03it/s] 42%|####2     | 11/26 [00:00<00:00, 27.30it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.93it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.66it/s] 88%|########8 | 23/26 [00:00<00:00, 31.12it/s]100%|##########| 26/26 [00:00<00:00, 26.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.61 (  0.56)	train_minacc   0.62 (  0.57)	train_majacc   0.61 (  0.55)	train_corr   0.00 (  0.00)	l1 5.6935 (5.6963)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.90it/s] 23%|##3       | 6/26 [00:00<00:00, 23.32it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.32it/s] 42%|####2     | 11/26 [00:00<00:00, 31.79it/s] 62%|######1   | 16/26 [00:00<00:00, 36.77it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.77it/s] 81%|########  | 21/26 [00:00<00:00, 36.84it/s]100%|##########| 26/26 [00:00<00:00, 31.62it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.56 (  0.56)	test_majacc   0.58 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.56)	test_minacc   0.50 (  0.57)	test_majacc   0.52 (  0.56)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.56)	test_minacc_d   0.50 (  0.57)	test_majacc_d   0.52 (  0.56)	test_corr_d   0.02 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.61 (  0.56)	test_minacc   0.52 (  0.58)	test_majacc   0.63 (  0.56)	Loss_d 0.692 (0.693)	test_acc_d   0.61 (  0.56)	test_minacc_d   0.52 (  0.58)	test_majacc_d   0.63 (  0.56)	test_corr_d   0.03 (  0.01)
Test: [  26/  26]	Loss 0.690 (0.693)	test_acc   0.61 (  0.56)	test_minacc   0.62 (  0.58)	test_majacc   0.61 (  0.56)	Loss_d 0.690 (0.693)	test_acc_d   0.61 (  0.56)	test_minacc_d   0.62 (  0.58)	test_majacc_d   0.61 (  0.56)	test_corr_d   0.11 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.29it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 16/  1]	epoch_time 0.0421 (0.0446)	validation_time 0.0004 (0.0007)	train_time 0.0417 (0.0437)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.5632000125050545, 0.5580000281333923)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.62it/s] 19%|#9        | 5/26 [00:00<00:01, 16.68it/s] 35%|###4      | 9/26 [00:00<00:00, 22.13it/s] 50%|#####     | 13/26 [00:00<00:00, 25.43it/s] 62%|######1   | 16/26 [00:00<00:00, 26.72it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.39it/s] 88%|########8 | 23/26 [00:00<00:00, 28.57it/s]100%|##########| 26/26 [00:01<00:00, 23.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.61 (  0.55)	train_minacc   0.62 (  0.57)	train_majacc   0.61 (  0.55)	train_corr   0.00 (  0.00)	l1 5.6914 (5.6939)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.60it/s] 23%|##3       | 6/26 [00:00<00:00, 30.12it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.12it/s] 42%|####2     | 11/26 [00:00<00:00, 36.41it/s] 62%|######1   | 16/26 [00:00<00:00, 41.39it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.39it/s] 81%|########  | 21/26 [00:00<00:00, 41.14it/s]100%|##########| 26/26 [00:00<00:00, 43.38it/s]100%|##########| 26/26 [00:00<00:00, 36.23it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.56 (  0.56)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.56)	test_minacc   0.52 (  0.56)	test_majacc   0.52 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.56)	test_minacc_d   0.52 (  0.56)	test_majacc_d   0.52 (  0.56)	test_corr_d   0.02 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.60 (  0.56)	test_minacc   0.53 (  0.58)	test_majacc   0.62 (  0.56)	Loss_d 0.692 (0.693)	test_acc_d   0.60 (  0.56)	test_minacc_d   0.53 (  0.58)	test_majacc_d   0.62 (  0.56)	test_corr_d   0.03 (  0.01)
Test: [  26/  26]	Loss 0.691 (0.693)	test_acc   0.61 (  0.56)	test_minacc   0.62 (  0.58)	test_majacc   0.61 (  0.56)	Loss_d 0.691 (0.693)	test_acc_d   0.61 (  0.56)	test_minacc_d   0.62 (  0.58)	test_majacc_d   0.61 (  0.56)	test_corr_d   0.11 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.59it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 17/  1]	epoch_time 0.0444 (0.0446)	validation_time 0.0003 (0.0007)	train_time 0.0441 (0.0438)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.5588000129759312, 0.550000011920929)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.79it/s] 15%|#5        | 4/26 [00:00<00:01, 19.45it/s] 27%|##6       | 7/26 [00:00<00:00, 23.77it/s] 42%|####2     | 11/26 [00:00<00:00, 26.87it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.50it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.05it/s] 88%|########8 | 23/26 [00:00<00:00, 29.23it/s]100%|##########| 26/26 [00:01<00:00, 25.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.61 (  0.55)	train_minacc   0.62 (  0.57)	train_majacc   0.61 (  0.54)	train_corr   0.00 (  0.00)	l1 5.6897 (5.6919)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.84it/s] 23%|##3       | 6/26 [00:00<00:01, 16.06it/s]                                               23%|##3       | 6/26 [00:00<00:01, 16.06it/s] 42%|####2     | 11/26 [00:00<00:00, 24.50it/s] 62%|######1   | 16/26 [00:00<00:00, 31.07it/s]                                                62%|######1   | 16/26 [00:00<00:00, 31.07it/s] 81%|########  | 21/26 [00:00<00:00, 32.96it/s]100%|##########| 26/26 [00:00<00:00, 37.20it/s]100%|##########| 26/26 [00:00<00:00, 26.56it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.54 (  0.54)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.56)	test_minacc   0.52 (  0.56)	test_majacc   0.52 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.56)	test_minacc_d   0.52 (  0.56)	test_majacc_d   0.52 (  0.55)	test_corr_d   0.02 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.60 (  0.56)	test_minacc   0.52 (  0.57)	test_majacc   0.62 (  0.55)	Loss_d 0.692 (0.693)	test_acc_d   0.60 (  0.56)	test_minacc_d   0.52 (  0.57)	test_majacc_d   0.62 (  0.55)	test_corr_d   0.03 (  0.00)
Test: [  26/  26]	Loss 0.691 (0.693)	test_acc   0.61 (  0.56)	test_minacc   0.62 (  0.58)	test_majacc   0.61 (  0.55)	Loss_d 0.691 (0.693)	test_acc_d   0.61 (  0.56)	test_minacc_d   0.62 (  0.58)	test_majacc_d   0.61 (  0.55)	test_corr_d   0.11 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.71it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 18/  1]	epoch_time 0.0461 (0.0447)	validation_time 0.0004 (0.0007)	train_time 0.0457 (0.0439)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.5556000141203403, 0.5350000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.71it/s] 19%|#9        | 5/26 [00:00<00:00, 23.52it/s] 35%|###4      | 9/26 [00:00<00:00, 26.50it/s] 46%|####6     | 12/26 [00:00<00:00, 27.57it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.14it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.99it/s] 88%|########8 | 23/26 [00:00<00:00, 29.75it/s]100%|##########| 26/26 [00:00<00:00, 26.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.61 (  0.54)	train_minacc   0.62 (  0.57)	train_majacc   0.61 (  0.54)	train_corr   0.00 (  0.00)	l1 5.6882 (5.6903)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.73it/s] 27%|##6       | 7/26 [00:00<00:00, 24.46it/s]                                               27%|##6       | 7/26 [00:00<00:00, 24.46it/s] 46%|####6     | 12/26 [00:00<00:00, 32.43it/s] 65%|######5   | 17/26 [00:00<00:00, 35.04it/s]                                                65%|######5   | 17/26 [00:00<00:00, 35.04it/s] 85%|########4 | 22/26 [00:00<00:00, 38.80it/s]100%|##########| 26/26 [00:00<00:00, 31.49it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.51 (  0.51)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.55)	test_minacc   0.52 (  0.55)	test_majacc   0.51 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.55)	test_minacc_d   0.52 (  0.55)	test_majacc_d   0.51 (  0.55)	test_corr_d   0.01 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.60 (  0.55)	test_minacc   0.52 (  0.57)	test_majacc   0.61 (  0.55)	Loss_d 0.692 (0.693)	test_acc_d   0.60 (  0.55)	test_minacc_d   0.52 (  0.57)	test_majacc_d   0.61 (  0.55)	test_corr_d   0.03 (  0.00)
Test: [  26/  26]	Loss 0.691 (0.693)	test_acc   0.61 (  0.55)	test_minacc   0.62 (  0.57)	test_majacc   0.61 (  0.55)	Loss_d 0.691 (0.693)	test_acc_d   0.61 (  0.55)	test_minacc_d   0.62 (  0.57)	test_majacc_d   0.61 (  0.55)	test_corr_d   0.11 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.31it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 19/  1]	epoch_time 0.0432 (0.0446)	validation_time 0.0004 (0.0007)	train_time 0.0428 (0.0438)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.5529000133275985, 0.531000018119812)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.76it/s] 15%|#5        | 4/26 [00:00<00:01, 18.10it/s] 27%|##6       | 7/26 [00:00<00:00, 22.37it/s] 38%|###8      | 10/26 [00:00<00:00, 24.74it/s] 50%|#####     | 13/26 [00:00<00:00, 26.18it/s] 65%|######5   | 17/26 [00:00<00:00, 27.63it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.16it/s] 88%|########8 | 23/26 [00:00<00:00, 28.28it/s]100%|##########| 26/26 [00:01<00:00, 24.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.62 (  0.54)	train_minacc   0.62 (  0.56)	train_majacc   0.62 (  0.54)	train_corr   0.00 (  0.00)	l1 5.6870 (5.6888)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.89it/s] 23%|##3       | 6/26 [00:00<00:00, 27.76it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.76it/s] 42%|####2     | 11/26 [00:00<00:00, 35.37it/s] 62%|######1   | 16/26 [00:00<00:00, 40.26it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.26it/s] 81%|########  | 21/26 [00:00<00:00, 41.78it/s]100%|##########| 26/26 [00:00<00:00, 43.27it/s]100%|##########| 26/26 [00:00<00:00, 35.45it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.46 (  0.46)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.55)	test_minacc   0.50 (  0.54)	test_majacc   0.51 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.55)	test_minacc_d   0.50 (  0.54)	test_majacc_d   0.51 (  0.55)	test_corr_d   0.01 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.60 (  0.55)	test_minacc   0.52 (  0.56)	test_majacc   0.62 (  0.55)	Loss_d 0.692 (0.693)	test_acc_d   0.60 (  0.55)	test_minacc_d   0.52 (  0.56)	test_majacc_d   0.62 (  0.55)	test_corr_d   0.03 (  0.00)
Test: [  26/  26]	Loss 0.691 (0.693)	test_acc   0.60 (  0.55)	test_minacc   0.59 (  0.57)	test_majacc   0.60 (  0.55)	Loss_d 0.691 (0.693)	test_acc_d   0.60 (  0.55)	test_minacc_d   0.59 (  0.57)	test_majacc_d   0.60 (  0.55)	test_corr_d   0.11 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.46it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 20/  1]	epoch_time 0.0420 (0.0445)	validation_time 0.0005 (0.0007)	train_time 0.0415 (0.0437)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.549700013846159, 0.5220000147819519)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.42it/s] 15%|#5        | 4/26 [00:00<00:01, 15.47it/s] 27%|##6       | 7/26 [00:00<00:01, 18.84it/s] 38%|###8      | 10/26 [00:00<00:00, 22.23it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.44it/s] 65%|######5   | 17/26 [00:00<00:00, 26.74it/s] 81%|########  | 21/26 [00:00<00:00, 28.12it/s] 96%|#########6| 25/26 [00:01<00:00, 29.37it/s]100%|##########| 26/26 [00:01<00:00, 23.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.61 (  0.54)	train_minacc   0.59 (  0.56)	train_majacc   0.61 (  0.54)	train_corr   0.00 (  0.00)	l1 5.6859 (5.6876)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.92it/s] 23%|##3       | 6/26 [00:00<00:01, 16.61it/s]                                               23%|##3       | 6/26 [00:00<00:01, 16.61it/s] 42%|####2     | 11/26 [00:00<00:00, 25.83it/s] 62%|######1   | 16/26 [00:00<00:00, 32.21it/s]                                                62%|######1   | 16/26 [00:00<00:00, 32.21it/s] 81%|########  | 21/26 [00:00<00:00, 34.14it/s]100%|##########| 26/26 [00:00<00:00, 38.43it/s]100%|##########| 26/26 [00:00<00:00, 27.23it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.46 (  0.46)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.54)	test_minacc   0.52 (  0.55)	test_majacc   0.50 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.54)	test_minacc_d   0.52 (  0.55)	test_majacc_d   0.50 (  0.54)	test_corr_d   0.01 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.60 (  0.55)	test_minacc   0.52 (  0.57)	test_majacc   0.61 (  0.54)	Loss_d 0.692 (0.693)	test_acc_d   0.60 (  0.55)	test_minacc_d   0.52 (  0.57)	test_majacc_d   0.61 (  0.54)	test_corr_d   0.02 (  0.00)
Test: [  26/  26]	Loss 0.691 (0.693)	test_acc   0.60 (  0.55)	test_minacc   0.59 (  0.57)	test_majacc   0.60 (  0.54)	Loss_d 0.691 (0.693)	test_acc_d   0.60 (  0.55)	test_minacc_d   0.59 (  0.57)	test_majacc_d   0.60 (  0.54)	test_corr_d   0.10 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.77it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 21/  1]	epoch_time 0.0473 (0.0446)	validation_time 0.0003 (0.0007)	train_time 0.0470 (0.0438)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.5479000060260296, 0.5170000195503235)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.72it/s] 19%|#9        | 5/26 [00:00<00:01, 18.30it/s] 35%|###4      | 9/26 [00:00<00:00, 23.27it/s] 50%|#####     | 13/26 [00:00<00:00, 25.96it/s] 62%|######1   | 16/26 [00:00<00:00, 27.03it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.38it/s] 88%|########8 | 23/26 [00:00<00:00, 28.24it/s]100%|##########| 26/26 [00:01<00:00, 24.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.61 (  0.54)	train_minacc   0.59 (  0.56)	train_majacc   0.61 (  0.54)	train_corr   0.00 (  0.00)	l1 5.6849 (5.6866)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.26it/s] 23%|##3       | 6/26 [00:00<00:00, 28.46it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.46it/s] 42%|####2     | 11/26 [00:00<00:00, 35.37it/s] 62%|######1   | 16/26 [00:00<00:00, 40.17it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.17it/s] 81%|########  | 21/26 [00:00<00:00, 38.60it/s]100%|##########| 26/26 [00:00<00:00, 41.72it/s]100%|##########| 26/26 [00:00<00:00, 34.14it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.46 (  0.46)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.54)	test_minacc   0.52 (  0.55)	test_majacc   0.50 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.54)	test_minacc_d   0.52 (  0.55)	test_majacc_d   0.50 (  0.54)	test_corr_d   0.01 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.60 (  0.55)	test_minacc   0.52 (  0.56)	test_majacc   0.62 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.60 (  0.55)	test_minacc_d   0.52 (  0.56)	test_majacc_d   0.62 (  0.54)	test_corr_d   0.02 ( -0.00)
Test: [  26/  26]	Loss 0.691 (0.693)	test_acc   0.60 (  0.55)	test_minacc   0.59 (  0.57)	test_majacc   0.61 (  0.54)	Loss_d 0.691 (0.693)	test_acc_d   0.60 (  0.55)	test_minacc_d   0.59 (  0.57)	test_majacc_d   0.61 (  0.54)	test_corr_d   0.10 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.80it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 22/  1]	epoch_time 0.0427 (0.0445)	validation_time 0.0004 (0.0006)	train_time 0.0423 (0.0438)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.5478000120520592, 0.51500004529953)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.02it/s] 12%|#1        | 3/26 [00:00<00:02, 11.11it/s] 23%|##3       | 6/26 [00:00<00:01, 17.52it/s] 31%|###       | 8/26 [00:00<00:00, 18.12it/s] 42%|####2     | 11/26 [00:00<00:00, 21.73it/s] 58%|#####7    | 15/26 [00:00<00:00, 24.80it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.53it/s] 88%|########8 | 23/26 [00:01<00:00, 27.42it/s]100%|##########| 26/26 [00:01<00:00, 22.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 200
penalty weights 10000.0
l1 at pgd_anneal_iters 5.686147689819336
set z to 5.6292862129211425
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 200
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 200
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 200
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 200
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 200
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
rho, theta 418 tensor(-0.0062, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 200
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 200
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 200
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 200
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 200
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 200
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 200
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 200
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 200
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 200
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 200
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 200
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 200
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 200
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 200
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 200
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 200
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 200
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
final projection at end of training
dim_v 512
Epoch: [23][  26/  26]	Loss 0.000 (0.003)	train_nll   0.70 (  0.70)	train_penalty   0.00 (  0.00)	weight_norm   0.60 (  0.52)	train_acc   0.51 (  0.52)	train_minacc   0.54 (  0.53)	train_majacc   0.51 (  0.52)	train_corr   0.00 (  0.00)	l1 4.7676 (4.9999)	zero_count 0.0000 (3.6270)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.28it/s] 27%|##6       | 7/26 [00:00<00:00, 30.75it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.75it/s] 46%|####6     | 12/26 [00:00<00:00, 33.53it/s] 65%|######5   | 17/26 [00:00<00:00, 37.88it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.88it/s] 85%|########4 | 22/26 [00:00<00:00, 40.56it/s]100%|##########| 26/26 [00:00<00:00, 34.04it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.37 (  0.37)
Test: [  10/  26]	Loss 0.688 (0.694)	test_acc   0.53 (  0.50)	test_minacc   0.58 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.688 (0.694)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.58 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.34 (  0.34)
Test: [  20/  26]	Loss 0.704 (0.695)	test_acc   0.46 (  0.50)	test_minacc   0.56 (  0.50)	test_majacc   0.44 (  0.50)	Loss_d 0.704 (0.695)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.56 (  0.50)	test_majacc_d   0.44 (  0.50)	test_corr_d   0.40 (  0.34)
Test: [  26/  26]	Loss 0.693 (0.694)	test_acc   0.51 (  0.50)	test_minacc   0.54 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.694)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.54 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.32 (  0.34)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.95it/s]
Test: [  0/  1]	Loss 0.712 (0.712)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.712 (0.712)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.53 (  0.53)
Test: [  1/  1]	Loss 0.712 (0.712)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.712 (0.712)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.53 (  0.53)
Overall Timing[ 23/  1]	epoch_time 0.0427 (0.0445)	validation_time 0.0003 (0.0006)	train_time 0.0424 (0.0437)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.5000000087618828, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.22it/s] 15%|#5        | 4/26 [00:00<00:01, 15.38it/s] 27%|##6       | 7/26 [00:00<00:00, 20.57it/s] 38%|###8      | 10/26 [00:00<00:00, 23.78it/s] 50%|#####     | 13/26 [00:00<00:00, 25.60it/s] 62%|######1   | 16/26 [00:00<00:00, 26.91it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.52it/s] 85%|########4 | 22/26 [00:00<00:00, 28.15it/s] 96%|#########6| 25/26 [00:01<00:00, 28.13it/s]100%|##########| 26/26 [00:01<00:00, 23.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 200
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 200
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 200
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 200
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 200
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 200
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 200
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 200
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 200
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 200
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 200
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 200
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 200
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 200
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 200
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 200
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 200
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 200
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 200
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 200
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 200
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 200
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 200
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 200
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 200
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 200
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
final projection at end of training
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.65 (  0.63)	train_acc   0.51 (  0.50)	train_minacc   0.56 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 4.8033 (4.8034)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.40it/s] 27%|##6       | 7/26 [00:00<00:00, 29.57it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.57it/s] 46%|####6     | 12/26 [00:00<00:00, 33.03it/s] 65%|######5   | 17/26 [00:00<00:00, 37.15it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.15it/s] 85%|########4 | 22/26 [00:00<00:00, 39.73it/s]100%|##########| 26/26 [00:00<00:00, 33.17it/s]
Test: [   0/  26]	Loss 0.698 (0.698)	test_acc   0.48 (  0.48)	test_minacc   0.49 (  0.49)	test_majacc   0.48 (  0.48)	Loss_d 0.698 (0.698)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.07 ( -0.07)
Test: [  10/  26]	Loss 0.696 (0.698)	test_acc   0.51 (  0.49)	test_minacc   0.58 (  0.51)	test_majacc   0.50 (  0.48)	Loss_d 0.696 (0.698)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.58 (  0.51)	test_majacc_d   0.50 (  0.48)	test_corr_d  -0.15 ( -0.12)
Test: [  20/  26]	Loss 0.700 (0.698)	test_acc   0.46 (  0.49)	test_minacc   0.58 (  0.51)	test_majacc   0.44 (  0.48)	Loss_d 0.700 (0.698)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.58 (  0.51)	test_majacc_d   0.44 (  0.48)	test_corr_d  -0.09 ( -0.11)
Test: [  26/  26]	Loss 0.696 (0.698)	test_acc   0.51 (  0.49)	test_minacc   0.56 (  0.51)	test_majacc   0.50 (  0.49)	Loss_d 0.696 (0.698)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.12 ( -0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.31it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.695 (0.695)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.695 (0.695)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 24/  1]	epoch_time 0.0430 (0.0444)	validation_time 0.0004 (0.0006)	train_time 0.0426 (0.0437)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.4896000080108643, 0.49000000953674316)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.87it/s] 15%|#5        | 4/26 [00:00<00:01, 20.10it/s] 27%|##6       | 7/26 [00:00<00:00, 23.81it/s] 38%|###8      | 10/26 [00:00<00:00, 26.00it/s] 50%|#####     | 13/26 [00:00<00:00, 26.96it/s] 62%|######1   | 16/26 [00:00<00:00, 27.83it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.96it/s] 88%|########8 | 23/26 [00:00<00:00, 28.90it/s]100%|##########| 26/26 [00:01<00:00, 25.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 200
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 200
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 200
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 200
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 200
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 200
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 200
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 200
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 200
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 200
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 200
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 200
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 200
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 200
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 200
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 200
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 200
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 200
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 200
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 200
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 200
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 200
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 200
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 200
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 200
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 200
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.65 (  0.65)	train_acc   0.52 (  0.50)	train_minacc   0.56 (  0.51)	train_majacc   0.51 (  0.49)	train_corr   0.00 (  0.00)	l1 4.7956 (4.7988)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.70it/s] 12%|#1        | 3/26 [00:00<00:01, 14.42it/s] 19%|#9        | 5/26 [00:00<00:01, 16.51it/s] 38%|###8      | 10/26 [00:00<00:00, 28.71it/s]                                                38%|###8      | 10/26 [00:00<00:00, 28.71it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.49it/s] 77%|#######6  | 20/26 [00:00<00:00, 35.90it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 35.90it/s] 96%|#########6| 25/26 [00:00<00:00, 38.76it/s]100%|##########| 26/26 [00:00<00:00, 30.29it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.15 (  0.15)
Test: [  10/  26]	Loss 0.690 (0.691)	test_acc   0.53 (  0.50)	test_minacc   0.60 (  0.52)	test_majacc   0.51 (  0.49)	Loss_d 0.690 (0.691)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.60 (  0.52)	test_majacc_d   0.51 (  0.49)	test_corr_d   0.06 (  0.11)
Test: [  20/  26]	Loss 0.692 (0.691)	test_acc   0.47 (  0.50)	test_minacc   0.56 (  0.51)	test_majacc   0.46 (  0.49)	Loss_d 0.692 (0.691)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.21 (  0.12)
Test: [  26/  26]	Loss 0.690 (0.691)	test_acc   0.52 (  0.50)	test_minacc   0.56 (  0.51)	test_majacc   0.51 (  0.50)	Loss_d 0.690 (0.691)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.11 (  0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.71it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.06 (  0.06)
Overall Timing[ 25/  1]	epoch_time 0.0488 (0.0446)	validation_time 0.0004 (0.0006)	train_time 0.0484 (0.0439)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.4991000162065029, 0.49400001764297485)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.52it/s] 15%|#5        | 4/26 [00:00<00:01, 14.10it/s] 27%|##6       | 7/26 [00:00<00:00, 19.18it/s] 38%|###8      | 10/26 [00:00<00:00, 22.42it/s] 50%|#####     | 13/26 [00:00<00:00, 24.70it/s] 65%|######5   | 17/26 [00:00<00:00, 26.71it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.11it/s] 92%|#########2| 24/26 [00:01<00:00, 28.66it/s]100%|##########| 26/26 [00:01<00:00, 22.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 200
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 200
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 200
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 200
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 200
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 200
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 200
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 200
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 200
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 200
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 200
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 200
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 200
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 200
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 200
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 200
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 200
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 200
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 200
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 200
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 200
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 200
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 200
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 200
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 200
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 200
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
final projection at end of training
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.65 (  0.65)	train_acc   0.50 (  0.49)	train_minacc   0.67 (  0.53)	train_majacc   0.46 (  0.48)	train_corr   0.00 (  0.00)	l1 4.7878 (4.7903)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.01it/s] 27%|##6       | 7/26 [00:00<00:00, 29.73it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.73it/s] 46%|####6     | 12/26 [00:00<00:00, 37.39it/s] 69%|######9   | 18/26 [00:00<00:00, 41.26it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.26it/s] 92%|#########2| 24/26 [00:00<00:00, 45.93it/s]100%|##########| 26/26 [00:00<00:00, 37.24it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.54 (  0.54)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.62 (  0.58)	test_majacc   0.44 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.62 (  0.58)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.12 ( -0.07)
Test: [  20/  26]	Loss 0.693 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.70 (  0.60)	test_majacc   0.42 (  0.45)	Loss_d 0.693 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.70 (  0.60)	test_majacc_d   0.42 (  0.45)	test_corr_d   0.00 ( -0.07)
Test: [  26/  26]	Loss 0.693 (0.694)	test_acc   0.50 (  0.47)	test_minacc   0.67 (  0.59)	test_majacc   0.47 (  0.45)	Loss_d 0.693 (0.694)	test_acc_d   0.50 (  0.47)	test_minacc_d   0.67 (  0.59)	test_majacc_d   0.47 (  0.45)	test_corr_d  -0.06 ( -0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.38it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.59 (  0.59)	test_minacc   0.61 (  0.61)	test_majacc   0.43 (  0.43)	Loss_d 0.691 (0.691)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.59 (  0.59)	test_minacc   0.61 (  0.61)	test_majacc   0.43 (  0.43)	Loss_d 0.691 (0.691)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 26/  1]	epoch_time 0.0426 (0.0445)	validation_time 0.0003 (0.0006)	train_time 0.0423 (0.0438)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.4698000041246414, 0.5879999995231628)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.84it/s] 15%|#5        | 4/26 [00:00<00:01, 17.68it/s] 27%|##6       | 7/26 [00:00<00:00, 22.54it/s] 42%|####2     | 11/26 [00:00<00:00, 26.02it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.82it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.31it/s] 88%|########8 | 23/26 [00:00<00:00, 29.46it/s]100%|##########| 26/26 [00:00<00:00, 28.66it/s]100%|##########| 26/26 [00:01<00:00, 24.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 200
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 200
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 200
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 200
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 200
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 200
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 200
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 200
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 200
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 200
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 200
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 200
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 200
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 200
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 200
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 200
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 200
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 200
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 200
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 200
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 200
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 200
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 200
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 200
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 200
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 200
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
final projection at end of training
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.65 (  0.65)	train_acc   0.50 (  0.47)	train_minacc   0.62 (  0.60)	train_majacc   0.47 (  0.45)	train_corr   0.00 (  0.00)	l1 4.7875 (4.7879)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.38it/s] 31%|###       | 8/26 [00:00<00:00, 37.32it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.32it/s] 50%|#####     | 13/26 [00:00<00:00, 40.22it/s] 69%|######9   | 18/26 [00:00<00:00, 43.19it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.19it/s] 88%|########8 | 23/26 [00:00<00:00, 40.34it/s]100%|##########| 26/26 [00:00<00:00, 37.98it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.43 (  0.43)	test_minacc   0.68 (  0.68)	test_majacc   0.38 (  0.38)	Loss_d 0.692 (0.692)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.46)	test_minacc   0.60 (  0.65)	test_majacc   0.42 (  0.42)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.46)	test_minacc_d   0.60 (  0.65)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.08 ( -0.04)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.48 (  0.45)	test_minacc   0.69 (  0.65)	test_majacc   0.44 (  0.42)	Loss_d 0.692 (0.693)	test_acc_d   0.48 (  0.45)	test_minacc_d   0.69 (  0.65)	test_majacc_d   0.44 (  0.42)	test_corr_d   0.05 ( -0.04)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.50 (  0.45)	test_minacc   0.62 (  0.65)	test_majacc   0.48 (  0.41)	Loss_d 0.692 (0.693)	test_acc_d   0.50 (  0.45)	test_minacc_d   0.62 (  0.65)	test_majacc_d   0.48 (  0.41)	test_corr_d  -0.02 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.87it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.63 (  0.63)	test_minacc   0.66 (  0.66)	test_majacc   0.33 (  0.33)	Loss_d 0.691 (0.691)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.33 (  0.33)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.63 (  0.63)	test_minacc   0.66 (  0.66)	test_majacc   0.33 (  0.33)	Loss_d 0.691 (0.691)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.33 (  0.33)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 27/  1]	epoch_time 0.0473 (0.0446)	validation_time 0.0004 (0.0006)	train_time 0.0469 (0.0439)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.44940000301599503, 0.6290000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.30it/s] 12%|#1        | 3/26 [00:00<00:02, 10.12it/s] 23%|##3       | 6/26 [00:00<00:01, 16.80it/s] 35%|###4      | 9/26 [00:00<00:00, 21.02it/s] 50%|#####     | 13/26 [00:00<00:00, 24.50it/s] 65%|######5   | 17/26 [00:00<00:00, 26.50it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.14it/s] 88%|########8 | 23/26 [00:01<00:00, 27.94it/s]100%|##########| 26/26 [00:01<00:00, 28.47it/s]100%|##########| 26/26 [00:01<00:00, 22.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 200
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 200
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 200
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 200
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 200
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 200
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 200
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 200
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 200
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 200
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 200
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 200
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 200
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 200
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 200
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 200
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 200
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 200
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 200
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 200
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 200
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 200
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 200
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 200
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 200
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 200
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
final projection at end of training
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.65 (  0.65)	train_acc   0.47 (  0.46)	train_minacc   0.62 (  0.63)	train_majacc   0.44 (  0.43)	train_corr   0.00 (  0.00)	l1 4.7875 (4.7878)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.20it/s] 19%|#9        | 5/26 [00:00<00:01, 18.90it/s] 38%|###8      | 10/26 [00:00<00:00, 29.61it/s]                                                38%|###8      | 10/26 [00:00<00:00, 29.61it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.92it/s] 77%|#######6  | 20/26 [00:00<00:00, 35.72it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 35.72it/s] 96%|#########6| 25/26 [00:00<00:00, 38.82it/s]100%|##########| 26/26 [00:00<00:00, 30.89it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.40 (  0.40)	test_minacc   0.68 (  0.68)	test_majacc   0.35 (  0.35)	Loss_d 0.693 (0.693)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.35 (  0.35)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.56 (  0.66)	test_majacc   0.42 (  0.40)	Loss_d 0.694 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.56 (  0.66)	test_majacc_d   0.42 (  0.40)	test_corr_d  -0.09 ( -0.06)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.44)	test_minacc   0.70 (  0.66)	test_majacc   0.43 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.44)	test_minacc_d   0.70 (  0.66)	test_majacc_d   0.43 (  0.39)	test_corr_d   0.03 ( -0.07)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.47 (  0.43)	test_minacc   0.62 (  0.66)	test_majacc   0.45 (  0.39)	Loss_d 0.692 (0.693)	test_acc_d   0.47 (  0.43)	test_minacc_d   0.62 (  0.66)	test_majacc_d   0.45 (  0.39)	test_corr_d  -0.04 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.43it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.64 (  0.64)	test_minacc   0.67 (  0.67)	test_majacc   0.33 (  0.33)	Loss_d 0.691 (0.691)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.33 (  0.33)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.64 (  0.64)	test_minacc   0.67 (  0.67)	test_majacc   0.33 (  0.33)	Loss_d 0.691 (0.691)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.33 (  0.33)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 28/  1]	epoch_time 0.0437 (0.0446)	validation_time 0.0004 (0.0006)	train_time 0.0433 (0.0439)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.43200000482797624, 0.64000004529953)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.72it/s] 23%|##3       | 6/26 [00:00<00:00, 24.87it/s] 38%|###8      | 10/26 [00:00<00:00, 27.92it/s] 54%|#####3    | 14/26 [00:00<00:00, 29.49it/s] 69%|######9   | 18/26 [00:00<00:00, 30.50it/s] 85%|########4 | 22/26 [00:00<00:00, 30.72it/s]100%|##########| 26/26 [00:00<00:00, 31.20it/s]100%|##########| 26/26 [00:00<00:00, 27.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 200
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 200
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 200
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 200
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 200
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 200
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 200
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 200
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 200
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 200
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 200
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 200
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 200
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 200
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 200
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 200
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 200
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 200
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 200
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 200
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 200
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 200
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 200
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 200
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 200
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 200
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
final projection at end of training
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.64 (  0.65)	train_acc   0.46 (  0.45)	train_minacc   0.59 (  0.64)	train_majacc   0.44 (  0.42)	train_corr   0.00 (  0.00)	l1 4.7880 (4.7882)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.06it/s] 23%|##3       | 6/26 [00:00<00:00, 28.18it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.18it/s] 42%|####2     | 11/26 [00:00<00:00, 35.49it/s] 62%|######1   | 16/26 [00:00<00:00, 40.14it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.14it/s] 81%|########  | 21/26 [00:00<00:00, 39.22it/s]100%|##########| 26/26 [00:00<00:00, 42.29it/s]100%|##########| 26/26 [00:00<00:00, 34.09it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.40 (  0.40)	test_minacc   0.67 (  0.67)	test_majacc   0.35 (  0.35)	Loss_d 0.693 (0.693)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.35 (  0.35)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.44)	test_minacc   0.56 (  0.67)	test_majacc   0.41 (  0.40)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.44)	test_minacc_d   0.56 (  0.67)	test_majacc_d   0.41 (  0.40)	test_corr_d  -0.09 ( -0.06)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.43)	test_minacc   0.69 (  0.67)	test_majacc   0.41 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.43)	test_minacc_d   0.69 (  0.67)	test_majacc_d   0.41 (  0.39)	test_corr_d   0.02 ( -0.07)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.47 (  0.43)	test_minacc   0.59 (  0.67)	test_majacc   0.45 (  0.39)	Loss_d 0.692 (0.693)	test_acc_d   0.47 (  0.43)	test_minacc_d   0.59 (  0.67)	test_majacc_d   0.45 (  0.39)	test_corr_d  -0.04 ( -0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.74it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.32 (  0.32)	Loss_d 0.691 (0.691)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.32 (  0.32)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.32 (  0.32)	Loss_d 0.691 (0.691)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.32 (  0.32)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 29/  1]	epoch_time 0.0407 (0.0444)	validation_time 0.0003 (0.0006)	train_time 0.0403 (0.0438)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.4287000048160553, 0.6500000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.65it/s] 15%|#5        | 4/26 [00:00<00:01, 19.05it/s] 27%|##6       | 7/26 [00:00<00:00, 23.27it/s] 38%|###8      | 10/26 [00:00<00:00, 25.54it/s] 50%|#####     | 13/26 [00:00<00:00, 26.62it/s] 62%|######1   | 16/26 [00:00<00:00, 27.32it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.94it/s] 88%|########8 | 23/26 [00:00<00:00, 28.45it/s]100%|##########| 26/26 [00:01<00:00, 24.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 200
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 200
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 200
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 200
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 200
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 200
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 200
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 200
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 200
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 200
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 200
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 200
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 200
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 200
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 200
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 200
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 200
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 200
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 200
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 200
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 200
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 200
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 200
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 200
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 200
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 200
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.64 (  0.64)	train_acc   0.46 (  0.45)	train_minacc   0.59 (  0.65)	train_majacc   0.44 (  0.41)	train_corr   0.00 (  0.00)	l1 4.7885 (4.7887)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.20it/s] 31%|###       | 8/26 [00:00<00:00, 31.36it/s]                                               31%|###       | 8/26 [00:00<00:00, 31.36it/s] 50%|#####     | 13/26 [00:00<00:00, 34.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 41.62it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 41.62it/s] 92%|#########2| 24/26 [00:00<00:00, 44.09it/s]100%|##########| 26/26 [00:00<00:00, 34.77it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.40 (  0.40)	test_minacc   0.65 (  0.65)	test_majacc   0.35 (  0.35)	Loss_d 0.693 (0.693)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.35 (  0.35)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.44)	test_minacc   0.56 (  0.68)	test_majacc   0.41 (  0.39)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.44)	test_minacc_d   0.56 (  0.68)	test_majacc_d   0.41 (  0.39)	test_corr_d  -0.10 ( -0.07)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.43)	test_minacc   0.69 (  0.68)	test_majacc   0.40 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.43)	test_minacc_d   0.69 (  0.68)	test_majacc_d   0.40 (  0.39)	test_corr_d   0.02 ( -0.08)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.43)	test_minacc   0.59 (  0.68)	test_majacc   0.44 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.43)	test_minacc_d   0.59 (  0.68)	test_majacc_d   0.44 (  0.38)	test_corr_d  -0.04 ( -0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.18it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.66 (  0.66)	test_minacc   0.69 (  0.69)	test_majacc   0.31 (  0.31)	Loss_d 0.691 (0.691)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.31 (  0.31)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.66 (  0.66)	test_minacc   0.69 (  0.69)	test_majacc   0.31 (  0.31)	Loss_d 0.691 (0.691)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.31 (  0.31)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 30/  1]	epoch_time 0.0427 (0.0444)	validation_time 0.0004 (0.0006)	train_time 0.0423 (0.0437)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.4264000047445297, 0.6550000309944153)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.06it/s] 15%|#5        | 4/26 [00:00<00:01, 19.07it/s] 27%|##6       | 7/26 [00:00<00:00, 23.06it/s] 38%|###8      | 10/26 [00:00<00:00, 25.39it/s] 50%|#####     | 13/26 [00:00<00:00, 25.98it/s] 65%|######5   | 17/26 [00:00<00:00, 28.01it/s] 81%|########  | 21/26 [00:00<00:00, 28.88it/s] 96%|#########6| 25/26 [00:00<00:00, 29.10it/s]100%|##########| 26/26 [00:01<00:00, 25.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 200
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 200
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 200
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 200
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 200
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 200
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 200
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 200
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 200
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 200
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 200
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 200
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 200
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 200
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 200
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 200
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 200
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 200
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 200
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 200
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 200
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 200
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 200
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 200
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 200
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 200
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
final projection at end of training
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.64 (  0.64)	train_acc   0.46 (  0.45)	train_minacc   0.62 (  0.65)	train_majacc   0.43 (  0.41)	train_corr   0.00 (  0.00)	l1 4.7891 (4.7893)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 30.62it/s] 35%|###4      | 9/26 [00:00<00:00, 37.82it/s]                                               35%|###4      | 9/26 [00:00<00:00, 37.82it/s] 54%|#####3    | 14/26 [00:00<00:00, 42.02it/s] 73%|#######3  | 19/26 [00:00<00:00, 42.91it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 42.91it/s] 92%|#########2| 24/26 [00:00<00:00, 41.58it/s]100%|##########| 26/26 [00:00<00:00, 38.25it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.40 (  0.40)	test_minacc   0.65 (  0.65)	test_majacc   0.35 (  0.35)	Loss_d 0.693 (0.693)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.35 (  0.35)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.40 (  0.43)	test_minacc   0.58 (  0.69)	test_majacc   0.38 (  0.39)	Loss_d 0.694 (0.693)	test_acc_d   0.40 (  0.43)	test_minacc_d   0.58 (  0.69)	test_majacc_d   0.38 (  0.39)	test_corr_d  -0.10 ( -0.07)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.43)	test_minacc   0.72 (  0.69)	test_majacc   0.41 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.43)	test_minacc_d   0.72 (  0.69)	test_majacc_d   0.41 (  0.38)	test_corr_d   0.01 ( -0.08)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.42)	test_minacc   0.62 (  0.69)	test_majacc   0.44 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.42)	test_minacc_d   0.62 (  0.69)	test_majacc_d   0.44 (  0.38)	test_corr_d  -0.05 ( -0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.44it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.30 (  0.30)	Loss_d 0.691 (0.691)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.30 (  0.30)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.30 (  0.30)	Loss_d 0.691 (0.691)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.30 (  0.30)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 31/  1]	epoch_time 0.0429 (0.0443)	validation_time 0.0005 (0.0006)	train_time 0.0424 (0.0437)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.4237000049054623, 0.6510000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.30it/s] 12%|#1        | 3/26 [00:00<00:01, 12.82it/s] 23%|##3       | 6/26 [00:00<00:01, 19.53it/s] 35%|###4      | 9/26 [00:00<00:00, 22.44it/s] 46%|####6     | 12/26 [00:00<00:00, 24.29it/s] 62%|######1   | 16/26 [00:00<00:00, 26.90it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.81it/s] 88%|########8 | 23/26 [00:00<00:00, 28.71it/s]100%|##########| 26/26 [00:01<00:00, 23.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 200
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 200
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 200
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 200
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 200
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 200
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 200
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 200
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 200
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 200
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 200
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 200
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 200
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 200
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 200
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 200
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 200
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 200
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 200
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 200
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 200
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 200
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 200
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 200
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 200
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 200
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
final projection at end of training
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.64 (  0.64)	train_acc   0.48 (  0.45)	train_minacc   0.62 (  0.66)	train_majacc   0.45 (  0.41)	train_corr   0.00 (  0.00)	l1 4.7895 (4.7898)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.18it/s] 27%|##6       | 7/26 [00:00<00:00, 33.66it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.66it/s] 46%|####6     | 12/26 [00:00<00:00, 38.81it/s] 65%|######5   | 17/26 [00:00<00:00, 41.73it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.73it/s] 85%|########4 | 22/26 [00:00<00:00, 40.07it/s]100%|##########| 26/26 [00:00<00:00, 37.18it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.39 (  0.39)	test_minacc   0.63 (  0.63)	test_majacc   0.35 (  0.35)	Loss_d 0.693 (0.693)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.35 (  0.35)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.41 (  0.43)	test_minacc   0.62 (  0.69)	test_majacc   0.37 (  0.38)	Loss_d 0.694 (0.693)	test_acc_d   0.41 (  0.43)	test_minacc_d   0.62 (  0.69)	test_majacc_d   0.37 (  0.38)	test_corr_d  -0.11 ( -0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.42)	test_minacc   0.73 (  0.69)	test_majacc   0.40 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.42)	test_minacc_d   0.73 (  0.69)	test_majacc_d   0.40 (  0.38)	test_corr_d   0.01 ( -0.08)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.42)	test_minacc   0.62 (  0.69)	test_majacc   0.45 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.42)	test_minacc_d   0.62 (  0.69)	test_majacc_d   0.45 (  0.37)	test_corr_d  -0.05 ( -0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.69it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.66 (  0.66)	test_minacc   0.69 (  0.69)	test_majacc   0.32 (  0.32)	Loss_d 0.691 (0.691)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.32 (  0.32)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.66 (  0.66)	test_minacc   0.69 (  0.69)	test_majacc   0.32 (  0.32)	Loss_d 0.691 (0.691)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.32 (  0.32)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 32/  1]	epoch_time 0.0460 (0.0444)	validation_time 0.0004 (0.0006)	train_time 0.0457 (0.0437)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.42110000494122507, 0.656000018119812)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.27it/s] 15%|#5        | 4/26 [00:00<00:01, 17.25it/s] 27%|##6       | 7/26 [00:00<00:00, 22.12it/s] 42%|####2     | 11/26 [00:00<00:00, 25.59it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.85it/s] 65%|######5   | 17/26 [00:00<00:00, 27.58it/s] 81%|########  | 21/26 [00:00<00:00, 28.70it/s] 96%|#########6| 25/26 [00:00<00:00, 29.62it/s]100%|##########| 26/26 [00:01<00:00, 24.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 200
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 200
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 200
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 200
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 200
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 200
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 200
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 200
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 200
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 200
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 200
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 200
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 200
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 200
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 200
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 200
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 200
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 200
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 200
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 200
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 200
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 200
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 200
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 200
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 200
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 200
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
final projection at end of training
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.64 (  0.64)	train_acc   0.48 (  0.45)	train_minacc   0.62 (  0.66)	train_majacc   0.45 (  0.41)	train_corr   0.00 (  0.00)	l1 4.7899 (4.7902)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.57it/s] 23%|##3       | 6/26 [00:00<00:00, 26.65it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.65it/s] 42%|####2     | 11/26 [00:00<00:00, 34.79it/s] 62%|######1   | 16/26 [00:00<00:00, 36.92it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.92it/s] 81%|########  | 21/26 [00:00<00:00, 38.70it/s]100%|##########| 26/26 [00:00<00:00, 41.84it/s]100%|##########| 26/26 [00:00<00:00, 33.54it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.39 (  0.39)	test_minacc   0.63 (  0.63)	test_majacc   0.34 (  0.34)	Loss_d 0.693 (0.693)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.34 (  0.34)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.40 (  0.43)	test_minacc   0.62 (  0.70)	test_majacc   0.36 (  0.38)	Loss_d 0.694 (0.693)	test_acc_d   0.40 (  0.43)	test_minacc_d   0.62 (  0.70)	test_majacc_d   0.36 (  0.38)	test_corr_d  -0.11 ( -0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.42)	test_minacc   0.73 (  0.69)	test_majacc   0.40 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.42)	test_minacc_d   0.73 (  0.69)	test_majacc_d   0.40 (  0.37)	test_corr_d   0.00 ( -0.09)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.42)	test_minacc   0.62 (  0.69)	test_majacc   0.45 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.42)	test_minacc_d   0.62 (  0.69)	test_majacc_d   0.45 (  0.37)	test_corr_d  -0.05 ( -0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.69it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.32 (  0.32)	Loss_d 0.691 (0.691)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.32 (  0.32)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.32 (  0.32)	Loss_d 0.691 (0.691)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.32 (  0.32)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 33/  1]	epoch_time 0.0430 (0.0444)	validation_time 0.0004 (0.0006)	train_time 0.0426 (0.0437)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.4200000052154064, 0.6540000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.57it/s] 15%|#5        | 4/26 [00:00<00:01, 16.15it/s] 27%|##6       | 7/26 [00:00<00:00, 21.44it/s] 42%|####2     | 11/26 [00:00<00:00, 25.36it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.34it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.46it/s] 88%|########8 | 23/26 [00:00<00:00, 29.35it/s]100%|##########| 26/26 [00:01<00:00, 24.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 200
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 200
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 200
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 200
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 200
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 200
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 200
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 200
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 200
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 200
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 200
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 200
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 200
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 200
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 200
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 200
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 200
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 200
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 200
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 200
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 200
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 200
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 200
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 200
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 200
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 200
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
final projection at end of training
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.64 (  0.64)	train_acc   0.48 (  0.44)	train_minacc   0.62 (  0.66)	train_majacc   0.45 (  0.40)	train_corr   0.00 (  0.00)	l1 4.7903 (4.7906)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.06it/s] 31%|###       | 8/26 [00:00<00:00, 33.58it/s]                                               31%|###       | 8/26 [00:00<00:00, 33.58it/s] 50%|#####     | 13/26 [00:00<00:00, 38.32it/s] 69%|######9   | 18/26 [00:00<00:00, 41.71it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.71it/s] 88%|########8 | 23/26 [00:00<00:00, 42.96it/s]100%|##########| 26/26 [00:00<00:00, 36.96it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.40 (  0.40)	test_minacc   0.63 (  0.63)	test_majacc   0.35 (  0.35)	Loss_d 0.693 (0.693)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.35 (  0.35)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.39 (  0.43)	test_minacc   0.62 (  0.70)	test_majacc   0.36 (  0.38)	Loss_d 0.694 (0.693)	test_acc_d   0.39 (  0.43)	test_minacc_d   0.62 (  0.70)	test_majacc_d   0.36 (  0.38)	test_corr_d  -0.11 ( -0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.42)	test_minacc   0.75 (  0.70)	test_majacc   0.39 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.42)	test_minacc_d   0.75 (  0.70)	test_majacc_d   0.39 (  0.37)	test_corr_d  -0.00 ( -0.09)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.42)	test_minacc   0.62 (  0.70)	test_majacc   0.45 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.42)	test_minacc_d   0.62 (  0.70)	test_majacc_d   0.45 (  0.37)	test_corr_d  -0.05 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.93it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.66 (  0.66)	test_minacc   0.70 (  0.70)	test_majacc   0.30 (  0.30)	Loss_d 0.691 (0.691)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.30 (  0.30)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.66 (  0.66)	test_minacc   0.70 (  0.70)	test_majacc   0.30 (  0.30)	Loss_d 0.691 (0.691)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.30 (  0.30)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 34/  1]	epoch_time 0.0428 (0.0443)	validation_time 0.0004 (0.0006)	train_time 0.0424 (0.0437)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.4184000051021576, 0.6580000519752502)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.48it/s] 12%|#1        | 3/26 [00:00<00:01, 12.10it/s] 23%|##3       | 6/26 [00:00<00:01, 18.82it/s] 35%|###4      | 9/26 [00:00<00:00, 22.62it/s] 46%|####6     | 12/26 [00:00<00:00, 24.89it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.84it/s] 69%|######9   | 18/26 [00:00<00:00, 26.94it/s] 81%|########  | 21/26 [00:00<00:00, 27.52it/s] 96%|#########6| 25/26 [00:01<00:00, 28.58it/s]100%|##########| 26/26 [00:01<00:00, 23.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 200
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 200
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 200
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 200
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 200
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 200
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 200
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 200
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 200
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 200
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 200
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 200
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 200
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 200
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 200
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 200
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 200
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 200
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 200
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 200
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 200
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 200
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 200
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 200
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 200
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 200
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.63 (  0.63)	train_acc   0.47 (  0.44)	train_minacc   0.62 (  0.67)	train_majacc   0.45 (  0.40)	train_corr   0.00 (  0.00)	l1 4.7906 (4.7909)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.95it/s] 23%|##3       | 6/26 [00:00<00:00, 20.20it/s]                                               23%|##3       | 6/26 [00:00<00:00, 20.20it/s] 42%|####2     | 11/26 [00:00<00:00, 28.89it/s] 62%|######1   | 16/26 [00:00<00:00, 34.93it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.93it/s] 81%|########  | 21/26 [00:00<00:00, 35.00it/s]100%|##########| 26/26 [00:00<00:00, 38.61it/s]100%|##########| 26/26 [00:00<00:00, 29.51it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.40 (  0.40)	test_minacc   0.63 (  0.63)	test_majacc   0.35 (  0.35)	Loss_d 0.693 (0.693)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.35 (  0.35)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.38 (  0.43)	test_minacc   0.62 (  0.70)	test_majacc   0.35 (  0.38)	Loss_d 0.694 (0.693)	test_acc_d   0.38 (  0.43)	test_minacc_d   0.62 (  0.70)	test_majacc_d   0.35 (  0.38)	test_corr_d  -0.12 ( -0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.42)	test_minacc   0.75 (  0.70)	test_majacc   0.39 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.42)	test_minacc_d   0.75 (  0.70)	test_majacc_d   0.39 (  0.37)	test_corr_d  -0.01 ( -0.09)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.42)	test_minacc   0.62 (  0.70)	test_majacc   0.45 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.42)	test_minacc_d   0.62 (  0.70)	test_majacc_d   0.45 (  0.37)	test_corr_d  -0.06 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.38it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.29 (  0.29)	Loss_d 0.691 (0.691)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.29 (  0.29)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.29 (  0.29)	Loss_d 0.691 (0.691)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.29 (  0.29)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 35/  1]	epoch_time 0.0421 (0.0442)	validation_time 0.0003 (0.0005)	train_time 0.0418 (0.0436)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.41520000582933425, 0.6520000100135803)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.20it/s] 15%|#5        | 4/26 [00:00<00:01, 17.10it/s] 27%|##6       | 7/26 [00:00<00:00, 21.56it/s] 38%|###8      | 10/26 [00:00<00:00, 24.46it/s] 50%|#####     | 13/26 [00:00<00:00, 25.34it/s] 62%|######1   | 16/26 [00:00<00:00, 25.95it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.15it/s] 88%|########8 | 23/26 [00:00<00:00, 27.67it/s]100%|##########| 26/26 [00:01<00:00, 28.06it/s]100%|##########| 26/26 [00:01<00:00, 23.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 200
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 200
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 200
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 200
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 200
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 200
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 200
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 200
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 200
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 200
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 200
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 200
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 200
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 200
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 200
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 200
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 200
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 200
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 200
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 200
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 200
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 200
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 200
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 200
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 200
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 200
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
final projection at end of training
dim_v 512
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.63 (  0.63)	train_acc   0.47 (  0.44)	train_minacc   0.62 (  0.66)	train_majacc   0.44 (  0.40)	train_corr   0.00 (  0.00)	l1 4.7908 (4.7912)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.73it/s] 27%|##6       | 7/26 [00:00<00:00, 31.21it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.21it/s] 46%|####6     | 12/26 [00:00<00:00, 36.92it/s] 65%|######5   | 17/26 [00:00<00:00, 39.99it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.99it/s] 85%|########4 | 22/26 [00:00<00:00, 39.16it/s]100%|##########| 26/26 [00:00<00:00, 36.20it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.41 (  0.41)	test_minacc   0.62 (  0.62)	test_majacc   0.37 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.39 (  0.42)	test_minacc   0.66 (  0.70)	test_majacc   0.35 (  0.38)	Loss_d 0.694 (0.693)	test_acc_d   0.39 (  0.42)	test_minacc_d   0.66 (  0.70)	test_majacc_d   0.35 (  0.38)	test_corr_d  -0.12 ( -0.09)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.42)	test_minacc   0.77 (  0.70)	test_majacc   0.37 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.42)	test_minacc_d   0.77 (  0.70)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.01 ( -0.09)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.41)	test_minacc   0.62 (  0.70)	test_majacc   0.44 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.41)	test_minacc_d   0.62 (  0.70)	test_majacc_d   0.44 (  0.37)	test_corr_d  -0.06 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.99it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.29 (  0.29)	Loss_d 0.691 (0.691)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.29 (  0.29)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.29 (  0.29)	Loss_d 0.691 (0.691)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.29 (  0.29)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 36/  1]	epoch_time 0.0418 (0.0442)	validation_time 0.0005 (0.0005)	train_time 0.0413 (0.0436)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.41470000565052034, 0.6530000567436218)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.67it/s] 19%|#9        | 5/26 [00:00<00:01, 19.52it/s] 35%|###4      | 9/26 [00:00<00:00, 24.04it/s] 46%|####6     | 12/26 [00:00<00:00, 25.84it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.62it/s] 69%|######9   | 18/26 [00:00<00:00, 27.58it/s] 81%|########  | 21/26 [00:00<00:00, 27.96it/s] 92%|#########2| 24/26 [00:00<00:00, 28.53it/s]100%|##########| 26/26 [00:01<00:00, 24.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 200
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 200
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 200
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 200
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 200
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 200
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 200
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 200
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 200
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 200
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 200
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 200
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 200
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 200
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 200
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 200
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 200
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 200
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 200
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 200
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 200
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 200
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 200
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 200
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 200
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 200
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
final projection at end of training
dim_v 512
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.63 (  0.63)	train_acc   0.46 (  0.43)	train_minacc   0.62 (  0.66)	train_majacc   0.44 (  0.39)	train_corr   0.00 (  0.00)	l1 4.7911 (4.7914)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.91it/s] 23%|##3       | 6/26 [00:00<00:00, 22.65it/s] 35%|###4      | 9/26 [00:00<00:00, 25.45it/s]                                               35%|###4      | 9/26 [00:00<00:00, 25.45it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.37it/s] 69%|######9   | 18/26 [00:00<00:00, 35.25it/s]                                                69%|######9   | 18/26 [00:00<00:00, 35.25it/s] 88%|########8 | 23/26 [00:00<00:00, 38.60it/s]100%|##########| 26/26 [00:00<00:00, 31.58it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.41 (  0.41)	test_minacc   0.62 (  0.62)	test_majacc   0.37 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.38 (  0.42)	test_minacc   0.66 (  0.70)	test_majacc   0.34 (  0.37)	Loss_d 0.694 (0.693)	test_acc_d   0.38 (  0.42)	test_minacc_d   0.66 (  0.70)	test_majacc_d   0.34 (  0.37)	test_corr_d  -0.12 ( -0.09)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.42)	test_minacc   0.77 (  0.70)	test_majacc   0.37 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.77 (  0.70)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.01 ( -0.09)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.41)	test_minacc   0.62 (  0.69)	test_majacc   0.44 (  0.36)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.41)	test_minacc_d   0.62 (  0.69)	test_majacc_d   0.44 (  0.36)	test_corr_d  -0.06 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.34it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.28 (  0.28)	Loss_d 0.691 (0.691)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.28 (  0.28)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.28 (  0.28)	Loss_d 0.691 (0.691)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.28 (  0.28)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 37/  1]	epoch_time 0.0455 (0.0442)	validation_time 0.0004 (0.0005)	train_time 0.0451 (0.0436)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.4134000055193901, 0.6510000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.42it/s] 15%|#5        | 4/26 [00:00<00:01, 20.68it/s] 27%|##6       | 7/26 [00:00<00:00, 24.06it/s] 38%|###8      | 10/26 [00:00<00:00, 26.13it/s] 50%|#####     | 13/26 [00:00<00:00, 27.02it/s] 62%|######1   | 16/26 [00:00<00:00, 27.89it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.15it/s] 88%|########8 | 23/26 [00:00<00:00, 28.76it/s]100%|##########| 26/26 [00:01<00:00, 25.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 200
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 200
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 200
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 200
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 200
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 200
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 200
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 200
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 200
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 200
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 200
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 200
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 200
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 200
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 200
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 200
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 200
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 200
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 200
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 200
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 200
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 200
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 200
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 200
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 200
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 200
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
final projection at end of training
dim_v 512
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.63 (  0.63)	train_acc   0.46 (  0.43)	train_minacc   0.62 (  0.66)	train_majacc   0.44 (  0.39)	train_corr   0.00 (  0.00)	l1 4.7913 (4.7917)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.45it/s] 23%|##3       | 6/26 [00:00<00:00, 24.77it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.77it/s] 42%|####2     | 11/26 [00:00<00:00, 33.34it/s] 62%|######1   | 16/26 [00:00<00:00, 37.97it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.97it/s] 81%|########  | 21/26 [00:00<00:00, 38.10it/s]100%|##########| 26/26 [00:00<00:00, 41.20it/s]100%|##########| 26/26 [00:00<00:00, 32.77it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.62 (  0.62)	test_majacc   0.38 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.38 (  0.42)	test_minacc   0.66 (  0.69)	test_majacc   0.34 (  0.37)	Loss_d 0.694 (0.693)	test_acc_d   0.38 (  0.42)	test_minacc_d   0.66 (  0.69)	test_majacc_d   0.34 (  0.37)	test_corr_d  -0.12 ( -0.09)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.41)	test_minacc   0.75 (  0.69)	test_majacc   0.37 (  0.36)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.41)	test_minacc_d   0.75 (  0.69)	test_majacc_d   0.37 (  0.36)	test_corr_d  -0.01 ( -0.09)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.41)	test_minacc   0.59 (  0.69)	test_majacc   0.44 (  0.36)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.41)	test_minacc_d   0.59 (  0.69)	test_majacc_d   0.44 (  0.36)	test_corr_d  -0.06 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.78it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.28 (  0.28)	Loss_d 0.692 (0.692)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.28 (  0.28)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.28 (  0.28)	Loss_d 0.692 (0.692)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.28 (  0.28)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 38/  1]	epoch_time 0.0426 (0.0442)	validation_time 0.0008 (0.0005)	train_time 0.0418 (0.0436)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.41210000559687615, 0.6530000567436218)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:12,  2.05it/s] 15%|#5        | 4/26 [00:00<00:02,  8.35it/s] 27%|##6       | 7/26 [00:00<00:01, 13.48it/s] 42%|####2     | 11/26 [00:00<00:00, 18.71it/s] 54%|#####3    | 14/26 [00:00<00:00, 21.43it/s] 65%|######5   | 17/26 [00:01<00:00, 23.20it/s] 77%|#######6  | 20/26 [00:01<00:00, 24.51it/s] 92%|#########2| 24/26 [00:01<00:00, 26.52it/s]100%|##########| 26/26 [00:01<00:00, 18.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 200
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 200
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 200
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 200
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 200
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 200
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 200
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 200
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 200
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 200
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 200
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 200
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 200
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 200
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 200
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 200
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 200
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 200
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 200
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 200
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 200
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 200
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 200
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 200
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 200
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 200
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
final projection at end of training
dim_v 512
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.63 (  0.63)	train_acc   0.46 (  0.43)	train_minacc   0.59 (  0.66)	train_majacc   0.44 (  0.39)	train_corr   0.00 (  0.00)	l1 4.7915 (4.7918)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 19.44it/s] 31%|###       | 8/26 [00:00<00:00, 33.76it/s]                                               31%|###       | 8/26 [00:00<00:00, 33.76it/s] 50%|#####     | 13/26 [00:00<00:00, 39.13it/s] 73%|#######3  | 19/26 [00:00<00:00, 41.76it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 41.76it/s] 92%|#########2| 24/26 [00:00<00:00, 42.55it/s]100%|##########| 26/26 [00:00<00:00, 37.17it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.60 (  0.60)	test_majacc   0.38 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.38 (  0.42)	test_minacc   0.66 (  0.69)	test_majacc   0.34 (  0.37)	Loss_d 0.694 (0.693)	test_acc_d   0.38 (  0.42)	test_minacc_d   0.66 (  0.69)	test_majacc_d   0.34 (  0.37)	test_corr_d  -0.12 ( -0.09)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.41)	test_minacc   0.73 (  0.68)	test_majacc   0.37 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.41)	test_minacc_d   0.73 (  0.68)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.02 ( -0.09)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.41)	test_minacc   0.59 (  0.68)	test_majacc   0.44 (  0.36)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.41)	test_minacc_d   0.59 (  0.68)	test_majacc_d   0.44 (  0.36)	test_corr_d  -0.06 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.29it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.28 (  0.28)	Loss_d 0.692 (0.692)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.28 (  0.28)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.28 (  0.28)	Loss_d 0.692 (0.692)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.28 (  0.28)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 39/  1]	epoch_time 0.0456 (0.0442)	validation_time 0.0004 (0.0005)	train_time 0.0452 (0.0436)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.4119000067710876, 0.6510000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:09,  2.56it/s] 19%|#9        | 5/26 [00:00<00:01, 11.63it/s] 35%|###4      | 9/26 [00:00<00:00, 17.65it/s] 50%|#####     | 13/26 [00:00<00:00, 21.52it/s] 62%|######1   | 16/26 [00:00<00:00, 23.61it/s] 73%|#######3  | 19/26 [00:00<00:00, 25.18it/s] 88%|########8 | 23/26 [00:01<00:00, 27.16it/s]100%|##########| 26/26 [00:01<00:00, 20.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 200
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 200
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 200
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 200
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 200
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 200
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 200
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 200
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 200
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 200
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 200
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 200
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 200
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 200
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 200
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 200
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 200
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 200
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 200
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 200
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 200
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 200
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 200
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 200
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 200
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 200
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.62 (  0.62)	train_acc   0.46 (  0.43)	train_minacc   0.59 (  0.66)	train_majacc   0.44 (  0.39)	train_corr   0.00 (  0.00)	l1 4.7917 (4.7920)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.94it/s] 19%|#9        | 5/26 [00:00<00:01, 18.44it/s] 38%|###8      | 10/26 [00:00<00:00, 28.74it/s]                                                38%|###8      | 10/26 [00:00<00:00, 28.74it/s] 58%|#####7    | 15/26 [00:00<00:00, 31.26it/s] 77%|#######6  | 20/26 [00:00<00:00, 35.82it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 35.82it/s] 96%|#########6| 25/26 [00:00<00:00, 39.41it/s]100%|##########| 26/26 [00:00<00:00, 30.34it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.41 (  0.41)	test_minacc   0.59 (  0.59)	test_majacc   0.38 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.38 (  0.42)	test_minacc   0.66 (  0.68)	test_majacc   0.34 (  0.37)	Loss_d 0.694 (0.693)	test_acc_d   0.38 (  0.42)	test_minacc_d   0.66 (  0.68)	test_majacc_d   0.34 (  0.37)	test_corr_d  -0.13 ( -0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.41)	test_minacc   0.73 (  0.68)	test_majacc   0.36 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.41)	test_minacc_d   0.73 (  0.68)	test_majacc_d   0.36 (  0.37)	test_corr_d  -0.02 ( -0.09)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.41)	test_minacc   0.59 (  0.67)	test_majacc   0.44 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.41)	test_minacc_d   0.59 (  0.67)	test_majacc_d   0.44 (  0.37)	test_corr_d  -0.06 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.89it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.30 (  0.30)	Loss_d 0.692 (0.692)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.30 (  0.30)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.30 (  0.30)	Loss_d 0.692 (0.692)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.30 (  0.30)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 40/  1]	epoch_time 0.0459 (0.0443)	validation_time 0.0003 (0.0005)	train_time 0.0456 (0.0436)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.41210000655055046, 0.6500000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.01it/s] 12%|#1        | 3/26 [00:00<00:01, 12.58it/s] 23%|##3       | 6/26 [00:00<00:01, 18.85it/s] 35%|###4      | 9/26 [00:00<00:00, 22.30it/s] 46%|####6     | 12/26 [00:00<00:00, 24.46it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.95it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.35it/s] 88%|########8 | 23/26 [00:00<00:00, 28.36it/s]100%|##########| 26/26 [00:01<00:00, 23.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 200
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 200
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 200
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 200
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 200
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 200
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 200
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 200
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 200
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 200
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 200
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 200
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 200
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 200
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 200
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 200
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 200
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 200
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 200
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 200
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 200
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 200
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 200
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 200
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 200
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 200
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
final projection at end of training
dim_v 512
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.62 (  0.62)	train_acc   0.45 (  0.43)	train_minacc   0.59 (  0.66)	train_majacc   0.43 (  0.39)	train_corr   0.00 (  0.00)	l1 4.7919 (4.7922)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.42it/s] 23%|##3       | 6/26 [00:00<00:00, 30.66it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.66it/s] 42%|####2     | 11/26 [00:00<00:00, 37.00it/s] 62%|######1   | 16/26 [00:00<00:00, 41.24it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.24it/s] 81%|########  | 21/26 [00:00<00:00, 39.42it/s]100%|##########| 26/26 [00:00<00:00, 42.29it/s]100%|##########| 26/26 [00:00<00:00, 35.75it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.41 (  0.41)	test_minacc   0.59 (  0.59)	test_majacc   0.38 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.37 (  0.42)	test_minacc   0.68 (  0.69)	test_majacc   0.33 (  0.37)	Loss_d 0.694 (0.693)	test_acc_d   0.37 (  0.42)	test_minacc_d   0.68 (  0.69)	test_majacc_d   0.33 (  0.37)	test_corr_d  -0.13 ( -0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.41)	test_minacc   0.73 (  0.68)	test_majacc   0.35 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.41)	test_minacc_d   0.73 (  0.68)	test_majacc_d   0.35 (  0.37)	test_corr_d  -0.02 ( -0.09)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.41)	test_minacc   0.59 (  0.68)	test_majacc   0.43 (  0.36)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.41)	test_minacc_d   0.59 (  0.68)	test_majacc_d   0.43 (  0.36)	test_corr_d  -0.06 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.24it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.29 (  0.29)	Loss_d 0.692 (0.692)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.29 (  0.29)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.29 (  0.29)	Loss_d 0.692 (0.692)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.29 (  0.29)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 41/  1]	epoch_time 0.0425 (0.0442)	validation_time 0.0003 (0.0005)	train_time 0.0422 (0.0436)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.4112000069320202, 0.6520000100135803)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.70it/s] 19%|#9        | 5/26 [00:00<00:01, 20.38it/s] 31%|###       | 8/26 [00:00<00:00, 23.83it/s] 42%|####2     | 11/26 [00:00<00:00, 25.72it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.40it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.43it/s] 88%|########8 | 23/26 [00:00<00:00, 29.24it/s]100%|##########| 26/26 [00:01<00:00, 25.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 200
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 200
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 200
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 200
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 200
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 200
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 200
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 200
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 200
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 200
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 200
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 200
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 200
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 200
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 200
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 200
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 200
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 200
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 200
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 200
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 200
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 200
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 200
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 200
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 200
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 200
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
final projection at end of training
dim_v 512
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.62 (  0.62)	train_acc   0.45 (  0.43)	train_minacc   0.59 (  0.66)	train_majacc   0.42 (  0.39)	train_corr   0.00 (  0.00)	l1 4.7921 (4.7924)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.49it/s] 31%|###       | 8/26 [00:00<00:00, 28.52it/s]                                               31%|###       | 8/26 [00:00<00:00, 28.52it/s] 50%|#####     | 13/26 [00:00<00:00, 33.07it/s] 69%|######9   | 18/26 [00:00<00:00, 37.62it/s]                                                69%|######9   | 18/26 [00:00<00:00, 37.62it/s] 88%|########8 | 23/26 [00:00<00:00, 40.48it/s]100%|##########| 26/26 [00:00<00:00, 32.33it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.59 (  0.59)	test_majacc   0.38 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.38 (  0.42)	test_minacc   0.70 (  0.69)	test_majacc   0.33 (  0.37)	Loss_d 0.694 (0.693)	test_acc_d   0.38 (  0.42)	test_minacc_d   0.70 (  0.69)	test_majacc_d   0.33 (  0.37)	test_corr_d  -0.13 ( -0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.41)	test_minacc   0.73 (  0.68)	test_majacc   0.36 (  0.36)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.41)	test_minacc_d   0.73 (  0.68)	test_majacc_d   0.36 (  0.36)	test_corr_d  -0.02 ( -0.09)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.41)	test_minacc   0.59 (  0.68)	test_majacc   0.42 (  0.36)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.41)	test_minacc_d   0.59 (  0.68)	test_majacc_d   0.42 (  0.36)	test_corr_d  -0.06 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.51it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.29 (  0.29)	Loss_d 0.692 (0.692)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.29 (  0.29)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.29 (  0.29)	Loss_d 0.692 (0.692)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.29 (  0.29)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 42/  1]	epoch_time 0.0417 (0.0442)	validation_time 0.0004 (0.0005)	train_time 0.0413 (0.0436)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.4103000067770481, 0.6540000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  3.12it/s] 15%|#5        | 4/26 [00:00<00:01, 11.04it/s] 27%|##6       | 7/26 [00:00<00:01, 16.51it/s] 38%|###8      | 10/26 [00:00<00:00, 20.12it/s] 50%|#####     | 13/26 [00:00<00:00, 22.67it/s] 62%|######1   | 16/26 [00:00<00:00, 24.79it/s] 73%|#######3  | 19/26 [00:00<00:00, 25.89it/s] 88%|########8 | 23/26 [00:01<00:00, 27.46it/s]100%|##########| 26/26 [00:01<00:00, 20.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 200
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 200
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 200
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 200
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 200
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 200
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 200
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 200
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 200
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 200
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 200
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 200
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 200
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 200
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 200
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 200
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 200
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 200
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 200
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 200
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 200
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 200
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 200
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 200
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 200
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 200
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
final projection at end of training
dim_v 512
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.62 (  0.62)	train_acc   0.45 (  0.43)	train_minacc   0.59 (  0.66)	train_majacc   0.42 (  0.39)	train_corr   0.00 (  0.00)	l1 4.7923 (4.7926)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 11.15it/s] 27%|##6       | 7/26 [00:00<00:00, 27.47it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.47it/s] 46%|####6     | 12/26 [00:00<00:00, 35.10it/s] 65%|######5   | 17/26 [00:00<00:00, 39.37it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.37it/s] 85%|########4 | 22/26 [00:00<00:00, 38.80it/s]100%|##########| 26/26 [00:00<00:00, 34.52it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.57 (  0.57)	test_majacc   0.39 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.38 (  0.42)	test_minacc   0.70 (  0.69)	test_majacc   0.33 (  0.37)	Loss_d 0.694 (0.693)	test_acc_d   0.38 (  0.42)	test_minacc_d   0.70 (  0.69)	test_majacc_d   0.33 (  0.37)	test_corr_d  -0.13 ( -0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.41 (  0.41)	test_minacc   0.73 (  0.68)	test_majacc   0.35 (  0.36)	Loss_d 0.693 (0.693)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.73 (  0.68)	test_majacc_d   0.35 (  0.36)	test_corr_d  -0.03 ( -0.09)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.41)	test_minacc   0.59 (  0.68)	test_majacc   0.42 (  0.36)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.41)	test_minacc_d   0.59 (  0.68)	test_majacc_d   0.42 (  0.36)	test_corr_d  -0.06 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.88it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.28 (  0.28)	Loss_d 0.692 (0.692)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.28 (  0.28)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.28 (  0.28)	Loss_d 0.692 (0.692)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.28 (  0.28)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 43/  1]	epoch_time 0.0445 (0.0442)	validation_time 0.0003 (0.0005)	train_time 0.0441 (0.0436)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.40960000681877134, 0.6520000100135803)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.34it/s] 15%|#5        | 4/26 [00:00<00:01, 13.30it/s] 27%|##6       | 7/26 [00:00<00:01, 18.67it/s] 38%|###8      | 10/26 [00:00<00:00, 21.80it/s] 50%|#####     | 13/26 [00:00<00:00, 24.13it/s] 65%|######5   | 17/26 [00:00<00:00, 26.18it/s] 81%|########  | 21/26 [00:00<00:00, 27.53it/s] 96%|#########6| 25/26 [00:01<00:00, 28.62it/s]100%|##########| 26/26 [00:01<00:00, 22.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 200
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 200
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 200
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 200
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 200
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 200
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 200
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 200
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 200
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 200
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 200
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 200
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 200
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 200
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 200
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 200
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 200
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 200
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 200
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 200
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 200
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 200
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 200
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 200
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 200
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 200
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
final projection at end of training
dim_v 512
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.62 (  0.62)	train_acc   0.46 (  0.43)	train_minacc   0.59 (  0.66)	train_majacc   0.44 (  0.39)	train_corr   0.00 (  0.00)	l1 4.7924 (4.7927)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.73it/s] 27%|##6       | 7/26 [00:00<00:00, 30.03it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.03it/s] 46%|####6     | 12/26 [00:00<00:00, 35.14it/s] 65%|######5   | 17/26 [00:00<00:00, 39.14it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.14it/s] 85%|########4 | 22/26 [00:00<00:00, 40.94it/s]100%|##########| 26/26 [00:00<00:00, 34.79it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.57 (  0.57)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.37 (  0.42)	test_minacc   0.70 (  0.69)	test_majacc   0.33 (  0.37)	Loss_d 0.694 (0.693)	test_acc_d   0.37 (  0.42)	test_minacc_d   0.70 (  0.69)	test_majacc_d   0.33 (  0.37)	test_corr_d  -0.13 ( -0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.41 (  0.41)	test_minacc   0.75 (  0.68)	test_majacc   0.35 (  0.36)	Loss_d 0.693 (0.693)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.75 (  0.68)	test_majacc_d   0.35 (  0.36)	test_corr_d  -0.03 ( -0.09)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.41)	test_minacc   0.59 (  0.68)	test_majacc   0.44 (  0.36)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.41)	test_minacc_d   0.59 (  0.68)	test_majacc_d   0.44 (  0.36)	test_corr_d  -0.06 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.43it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.28 (  0.28)	Loss_d 0.692 (0.692)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.28 (  0.28)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.28 (  0.28)	Loss_d 0.692 (0.692)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.28 (  0.28)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 44/  1]	epoch_time 0.0416 (0.0441)	validation_time 0.0004 (0.0005)	train_time 0.0412 (0.0435)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.4105000066459179, 0.6490000486373901)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.71it/s] 15%|#5        | 4/26 [00:00<00:01, 18.76it/s] 27%|##6       | 7/26 [00:00<00:00, 22.73it/s] 38%|###8      | 10/26 [00:00<00:00, 25.23it/s] 50%|#####     | 13/26 [00:00<00:00, 25.84it/s] 65%|######5   | 17/26 [00:00<00:00, 27.65it/s] 81%|########  | 21/26 [00:00<00:00, 28.70it/s] 96%|#########6| 25/26 [00:00<00:00, 29.69it/s]100%|##########| 26/26 [00:01<00:00, 25.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 200
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 200
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 200
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 200
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 200
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 200
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 200
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 200
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 200
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 200
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 200
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 200
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 200
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 200
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 200
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 200
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 200
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 200
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 200
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 200
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 200
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 200
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 200
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 200
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 200
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 200
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.61 (  0.61)	train_acc   0.46 (  0.43)	train_minacc   0.59 (  0.66)	train_majacc   0.44 (  0.39)	train_corr   0.00 (  0.00)	l1 4.7926 (4.7929)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.64it/s] 27%|##6       | 7/26 [00:00<00:00, 32.82it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.82it/s] 46%|####6     | 12/26 [00:00<00:00, 38.97it/s] 65%|######5   | 17/26 [00:00<00:00, 38.72it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.72it/s] 85%|########4 | 22/26 [00:00<00:00, 40.68it/s]100%|##########| 26/26 [00:00<00:00, 36.33it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.57 (  0.57)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.38 (  0.42)	test_minacc   0.70 (  0.69)	test_majacc   0.33 (  0.38)	Loss_d 0.694 (0.693)	test_acc_d   0.38 (  0.42)	test_minacc_d   0.70 (  0.69)	test_majacc_d   0.33 (  0.38)	test_corr_d  -0.13 ( -0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.41)	test_minacc   0.75 (  0.68)	test_majacc   0.35 (  0.36)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.41)	test_minacc_d   0.75 (  0.68)	test_majacc_d   0.35 (  0.36)	test_corr_d  -0.03 ( -0.09)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.41)	test_minacc   0.59 (  0.68)	test_majacc   0.43 (  0.36)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.41)	test_minacc_d   0.59 (  0.68)	test_majacc_d   0.43 (  0.36)	test_corr_d  -0.06 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.74it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.28 (  0.28)	Loss_d 0.692 (0.692)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.28 (  0.28)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.28 (  0.28)	Loss_d 0.692 (0.692)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.28 (  0.28)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 45/  1]	epoch_time 0.0432 (0.0441)	validation_time 0.0004 (0.0005)	train_time 0.0428 (0.0435)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.41110000598430635, 0.6480000019073486)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.53it/s] 23%|##3       | 6/26 [00:00<00:00, 24.75it/s] 38%|###8      | 10/26 [00:00<00:00, 27.62it/s] 50%|#####     | 13/26 [00:00<00:00, 27.57it/s] 65%|######5   | 17/26 [00:00<00:00, 28.47it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.66it/s] 88%|########8 | 23/26 [00:00<00:00, 28.37it/s]100%|##########| 26/26 [00:00<00:00, 28.71it/s]100%|##########| 26/26 [00:00<00:00, 26.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 200
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 200
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 200
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 200
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 200
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 200
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 200
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 200
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 200
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 200
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 200
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 200
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 200
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 200
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 200
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 200
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 200
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 200
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 200
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 200
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 200
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 200
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 200
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 200
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 200
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 200
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
final projection at end of training
dim_v 512
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.61 (  0.61)	train_acc   0.46 (  0.43)	train_minacc   0.56 (  0.66)	train_majacc   0.44 (  0.39)	train_corr   0.00 (  0.00)	l1 4.7927 (4.7930)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.64it/s] 23%|##3       | 6/26 [00:00<00:00, 25.11it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.11it/s] 42%|####2     | 11/26 [00:00<00:00, 33.44it/s] 62%|######1   | 16/26 [00:00<00:00, 38.49it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.49it/s] 81%|########  | 21/26 [00:00<00:00, 38.07it/s]100%|##########| 26/26 [00:00<00:00, 41.21it/s]100%|##########| 26/26 [00:00<00:00, 32.93it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.57 (  0.57)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.38 (  0.42)	test_minacc   0.72 (  0.69)	test_majacc   0.33 (  0.38)	Loss_d 0.694 (0.693)	test_acc_d   0.38 (  0.42)	test_minacc_d   0.72 (  0.69)	test_majacc_d   0.33 (  0.38)	test_corr_d  -0.13 ( -0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.41 (  0.41)	test_minacc   0.75 (  0.68)	test_majacc   0.35 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.75 (  0.68)	test_majacc_d   0.35 (  0.37)	test_corr_d  -0.03 ( -0.09)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.41)	test_minacc   0.56 (  0.68)	test_majacc   0.44 (  0.36)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.41)	test_minacc_d   0.56 (  0.68)	test_majacc_d   0.44 (  0.36)	test_corr_d  -0.06 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.65it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.28 (  0.28)	Loss_d 0.692 (0.692)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.28 (  0.28)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.28 (  0.28)	Loss_d 0.692 (0.692)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.28 (  0.28)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 46/  1]	epoch_time 0.0462 (0.0441)	validation_time 0.0004 (0.0005)	train_time 0.0458 (0.0435)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.411600005954504, 0.6510000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.50it/s] 15%|#5        | 4/26 [00:00<00:01, 18.82it/s] 27%|##6       | 7/26 [00:00<00:00, 23.16it/s] 42%|####2     | 11/26 [00:00<00:00, 26.34it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.93it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.75it/s] 88%|########8 | 23/26 [00:00<00:00, 29.37it/s]100%|##########| 26/26 [00:01<00:00, 25.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 200
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 200
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 200
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 200
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 200
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 200
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 200
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 200
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 200
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 200
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 200
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 200
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 200
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 200
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 200
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 200
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 200
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 200
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 200
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 200
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 200
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 200
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 200
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 200
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 200
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 200
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
final projection at end of training
dim_v 512
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.61 (  0.61)	train_acc   0.46 (  0.43)	train_minacc   0.59 (  0.65)	train_majacc   0.44 (  0.39)	train_corr   0.00 (  0.00)	l1 4.7929 (4.7932)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.40it/s] 23%|##3       | 6/26 [00:00<00:00, 27.45it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.45it/s] 42%|####2     | 11/26 [00:00<00:00, 36.06it/s] 62%|######1   | 16/26 [00:00<00:00, 39.16it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.16it/s] 81%|########  | 21/26 [00:00<00:00, 40.62it/s]100%|##########| 26/26 [00:00<00:00, 43.11it/s]100%|##########| 26/26 [00:00<00:00, 34.96it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.57 (  0.57)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.38 (  0.43)	test_minacc   0.72 (  0.69)	test_majacc   0.33 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.38 (  0.43)	test_minacc_d   0.72 (  0.69)	test_majacc_d   0.33 (  0.38)	test_corr_d  -0.13 ( -0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.41 (  0.41)	test_minacc   0.75 (  0.68)	test_majacc   0.34 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.75 (  0.68)	test_majacc_d   0.34 (  0.37)	test_corr_d  -0.03 ( -0.09)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.41)	test_minacc   0.59 (  0.68)	test_majacc   0.44 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.41)	test_minacc_d   0.59 (  0.68)	test_majacc_d   0.44 (  0.37)	test_corr_d  -0.06 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.98it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.28 (  0.28)	Loss_d 0.692 (0.692)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.28 (  0.28)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.28 (  0.28)	Loss_d 0.692 (0.692)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.28 (  0.28)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 47/  1]	epoch_time 0.0424 (0.0441)	validation_time 0.0004 (0.0005)	train_time 0.0420 (0.0435)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.41220000654459, 0.6520000100135803)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.00it/s] 12%|#1        | 3/26 [00:00<00:01, 12.68it/s] 23%|##3       | 6/26 [00:00<00:01, 19.14it/s] 35%|###4      | 9/26 [00:00<00:00, 22.63it/s] 46%|####6     | 12/26 [00:00<00:00, 25.08it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.48it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.92it/s] 88%|########8 | 23/26 [00:00<00:00, 28.67it/s]100%|##########| 26/26 [00:01<00:00, 23.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 200
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 200
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 200
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 200
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 200
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 200
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 200
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 200
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 200
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 200
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 200
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 200
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 200
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 200
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 200
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 200
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 200
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 200
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 200
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 200
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 200
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 200
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 200
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 200
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 200
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 200
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
final projection at end of training
dim_v 512
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.61 (  0.61)	train_acc   0.45 (  0.43)	train_minacc   0.59 (  0.66)	train_majacc   0.43 (  0.39)	train_corr   0.00 (  0.00)	l1 4.7930 (4.7933)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.83it/s] 27%|##6       | 7/26 [00:00<00:01, 18.77it/s]                                               27%|##6       | 7/26 [00:00<00:01, 18.77it/s] 50%|#####     | 13/26 [00:00<00:00, 28.47it/s] 69%|######9   | 18/26 [00:00<00:00, 33.51it/s]                                                69%|######9   | 18/26 [00:00<00:00, 33.51it/s] 88%|########8 | 23/26 [00:00<00:00, 36.62it/s]100%|##########| 26/26 [00:00<00:00, 28.06it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.57 (  0.57)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.38 (  0.43)	test_minacc   0.72 (  0.69)	test_majacc   0.33 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.38 (  0.43)	test_minacc_d   0.72 (  0.69)	test_majacc_d   0.33 (  0.38)	test_corr_d  -0.13 ( -0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.41 (  0.42)	test_minacc   0.75 (  0.68)	test_majacc   0.34 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.41 (  0.42)	test_minacc_d   0.75 (  0.68)	test_majacc_d   0.34 (  0.37)	test_corr_d  -0.03 ( -0.09)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.41)	test_minacc   0.59 (  0.68)	test_majacc   0.43 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.41)	test_minacc_d   0.59 (  0.68)	test_majacc_d   0.43 (  0.37)	test_corr_d  -0.06 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 56.61it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.28 (  0.28)	Loss_d 0.692 (0.692)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.28 (  0.28)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.28 (  0.28)	Loss_d 0.692 (0.692)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.28 (  0.28)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 48/  1]	epoch_time 0.0427 (0.0441)	validation_time 0.0004 (0.0005)	train_time 0.0422 (0.0435)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.4125000056922436, 0.6510000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.38it/s] 15%|#5        | 4/26 [00:00<00:01, 19.55it/s] 27%|##6       | 7/26 [00:00<00:00, 22.92it/s] 38%|###8      | 10/26 [00:00<00:00, 24.53it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.09it/s] 65%|######5   | 17/26 [00:00<00:00, 27.48it/s] 81%|########  | 21/26 [00:00<00:00, 28.39it/s] 92%|#########2| 24/26 [00:00<00:00, 28.76it/s]100%|##########| 26/26 [00:01<00:00, 25.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 200
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 200
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 200
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 200
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 200
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 200
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 200
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 200
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 200
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 200
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 200
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 200
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 200
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 200
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 200
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 200
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 200
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 200
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 200
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 200
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 200
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 200
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 200
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 200
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 200
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 200
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
final projection at end of training
dim_v 512
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.60 (  0.61)	train_acc   0.46 (  0.43)	train_minacc   0.59 (  0.66)	train_majacc   0.43 (  0.39)	train_corr   0.00 (  0.00)	l1 4.7931 (4.7934)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.88it/s] 23%|##3       | 6/26 [00:00<00:00, 28.41it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.41it/s] 46%|####6     | 12/26 [00:00<00:00, 37.91it/s] 65%|######5   | 17/26 [00:00<00:00, 38.08it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.08it/s] 85%|########4 | 22/26 [00:00<00:00, 40.48it/s]100%|##########| 26/26 [00:00<00:00, 35.11it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.57 (  0.57)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.38 (  0.43)	test_minacc   0.72 (  0.69)	test_majacc   0.33 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.38 (  0.43)	test_minacc_d   0.72 (  0.69)	test_majacc_d   0.33 (  0.38)	test_corr_d  -0.13 ( -0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.41 (  0.41)	test_minacc   0.75 (  0.68)	test_majacc   0.34 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.75 (  0.68)	test_majacc_d   0.34 (  0.37)	test_corr_d  -0.03 ( -0.09)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.41)	test_minacc   0.59 (  0.68)	test_majacc   0.43 (  0.36)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.41)	test_minacc_d   0.59 (  0.68)	test_majacc_d   0.43 (  0.36)	test_corr_d  -0.05 ( -0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.95it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.28 (  0.28)	Loss_d 0.692 (0.692)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.28 (  0.28)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.28 (  0.28)	Loss_d 0.692 (0.692)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.28 (  0.28)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 49/  1]	epoch_time 0.0417 (0.0440)	validation_time 0.0004 (0.0005)	train_time 0.0413 (0.0434)
record: (train_acc, test_acc) (0.6970000406503677, 0.6600000262260437)
last accs (train_acc, test_acc) (0.4120000070929527, 0.6510000228881836)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.161 MB of 0.161 MB uploadedwandb: \ 0.161 MB of 0.161 MB uploadedwandb: | 0.161 MB of 0.161 MB uploadedwandb: / 0.161 MB of 0.161 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmpwv60d9mv'
wandb: ERROR Internal wandb error: file data was not synced
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_213720-u8lz5p77
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/u8lz5p77
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=200, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=5, fraction_z=0.99)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1241
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5991, 3, 32, 32) (6009, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:44,  1.78s/it] 19%|#9        | 5/26 [00:01<00:06,  3.42it/s] 35%|###4      | 9/26 [00:02<00:02,  6.72it/s] 50%|#####     | 13/26 [00:02<00:01, 10.29it/s] 65%|######5   | 17/26 [00:02<00:00, 13.89it/s] 81%|########  | 21/26 [00:02<00:00, 17.44it/s] 96%|#########6| 25/26 [00:02<00:00, 20.93it/s]100%|##########| 26/26 [00:02<00:00,  8.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [0][  26/  26]	Loss 10.073 (12.622)	train_nll   0.38 (  0.57)	train_penalty   0.07 (  0.32)	weight_norm   9.69 ( 12.06)	train_acc   0.87 (  0.80)	train_minacc   0.00 (  0.11)	train_majacc   0.99 (  0.92)	train_corr   0.00 (  0.00)	l1 7.7341 (7.5784)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.59it/s] 15%|#5        | 4/26 [00:00<00:01, 19.30it/s] 35%|###4      | 9/26 [00:00<00:00, 31.17it/s]                                               35%|###4      | 9/26 [00:00<00:00, 31.17it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.09it/s] 77%|#######6  | 20/26 [00:00<00:00, 43.55it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 43.55it/s]100%|##########| 26/26 [00:00<00:00, 48.57it/s]100%|##########| 26/26 [00:00<00:00, 36.25it/s]
Test: [   0/  26]	Loss 0.391 (0.391)	test_acc   0.87 (  0.87)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.391 (0.391)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  10/  26]	Loss 0.419 (0.430)	test_acc   0.85 (  0.84)	test_minacc   0.02 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.419 (0.430)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.02 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.409 (0.432)	test_acc   0.85 (  0.84)	test_minacc   0.03 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.409 (0.432)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.03 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.374 (0.425)	test_acc   0.88 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.374 (0.425)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.99 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.52it/s]100%|##########| 1/1 [00:00<00:00,  2.51it/s]
Test: [  0/  1]	Loss 1.960 (1.960)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.960 (1.960)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 1.960 (1.960)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.960 (1.960)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/182/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0773 (0.0773)	validation_time 0.0068 (0.0068)	train_time 0.0664 (0.0664)
record: (train_acc, test_acc) (0.8457000241279602, 0.1080000028014183)
last accs (train_acc, test_acc) (0.8457000241279602, 0.1080000028014183)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.86it/s] 23%|##3       | 6/26 [00:00<00:00, 23.50it/s] 38%|###8      | 10/26 [00:00<00:00, 26.54it/s] 54%|#####3    | 14/26 [00:00<00:00, 28.35it/s] 69%|######9   | 18/26 [00:00<00:00, 29.69it/s] 85%|########4 | 22/26 [00:00<00:00, 31.17it/s]100%|##########| 26/26 [00:00<00:00, 31.11it/s]100%|##########| 26/26 [00:00<00:00, 26.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [1][  26/  26]	Loss 5.274 (7.358)	train_nll   0.34 (  0.41)	train_penalty   0.03 (  0.06)	weight_norm   4.93 (  6.95)	train_acc   0.88 (  0.85)	train_minacc   0.10 (  0.03)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 7.5471 (7.7142)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.92it/s] 15%|#5        | 4/26 [00:00<00:01, 16.99it/s] 35%|###4      | 9/26 [00:00<00:00, 28.81it/s]                                               35%|###4      | 9/26 [00:00<00:00, 28.81it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 39.47it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 39.47it/s] 92%|#########2| 24/26 [00:00<00:00, 39.36it/s]100%|##########| 26/26 [00:00<00:00, 32.32it/s]
Test: [   0/  26]	Loss 0.361 (0.361)	test_acc   0.87 (  0.87)	test_minacc   0.06 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.361 (0.361)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.389 (0.387)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.389 (0.387)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.95)
Test: [  20/  26]	Loss 0.367 (0.392)	test_acc   0.86 (  0.85)	test_minacc   0.09 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.367 (0.392)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.09 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.95)
Test: [  26/  26]	Loss 0.324 (0.384)	test_acc   0.88 (  0.85)	test_minacc   0.06 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.324 (0.384)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.06 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.02it/s]
Test: [  0/  1]	Loss 1.739 (1.739)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 1.739 (1.739)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Test: [  1/  1]	Loss 1.739 (1.739)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 1.739 (1.739)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/182/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0412 (0.0592)	validation_time 0.0004 (0.0036)	train_time 0.0407 (0.0535)
record: (train_acc, test_acc) (0.8495000266432762, 0.13199999928474426)
last accs (train_acc, test_acc) (0.8495000266432762, 0.13199999928474426)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.62it/s] 19%|#9        | 5/26 [00:00<00:01, 16.82it/s] 35%|###4      | 9/26 [00:00<00:00, 22.71it/s] 50%|#####     | 13/26 [00:00<00:00, 25.94it/s] 65%|######5   | 17/26 [00:00<00:00, 27.45it/s] 81%|########  | 21/26 [00:00<00:00, 28.70it/s] 96%|#########6| 25/26 [00:00<00:00, 29.33it/s]100%|##########| 26/26 [00:01<00:00, 24.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [2][  26/  26]	Loss 3.211 (4.116)	train_nll   0.36 (  0.39)	train_penalty   0.03 (  0.04)	weight_norm   2.85 (  3.73)	train_acc   0.86 (  0.84)	train_minacc   0.19 (  0.06)	train_majacc   0.96 (  0.98)	train_corr   0.00 (  0.00)	l1 6.6342 (7.0678)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.81it/s] 27%|##6       | 7/26 [00:00<00:00, 27.64it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.64it/s] 46%|####6     | 12/26 [00:00<00:00, 34.75it/s] 65%|######5   | 17/26 [00:00<00:00, 38.96it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.96it/s] 85%|########4 | 22/26 [00:00<00:00, 41.74it/s]100%|##########| 26/26 [00:00<00:00, 35.09it/s]
Test: [   0/  26]	Loss 0.359 (0.359)	test_acc   0.87 (  0.87)	test_minacc   0.16 (  0.16)	test_majacc   0.98 (  0.98)	Loss_d 0.359 (0.359)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.373 (0.386)	test_acc   0.86 (  0.84)	test_minacc   0.11 (  0.13)	test_majacc   0.98 (  0.97)	Loss_d 0.373 (0.386)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.11 (  0.13)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.93 (  0.92)
Test: [  20/  26]	Loss 0.361 (0.387)	test_acc   0.86 (  0.84)	test_minacc   0.17 (  0.13)	test_majacc   0.98 (  0.97)	Loss_d 0.361 (0.387)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.17 (  0.13)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.91 (  0.92)
Test: [  26/  26]	Loss 0.322 (0.379)	test_acc   0.88 (  0.85)	test_minacc   0.10 (  0.13)	test_majacc   0.99 (  0.97)	Loss_d 0.322 (0.379)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.10 (  0.13)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.95 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.87it/s]
Test: [  0/  1]	Loss 1.645 (1.645)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 1.645 (1.645)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.81 (  0.81)
Test: [  1/  1]	Loss 1.645 (1.645)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 1.645 (1.645)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.81 (  0.81)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/182/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0413 (0.0533)	validation_time 0.0004 (0.0025)	train_time 0.0409 (0.0493)
record: (train_acc, test_acc) (0.8478000242114067, 0.20900000631809235)
last accs (train_acc, test_acc) (0.8478000242114067, 0.20900000631809235)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.08it/s] 15%|#5        | 4/26 [00:00<00:01, 18.26it/s] 31%|###       | 8/26 [00:00<00:00, 24.33it/s] 46%|####6     | 12/26 [00:00<00:00, 27.47it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.21it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.09it/s] 85%|########4 | 22/26 [00:00<00:00, 29.06it/s] 96%|#########6| 25/26 [00:00<00:00, 29.29it/s]100%|##########| 26/26 [00:01<00:00, 25.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [3][  26/  26]	Loss 2.123 (2.632)	train_nll   0.32 (  0.37)	train_penalty   0.04 (  0.04)	weight_norm   1.80 (  2.26)	train_acc   0.87 (  0.85)	train_minacc   0.00 (  0.11)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 5.9180 (6.1579)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.25it/s] 23%|##3       | 6/26 [00:00<00:00, 29.68it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.68it/s] 42%|####2     | 11/26 [00:00<00:00, 36.13it/s] 62%|######1   | 16/26 [00:00<00:00, 36.98it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.98it/s] 81%|########  | 21/26 [00:00<00:00, 39.58it/s]100%|##########| 26/26 [00:00<00:00, 41.92it/s]100%|##########| 26/26 [00:00<00:00, 34.21it/s]
Test: [   0/  26]	Loss 0.335 (0.335)	test_acc   0.87 (  0.87)	test_minacc   0.16 (  0.16)	test_majacc   0.98 (  0.98)	Loss_d 0.335 (0.335)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.355 (0.359)	test_acc   0.85 (  0.85)	test_minacc   0.19 (  0.18)	test_majacc   0.96 (  0.97)	Loss_d 0.355 (0.359)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.19 (  0.18)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  20/  26]	Loss 0.347 (0.363)	test_acc   0.85 (  0.85)	test_minacc   0.21 (  0.19)	test_majacc   0.96 (  0.97)	Loss_d 0.347 (0.363)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.21 (  0.19)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.88 (  0.90)
Test: [  26/  26]	Loss 0.306 (0.355)	test_acc   0.88 (  0.85)	test_minacc   0.16 (  0.19)	test_majacc   0.98 (  0.97)	Loss_d 0.306 (0.355)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.16 (  0.19)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.92 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.90it/s]
Test: [  0/  1]	Loss 1.601 (1.601)	test_acc   0.27 (  0.27)	test_minacc   0.19 (  0.19)	test_majacc   0.98 (  0.98)	Loss_d 1.601 (1.601)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.70 (  0.70)
Test: [  1/  1]	Loss 1.601 (1.601)	test_acc   0.27 (  0.27)	test_minacc   0.19 (  0.19)	test_majacc   0.98 (  0.98)	Loss_d 1.601 (1.601)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.70 (  0.70)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/182/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0402 (0.0500)	validation_time 0.0003 (0.0020)	train_time 0.0399 (0.0469)
record: (train_acc, test_acc) (0.8521000237464905, 0.2710000276565552)
last accs (train_acc, test_acc) (0.8521000237464905, 0.2710000276565552)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.89it/s] 19%|#9        | 5/26 [00:00<00:00, 21.20it/s] 35%|###4      | 9/26 [00:00<00:00, 25.75it/s] 50%|#####     | 13/26 [00:00<00:00, 27.55it/s] 65%|######5   | 17/26 [00:00<00:00, 28.60it/s] 81%|########  | 21/26 [00:00<00:00, 29.49it/s] 96%|#########6| 25/26 [00:00<00:00, 29.84it/s]100%|##########| 26/26 [00:00<00:00, 26.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [4][  26/  26]	Loss 1.512 (1.809)	train_nll   0.34 (  0.36)	train_penalty   0.02 (  0.03)	weight_norm   1.17 (  1.45)	train_acc   0.84 (  0.85)	train_minacc   0.23 (  0.12)	train_majacc   0.92 (  0.98)	train_corr   0.00 (  0.00)	l1 5.8555 (5.8178)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.23it/s] 23%|##3       | 6/26 [00:00<00:00, 30.02it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.02it/s] 42%|####2     | 11/26 [00:00<00:00, 36.89it/s] 62%|######1   | 16/26 [00:00<00:00, 41.50it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.50it/s] 81%|########  | 21/26 [00:00<00:00, 40.12it/s]100%|##########| 26/26 [00:00<00:00, 42.67it/s]100%|##########| 26/26 [00:00<00:00, 35.46it/s]
Test: [   0/  26]	Loss 0.332 (0.332)	test_acc   0.85 (  0.85)	test_minacc   0.25 (  0.25)	test_majacc   0.94 (  0.94)	Loss_d 0.332 (0.332)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.346 (0.353)	test_acc   0.86 (  0.85)	test_minacc   0.26 (  0.26)	test_majacc   0.96 (  0.95)	Loss_d 0.346 (0.353)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.87 (  0.86)
Test: [  20/  26]	Loss 0.344 (0.360)	test_acc   0.85 (  0.84)	test_minacc   0.26 (  0.24)	test_majacc   0.95 (  0.95)	Loss_d 0.344 (0.360)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.26 (  0.24)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.87 (  0.86)
Test: [  26/  26]	Loss 0.295 (0.353)	test_acc   0.88 (  0.85)	test_minacc   0.26 (  0.25)	test_majacc   0.97 (  0.95)	Loss_d 0.295 (0.353)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.26 (  0.25)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.90 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.12it/s]
Test: [  0/  1]	Loss 1.623 (1.623)	test_acc   0.29 (  0.29)	test_minacc   0.21 (  0.21)	test_majacc   0.97 (  0.97)	Loss_d 1.623 (1.623)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.65 (  0.65)
Test: [  1/  1]	Loss 1.623 (1.623)	test_acc   0.29 (  0.29)	test_minacc   0.21 (  0.21)	test_majacc   0.97 (  0.97)	Loss_d 1.623 (1.623)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.65 (  0.65)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/182/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0421 (0.0484)	validation_time 0.0004 (0.0017)	train_time 0.0416 (0.0459)
record: (train_acc, test_acc) (0.8479000220894813, 0.2850000262260437)
last accs (train_acc, test_acc) (0.8479000220894813, 0.2850000262260437)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.26it/s] 19%|#9        | 5/26 [00:00<00:01, 20.32it/s] 31%|###       | 8/26 [00:00<00:00, 23.95it/s] 46%|####6     | 12/26 [00:00<00:00, 26.93it/s] 62%|######1   | 16/26 [00:00<00:00, 28.39it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.75it/s] 88%|########8 | 23/26 [00:00<00:00, 29.70it/s]100%|##########| 26/26 [00:01<00:00, 25.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [5][  26/  26]	Loss 1.097 (1.304)	train_nll   0.33 (  0.35)	train_penalty   0.04 (  0.03)	weight_norm   0.77 (  0.95)	train_acc   0.88 (  0.85)	train_minacc   0.03 (  0.12)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 6.2210 (6.0726)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.75it/s] 31%|###       | 8/26 [00:00<00:00, 36.84it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.84it/s] 50%|#####     | 13/26 [00:00<00:00, 40.00it/s] 69%|######9   | 18/26 [00:00<00:00, 42.70it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.70it/s] 88%|########8 | 23/26 [00:00<00:00, 40.23it/s]100%|##########| 26/26 [00:00<00:00, 37.69it/s]
Test: [   0/  26]	Loss 0.300 (0.300)	test_acc   0.86 (  0.86)	test_minacc   0.16 (  0.16)	test_majacc   0.97 (  0.97)	Loss_d 0.300 (0.300)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.332 (0.332)	test_acc   0.86 (  0.85)	test_minacc   0.18 (  0.18)	test_majacc   0.98 (  0.97)	Loss_d 0.332 (0.332)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  20/  26]	Loss 0.325 (0.339)	test_acc   0.86 (  0.85)	test_minacc   0.19 (  0.17)	test_majacc   0.98 (  0.97)	Loss_d 0.325 (0.339)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.19 (  0.17)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.90 (  0.91)
Test: [  26/  26]	Loss 0.308 (0.333)	test_acc   0.87 (  0.85)	test_minacc   0.13 (  0.17)	test_majacc   0.98 (  0.97)	Loss_d 0.308 (0.333)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.13 (  0.17)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.93 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.34it/s]
Test: [  0/  1]	Loss 1.689 (1.689)	test_acc   0.23 (  0.23)	test_minacc   0.14 (  0.14)	test_majacc   0.97 (  0.97)	Loss_d 1.689 (1.689)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.79 (  0.79)
Test: [  1/  1]	Loss 1.689 (1.689)	test_acc   0.23 (  0.23)	test_minacc   0.14 (  0.14)	test_majacc   0.97 (  0.97)	Loss_d 1.689 (1.689)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.79 (  0.79)
Overall Timing[  5/  1]	epoch_time 0.0434 (0.0476)	validation_time 0.0003 (0.0015)	train_time 0.0431 (0.0454)
record: (train_acc, test_acc) (0.8479000220894813, 0.2850000262260437)
last accs (train_acc, test_acc) (0.8536000257730484, 0.22600001096725464)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.13it/s] 12%|#1        | 3/26 [00:00<00:02,  8.16it/s] 27%|##6       | 7/26 [00:00<00:01, 16.56it/s] 42%|####2     | 11/26 [00:00<00:00, 21.69it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.13it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.02it/s] 88%|########8 | 23/26 [00:01<00:00, 28.19it/s]100%|##########| 26/26 [00:01<00:00, 21.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [6][  26/  26]	Loss 0.851 (0.969)	train_nll   0.34 (  0.34)	train_penalty   0.03 (  0.03)	weight_norm   0.51 (  0.63)	train_acc   0.85 (  0.85)	train_minacc   0.03 (  0.21)	train_majacc   0.97 (  0.97)	train_corr   0.00 (  0.00)	l1 7.3850 (6.7747)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.50it/s] 23%|##3       | 6/26 [00:00<00:00, 29.18it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.18it/s] 42%|####2     | 11/26 [00:00<00:00, 36.79it/s] 62%|######1   | 16/26 [00:00<00:00, 37.90it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.90it/s] 81%|########  | 21/26 [00:00<00:00, 40.14it/s]100%|##########| 26/26 [00:00<00:00, 35.80it/s]
Test: [   0/  26]	Loss 0.335 (0.335)	test_acc   0.86 (  0.86)	test_minacc   0.20 (  0.20)	test_majacc   0.96 (  0.96)	Loss_d 0.335 (0.335)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.362 (0.365)	test_acc   0.85 (  0.84)	test_minacc   0.28 (  0.24)	test_majacc   0.95 (  0.95)	Loss_d 0.362 (0.365)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.28 (  0.24)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.86 (  0.86)
Test: [  20/  26]	Loss 0.355 (0.371)	test_acc   0.85 (  0.84)	test_minacc   0.22 (  0.24)	test_majacc   0.96 (  0.95)	Loss_d 0.355 (0.371)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.22 (  0.24)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.87 (  0.86)
Test: [  26/  26]	Loss 0.314 (0.366)	test_acc   0.85 (  0.84)	test_minacc   0.19 (  0.24)	test_majacc   0.95 (  0.95)	Loss_d 0.314 (0.366)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.19 (  0.24)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.89 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 53.75it/s]
Test: [  0/  1]	Loss 1.538 (1.538)	test_acc   0.30 (  0.30)	test_minacc   0.23 (  0.23)	test_majacc   0.94 (  0.94)	Loss_d 1.538 (1.538)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.62 (  0.62)
Test: [  1/  1]	Loss 1.538 (1.538)	test_acc   0.30 (  0.30)	test_minacc   0.23 (  0.23)	test_majacc   0.94 (  0.94)	Loss_d 1.538 (1.538)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.62 (  0.62)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/182/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0440 (0.0471)	validation_time 0.0005 (0.0013)	train_time 0.0435 (0.0451)
record: (train_acc, test_acc) (0.8420000303983688, 0.30300000309944153)
last accs (train_acc, test_acc) (0.8420000303983688, 0.30300000309944153)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.18it/s] 15%|#5        | 4/26 [00:00<00:01, 20.72it/s] 27%|##6       | 7/26 [00:00<00:00, 24.51it/s] 42%|####2     | 11/26 [00:00<00:00, 27.06it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.39it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.24it/s] 88%|########8 | 23/26 [00:00<00:00, 29.92it/s]100%|##########| 26/26 [00:01<00:00, 25.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [7][  26/  26]	Loss 0.006 (0.569)	train_nll   0.50 (  0.38)	train_penalty   0.01 (  0.02)	weight_norm   0.41 (  0.44)	train_acc   0.74 (  0.83)	train_minacc   0.71 (  0.31)	train_majacc   0.74 (  0.92)	train_corr   0.00 (  0.00)	l1 8.1425 (7.9822)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.03it/s] 27%|##6       | 7/26 [00:00<00:00, 31.47it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.47it/s] 50%|#####     | 13/26 [00:00<00:00, 35.83it/s] 69%|######9   | 18/26 [00:00<00:00, 40.05it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.05it/s] 88%|########8 | 23/26 [00:00<00:00, 42.39it/s]100%|##########| 26/26 [00:00<00:00, 34.70it/s]
Test: [   0/  26]	Loss 0.511 (0.511)	test_acc   0.73 (  0.73)	test_minacc   0.78 (  0.78)	test_majacc   0.72 (  0.72)	Loss_d 0.511 (0.511)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.44 (  0.44)
Test: [  10/  26]	Loss 0.519 (0.522)	test_acc   0.74 (  0.74)	test_minacc   0.81 (  0.78)	test_majacc   0.72 (  0.73)	Loss_d 0.519 (0.522)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.81 (  0.78)	test_majacc_d   0.72 (  0.73)	test_corr_d   0.40 (  0.41)
Test: [  20/  26]	Loss 0.514 (0.522)	test_acc   0.73 (  0.73)	test_minacc   0.76 (  0.78)	test_majacc   0.72 (  0.72)	Loss_d 0.514 (0.522)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.76 (  0.78)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.41 (  0.40)
Test: [  26/  26]	Loss 0.542 (0.524)	test_acc   0.73 (  0.73)	test_minacc   0.68 (  0.77)	test_majacc   0.74 (  0.72)	Loss_d 0.542 (0.524)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.68 (  0.77)	test_majacc_d   0.74 (  0.72)	test_corr_d   0.46 (  0.41)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.69it/s]
Test: [  0/  1]	Loss 0.622 (0.622)	test_acc   0.70 (  0.70)	test_minacc   0.69 (  0.69)	test_majacc   0.73 (  0.73)	Loss_d 0.622 (0.622)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.73 (  0.73)	test_corr_d  -0.28 ( -0.28)
Test: [  1/  1]	Loss 0.622 (0.622)	test_acc   0.70 (  0.70)	test_minacc   0.69 (  0.69)	test_majacc   0.73 (  0.73)	Loss_d 0.622 (0.622)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.73 (  0.73)	test_corr_d  -0.28 ( -0.28)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/182/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0529 (0.0478)	validation_time 0.0004 (0.0012)	train_time 0.0525 (0.0461)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.36it/s] 15%|#5        | 4/26 [00:00<00:01, 19.61it/s] 27%|##6       | 7/26 [00:00<00:00, 23.97it/s] 42%|####2     | 11/26 [00:00<00:00, 26.78it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.96it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.67it/s] 88%|########8 | 23/26 [00:00<00:00, 29.51it/s]100%|##########| 26/26 [00:01<00:00, 25.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [8][  26/  26]	Loss 0.000 (0.001)	train_nll   0.68 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.43)	train_acc   0.54 (  0.63)	train_minacc   0.65 (  0.67)	train_majacc   0.53 (  0.62)	train_corr   0.00 (  0.00)	l1 7.5580 (7.7739)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.51it/s] 23%|##3       | 6/26 [00:00<00:00, 24.94it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.94it/s] 42%|####2     | 11/26 [00:00<00:00, 33.45it/s] 62%|######1   | 16/26 [00:00<00:00, 38.11it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.11it/s] 81%|########  | 21/26 [00:00<00:00, 37.60it/s]100%|##########| 26/26 [00:00<00:00, 32.76it/s]
Test: [   0/  26]	Loss 0.655 (0.655)	test_acc   0.64 (  0.64)	test_minacc   0.61 (  0.61)	test_majacc   0.65 (  0.65)	Loss_d 0.655 (0.655)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.659 (0.658)	test_acc   0.64 (  0.64)	test_minacc   0.67 (  0.67)	test_majacc   0.63 (  0.63)	Loss_d 0.659 (0.658)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.16 (  0.17)
Test: [  20/  26]	Loss 0.655 (0.659)	test_acc   0.62 (  0.63)	test_minacc   0.66 (  0.67)	test_majacc   0.62 (  0.62)	Loss_d 0.655 (0.659)	test_acc_d   0.62 (  0.63)	test_minacc_d   0.66 (  0.67)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.18 (  0.16)
Test: [  26/  26]	Loss 0.675 (0.660)	test_acc   0.60 (  0.63)	test_minacc   0.61 (  0.67)	test_majacc   0.60 (  0.62)	Loss_d 0.675 (0.660)	test_acc_d   0.60 (  0.63)	test_minacc_d   0.61 (  0.67)	test_majacc_d   0.60 (  0.62)	test_corr_d   0.16 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.56it/s]
Test: [  0/  1]	Loss 0.667 (0.667)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.64 (  0.64)	Loss_d 0.667 (0.667)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.667 (0.667)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.64 (  0.64)	Loss_d 0.667 (0.667)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.18 ( -0.18)
Overall Timing[  8/  1]	epoch_time 0.0476 (0.0478)	validation_time 0.0004 (0.0011)	train_time 0.0471 (0.0462)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.6292000095248222, 0.6170000433921814)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.78it/s] 15%|#5        | 4/26 [00:00<00:01, 16.60it/s] 27%|##6       | 7/26 [00:00<00:00, 21.37it/s] 38%|###8      | 10/26 [00:00<00:00, 24.10it/s] 50%|#####     | 13/26 [00:00<00:00, 25.52it/s] 62%|######1   | 16/26 [00:00<00:00, 26.54it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.25it/s] 88%|########8 | 23/26 [00:00<00:00, 28.92it/s]100%|##########| 26/26 [00:01<00:00, 24.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [9][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.56 (  0.59)	train_minacc   0.61 (  0.64)	train_majacc   0.55 (  0.58)	train_corr   0.00 (  0.00)	l1 7.4105 (7.4477)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.33it/s] 23%|##3       | 6/26 [00:00<00:00, 20.98it/s]                                               23%|##3       | 6/26 [00:00<00:00, 20.98it/s] 42%|####2     | 11/26 [00:00<00:00, 30.16it/s] 62%|######1   | 16/26 [00:00<00:00, 33.15it/s]                                                62%|######1   | 16/26 [00:00<00:00, 33.15it/s] 81%|########  | 21/26 [00:00<00:00, 37.19it/s]100%|##########| 26/26 [00:00<00:00, 40.58it/s]100%|##########| 26/26 [00:00<00:00, 30.51it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.57 (  0.57)	test_minacc   0.65 (  0.65)	test_majacc   0.56 (  0.56)	Loss_d 0.688 (0.688)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.684 (0.686)	test_acc   0.57 (  0.57)	test_minacc   0.60 (  0.62)	test_majacc   0.56 (  0.56)	Loss_d 0.684 (0.686)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.60 (  0.62)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.05 (  0.03)
Test: [  20/  26]	Loss 0.687 (0.685)	test_acc   0.56 (  0.57)	test_minacc   0.59 (  0.63)	test_majacc   0.55 (  0.56)	Loss_d 0.687 (0.685)	test_acc_d   0.56 (  0.57)	test_minacc_d   0.59 (  0.63)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.04 (  0.04)
Test: [  26/  26]	Loss 0.694 (0.686)	test_acc   0.56 (  0.57)	test_minacc   0.61 (  0.62)	test_majacc   0.55 (  0.56)	Loss_d 0.694 (0.686)	test_acc_d   0.56 (  0.57)	test_minacc_d   0.61 (  0.62)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.01 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.59it/s]
Test: [  0/  1]	Loss 0.679 (0.679)	test_acc   0.58 (  0.58)	test_minacc   0.58 (  0.58)	test_majacc   0.56 (  0.56)	Loss_d 0.679 (0.679)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.679 (0.679)	test_acc   0.58 (  0.58)	test_minacc   0.58 (  0.58)	test_majacc   0.56 (  0.56)	Loss_d 0.679 (0.679)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.17 ( -0.17)
Overall Timing[  9/  1]	epoch_time 0.0422 (0.0472)	validation_time 0.0003 (0.0010)	train_time 0.0419 (0.0458)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.5667000079154968, 0.5760000348091125)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.27it/s] 15%|#5        | 4/26 [00:00<00:01, 13.63it/s] 27%|##6       | 7/26 [00:00<00:01, 18.86it/s] 38%|###8      | 10/26 [00:00<00:00, 22.44it/s] 50%|#####     | 13/26 [00:00<00:00, 24.76it/s] 62%|######1   | 16/26 [00:00<00:00, 26.15it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.13it/s] 88%|########8 | 23/26 [00:00<00:00, 28.39it/s]100%|##########| 26/26 [00:01<00:00, 22.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [10][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.47 (  0.53)	train_minacc   0.48 (  0.55)	train_majacc   0.47 (  0.53)	train_corr   0.00 (  0.00)	l1 7.3895 (7.3955)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.32it/s] 23%|##3       | 6/26 [00:00<00:00, 21.37it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.37it/s] 42%|####2     | 11/26 [00:00<00:00, 30.45it/s] 62%|######1   | 16/26 [00:00<00:00, 35.96it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.96it/s] 81%|########  | 21/26 [00:00<00:00, 36.22it/s]100%|##########| 26/26 [00:00<00:00, 39.81it/s]100%|##########| 26/26 [00:00<00:00, 30.54it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.694 (0.691)	test_acc   0.46 (  0.51)	test_minacc   0.46 (  0.48)	test_majacc   0.47 (  0.51)	Loss_d 0.694 (0.691)	test_acc_d   0.46 (  0.51)	test_minacc_d   0.46 (  0.48)	test_majacc_d   0.47 (  0.51)	test_corr_d   0.01 (  0.02)
Test: [  20/  26]	Loss 0.691 (0.691)	test_acc   0.50 (  0.51)	test_minacc   0.45 (  0.49)	test_majacc   0.51 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.04 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.51)	test_minacc   0.48 (  0.48)	test_majacc   0.48 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.48 (  0.51)	test_corr_d   0.01 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.38it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.44 (  0.44)	Loss_d 0.690 (0.690)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.44 (  0.44)	Loss_d 0.690 (0.690)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 10/  1]	epoch_time 0.0412 (0.0467)	validation_time 0.0004 (0.0010)	train_time 0.0407 (0.0453)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.5053000094294549, 0.4910000264644623)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:10,  2.37it/s] 19%|#9        | 5/26 [00:00<00:01, 10.95it/s] 35%|###4      | 9/26 [00:00<00:01, 16.76it/s] 50%|#####     | 13/26 [00:00<00:00, 20.69it/s] 65%|######5   | 17/26 [00:00<00:00, 23.53it/s] 81%|########  | 21/26 [00:01<00:00, 25.69it/s] 96%|#########6| 25/26 [00:01<00:00, 27.80it/s]100%|##########| 26/26 [00:01<00:00, 20.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [11][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.48 (  0.51)	train_minacc   0.45 (  0.48)	train_majacc   0.49 (  0.51)	train_corr   0.00 (  0.00)	l1 7.3821 (7.3816)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.18it/s] 27%|##6       | 7/26 [00:00<00:00, 34.96it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.96it/s] 46%|####6     | 12/26 [00:00<00:00, 40.63it/s] 65%|######5   | 17/26 [00:00<00:00, 38.74it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.74it/s] 85%|########4 | 22/26 [00:00<00:00, 41.71it/s]100%|##########| 26/26 [00:00<00:00, 36.48it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.51 (  0.51)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.694 (0.692)	test_acc   0.45 (  0.50)	test_minacc   0.46 (  0.47)	test_majacc   0.45 (  0.51)	Loss_d 0.694 (0.692)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.46 (  0.47)	test_majacc_d   0.45 (  0.51)	test_corr_d  -0.00 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.50)	test_minacc   0.43 (  0.47)	test_majacc   0.50 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.43 (  0.47)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.04 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.50)	test_minacc   0.45 (  0.47)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.45 (  0.47)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.01 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.71it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.45 (  0.45)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.45 (  0.45)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 11/  1]	epoch_time 0.0435 (0.0464)	validation_time 0.0004 (0.0009)	train_time 0.0431 (0.0451)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.5001000119447708, 0.48900002241134644)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.07it/s] 19%|#9        | 5/26 [00:00<00:01, 20.76it/s] 35%|###4      | 9/26 [00:00<00:00, 25.56it/s] 50%|#####     | 13/26 [00:00<00:00, 27.78it/s] 62%|######1   | 16/26 [00:00<00:00, 28.45it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.53it/s] 88%|########8 | 23/26 [00:00<00:00, 29.26it/s]100%|##########| 26/26 [00:00<00:00, 26.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [12][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.50 (  0.50)	train_minacc   0.45 (  0.47)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 7.3802 (7.3787)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.20it/s] 23%|##3       | 6/26 [00:00<00:00, 30.57it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.57it/s] 42%|####2     | 11/26 [00:00<00:00, 37.58it/s] 62%|######1   | 16/26 [00:00<00:00, 41.70it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.70it/s] 81%|########  | 21/26 [00:00<00:00, 40.05it/s]100%|##########| 26/26 [00:00<00:00, 36.14it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.50)	test_minacc   0.46 (  0.47)	test_majacc   0.46 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.46 (  0.47)	test_majacc_d   0.46 (  0.50)	test_corr_d  -0.01 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.50)	test_minacc   0.47 (  0.48)	test_majacc   0.50 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.47 (  0.48)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.03 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.45 (  0.47)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.45 (  0.47)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.00 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.18it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.45 (  0.45)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.45 (  0.45)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 12/  1]	epoch_time 0.0409 (0.0460)	validation_time 0.0003 (0.0009)	train_time 0.0406 (0.0448)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.4980000082552433, 0.48900002241134644)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.23it/s] 23%|##3       | 6/26 [00:00<00:00, 24.79it/s] 38%|###8      | 10/26 [00:00<00:00, 28.10it/s] 50%|#####     | 13/26 [00:00<00:00, 28.74it/s] 65%|######5   | 17/26 [00:00<00:00, 29.75it/s] 81%|########  | 21/26 [00:00<00:00, 30.43it/s] 96%|#########6| 25/26 [00:00<00:00, 30.75it/s]100%|##########| 26/26 [00:00<00:00, 27.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [13][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.51 (  0.50)	train_minacc   0.48 (  0.47)	train_majacc   0.52 (  0.50)	train_corr   0.00 (  0.00)	l1 7.3798 (7.3779)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.88it/s] 15%|#5        | 4/26 [00:00<00:01, 14.68it/s] 35%|###4      | 9/26 [00:00<00:00, 27.08it/s]                                               35%|###4      | 9/26 [00:00<00:00, 27.08it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.96it/s] 73%|#######3  | 19/26 [00:00<00:00, 34.98it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 34.98it/s] 92%|#########2| 24/26 [00:00<00:00, 38.90it/s]100%|##########| 26/26 [00:00<00:00, 30.48it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.47 (  0.47)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.46 (  0.46)	test_majacc   0.47 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.47 (  0.50)	test_corr_d  -0.02 (  0.00)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.47 (  0.48)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.47 (  0.48)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.03 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.52 (  0.47)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.52 (  0.50)	test_corr_d  -0.00 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.30it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.48 (  0.48)	test_minacc   0.49 (  0.49)	test_majacc   0.46 (  0.46)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.48 (  0.48)	test_minacc   0.49 (  0.49)	test_majacc   0.46 (  0.46)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 13/  1]	epoch_time 0.0428 (0.0458)	validation_time 0.0006 (0.0009)	train_time 0.0422 (0.0446)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.4972000093460083, 0.484000027179718)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.58it/s] 19%|#9        | 5/26 [00:00<00:01, 14.18it/s] 35%|###4      | 9/26 [00:00<00:00, 20.41it/s] 50%|#####     | 13/26 [00:00<00:00, 23.86it/s] 62%|######1   | 16/26 [00:00<00:00, 25.49it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.32it/s] 88%|########8 | 23/26 [00:01<00:00, 28.01it/s]100%|##########| 26/26 [00:01<00:00, 22.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [14][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.52 (  0.50)	train_minacc   0.48 (  0.47)	train_majacc   0.52 (  0.50)	train_corr   0.00 (  0.00)	l1 7.3797 (7.3778)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.82it/s] 15%|#5        | 4/26 [00:00<00:01, 15.99it/s] 35%|###4      | 9/26 [00:00<00:00, 28.24it/s]                                               35%|###4      | 9/26 [00:00<00:00, 28.24it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.15it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.89it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 35.89it/s] 92%|#########2| 24/26 [00:00<00:00, 39.58it/s]100%|##########| 26/26 [00:00<00:00, 31.48it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.47 (  0.47)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.49)	test_minacc   0.46 (  0.46)	test_majacc   0.45 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.49)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.45 (  0.50)	test_corr_d  -0.02 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.45 (  0.47)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.45 (  0.47)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.02 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.52 (  0.47)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.01 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.26it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.44 (  0.44)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.44 (  0.44)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 14/  1]	epoch_time 0.0402 (0.0454)	validation_time 0.0004 (0.0008)	train_time 0.0398 (0.0443)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.4926000124812126, 0.4780000150203705)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.19it/s] 19%|#9        | 5/26 [00:00<00:00, 23.07it/s] 35%|###4      | 9/26 [00:00<00:00, 26.44it/s] 46%|####6     | 12/26 [00:00<00:00, 27.08it/s] 62%|######1   | 16/26 [00:00<00:00, 28.97it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.75it/s] 92%|#########2| 24/26 [00:00<00:00, 30.31it/s]100%|##########| 26/26 [00:00<00:00, 26.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [15][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.50 (  0.49)	train_minacc   0.48 (  0.47)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 7.3797 (7.3779)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.14it/s] 31%|###       | 8/26 [00:00<00:00, 37.35it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.35it/s] 50%|#####     | 13/26 [00:00<00:00, 39.05it/s] 69%|######9   | 18/26 [00:00<00:00, 41.62it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.62it/s] 88%|########8 | 23/26 [00:00<00:00, 43.14it/s]100%|##########| 26/26 [00:00<00:00, 37.03it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.47 (  0.47)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.46 (  0.47)	test_majacc   0.46 (  0.49)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.46 (  0.47)	test_majacc_d   0.46 (  0.49)	test_corr_d  -0.03 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.45 (  0.48)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.45 (  0.48)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.02 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.49)	test_minacc   0.52 (  0.47)	test_majacc   0.52 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.52 (  0.49)	test_corr_d  -0.01 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.54it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.49 (  0.49)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.49 (  0.49)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 15/  1]	epoch_time 0.0458 (0.0454)	validation_time 0.0005 (0.0008)	train_time 0.0453 (0.0443)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.49060001322627067, 0.4820000231266022)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.69it/s] 15%|#5        | 4/26 [00:00<00:01, 16.84it/s] 31%|###       | 8/26 [00:00<00:00, 23.71it/s] 46%|####6     | 12/26 [00:00<00:00, 27.36it/s] 62%|######1   | 16/26 [00:00<00:00, 29.57it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.02it/s] 92%|#########2| 24/26 [00:00<00:00, 30.04it/s]100%|##########| 26/26 [00:01<00:00, 25.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.50 (  0.49)	train_minacc   0.48 (  0.48)	train_majacc   0.51 (  0.49)	train_corr   0.00 (  0.00)	l1 7.3799 (7.3782)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.90it/s] 15%|#5        | 4/26 [00:00<00:01, 18.49it/s] 35%|###4      | 9/26 [00:00<00:00, 30.56it/s]                                               35%|###4      | 9/26 [00:00<00:00, 30.56it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.29it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.02it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 37.02it/s] 92%|#########2| 24/26 [00:00<00:00, 40.64it/s]100%|##########| 26/26 [00:00<00:00, 33.29it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.47 (  0.47)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.49)	test_minacc   0.46 (  0.47)	test_majacc   0.45 (  0.49)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.49)	test_minacc_d   0.46 (  0.47)	test_majacc_d   0.45 (  0.49)	test_corr_d  -0.04 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.45 (  0.48)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.45 (  0.48)	test_majacc_d   0.48 (  0.49)	test_corr_d   0.02 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.52 (  0.48)	test_majacc   0.51 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.52 (  0.48)	test_majacc_d   0.51 (  0.49)	test_corr_d  -0.01 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 56.16it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 16/  1]	epoch_time 0.0401 (0.0451)	validation_time 0.0004 (0.0008)	train_time 0.0397 (0.0441)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.48830000829696657, 0.4880000352859497)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.10it/s] 15%|#5        | 4/26 [00:00<00:01, 16.43it/s] 31%|###       | 8/26 [00:00<00:00, 23.57it/s] 46%|####6     | 12/26 [00:00<00:00, 27.10it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.65it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.76it/s] 88%|########8 | 23/26 [00:00<00:00, 29.08it/s]100%|##########| 26/26 [00:01<00:00, 25.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.50 (  0.49)	train_minacc   0.48 (  0.49)	train_majacc   0.50 (  0.49)	train_corr   0.00 (  0.00)	l1 7.3800 (7.3786)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.55it/s] 15%|#5        | 4/26 [00:00<00:01, 16.24it/s] 35%|###4      | 9/26 [00:00<00:00, 28.48it/s]                                               35%|###4      | 9/26 [00:00<00:00, 28.48it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.10it/s] 73%|#######3  | 19/26 [00:00<00:00, 39.03it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 39.03it/s] 92%|#########2| 24/26 [00:00<00:00, 41.35it/s]100%|##########| 26/26 [00:00<00:00, 32.49it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.45 (  0.45)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.48)	test_minacc   0.49 (  0.48)	test_majacc   0.46 (  0.48)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.49 (  0.48)	test_majacc_d   0.46 (  0.48)	test_corr_d  -0.04 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.45 (  0.49)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.48 (  0.49)	test_corr_d   0.02 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.52 (  0.49)	test_majacc   0.51 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.51 (  0.49)	test_corr_d  -0.01 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.87it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 17/  1]	epoch_time 0.0423 (0.0450)	validation_time 0.0004 (0.0008)	train_time 0.0419 (0.0439)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.4857000084519386, 0.49800002574920654)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.68it/s] 15%|#5        | 4/26 [00:00<00:01, 15.84it/s] 27%|##6       | 7/26 [00:00<00:00, 19.99it/s] 42%|####2     | 11/26 [00:00<00:00, 24.14it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.68it/s] 88%|########8 | 23/26 [00:00<00:00, 28.89it/s]100%|##########| 26/26 [00:01<00:00, 24.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.50 (  0.49)	train_minacc   0.48 (  0.49)	train_majacc   0.51 (  0.49)	train_corr   0.00 (  0.00)	l1 7.3802 (7.3789)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.86it/s] 19%|#9        | 5/26 [00:00<00:01, 18.04it/s]                                               19%|#9        | 5/26 [00:00<00:01, 18.04it/s] 42%|####2     | 11/26 [00:00<00:00, 32.55it/s] 62%|######1   | 16/26 [00:00<00:00, 38.08it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.08it/s] 81%|########  | 21/26 [00:00<00:00, 36.87it/s]100%|##########| 26/26 [00:00<00:00, 39.54it/s]100%|##########| 26/26 [00:00<00:00, 30.33it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.48)	test_minacc   0.51 (  0.50)	test_majacc   0.45 (  0.48)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.51 (  0.50)	test_majacc_d   0.45 (  0.48)	test_corr_d  -0.05 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.43 (  0.50)	test_majacc   0.49 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.49 (  0.48)	test_corr_d   0.02 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.48)	test_minacc   0.48 (  0.49)	test_majacc   0.51 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.51 (  0.48)	test_corr_d  -0.01 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.99it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 18/  1]	epoch_time 0.0449 (0.0449)	validation_time 0.0004 (0.0008)	train_time 0.0444 (0.0440)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.48460000482201576, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.19it/s] 15%|#5        | 4/26 [00:00<00:01, 14.14it/s] 27%|##6       | 7/26 [00:00<00:00, 19.18it/s] 42%|####2     | 11/26 [00:00<00:00, 23.81it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.67it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.77it/s] 88%|########8 | 23/26 [00:00<00:00, 28.52it/s]100%|##########| 26/26 [00:01<00:00, 23.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.51 (  0.49)	train_minacc   0.45 (  0.51)	train_majacc   0.52 (  0.48)	train_corr   0.00 (  0.00)	l1 7.3803 (7.3792)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.42it/s] 31%|###       | 8/26 [00:00<00:00, 37.22it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.22it/s] 50%|#####     | 13/26 [00:00<00:00, 40.93it/s] 69%|######9   | 18/26 [00:00<00:00, 42.08it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.08it/s] 88%|########8 | 23/26 [00:00<00:00, 41.02it/s]100%|##########| 26/26 [00:00<00:00, 36.80it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.47 (  0.47)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.44 (  0.48)	test_minacc   0.46 (  0.51)	test_majacc   0.44 (  0.48)	Loss_d 0.694 (0.693)	test_acc_d   0.44 (  0.48)	test_minacc_d   0.46 (  0.51)	test_majacc_d   0.44 (  0.48)	test_corr_d  -0.05 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.50)	test_majacc   0.49 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.49 (  0.48)	test_corr_d   0.02 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.45 (  0.50)	test_majacc   0.51 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.51 (  0.48)	test_corr_d  -0.01 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.25it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 19/  1]	epoch_time 0.0440 (0.0449)	validation_time 0.0003 (0.0007)	train_time 0.0437 (0.0439)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.48090000948309897, 0.49900001287460327)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.30it/s] 23%|##3       | 6/26 [00:00<00:00, 23.22it/s] 38%|###8      | 10/26 [00:00<00:00, 27.56it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.33it/s] 69%|######9   | 18/26 [00:00<00:00, 32.04it/s] 85%|########4 | 22/26 [00:00<00:00, 33.14it/s]100%|##########| 26/26 [00:00<00:00, 32.40it/s]100%|##########| 26/26 [00:00<00:00, 28.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.50 (  0.49)	train_minacc   0.45 (  0.51)	train_majacc   0.51 (  0.48)	train_corr   0.00 (  0.00)	l1 7.3804 (7.3794)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.85it/s] 23%|##3       | 6/26 [00:00<00:00, 30.83it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.83it/s] 46%|####6     | 12/26 [00:00<00:00, 41.58it/s] 65%|######5   | 17/26 [00:00<00:00, 42.11it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.11it/s] 85%|########4 | 22/26 [00:00<00:00, 40.81it/s]100%|##########| 26/26 [00:00<00:00, 37.72it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.45 (  0.45)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.48)	test_minacc   0.47 (  0.50)	test_majacc   0.46 (  0.47)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.46 (  0.47)	test_corr_d  -0.05 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.48)	test_minacc   0.47 (  0.50)	test_majacc   0.50 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.50 (  0.47)	test_corr_d   0.02 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.45 (  0.50)	test_majacc   0.51 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.51 (  0.48)	test_corr_d  -0.01 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.77it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.49 (  0.49)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.49 (  0.49)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 20/  1]	epoch_time 0.0388 (0.0446)	validation_time 0.0005 (0.0007)	train_time 0.0384 (0.0437)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.4787000082433224, 0.4830000102519989)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.07it/s] 19%|#9        | 5/26 [00:00<00:00, 22.09it/s] 31%|###       | 8/26 [00:00<00:00, 25.35it/s] 42%|####2     | 11/26 [00:00<00:00, 27.05it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.05it/s] 88%|########8 | 23/26 [00:00<00:00, 29.58it/s]100%|##########| 26/26 [00:00<00:00, 26.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.51 (  0.49)	train_minacc   0.45 (  0.50)	train_majacc   0.52 (  0.49)	train_corr   0.00 (  0.00)	l1 7.3805 (7.3795)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.06it/s]  8%|7         | 2/26 [00:00<00:02,  9.04it/s] 27%|##6       | 7/26 [00:00<00:00, 26.59it/s]                                               27%|##6       | 7/26 [00:00<00:00, 26.59it/s] 50%|#####     | 13/26 [00:00<00:00, 37.04it/s] 69%|######9   | 18/26 [00:00<00:00, 40.08it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.08it/s] 92%|#########2| 24/26 [00:00<00:00, 45.41it/s]100%|##########| 26/26 [00:00<00:00, 34.71it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.48)	test_minacc   0.51 (  0.48)	test_majacc   0.45 (  0.47)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.51 (  0.48)	test_majacc_d   0.45 (  0.47)	test_corr_d  -0.05 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.48)	test_minacc   0.47 (  0.48)	test_majacc   0.49 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.47 (  0.48)	test_majacc_d   0.49 (  0.47)	test_corr_d   0.02 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.45 (  0.48)	test_majacc   0.51 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.45 (  0.48)	test_majacc_d   0.51 (  0.48)	test_corr_d  -0.01 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.02it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.48 (  0.48)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.48 (  0.48)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.01 (  0.01)
Overall Timing[ 21/  1]	epoch_time 0.0430 (0.0445)	validation_time 0.0003 (0.0007)	train_time 0.0426 (0.0436)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.4770000062286854, 0.47300001978874207)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.31it/s] 19%|#9        | 5/26 [00:00<00:00, 23.79it/s] 31%|###       | 8/26 [00:00<00:00, 26.28it/s] 42%|####2     | 11/26 [00:00<00:00, 27.29it/s] 54%|#####3    | 14/26 [00:00<00:00, 28.10it/s] 65%|######5   | 17/26 [00:00<00:00, 28.44it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.90it/s] 88%|########8 | 23/26 [00:00<00:00, 29.07it/s]100%|##########| 26/26 [00:00<00:00, 26.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.51 (  0.49)	train_minacc   0.42 (  0.49)	train_majacc   0.53 (  0.49)	train_corr   0.00 (  0.00)	l1 7.3805 (7.3796)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.07it/s] 23%|##3       | 6/26 [00:00<00:00, 23.69it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.69it/s] 42%|####2     | 11/26 [00:00<00:00, 32.05it/s] 62%|######1   | 16/26 [00:00<00:00, 37.73it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.73it/s] 81%|########  | 21/26 [00:00<00:00, 37.23it/s]100%|##########| 26/26 [00:00<00:00, 40.55it/s]100%|##########| 26/26 [00:00<00:00, 31.98it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.41 (  0.41)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.53 (  0.47)	test_majacc   0.46 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.53 (  0.47)	test_majacc_d   0.46 (  0.47)	test_corr_d  -0.05 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.47)	test_minacc   0.45 (  0.47)	test_majacc   0.49 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.45 (  0.47)	test_majacc_d   0.49 (  0.47)	test_corr_d   0.02 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.48)	test_minacc   0.39 (  0.47)	test_majacc   0.53 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.39 (  0.47)	test_majacc_d   0.53 (  0.48)	test_corr_d  -0.00 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.89it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.47 (  0.47)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.47 (  0.47)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.02 (  0.02)
Overall Timing[ 22/  1]	epoch_time 0.0409 (0.0444)	validation_time 0.0004 (0.0007)	train_time 0.0404 (0.0435)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.47600000765919687, 0.4620000123977661)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.28it/s] 19%|#9        | 5/26 [00:00<00:01, 17.30it/s] 31%|###       | 8/26 [00:00<00:00, 19.64it/s] 42%|####2     | 11/26 [00:00<00:00, 22.83it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.54it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.16it/s] 85%|########4 | 22/26 [00:00<00:00, 28.61it/s]100%|##########| 26/26 [00:01<00:00, 29.48it/s]100%|##########| 26/26 [00:01<00:00, 23.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 200
penalty weights 10000.0
l1 at pgd_anneal_iters 7.380271911621094
set z to 7.306469192504883
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 200
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 200
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 200
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 200
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 200
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
rho, theta 381 tensor(-0.0102, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 200
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 200
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 200
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 200
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 200
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 200
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 200
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 200
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 200
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 200
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 200
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 200
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 200
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 200
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 200
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 200
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 200
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 200
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
final projection at end of training
dim_v 512
Epoch: [23][  26/  26]	Loss 0.000 (0.004)	train_nll   0.67 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.65 (  0.52)	train_acc   0.50 (  0.53)	train_minacc   0.52 (  0.47)	train_majacc   0.50 (  0.54)	train_corr   0.00 (  0.00)	l1 6.2948 (6.5281)	zero_count 0.0000 (5.0700)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.43it/s] 19%|#9        | 5/26 [00:00<00:00, 21.41it/s] 38%|###8      | 10/26 [00:00<00:00, 31.75it/s]                                                38%|###8      | 10/26 [00:00<00:00, 31.75it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.31it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.72it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.72it/s] 96%|#########6| 25/26 [00:00<00:00, 40.69it/s]100%|##########| 26/26 [00:00<00:00, 32.97it/s]
Test: [   0/  26]	Loss 0.676 (0.676)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.676 (0.676)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.686 (0.679)	test_acc   0.48 (  0.51)	test_minacc   0.46 (  0.51)	test_majacc   0.48 (  0.51)	Loss_d 0.686 (0.679)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.46 (  0.51)	test_majacc_d   0.48 (  0.51)	test_corr_d   0.23 (  0.25)
Test: [  20/  26]	Loss 0.681 (0.682)	test_acc   0.50 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.681 (0.682)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.27 (  0.25)
Test: [  26/  26]	Loss 0.669 (0.682)	test_acc   0.50 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.669 (0.682)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.31 (  0.26)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.15it/s]
Test: [  0/  1]	Loss 0.709 (0.709)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.709 (0.709)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 0.709 (0.709)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.709 (0.709)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.11 (  0.11)
Overall Timing[ 23/  1]	epoch_time 0.0429 (0.0443)	validation_time 0.0004 (0.0007)	train_time 0.0424 (0.0434)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.500000011831522, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.69it/s] 19%|#9        | 5/26 [00:00<00:01, 14.72it/s] 31%|###       | 8/26 [00:00<00:00, 19.05it/s] 46%|####6     | 12/26 [00:00<00:00, 23.27it/s] 62%|######1   | 16/26 [00:00<00:00, 25.84it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.83it/s] 88%|########8 | 23/26 [00:01<00:00, 27.89it/s]100%|##########| 26/26 [00:01<00:00, 22.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 200
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 200
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 200
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 200
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 200
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 200
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 200
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 200
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 200
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 200
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 200
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 200
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 200
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 200
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 200
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 200
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 200
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 200
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 200
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 200
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 200
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 200
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 200
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 200
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 200
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 200
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
final projection at end of training
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.73 (  0.70)	train_acc   0.50 (  0.50)	train_minacc   0.52 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 6.5236 (6.4934)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.64it/s] 27%|##6       | 7/26 [00:00<00:00, 34.82it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.82it/s] 46%|####6     | 12/26 [00:00<00:00, 39.82it/s] 65%|######5   | 17/26 [00:00<00:00, 43.15it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.15it/s] 85%|########4 | 22/26 [00:00<00:00, 41.35it/s]100%|##########| 26/26 [00:00<00:00, 38.21it/s]
Test: [   0/  26]	Loss 0.684 (0.684)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.684 (0.684)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.692 (0.685)	test_acc   0.48 (  0.51)	test_minacc   0.46 (  0.51)	test_majacc   0.48 (  0.51)	Loss_d 0.692 (0.685)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.46 (  0.51)	test_majacc_d   0.48 (  0.51)	test_corr_d   0.24 (  0.27)
Test: [  20/  26]	Loss 0.689 (0.687)	test_acc   0.50 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.689 (0.687)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.24 (  0.27)
Test: [  26/  26]	Loss 0.683 (0.688)	test_acc   0.50 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.683 (0.688)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.32 (  0.28)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.79it/s]
Test: [  0/  1]	Loss 0.700 (0.700)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.700 (0.700)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 0.700 (0.700)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.700 (0.700)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.11 (  0.11)
Overall Timing[ 24/  1]	epoch_time 0.0415 (0.0442)	validation_time 0.0003 (0.0007)	train_time 0.0411 (0.0434)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.500000011831522, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.49it/s] 15%|#5        | 4/26 [00:00<00:01, 19.89it/s] 27%|##6       | 7/26 [00:00<00:00, 23.92it/s] 38%|###8      | 10/26 [00:00<00:00, 25.08it/s] 50%|#####     | 13/26 [00:00<00:00, 26.42it/s] 65%|######5   | 17/26 [00:00<00:00, 27.77it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.35it/s] 88%|########8 | 23/26 [00:00<00:00, 28.60it/s]100%|##########| 26/26 [00:01<00:00, 25.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 200
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 200
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 200
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 200
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 200
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 200
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 200
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 200
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 200
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 200
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 200
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 200
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 200
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 200
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 200
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 200
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 200
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 200
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 200
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 200
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 200
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 200
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 200
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 200
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 200
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 200
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.73 (  0.73)	train_acc   0.50 (  0.50)	train_minacc   0.52 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4450 (6.4772)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.64it/s] 27%|##6       | 7/26 [00:00<00:00, 34.33it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.33it/s] 46%|####6     | 12/26 [00:00<00:00, 39.63it/s] 65%|######5   | 17/26 [00:00<00:00, 40.79it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.79it/s] 85%|########4 | 22/26 [00:00<00:00, 40.48it/s]100%|##########| 26/26 [00:00<00:00, 36.83it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.688 (0.688)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.694 (0.689)	test_acc   0.48 (  0.51)	test_minacc   0.46 (  0.51)	test_majacc   0.48 (  0.51)	Loss_d 0.694 (0.689)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.46 (  0.51)	test_majacc_d   0.48 (  0.51)	test_corr_d   0.22 (  0.25)
Test: [  20/  26]	Loss 0.692 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.15 (  0.24)
Test: [  26/  26]	Loss 0.688 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.688 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.30 (  0.25)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.28it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.696 (0.696)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.696 (0.696)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.12 (  0.12)
Overall Timing[ 25/  1]	epoch_time 0.0420 (0.0441)	validation_time 0.0004 (0.0007)	train_time 0.0416 (0.0433)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.500000011831522, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.99it/s] 12%|#1        | 3/26 [00:00<00:02,  9.45it/s] 23%|##3       | 6/26 [00:00<00:01, 16.15it/s] 35%|###4      | 9/26 [00:00<00:00, 20.45it/s] 50%|#####     | 13/26 [00:00<00:00, 24.08it/s] 65%|######5   | 17/26 [00:00<00:00, 26.26it/s] 81%|########  | 21/26 [00:00<00:00, 27.84it/s] 96%|#########6| 25/26 [00:01<00:00, 28.87it/s]100%|##########| 26/26 [00:01<00:00, 22.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 200
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 200
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 200
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 200
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 200
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 200
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 200
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 200
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 200
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 200
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 200
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 200
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 200
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 200
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 200
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 200
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 200
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 200
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 200
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 200
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 200
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 200
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 200
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 200
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 200
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 200
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
final projection at end of training
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.73 (  0.73)	train_acc   0.50 (  0.50)	train_minacc   0.52 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4135 (6.4245)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.48it/s] 27%|##6       | 7/26 [00:00<00:00, 35.80it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.80it/s] 46%|####6     | 12/26 [00:00<00:00, 40.80it/s] 65%|######5   | 17/26 [00:00<00:00, 39.17it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.17it/s] 85%|########4 | 22/26 [00:00<00:00, 42.13it/s]100%|##########| 26/26 [00:00<00:00, 36.78it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.689 (0.689)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.693 (0.690)	test_acc   0.48 (  0.51)	test_minacc   0.46 (  0.51)	test_majacc   0.48 (  0.51)	Loss_d 0.693 (0.690)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.46 (  0.51)	test_majacc_d   0.48 (  0.51)	test_corr_d   0.20 (  0.23)
Test: [  20/  26]	Loss 0.692 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.11 (  0.22)
Test: [  26/  26]	Loss 0.690 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.27 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.08it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.696 (0.696)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.696 (0.696)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.19 (  0.19)
Overall Timing[ 26/  1]	epoch_time 0.0419 (0.0440)	validation_time 0.0004 (0.0006)	train_time 0.0415 (0.0432)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.500000011831522, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.12it/s] 15%|#5        | 4/26 [00:00<00:01, 18.28it/s] 27%|##6       | 7/26 [00:00<00:00, 22.67it/s] 42%|####2     | 11/26 [00:00<00:00, 25.85it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.56it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.56it/s] 88%|########8 | 23/26 [00:00<00:00, 29.55it/s]100%|##########| 26/26 [00:01<00:00, 25.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 200
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 200
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 200
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 200
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 200
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 200
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 200
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 200
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 200
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 200
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 200
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 200
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 200
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 200
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 200
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 200
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 200
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 200
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 200
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 200
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 200
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 200
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 200
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 200
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 200
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 200
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
final projection at end of training
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.73 (  0.73)	train_acc   0.50 (  0.50)	train_minacc   0.52 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 6.3993 (6.4029)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.99it/s] 23%|##3       | 6/26 [00:00<00:00, 28.23it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.23it/s] 42%|####2     | 11/26 [00:00<00:00, 36.37it/s] 65%|######5   | 17/26 [00:00<00:00, 40.01it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.01it/s] 88%|########8 | 23/26 [00:00<00:00, 44.13it/s]100%|##########| 26/26 [00:00<00:00, 36.27it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.689 (0.689)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.693 (0.690)	test_acc   0.48 (  0.51)	test_minacc   0.46 (  0.51)	test_majacc   0.48 (  0.51)	Loss_d 0.693 (0.690)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.46 (  0.51)	test_majacc_d   0.48 (  0.51)	test_corr_d   0.20 (  0.23)
Test: [  20/  26]	Loss 0.692 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.11 (  0.22)
Test: [  26/  26]	Loss 0.690 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.25 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.30it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.696 (0.696)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.696 (0.696)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.20 (  0.20)
Overall Timing[ 27/  1]	epoch_time 0.0420 (0.0440)	validation_time 0.0003 (0.0006)	train_time 0.0416 (0.0432)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.500000011831522, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.42it/s] 15%|#5        | 4/26 [00:00<00:01, 19.61it/s] 27%|##6       | 7/26 [00:00<00:00, 22.95it/s] 38%|###8      | 10/26 [00:00<00:00, 25.35it/s] 50%|#####     | 13/26 [00:00<00:00, 26.73it/s] 65%|######5   | 17/26 [00:00<00:00, 28.16it/s] 81%|########  | 21/26 [00:00<00:00, 29.54it/s] 96%|#########6| 25/26 [00:00<00:00, 30.99it/s]100%|##########| 26/26 [00:00<00:00, 26.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 200
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 200
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 200
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 200
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 200
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 200
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 200
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 200
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 200
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 200
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 200
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 200
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 200
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 200
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 200
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 200
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 200
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 200
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 200
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 200
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 200
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 200
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 200
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 200
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 200
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 200
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
final projection at end of training
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.73 (  0.73)	train_acc   0.50 (  0.49)	train_minacc   0.52 (  0.49)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 6.3911 (6.3921)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.62it/s] 19%|#9        | 5/26 [00:00<00:00, 21.07it/s] 38%|###8      | 10/26 [00:00<00:00, 31.54it/s]                                                38%|###8      | 10/26 [00:00<00:00, 31.54it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.79it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.24it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 38.24it/s] 96%|#########6| 25/26 [00:00<00:00, 38.96it/s]100%|##########| 26/26 [00:00<00:00, 32.34it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.692 (0.690)	test_acc   0.48 (  0.51)	test_minacc   0.46 (  0.51)	test_majacc   0.48 (  0.51)	Loss_d 0.692 (0.690)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.46 (  0.51)	test_majacc_d   0.48 (  0.51)	test_corr_d   0.20 (  0.23)
Test: [  20/  26]	Loss 0.692 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.11 (  0.22)
Test: [  26/  26]	Loss 0.690 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.24 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.44it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.20 (  0.20)
Overall Timing[ 28/  1]	epoch_time 0.0465 (0.0441)	validation_time 0.0004 (0.0006)	train_time 0.0460 (0.0433)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.500000011831522, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.34it/s] 15%|#5        | 4/26 [00:00<00:01, 17.68it/s] 27%|##6       | 7/26 [00:00<00:00, 21.51it/s] 38%|###8      | 10/26 [00:00<00:00, 24.23it/s] 50%|#####     | 13/26 [00:00<00:00, 25.85it/s] 62%|######1   | 16/26 [00:00<00:00, 26.88it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.57it/s] 88%|########8 | 23/26 [00:00<00:00, 29.01it/s]100%|##########| 26/26 [00:01<00:00, 24.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 200
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 200
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 200
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 200
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 200
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 200
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 200
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 200
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 200
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 200
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 200
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 200
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 200
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 200
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 200
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 200
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 200
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 200
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 200
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 200
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 200
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 200
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 200
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 200
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 200
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 200
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
final projection at end of training
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.73 (  0.73)	train_acc   0.50 (  0.49)	train_minacc   0.52 (  0.48)	train_majacc   0.50 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3861 (6.3857)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.43it/s] 27%|##6       | 7/26 [00:00<00:00, 29.33it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.33it/s] 46%|####6     | 12/26 [00:00<00:00, 36.82it/s] 65%|######5   | 17/26 [00:00<00:00, 40.42it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.42it/s] 85%|########4 | 22/26 [00:00<00:00, 39.12it/s]100%|##########| 26/26 [00:00<00:00, 35.21it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.48 (  0.51)	test_minacc   0.46 (  0.51)	test_majacc   0.48 (  0.51)	Loss_d 0.692 (0.691)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.46 (  0.51)	test_majacc_d   0.48 (  0.51)	test_corr_d   0.20 (  0.22)
Test: [  20/  26]	Loss 0.692 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.11 (  0.21)
Test: [  26/  26]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.22 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.88it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.21 (  0.21)
Overall Timing[ 29/  1]	epoch_time 0.0415 (0.0440)	validation_time 0.0004 (0.0006)	train_time 0.0410 (0.0432)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.4998000130057335, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.19it/s] 15%|#5        | 4/26 [00:00<00:01, 18.26it/s] 27%|##6       | 7/26 [00:00<00:00, 22.71it/s] 42%|####2     | 11/26 [00:00<00:00, 25.96it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.37it/s] 69%|######9   | 18/26 [00:00<00:00, 27.38it/s] 81%|########  | 21/26 [00:00<00:00, 27.73it/s] 96%|#########6| 25/26 [00:00<00:00, 28.90it/s]100%|##########| 26/26 [00:01<00:00, 24.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 200
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 200
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 200
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 200
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 200
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 200
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 200
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 200
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 200
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 200
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 200
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 200
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 200
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 200
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 200
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 200
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 200
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 200
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 200
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 200
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 200
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 200
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 200
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 200
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 200
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 200
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.72 (  0.72)	train_acc   0.50 (  0.49)	train_minacc   0.52 (  0.48)	train_majacc   0.50 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3829 (6.3818)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 17.49it/s] 31%|###       | 8/26 [00:00<00:00, 30.09it/s]                                               31%|###       | 8/26 [00:00<00:00, 30.09it/s] 50%|#####     | 13/26 [00:00<00:00, 36.23it/s] 69%|######9   | 18/26 [00:00<00:00, 40.52it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.52it/s] 88%|########8 | 23/26 [00:00<00:00, 41.81it/s]100%|##########| 26/26 [00:00<00:00, 35.12it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.49 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.48 (  0.51)	test_minacc   0.46 (  0.50)	test_majacc   0.48 (  0.51)	Loss_d 0.692 (0.691)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.48 (  0.51)	test_corr_d   0.19 (  0.21)
Test: [  20/  26]	Loss 0.692 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.11 (  0.20)
Test: [  26/  26]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.20 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.21it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.20 (  0.20)
Overall Timing[ 30/  1]	epoch_time 0.0459 (0.0440)	validation_time 0.0003 (0.0006)	train_time 0.0456 (0.0433)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.500000011831522, 0.4970000088214874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.51it/s] 27%|##6       | 7/26 [00:00<00:00, 29.25it/s] 42%|####2     | 11/26 [00:00<00:00, 29.44it/s] 54%|#####3    | 14/26 [00:00<00:00, 29.46it/s] 65%|######5   | 17/26 [00:00<00:00, 29.35it/s] 81%|########  | 21/26 [00:00<00:00, 29.73it/s] 96%|#########6| 25/26 [00:00<00:00, 30.34it/s]100%|##########| 26/26 [00:00<00:00, 27.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 200
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 200
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 200
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 200
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 200
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 200
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 200
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 200
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 200
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 200
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 200
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 200
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 200
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 200
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 200
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 200
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 200
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 200
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 200
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 200
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 200
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 200
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 200
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 200
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 200
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 200
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
final projection at end of training
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.72 (  0.72)	train_acc   0.50 (  0.49)	train_minacc   0.52 (  0.48)	train_majacc   0.50 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3808 (6.3794)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.56it/s] 27%|##6       | 7/26 [00:00<00:00, 35.36it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.36it/s] 46%|####6     | 12/26 [00:00<00:00, 40.44it/s] 65%|######5   | 17/26 [00:00<00:00, 39.16it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.16it/s] 85%|########4 | 22/26 [00:00<00:00, 41.76it/s]100%|##########| 26/26 [00:00<00:00, 36.50it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.48 (  0.51)	test_minacc   0.46 (  0.50)	test_majacc   0.48 (  0.52)	Loss_d 0.692 (0.691)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.48 (  0.52)	test_corr_d   0.19 (  0.20)
Test: [  20/  26]	Loss 0.692 (0.691)	test_acc   0.50 (  0.51)	test_minacc   0.52 (  0.50)	test_majacc   0.49 (  0.51)	Loss_d 0.692 (0.691)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.10 (  0.19)
Test: [  26/  26]	Loss 0.691 (0.691)	test_acc   0.51 (  0.50)	test_minacc   0.52 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.18 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.26it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.20 (  0.20)
Overall Timing[ 31/  1]	epoch_time 0.0420 (0.0440)	validation_time 0.0004 (0.0006)	train_time 0.0416 (0.0432)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.5019000142514706, 0.4960000216960907)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.90it/s] 19%|#9        | 5/26 [00:00<00:01, 19.96it/s] 35%|###4      | 9/26 [00:00<00:00, 24.91it/s] 46%|####6     | 12/26 [00:00<00:00, 26.22it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.41it/s] 69%|######9   | 18/26 [00:00<00:00, 28.22it/s] 81%|########  | 21/26 [00:00<00:00, 28.45it/s] 92%|#########2| 24/26 [00:00<00:00, 28.65it/s]100%|##########| 26/26 [00:01<00:00, 25.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 200
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 200
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 200
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 200
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 200
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 200
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 200
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 200
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 200
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 200
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 200
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 200
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 200
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 200
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 200
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 200
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 200
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 200
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 200
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 200
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 200
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 200
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 200
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 200
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 200
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 200
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
final projection at end of training
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.72 (  0.72)	train_acc   0.51 (  0.49)	train_minacc   0.48 (  0.48)	train_majacc   0.52 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3795 (6.3779)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.83it/s] 31%|###       | 8/26 [00:00<00:00, 38.28it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.28it/s] 50%|#####     | 13/26 [00:00<00:00, 41.65it/s] 69%|######9   | 18/26 [00:00<00:00, 43.05it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.05it/s] 88%|########8 | 23/26 [00:00<00:00, 41.34it/s]100%|##########| 26/26 [00:00<00:00, 38.31it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.47 (  0.47)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.48 (  0.51)	test_minacc   0.44 (  0.49)	test_majacc   0.49 (  0.52)	Loss_d 0.692 (0.691)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.44 (  0.49)	test_majacc_d   0.49 (  0.52)	test_corr_d   0.19 (  0.19)
Test: [  20/  26]	Loss 0.692 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.10 (  0.18)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.48 (  0.49)	test_majacc   0.52 (  0.51)	Loss_d 0.691 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.17 (  0.18)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.58it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.19 (  0.19)
Overall Timing[ 32/  1]	epoch_time 0.0437 (0.0440)	validation_time 0.0004 (0.0006)	train_time 0.0433 (0.0432)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.5044000145196915, 0.492000013589859)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.43it/s] 15%|#5        | 4/26 [00:00<00:01, 15.93it/s] 31%|###       | 8/26 [00:00<00:00, 22.39it/s] 42%|####2     | 11/26 [00:00<00:00, 24.79it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.77it/s] 69%|######9   | 18/26 [00:00<00:00, 27.68it/s] 85%|########4 | 22/26 [00:00<00:00, 28.96it/s]100%|##########| 26/26 [00:01<00:00, 30.40it/s]100%|##########| 26/26 [00:01<00:00, 24.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 200
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 200
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 200
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 200
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 200
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 200
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 200
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 200
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 200
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 200
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 200
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 200
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 200
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 200
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 200
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 200
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 200
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 200
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 200
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 200
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 200
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 200
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 200
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 200
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 200
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 200
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
final projection at end of training
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.72 (  0.72)	train_acc   0.52 (  0.49)	train_minacc   0.48 (  0.48)	train_majacc   0.53 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3786 (6.3769)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.75it/s] 27%|##6       | 7/26 [00:00<00:00, 31.95it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.95it/s] 46%|####6     | 12/26 [00:00<00:00, 37.91it/s] 65%|######5   | 17/26 [00:00<00:00, 38.37it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.37it/s] 85%|########4 | 22/26 [00:00<00:00, 40.46it/s]100%|##########| 26/26 [00:00<00:00, 34.92it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.43 (  0.43)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.48 (  0.52)	test_minacc   0.42 (  0.47)	test_majacc   0.50 (  0.52)	Loss_d 0.692 (0.691)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.42 (  0.47)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.20 (  0.19)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.49)	test_majacc   0.51 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.10 (  0.18)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.51)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.16 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.91it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.19 (  0.19)
Overall Timing[ 33/  1]	epoch_time 0.0419 (0.0439)	validation_time 0.0003 (0.0006)	train_time 0.0416 (0.0432)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.5080000121891498, 0.48600003123283386)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.26it/s] 15%|#5        | 4/26 [00:00<00:01, 18.76it/s] 27%|##6       | 7/26 [00:00<00:00, 22.39it/s] 38%|###8      | 10/26 [00:00<00:00, 24.81it/s] 50%|#####     | 13/26 [00:00<00:00, 25.93it/s] 62%|######1   | 16/26 [00:00<00:00, 25.76it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.88it/s] 85%|########4 | 22/26 [00:00<00:00, 27.67it/s] 96%|#########6| 25/26 [00:00<00:00, 28.07it/s]100%|##########| 26/26 [00:01<00:00, 24.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 200
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 200
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 200
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 200
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 200
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 200
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 200
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 200
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 200
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 200
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 200
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 200
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 200
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 200
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 200
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 200
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 200
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 200
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 200
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 200
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 200
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 200
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 200
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 200
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 200
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 200
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
final projection at end of training
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.72 (  0.72)	train_acc   0.52 (  0.48)	train_minacc   0.52 (  0.48)	train_majacc   0.52 (  0.48)	train_corr   0.00 (  0.00)	l1 6.3778 (6.3762)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.82it/s] 15%|#5        | 4/26 [00:00<00:01, 15.61it/s] 35%|###4      | 9/26 [00:00<00:00, 27.82it/s]                                               35%|###4      | 9/26 [00:00<00:00, 27.82it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.07it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.32it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.32it/s] 92%|#########2| 24/26 [00:00<00:00, 37.30it/s]100%|##########| 26/26 [00:00<00:00, 30.92it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.43 (  0.43)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.49 (  0.52)	test_minacc   0.44 (  0.48)	test_majacc   0.50 (  0.52)	Loss_d 0.692 (0.691)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.44 (  0.48)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.20 (  0.18)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.48 (  0.48)	test_majacc   0.51 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.10 (  0.17)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.51)	test_minacc   0.52 (  0.48)	test_majacc   0.52 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.52 (  0.48)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.14 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.00it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.18 (  0.18)
Overall Timing[ 34/  1]	epoch_time 0.0444 (0.0439)	validation_time 0.0004 (0.0006)	train_time 0.0440 (0.0432)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.5093000142276287, 0.4820000231266022)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.51it/s] 15%|#5        | 4/26 [00:00<00:01, 17.45it/s] 27%|##6       | 7/26 [00:00<00:00, 21.58it/s] 38%|###8      | 10/26 [00:00<00:00, 24.21it/s] 50%|#####     | 13/26 [00:00<00:00, 25.35it/s] 62%|######1   | 16/26 [00:00<00:00, 26.51it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.19it/s] 85%|########4 | 22/26 [00:00<00:00, 27.94it/s]100%|##########| 26/26 [00:01<00:00, 29.06it/s]100%|##########| 26/26 [00:01<00:00, 24.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 200
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 200
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 200
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 200
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 200
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 200
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 200
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 200
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 200
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 200
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 200
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 200
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 200
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 200
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 200
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 200
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 200
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 200
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 200
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 200
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 200
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 200
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 200
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 200
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 200
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 200
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.71 (  0.71)	train_acc   0.51 (  0.48)	train_minacc   0.55 (  0.48)	train_majacc   0.50 (  0.48)	train_corr   0.00 (  0.00)	l1 6.3772 (6.3756)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.23it/s] 19%|#9        | 5/26 [00:00<00:01, 14.57it/s] 38%|###8      | 10/26 [00:00<00:00, 23.31it/s]                                                38%|###8      | 10/26 [00:00<00:00, 23.31it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.21it/s] 77%|#######6  | 20/26 [00:00<00:00, 35.17it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 35.17it/s] 96%|#########6| 25/26 [00:00<00:00, 38.43it/s]100%|##########| 26/26 [00:00<00:00, 27.53it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.43 (  0.43)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.48 (  0.52)	test_minacc   0.44 (  0.47)	test_majacc   0.49 (  0.52)	Loss_d 0.692 (0.691)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.44 (  0.47)	test_majacc_d   0.49 (  0.52)	test_corr_d   0.20 (  0.18)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.51)	test_minacc   0.52 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.52 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.10 (  0.17)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.51)	test_minacc   0.55 (  0.48)	test_majacc   0.51 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.55 (  0.48)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.13 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.19it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.47 (  0.47)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.47 (  0.47)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.18 (  0.18)
Overall Timing[ 35/  1]	epoch_time 0.0425 (0.0439)	validation_time 0.0004 (0.0006)	train_time 0.0420 (0.0432)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.5107000153064728, 0.4740000367164612)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.45it/s] 19%|#9        | 5/26 [00:00<00:00, 21.31it/s] 35%|###4      | 9/26 [00:00<00:00, 25.99it/s] 50%|#####     | 13/26 [00:00<00:00, 28.19it/s] 65%|######5   | 17/26 [00:00<00:00, 27.72it/s] 81%|########  | 21/26 [00:00<00:00, 30.12it/s] 96%|#########6| 25/26 [00:00<00:00, 31.39it/s]100%|##########| 26/26 [00:00<00:00, 26.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 200
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 200
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 200
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 200
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 200
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 200
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 200
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 200
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 200
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 200
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 200
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 200
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 200
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 200
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 200
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 200
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 200
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 200
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 200
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 200
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 200
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 200
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 200
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 200
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 200
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 200
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
final projection at end of training
dim_v 512
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.71 (  0.71)	train_acc   0.50 (  0.48)	train_minacc   0.55 (  0.48)	train_majacc   0.49 (  0.48)	train_corr   0.00 (  0.00)	l1 6.3766 (6.3751)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.84it/s] 15%|#5        | 4/26 [00:00<00:01, 16.75it/s]                                               15%|#5        | 4/26 [00:00<00:01, 16.75it/s] 42%|####2     | 11/26 [00:00<00:00, 35.88it/s] 62%|######1   | 16/26 [00:00<00:00, 37.83it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.83it/s] 81%|########  | 21/26 [00:00<00:00, 41.57it/s]100%|##########| 26/26 [00:00<00:00, 34.84it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.41 (  0.41)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.48 (  0.51)	test_minacc   0.44 (  0.47)	test_majacc   0.48 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.44 (  0.47)	test_majacc_d   0.48 (  0.52)	test_corr_d   0.20 (  0.17)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.51)	test_minacc   0.52 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.10 (  0.16)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.51)	test_minacc   0.55 (  0.48)	test_majacc   0.50 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.55 (  0.48)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.12 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.86it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.47 (  0.47)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.17 (  0.17)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.47 (  0.47)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.17 (  0.17)
Overall Timing[ 36/  1]	epoch_time 0.0476 (0.0440)	validation_time 0.0003 (0.0006)	train_time 0.0472 (0.0433)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.5116000123023987, 0.4740000367164612)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.59it/s] 19%|#9        | 5/26 [00:00<00:00, 21.93it/s] 35%|###4      | 9/26 [00:00<00:00, 26.02it/s] 50%|#####     | 13/26 [00:00<00:00, 27.66it/s] 65%|######5   | 17/26 [00:00<00:00, 28.89it/s] 81%|########  | 21/26 [00:00<00:00, 29.66it/s] 96%|#########6| 25/26 [00:00<00:00, 30.04it/s]100%|##########| 26/26 [00:00<00:00, 26.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 200
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 200
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 200
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 200
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 200
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 200
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 200
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 200
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 200
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 200
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 200
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 200
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 200
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 200
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 200
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 200
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 200
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 200
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 200
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 200
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 200
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 200
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 200
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 200
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 200
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 200
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
final projection at end of training
dim_v 512
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.71 (  0.71)	train_acc   0.50 (  0.49)	train_minacc   0.55 (  0.48)	train_majacc   0.49 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3759 (6.3746)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.38it/s] 23%|##3       | 6/26 [00:00<00:00, 26.75it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.75it/s] 42%|####2     | 11/26 [00:00<00:00, 30.75it/s] 62%|######1   | 16/26 [00:00<00:00, 36.45it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.45it/s] 81%|########  | 21/26 [00:00<00:00, 38.78it/s]100%|##########| 26/26 [00:00<00:00, 41.76it/s]100%|##########| 26/26 [00:00<00:00, 32.84it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.39 (  0.39)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.48 (  0.51)	test_minacc   0.42 (  0.47)	test_majacc   0.49 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.42 (  0.47)	test_majacc_d   0.49 (  0.52)	test_corr_d   0.21 (  0.16)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.47)	test_majacc   0.51 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.10 (  0.16)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.51)	test_minacc   0.55 (  0.47)	test_majacc   0.49 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.55 (  0.47)	test_majacc_d   0.49 (  0.52)	test_corr_d   0.11 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.30it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.54 (  0.54)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.17 (  0.17)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.54 (  0.54)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.17 (  0.17)
Overall Timing[ 37/  1]	epoch_time 0.0425 (0.0439)	validation_time 0.0004 (0.0006)	train_time 0.0420 (0.0432)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.5093000145554543, 0.46800002455711365)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02,  8.25it/s] 19%|#9        | 5/26 [00:00<00:01, 15.91it/s] 31%|###       | 8/26 [00:00<00:00, 20.66it/s] 46%|####6     | 12/26 [00:00<00:00, 24.78it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.92it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.02it/s] 88%|########8 | 23/26 [00:00<00:00, 29.19it/s]100%|##########| 26/26 [00:01<00:00, 24.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 200
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 200
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 200
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 200
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 200
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 200
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 200
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 200
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 200
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 200
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 200
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 200
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 200
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 200
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 200
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 200
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 200
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 200
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 200
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 200
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 200
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 200
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 200
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 200
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 200
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 200
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
final projection at end of training
dim_v 512
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.71 (  0.71)	train_acc   0.50 (  0.49)	train_minacc   0.55 (  0.48)	train_majacc   0.49 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3753 (6.3741)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.66it/s] 23%|##3       | 6/26 [00:00<00:00, 30.71it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.71it/s] 42%|####2     | 11/26 [00:00<00:00, 37.26it/s] 62%|######1   | 16/26 [00:00<00:00, 41.25it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.25it/s] 81%|########  | 21/26 [00:00<00:00, 39.88it/s]100%|##########| 26/26 [00:00<00:00, 42.44it/s]100%|##########| 26/26 [00:00<00:00, 35.61it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.39 (  0.39)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.15 (  0.15)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.48 (  0.51)	test_minacc   0.42 (  0.47)	test_majacc   0.49 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.42 (  0.47)	test_majacc_d   0.49 (  0.52)	test_corr_d   0.20 (  0.16)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.47)	test_majacc   0.51 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.10 (  0.15)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.51)	test_minacc   0.55 (  0.47)	test_majacc   0.49 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.55 (  0.47)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.10 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.18it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.54 (  0.54)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.16 (  0.16)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.54 (  0.54)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.16 (  0.16)
Overall Timing[ 38/  1]	epoch_time 0.0434 (0.0439)	validation_time 0.0003 (0.0006)	train_time 0.0431 (0.0432)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.5078000163435936, 0.45900002121925354)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.97it/s] 15%|#5        | 4/26 [00:00<00:01, 13.28it/s] 27%|##6       | 7/26 [00:00<00:01, 18.74it/s] 38%|###8      | 10/26 [00:00<00:00, 22.28it/s] 50%|#####     | 13/26 [00:00<00:00, 24.17it/s] 62%|######1   | 16/26 [00:00<00:00, 25.72it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.72it/s] 85%|########4 | 22/26 [00:00<00:00, 27.62it/s] 96%|#########6| 25/26 [00:01<00:00, 28.23it/s]100%|##########| 26/26 [00:01<00:00, 22.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 200
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 200
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 200
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 200
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 200
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 200
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 200
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 200
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 200
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 200
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 200
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 200
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 200
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 200
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 200
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 200
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 200
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 200
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 200
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 200
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 200
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 200
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 200
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 200
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 200
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 200
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
final projection at end of training
dim_v 512
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.70 (  0.71)	train_acc   0.50 (  0.49)	train_minacc   0.55 (  0.48)	train_majacc   0.49 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3747 (6.3736)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.56it/s] 23%|##3       | 6/26 [00:00<00:00, 24.52it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.52it/s] 42%|####2     | 11/26 [00:00<00:00, 30.86it/s] 62%|######1   | 16/26 [00:00<00:00, 36.18it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.18it/s] 81%|########  | 21/26 [00:00<00:00, 37.61it/s]100%|##########| 26/26 [00:00<00:00, 40.95it/s]100%|##########| 26/26 [00:00<00:00, 32.08it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.39 (  0.39)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.47 (  0.51)	test_minacc   0.40 (  0.46)	test_majacc   0.49 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.40 (  0.46)	test_majacc_d   0.49 (  0.52)	test_corr_d   0.20 (  0.15)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.46)	test_majacc   0.50 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.46)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.09 (  0.15)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.55 (  0.47)	test_majacc   0.50 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.55 (  0.47)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.09 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.23it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.54 (  0.54)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.54 (  0.54)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.15 (  0.15)
Overall Timing[ 39/  1]	epoch_time 0.0433 (0.0439)	validation_time 0.0004 (0.0006)	train_time 0.0428 (0.0432)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.5094000138044358, 0.4580000340938568)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.90it/s] 15%|#5        | 4/26 [00:00<00:01, 14.99it/s] 31%|###       | 8/26 [00:00<00:00, 21.98it/s] 46%|####6     | 12/26 [00:00<00:00, 25.84it/s] 62%|######1   | 16/26 [00:00<00:00, 27.73it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.96it/s] 85%|########4 | 22/26 [00:00<00:00, 28.47it/s] 96%|#########6| 25/26 [00:00<00:00, 28.73it/s]100%|##########| 26/26 [00:01<00:00, 24.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 200
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 200
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 200
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 200
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 200
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 200
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 200
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 200
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 200
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 200
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 200
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 200
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 200
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 200
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 200
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 200
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 200
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 200
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 200
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 200
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 200
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 200
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 200
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 200
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 200
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 200
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.70 (  0.70)	train_acc   0.51 (  0.49)	train_minacc   0.55 (  0.48)	train_majacc   0.51 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3741 (6.3731)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.84it/s] 27%|##6       | 7/26 [00:00<00:00, 34.73it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.73it/s] 46%|####6     | 12/26 [00:00<00:00, 40.72it/s] 65%|######5   | 17/26 [00:00<00:00, 38.32it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.32it/s] 85%|########4 | 22/26 [00:00<00:00, 40.55it/s]100%|##########| 26/26 [00:00<00:00, 35.96it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.39 (  0.39)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.13 (  0.13)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.47 (  0.51)	test_minacc   0.39 (  0.46)	test_majacc   0.49 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.39 (  0.46)	test_majacc_d   0.49 (  0.52)	test_corr_d   0.20 (  0.14)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.53 (  0.46)	test_majacc   0.50 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.53 (  0.46)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.09 (  0.14)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.51)	test_minacc   0.55 (  0.47)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.55 (  0.47)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.09 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.35it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.54 (  0.54)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.54 (  0.54)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.15 (  0.15)
Overall Timing[ 40/  1]	epoch_time 0.0452 (0.0439)	validation_time 0.0004 (0.0006)	train_time 0.0448 (0.0433)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.5104000141620636, 0.4570000171661377)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.65it/s] 19%|#9        | 5/26 [00:00<00:00, 23.10it/s] 31%|###       | 8/26 [00:00<00:00, 24.35it/s] 42%|####2     | 11/26 [00:00<00:00, 24.86it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.76it/s] 69%|######9   | 18/26 [00:00<00:00, 27.44it/s] 81%|########  | 21/26 [00:00<00:00, 28.17it/s] 96%|#########6| 25/26 [00:00<00:00, 29.22it/s]100%|##########| 26/26 [00:01<00:00, 25.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 200
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 200
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 200
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 200
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 200
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 200
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 200
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 200
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 200
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 200
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 200
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 200
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 200
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 200
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 200
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 200
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 200
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 200
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 200
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 200
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 200
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 200
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 200
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 200
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 200
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 200
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
final projection at end of training
dim_v 512
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.70 (  0.70)	train_acc   0.52 (  0.49)	train_minacc   0.55 (  0.49)	train_majacc   0.52 (  0.50)	train_corr   0.00 (  0.00)	l1 6.3735 (6.3726)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.10it/s] 23%|##3       | 6/26 [00:00<00:00, 25.39it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.39it/s] 42%|####2     | 11/26 [00:00<00:00, 30.27it/s] 62%|######1   | 16/26 [00:00<00:00, 36.02it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.02it/s] 81%|########  | 21/26 [00:00<00:00, 39.10it/s]100%|##########| 26/26 [00:00<00:00, 42.28it/s]100%|##########| 26/26 [00:00<00:00, 32.93it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.39 (  0.39)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.48 (  0.52)	test_minacc   0.39 (  0.46)	test_majacc   0.49 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.39 (  0.46)	test_majacc_d   0.49 (  0.53)	test_corr_d   0.20 (  0.14)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.52)	test_minacc   0.53 (  0.46)	test_majacc   0.50 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.53 (  0.46)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.09 (  0.14)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.51)	test_minacc   0.55 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.55 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.08 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.88it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.54 (  0.54)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.54 (  0.54)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.14 (  0.14)
Overall Timing[ 41/  1]	epoch_time 0.0430 (0.0439)	validation_time 0.0004 (0.0006)	train_time 0.0426 (0.0432)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.5135000165104866, 0.453000009059906)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.17it/s] 19%|#9        | 5/26 [00:00<00:00, 22.36it/s] 31%|###       | 8/26 [00:00<00:00, 25.28it/s] 42%|####2     | 11/26 [00:00<00:00, 26.51it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.60it/s] 65%|######5   | 17/26 [00:00<00:00, 27.95it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.48it/s] 88%|########8 | 23/26 [00:00<00:00, 28.73it/s]100%|##########| 26/26 [00:01<00:00, 25.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 200
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 200
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 200
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 200
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 200
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 200
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 200
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 200
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 200
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 200
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 200
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 200
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 200
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 200
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 200
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 200
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 200
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 200
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 200
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 200
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 200
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 200
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 200
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 200
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 200
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 200
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
final projection at end of training
dim_v 512
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.70 (  0.70)	train_acc   0.51 (  0.50)	train_minacc   0.55 (  0.49)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 6.3729 (6.3721)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.76it/s] 23%|##3       | 6/26 [00:00<00:00, 23.78it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.78it/s] 42%|####2     | 11/26 [00:00<00:00, 31.94it/s] 62%|######1   | 16/26 [00:00<00:00, 37.07it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.07it/s] 81%|########  | 21/26 [00:00<00:00, 40.36it/s]100%|##########| 26/26 [00:00<00:00, 41.98it/s]100%|##########| 26/26 [00:00<00:00, 33.12it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.39 (  0.39)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.47 (  0.52)	test_minacc   0.37 (  0.46)	test_majacc   0.49 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.47 (  0.52)	test_minacc_d   0.37 (  0.46)	test_majacc_d   0.49 (  0.53)	test_corr_d   0.20 (  0.13)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.09 (  0.13)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.55 (  0.47)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.55 (  0.47)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.07 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.43it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.54 (  0.54)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.13 (  0.13)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.54 (  0.54)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.13 (  0.13)
Overall Timing[ 42/  1]	epoch_time 0.0439 (0.0439)	validation_time 0.0006 (0.0006)	train_time 0.0433 (0.0432)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.5134000124037266, 0.4540000259876251)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.53it/s] 12%|#1        | 3/26 [00:00<00:01, 15.27it/s] 27%|##6       | 7/26 [00:00<00:00, 23.30it/s] 42%|####2     | 11/26 [00:00<00:00, 26.63it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.48it/s] 65%|######5   | 17/26 [00:00<00:00, 27.83it/s] 81%|########  | 21/26 [00:00<00:00, 28.69it/s] 92%|#########2| 24/26 [00:00<00:00, 28.86it/s]100%|##########| 26/26 [00:01<00:00, 25.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 200
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 200
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 200
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 200
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 200
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 200
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 200
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 200
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 200
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 200
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 200
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 200
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 200
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 200
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 200
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 200
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 200
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 200
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 200
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 200
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 200
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 200
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 200
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 200
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 200
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 200
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
final projection at end of training
dim_v 512
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.70 (  0.70)	train_acc   0.50 (  0.50)	train_minacc   0.55 (  0.49)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 6.3723 (6.3716)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 20.42it/s] 31%|###       | 8/26 [00:00<00:00, 34.06it/s]                                               31%|###       | 8/26 [00:00<00:00, 34.06it/s] 50%|#####     | 13/26 [00:00<00:00, 38.87it/s] 69%|######9   | 18/26 [00:00<00:00, 41.57it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.57it/s] 88%|########8 | 23/26 [00:00<00:00, 39.93it/s]100%|##########| 26/26 [00:00<00:00, 36.74it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.39 (  0.39)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.48 (  0.52)	test_minacc   0.37 (  0.45)	test_majacc   0.50 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.37 (  0.45)	test_majacc_d   0.50 (  0.53)	test_corr_d   0.20 (  0.12)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.46)	test_majacc   0.51 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.46)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.08 (  0.12)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.51)	test_minacc   0.55 (  0.47)	test_majacc   0.49 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.55 (  0.47)	test_majacc_d   0.49 (  0.52)	test_corr_d   0.06 (  0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 54.63it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.13 (  0.13)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.13 (  0.13)
Overall Timing[ 43/  1]	epoch_time 0.0437 (0.0439)	validation_time 0.0005 (0.0006)	train_time 0.0432 (0.0432)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.5143000096082687, 0.4520000219345093)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.40it/s] 15%|#5        | 4/26 [00:00<00:01, 15.64it/s] 27%|##6       | 7/26 [00:00<00:00, 20.02it/s] 42%|####2     | 11/26 [00:00<00:00, 24.20it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.12it/s] 65%|######5   | 17/26 [00:00<00:00, 25.75it/s] 77%|#######6  | 20/26 [00:00<00:00, 26.73it/s] 88%|########8 | 23/26 [00:00<00:00, 26.03it/s]100%|##########| 26/26 [00:01<00:00, 22.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 200
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 200
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 200
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 200
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 200
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 200
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 200
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 200
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 200
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 200
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 200
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 200
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 200
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 200
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 200
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 200
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 200
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 200
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 200
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 200
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 200
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 200
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 200
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 200
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 200
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 200
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
final projection at end of training
dim_v 512
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.69 (  0.70)	train_acc   0.48 (  0.49)	train_minacc   0.52 (  0.49)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 6.3717 (6.3711)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.27it/s] 19%|#9        | 5/26 [00:00<00:00, 24.84it/s] 38%|###8      | 10/26 [00:00<00:00, 35.47it/s]                                                38%|###8      | 10/26 [00:00<00:00, 35.47it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.57it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.06it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.06it/s] 96%|#########6| 25/26 [00:00<00:00, 41.10it/s]100%|##########| 26/26 [00:00<00:00, 34.15it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.39 (  0.39)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.48 (  0.51)	test_minacc   0.37 (  0.45)	test_majacc   0.50 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.37 (  0.45)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.19 (  0.11)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.52)	test_minacc   0.52 (  0.47)	test_majacc   0.50 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.50 (  0.53)	test_corr_d   0.08 (  0.12)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.51)	test_minacc   0.55 (  0.47)	test_majacc   0.48 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.55 (  0.47)	test_majacc_d   0.48 (  0.52)	test_corr_d   0.05 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.12it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.54 (  0.54)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.54 (  0.54)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.12 (  0.12)
Overall Timing[ 44/  1]	epoch_time 0.0449 (0.0439)	validation_time 0.0004 (0.0006)	train_time 0.0445 (0.0433)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.5138000146150589, 0.4540000259876251)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.89it/s] 15%|#5        | 4/26 [00:00<00:02, 10.52it/s] 27%|##6       | 7/26 [00:00<00:01, 15.99it/s] 38%|###8      | 10/26 [00:00<00:00, 19.92it/s] 50%|#####     | 13/26 [00:00<00:00, 22.27it/s] 62%|######1   | 16/26 [00:00<00:00, 23.54it/s] 73%|#######3  | 19/26 [00:00<00:00, 25.14it/s] 85%|########4 | 22/26 [00:01<00:00, 26.40it/s] 96%|#########6| 25/26 [00:01<00:00, 27.06it/s]100%|##########| 26/26 [00:01<00:00, 20.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 200
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 200
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 200
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 200
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 200
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 200
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 200
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 200
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 200
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 200
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 200
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 200
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 200
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 200
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 200
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 200
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 200
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 200
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 200
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 200
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 200
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 200
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 200
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 200
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 200
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 200
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.69 (  0.69)	train_acc   0.47 (  0.49)	train_minacc   0.52 (  0.49)	train_majacc   0.47 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3711 (6.3706)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.56it/s] 27%|##6       | 7/26 [00:00<00:00, 30.30it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.30it/s] 46%|####6     | 12/26 [00:00<00:00, 35.92it/s] 65%|######5   | 17/26 [00:00<00:00, 37.30it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.30it/s] 85%|########4 | 22/26 [00:00<00:00, 40.76it/s]100%|##########| 26/26 [00:00<00:00, 34.15it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.37 (  0.37)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.48 (  0.52)	test_minacc   0.37 (  0.46)	test_majacc   0.50 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.37 (  0.46)	test_majacc_d   0.50 (  0.53)	test_corr_d   0.19 (  0.11)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.52)	test_minacc   0.52 (  0.47)	test_majacc   0.50 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.50 (  0.53)	test_corr_d   0.07 (  0.11)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.51)	test_minacc   0.52 (  0.47)	test_majacc   0.48 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.48 (  0.52)	test_corr_d   0.05 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.84it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.45 (  0.45)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.45 (  0.45)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.12 (  0.12)
Overall Timing[ 45/  1]	epoch_time 0.0494 (0.0441)	validation_time 0.0004 (0.0006)	train_time 0.0490 (0.0434)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.5142000137567521, 0.4540000259876251)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.48it/s] 19%|#9        | 5/26 [00:00<00:00, 22.23it/s] 31%|###       | 8/26 [00:00<00:00, 24.93it/s] 46%|####6     | 12/26 [00:00<00:00, 27.59it/s] 62%|######1   | 16/26 [00:00<00:00, 28.84it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.02it/s] 88%|########8 | 23/26 [00:00<00:00, 29.45it/s]100%|##########| 26/26 [00:00<00:00, 26.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 200
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 200
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 200
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 200
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 200
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 200
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 200
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 200
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 200
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 200
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 200
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 200
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 200
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 200
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 200
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 200
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 200
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 200
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 200
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 200
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 200
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 200
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 200
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 200
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 200
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 200
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
final projection at end of training
dim_v 512
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.69 (  0.69)	train_acc   0.48 (  0.49)	train_minacc   0.52 (  0.49)	train_majacc   0.47 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3705 (6.3701)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.58it/s] 15%|#5        | 4/26 [00:00<00:01, 13.67it/s] 35%|###4      | 9/26 [00:00<00:00, 25.21it/s]                                               35%|###4      | 9/26 [00:00<00:00, 25.21it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.74it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.19it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 36.19it/s] 92%|#########2| 24/26 [00:00<00:00, 37.12it/s]100%|##########| 26/26 [00:00<00:00, 29.16it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.39 (  0.39)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.48 (  0.51)	test_minacc   0.37 (  0.46)	test_majacc   0.50 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.37 (  0.46)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.18 (  0.10)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.52)	test_minacc   0.52 (  0.47)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.07 (  0.11)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.51)	test_minacc   0.52 (  0.48)	test_majacc   0.48 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.52 (  0.48)	test_majacc_d   0.48 (  0.52)	test_corr_d   0.04 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.50it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.11 (  0.11)
Overall Timing[ 46/  1]	epoch_time 0.0420 (0.0440)	validation_time 0.0003 (0.0005)	train_time 0.0417 (0.0434)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.5121000187397003, 0.45500001311302185)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.95it/s] 12%|#1        | 3/26 [00:00<00:02, 11.26it/s] 23%|##3       | 6/26 [00:00<00:01, 18.06it/s] 35%|###4      | 9/26 [00:00<00:00, 21.98it/s] 46%|####6     | 12/26 [00:00<00:00, 24.57it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.73it/s] 69%|######9   | 18/26 [00:00<00:00, 27.05it/s] 81%|########  | 21/26 [00:00<00:00, 27.79it/s] 96%|#########6| 25/26 [00:01<00:00, 28.66it/s]100%|##########| 26/26 [00:01<00:00, 23.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 200
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 200
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 200
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 200
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 200
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 200
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 200
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 200
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 200
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 200
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 200
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 200
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 200
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 200
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 200
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 200
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 200
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 200
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 200
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 200
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 200
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 200
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 200
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 200
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 200
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 200
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
final projection at end of training
dim_v 512
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.69 (  0.69)	train_acc   0.49 (  0.49)	train_minacc   0.52 (  0.50)	train_majacc   0.48 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3700 (6.3696)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.40it/s] 23%|##3       | 6/26 [00:00<00:00, 32.16it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.16it/s] 42%|####2     | 11/26 [00:00<00:00, 37.70it/s] 62%|######1   | 16/26 [00:00<00:00, 40.82it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.82it/s] 81%|########  | 21/26 [00:00<00:00, 39.58it/s]100%|##########| 26/26 [00:00<00:00, 42.01it/s]100%|##########| 26/26 [00:00<00:00, 35.83it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.39 (  0.39)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.39 (  0.46)	test_majacc   0.50 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.39 (  0.46)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.18 (  0.09)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.52)	test_minacc   0.52 (  0.48)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.52 (  0.48)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.07 (  0.10)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.52 (  0.49)	test_majacc   0.49 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.49 (  0.52)	test_corr_d   0.04 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.53it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.11 (  0.11)
Overall Timing[ 47/  1]	epoch_time 0.0469 (0.0441)	validation_time 0.0004 (0.0005)	train_time 0.0465 (0.0434)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.5124000146985054, 0.45600003004074097)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.80it/s] 19%|#9        | 5/26 [00:00<00:01, 12.23it/s] 31%|###       | 8/26 [00:00<00:01, 16.84it/s] 46%|####6     | 12/26 [00:00<00:00, 21.37it/s] 58%|#####7    | 15/26 [00:00<00:00, 23.21it/s] 69%|######9   | 18/26 [00:00<00:00, 24.68it/s] 85%|########4 | 22/26 [00:01<00:00, 26.88it/s]100%|##########| 26/26 [00:01<00:00, 28.30it/s]100%|##########| 26/26 [00:01<00:00, 20.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 200
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 200
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 200
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 200
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 200
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 200
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 200
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 200
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 200
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 200
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 200
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 200
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 200
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 200
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 200
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 200
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 200
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 200
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 200
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 200
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 200
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 200
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 200
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 200
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 200
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 200
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
final projection at end of training
dim_v 512
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.68 (  0.69)	train_acc   0.50 (  0.50)	train_minacc   0.52 (  0.50)	train_majacc   0.49 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3694 (6.3692)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.92it/s] 23%|##3       | 6/26 [00:00<00:00, 25.93it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.93it/s] 42%|####2     | 11/26 [00:00<00:00, 34.50it/s] 62%|######1   | 16/26 [00:00<00:00, 39.37it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.37it/s] 81%|########  | 21/26 [00:00<00:00, 38.51it/s]100%|##########| 26/26 [00:00<00:00, 34.34it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.39 (  0.39)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.39 (  0.47)	test_majacc   0.51 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.39 (  0.47)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.17 (  0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.52)	test_minacc   0.50 (  0.49)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.06 (  0.09)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.52 (  0.49)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.03 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.88it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.10 (  0.10)
Overall Timing[ 48/  1]	epoch_time 0.0454 (0.0441)	validation_time 0.0003 (0.0005)	train_time 0.0451 (0.0435)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.5122000132203102, 0.45500001311302185)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.42it/s] 19%|#9        | 5/26 [00:00<00:01, 19.62it/s] 31%|###       | 8/26 [00:00<00:00, 23.27it/s] 42%|####2     | 11/26 [00:00<00:00, 25.27it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.69it/s] 65%|######5   | 17/26 [00:00<00:00, 27.53it/s] 81%|########  | 21/26 [00:00<00:00, 28.91it/s] 96%|#########6| 25/26 [00:00<00:00, 30.07it/s]100%|##########| 26/26 [00:01<00:00, 25.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 200
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 200
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 200
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 200
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 200
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 200
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 200
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 200
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 200
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 200
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 200
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 200
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 200
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 200
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 200
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 200
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 200
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 200
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 200
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 200
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 200
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 200
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 200
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 200
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 200
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 200
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
final projection at end of training
dim_v 512
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.68 (  0.68)	train_acc   0.49 (  0.49)	train_minacc   0.52 (  0.50)	train_majacc   0.48 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3689 (6.3687)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.93it/s] 19%|#9        | 5/26 [00:00<00:00, 24.50it/s] 38%|###8      | 10/26 [00:00<00:00, 35.42it/s]                                                38%|###8      | 10/26 [00:00<00:00, 35.42it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.81it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.79it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.79it/s] 96%|#########6| 25/26 [00:00<00:00, 41.88it/s]100%|##########| 26/26 [00:00<00:00, 35.15it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.37 (  0.37)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.48 (  0.51)	test_minacc   0.39 (  0.47)	test_majacc   0.50 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.39 (  0.47)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.17 (  0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.52 (  0.49)	test_majacc   0.49 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.49 (  0.52)	test_corr_d   0.06 (  0.09)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.52 (  0.49)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.03 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.22it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.45 (  0.45)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.45 (  0.45)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.10 (  0.10)
Overall Timing[ 49/  1]	epoch_time 0.0459 (0.0441)	validation_time 0.0004 (0.0005)	train_time 0.0454 (0.0435)
record: (train_acc, test_acc) (0.7313000308871269, 0.6950000524520874)
last accs (train_acc, test_acc) (0.5105000156462193, 0.4540000259876251)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.161 MB of 0.161 MB uploadedwandb: \ 0.161 MB of 0.161 MB uploadedwandb: | 0.161 MB of 0.161 MB uploadedwandb: / 0.161 MB of 0.161 MB uploadedwandb: - 0.161 MB of 0.161 MB uploadedwandb: \ 0.161 MB of 0.161 MB uploadedwandb: | 0.161 MB of 0.161 MB uploadedwandb: / 0.161 MB of 0.161 MB uploadedwandb: - 0.161 MB of 0.161 MB uploadedwandb: \ 0.161 MB of 0.161 MB uploadedwandb: | 0.161 MB of 0.161 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmp4nppc36u'
wandb: ERROR Internal wandb error: file data was not synced
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_214015-d42w08ay
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/d42w08ay
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=200, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=5, fraction_z=0.99)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1261
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5981, 3, 32, 32) (6019, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:44,  1.78s/it] 19%|#9        | 5/26 [00:01<00:06,  3.44it/s] 35%|###4      | 9/26 [00:02<00:02,  6.72it/s] 46%|####6     | 12/26 [00:02<00:01,  9.41it/s] 58%|#####7    | 15/26 [00:02<00:00, 12.34it/s] 73%|#######3  | 19/26 [00:02<00:00, 16.27it/s] 88%|########8 | 23/26 [00:02<00:00, 19.63it/s]100%|##########| 26/26 [00:02<00:00, 13.23it/s]100%|##########| 26/26 [00:02<00:00,  8.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [0][  26/  26]	Loss 9.407 (12.076)	train_nll   0.61 (  0.52)	train_penalty   0.34 (  0.19)	weight_norm   8.80 ( 11.55)	train_acc   0.77 (  0.81)	train_minacc   0.00 (  0.05)	train_majacc   0.99 (  0.94)	train_corr   0.00 (  0.00)	l1 6.9984 (8.1434)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.86it/s] 23%|##3       | 6/26 [00:00<00:00, 25.81it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.81it/s] 42%|####2     | 11/26 [00:00<00:00, 31.50it/s] 62%|######1   | 16/26 [00:00<00:00, 37.40it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.40it/s] 81%|########  | 21/26 [00:00<00:00, 38.64it/s]100%|##########| 26/26 [00:00<00:00, 41.83it/s]100%|##########| 26/26 [00:00<00:00, 32.86it/s]
Test: [   0/  26]	Loss 0.451 (0.451)	test_acc   0.83 (  0.83)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.451 (0.451)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  10/  26]	Loss 0.472 (0.410)	test_acc   0.82 (  0.85)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.472 (0.410)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  20/  26]	Loss 0.325 (0.415)	test_acc   0.90 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.325 (0.415)	test_acc_d   0.90 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  26/  26]	Loss 0.567 (0.413)	test_acc   0.77 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.567 (0.413)	test_acc_d   0.77 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.99 (  0.99)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.53it/s]100%|##########| 1/1 [00:00<00:00,  2.53it/s]
Test: [  0/  1]	Loss 1.917 (1.917)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.917 (1.917)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  1/  1]	Loss 1.917 (1.917)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.917 (1.917)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/184/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0813 (0.0813)	validation_time 0.0067 (0.0067)	train_time 0.0732 (0.0732)
record: (train_acc, test_acc) (0.8470000228881835, 0.10500000417232513)
last accs (train_acc, test_acc) (0.8470000228881835, 0.10500000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.43it/s] 15%|#5        | 4/26 [00:00<00:01, 13.33it/s] 27%|##6       | 7/26 [00:00<00:01, 18.93it/s] 42%|####2     | 11/26 [00:00<00:00, 23.40it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.83it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.45it/s] 88%|########8 | 23/26 [00:00<00:00, 28.62it/s]100%|##########| 26/26 [00:01<00:00, 28.58it/s]100%|##########| 26/26 [00:01<00:00, 23.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [1][  26/  26]	Loss 4.893 (6.582)	train_nll   0.57 (  0.41)	train_penalty   0.27 (  0.06)	weight_norm   4.32 (  6.17)	train_acc   0.77 (  0.85)	train_minacc   0.02 (  0.01)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 6.0859 (6.3209)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.94it/s] 27%|##6       | 7/26 [00:00<00:00, 29.20it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.20it/s] 50%|#####     | 13/26 [00:00<00:00, 36.38it/s] 73%|#######3  | 19/26 [00:00<00:00, 39.76it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 39.76it/s] 92%|#########2| 24/26 [00:00<00:00, 42.02it/s]100%|##########| 26/26 [00:00<00:00, 35.21it/s]
Test: [   0/  26]	Loss 0.441 (0.441)	test_acc   0.82 (  0.82)	test_minacc   0.03 (  0.03)	test_majacc   0.98 (  0.98)	Loss_d 0.441 (0.441)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.451 (0.397)	test_acc   0.81 (  0.85)	test_minacc   0.08 (  0.08)	test_majacc   0.97 (  0.98)	Loss_d 0.451 (0.397)	test_acc_d   0.81 (  0.85)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  20/  26]	Loss 0.329 (0.396)	test_acc   0.89 (  0.84)	test_minacc   0.05 (  0.08)	test_majacc   0.99 (  0.98)	Loss_d 0.329 (0.396)	test_acc_d   0.89 (  0.84)	test_minacc_d   0.05 (  0.08)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.94 (  0.92)
Test: [  26/  26]	Loss 0.501 (0.392)	test_acc   0.79 (  0.84)	test_minacc   0.11 (  0.08)	test_majacc   0.99 (  0.98)	Loss_d 0.501 (0.392)	test_acc_d   0.79 (  0.84)	test_minacc_d   0.11 (  0.08)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.92 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.79it/s]
Test: [  0/  1]	Loss 1.788 (1.788)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   0.98 (  0.98)	Loss_d 1.788 (1.788)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  1/  1]	Loss 1.788 (1.788)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   0.98 (  0.98)	Loss_d 1.788 (1.788)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/184/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0442 (0.0628)	validation_time 0.0003 (0.0035)	train_time 0.0439 (0.0585)
record: (train_acc, test_acc) (0.8438000266551972, 0.14100000262260437)
last accs (train_acc, test_acc) (0.8438000266551972, 0.14100000262260437)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.37it/s] 19%|#9        | 5/26 [00:00<00:00, 25.05it/s] 31%|###       | 8/26 [00:00<00:00, 26.78it/s] 42%|####2     | 11/26 [00:00<00:00, 27.86it/s] 54%|#####3    | 14/26 [00:00<00:00, 28.50it/s] 65%|######5   | 17/26 [00:00<00:00, 28.62it/s] 81%|########  | 21/26 [00:00<00:00, 29.47it/s] 96%|#########6| 25/26 [00:00<00:00, 30.02it/s]100%|##########| 26/26 [00:00<00:00, 26.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [2][  26/  26]	Loss 3.047 (3.670)	train_nll   0.53 (  0.39)	train_penalty   0.21 (  0.05)	weight_norm   2.52 (  3.28)	train_acc   0.78 (  0.85)	train_minacc   0.02 (  0.07)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 5.5414 (5.5054)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.77it/s] 23%|##3       | 6/26 [00:00<00:00, 25.56it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.56it/s] 42%|####2     | 11/26 [00:00<00:00, 35.06it/s] 65%|######5   | 17/26 [00:00<00:00, 40.69it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.69it/s] 85%|########4 | 22/26 [00:00<00:00, 42.77it/s]100%|##########| 26/26 [00:00<00:00, 34.81it/s]
Test: [   0/  26]	Loss 0.382 (0.382)	test_acc   0.81 (  0.81)	test_minacc   0.37 (  0.37)	test_majacc   0.90 (  0.90)	Loss_d 0.382 (0.382)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.80 (  0.80)
Test: [  10/  26]	Loss 0.411 (0.382)	test_acc   0.81 (  0.83)	test_minacc   0.30 (  0.35)	test_majacc   0.92 (  0.92)	Loss_d 0.411 (0.382)	test_acc_d   0.81 (  0.83)	test_minacc_d   0.30 (  0.35)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.83 (  0.82)
Test: [  20/  26]	Loss 0.313 (0.382)	test_acc   0.87 (  0.83)	test_minacc   0.35 (  0.36)	test_majacc   0.93 (  0.91)	Loss_d 0.313 (0.382)	test_acc_d   0.87 (  0.83)	test_minacc_d   0.35 (  0.36)	test_majacc_d   0.93 (  0.91)	test_corr_d   0.85 (  0.82)
Test: [  26/  26]	Loss 0.420 (0.374)	test_acc   0.79 (  0.83)	test_minacc   0.33 (  0.37)	test_majacc   0.93 (  0.92)	Loss_d 0.420 (0.374)	test_acc_d   0.79 (  0.83)	test_minacc_d   0.33 (  0.37)	test_majacc_d   0.93 (  0.92)	test_corr_d   0.83 (  0.82)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.89it/s]
Test: [  0/  1]	Loss 1.561 (1.561)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.93 (  0.93)	Loss_d 1.561 (1.561)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.67 (  0.67)
Test: [  1/  1]	Loss 1.561 (1.561)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.93 (  0.93)	Loss_d 1.561 (1.561)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.67 (  0.67)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/184/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0457 (0.0571)	validation_time 0.0004 (0.0025)	train_time 0.0453 (0.0541)
record: (train_acc, test_acc) (0.8332000272870064, 0.31800001859664917)
last accs (train_acc, test_acc) (0.8332000272870064, 0.31800001859664917)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.35it/s] 15%|#5        | 4/26 [00:00<00:01, 14.99it/s] 31%|###       | 8/26 [00:00<00:00, 22.77it/s] 46%|####6     | 12/26 [00:00<00:00, 27.08it/s] 62%|######1   | 16/26 [00:00<00:00, 29.03it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.91it/s] 92%|#########2| 24/26 [00:00<00:00, 30.73it/s]100%|##########| 26/26 [00:01<00:00, 25.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [3][  26/  26]	Loss 2.118 (2.380)	train_nll   0.53 (  0.38)	train_penalty   0.21 (  0.04)	weight_norm   1.59 (  2.00)	train_acc   0.77 (  0.85)	train_minacc   0.00 (  0.07)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 5.2860 (5.2159)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.28it/s]  8%|7         | 2/26 [00:00<00:05,  4.76it/s] 27%|##6       | 7/26 [00:00<00:01, 17.47it/s]                                               27%|##6       | 7/26 [00:00<00:01, 17.47it/s] 46%|####6     | 12/26 [00:00<00:00, 25.91it/s] 65%|######5   | 17/26 [00:00<00:00, 32.55it/s]                                                65%|######5   | 17/26 [00:00<00:00, 32.55it/s] 85%|########4 | 22/26 [00:00<00:00, 34.71it/s]100%|##########| 26/26 [00:01<00:00, 25.97it/s]
Test: [   0/  26]	Loss 0.375 (0.375)	test_acc   0.81 (  0.81)	test_minacc   0.31 (  0.31)	test_majacc   0.91 (  0.91)	Loss_d 0.375 (0.375)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.432 (0.386)	test_acc   0.81 (  0.83)	test_minacc   0.27 (  0.31)	test_majacc   0.93 (  0.92)	Loss_d 0.432 (0.386)	test_acc_d   0.81 (  0.83)	test_minacc_d   0.27 (  0.31)	test_majacc_d   0.93 (  0.92)	test_corr_d   0.85 (  0.85)
Test: [  20/  26]	Loss 0.338 (0.390)	test_acc   0.88 (  0.83)	test_minacc   0.38 (  0.30)	test_majacc   0.94 (  0.92)	Loss_d 0.338 (0.390)	test_acc_d   0.88 (  0.83)	test_minacc_d   0.38 (  0.30)	test_majacc_d   0.94 (  0.92)	test_corr_d   0.86 (  0.85)
Test: [  26/  26]	Loss 0.445 (0.385)	test_acc   0.78 (  0.83)	test_minacc   0.30 (  0.31)	test_majacc   0.92 (  0.92)	Loss_d 0.445 (0.385)	test_acc_d   0.78 (  0.83)	test_minacc_d   0.30 (  0.31)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.84 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.78it/s]
Test: [  0/  1]	Loss 1.451 (1.451)	test_acc   0.27 (  0.27)	test_minacc   0.19 (  0.19)	test_majacc   0.95 (  0.95)	Loss_d 1.451 (1.451)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.78 (  0.78)
Test: [  1/  1]	Loss 1.451 (1.451)	test_acc   0.27 (  0.27)	test_minacc   0.19 (  0.19)	test_majacc   0.95 (  0.95)	Loss_d 1.451 (1.451)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.78 (  0.78)
Overall Timing[  3/  1]	epoch_time 0.0426 (0.0535)	validation_time 0.0003 (0.0020)	train_time 0.0423 (0.0512)
record: (train_acc, test_acc) (0.8332000272870064, 0.31800001859664917)
last accs (train_acc, test_acc) (0.8273000293374062, 0.27000001072883606)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.53it/s] 15%|#5        | 4/26 [00:00<00:01, 18.82it/s] 31%|###       | 8/26 [00:00<00:00, 25.32it/s] 46%|####6     | 12/26 [00:00<00:00, 28.51it/s] 62%|######1   | 16/26 [00:00<00:00, 29.73it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.13it/s] 88%|########8 | 23/26 [00:00<00:00, 29.67it/s]100%|##########| 26/26 [00:00<00:00, 26.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [4][  26/  26]	Loss 1.507 (1.657)	train_nll   0.47 (  0.36)	train_penalty   0.13 (  0.03)	weight_norm   1.04 (  1.29)	train_acc   0.77 (  0.85)	train_minacc   0.00 (  0.13)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 5.6749 (5.2817)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.46it/s] 23%|##3       | 6/26 [00:00<00:00, 29.71it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.71it/s] 42%|####2     | 11/26 [00:00<00:00, 37.02it/s] 62%|######1   | 16/26 [00:00<00:00, 40.88it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.88it/s] 81%|########  | 21/26 [00:00<00:00, 42.17it/s]100%|##########| 26/26 [00:00<00:00, 44.16it/s]100%|##########| 26/26 [00:00<00:00, 35.80it/s]
Test: [   0/  26]	Loss 0.358 (0.358)	test_acc   0.83 (  0.83)	test_minacc   0.48 (  0.48)	test_majacc   0.90 (  0.90)	Loss_d 0.358 (0.358)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.80 (  0.80)
Test: [  10/  26]	Loss 0.407 (0.360)	test_acc   0.82 (  0.84)	test_minacc   0.38 (  0.43)	test_majacc   0.92 (  0.91)	Loss_d 0.407 (0.360)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.38 (  0.43)	test_majacc_d   0.92 (  0.91)	test_corr_d   0.83 (  0.82)
Test: [  20/  26]	Loss 0.285 (0.362)	test_acc   0.88 (  0.84)	test_minacc   0.47 (  0.42)	test_majacc   0.93 (  0.91)	Loss_d 0.285 (0.362)	test_acc_d   0.88 (  0.84)	test_minacc_d   0.47 (  0.42)	test_majacc_d   0.93 (  0.91)	test_corr_d   0.85 (  0.82)
Test: [  26/  26]	Loss 0.404 (0.355)	test_acc   0.84 (  0.84)	test_minacc   0.49 (  0.44)	test_majacc   0.94 (  0.91)	Loss_d 0.404 (0.355)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.49 (  0.44)	test_majacc_d   0.94 (  0.91)	test_corr_d   0.81 (  0.82)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.94it/s]
Test: [  0/  1]	Loss 1.544 (1.544)	test_acc   0.30 (  0.30)	test_minacc   0.23 (  0.23)	test_majacc   0.96 (  0.96)	Loss_d 1.544 (1.544)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.63 (  0.63)
Test: [  1/  1]	Loss 1.544 (1.544)	test_acc   0.30 (  0.30)	test_minacc   0.23 (  0.23)	test_majacc   0.96 (  0.96)	Loss_d 1.544 (1.544)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.63 (  0.63)
Overall Timing[  4/  1]	epoch_time 0.0408 (0.0509)	validation_time 0.0004 (0.0017)	train_time 0.0403 (0.0490)
record: (train_acc, test_acc) (0.8332000272870064, 0.31800001859664917)
last accs (train_acc, test_acc) (0.8393000262379646, 0.2990000247955322)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.01it/s] 15%|#5        | 4/26 [00:00<00:01, 19.71it/s] 27%|##6       | 7/26 [00:00<00:00, 24.08it/s] 42%|####2     | 11/26 [00:00<00:00, 26.76it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.24it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.31it/s] 88%|########8 | 23/26 [00:00<00:00, 29.64it/s]100%|##########| 26/26 [00:01<00:00, 25.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [5][  26/  26]	Loss 1.195 (1.212)	train_nll   0.51 (  0.36)	train_penalty   0.20 (  0.03)	weight_norm   0.69 (  0.85)	train_acc   0.77 (  0.84)	train_minacc   0.00 (  0.13)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 6.7166 (6.0719)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.10it/s] 27%|##6       | 7/26 [00:00<00:00, 34.36it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.36it/s] 46%|####6     | 12/26 [00:00<00:00, 39.90it/s] 65%|######5   | 17/26 [00:00<00:00, 37.38it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.38it/s] 85%|########4 | 22/26 [00:00<00:00, 40.06it/s]100%|##########| 26/26 [00:00<00:00, 36.68it/s]
Test: [   0/  26]	Loss 0.326 (0.326)	test_acc   0.84 (  0.84)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.326 (0.326)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.371 (0.336)	test_acc   0.82 (  0.86)	test_minacc   0.10 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.371 (0.336)	test_acc_d   0.82 (  0.86)	test_minacc_d   0.10 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.89 (  0.89)
Test: [  20/  26]	Loss 0.266 (0.337)	test_acc   0.89 (  0.85)	test_minacc   0.03 (  0.11)	test_majacc   0.99 (  0.98)	Loss_d 0.266 (0.337)	test_acc_d   0.89 (  0.85)	test_minacc_d   0.03 (  0.11)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.90 (  0.89)
Test: [  26/  26]	Loss 0.424 (0.333)	test_acc   0.80 (  0.85)	test_minacc   0.16 (  0.12)	test_majacc   0.99 (  0.98)	Loss_d 0.424 (0.333)	test_acc_d   0.80 (  0.85)	test_minacc_d   0.16 (  0.12)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.89 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.59it/s]
Test: [  0/  1]	Loss 1.543 (1.543)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 1.543 (1.543)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.76 (  0.76)
Test: [  1/  1]	Loss 1.543 (1.543)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 1.543 (1.543)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.76 (  0.76)
Overall Timing[  5/  1]	epoch_time 0.0418 (0.0494)	validation_time 0.0007 (0.0015)	train_time 0.0411 (0.0477)
record: (train_acc, test_acc) (0.8332000272870064, 0.31800001859664917)
last accs (train_acc, test_acc) (0.853200027346611, 0.16300000250339508)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.33it/s] 15%|#5        | 4/26 [00:00<00:01, 18.85it/s] 31%|###       | 8/26 [00:00<00:00, 25.73it/s] 46%|####6     | 12/26 [00:00<00:00, 28.11it/s] 62%|######1   | 16/26 [00:00<00:00, 29.59it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.25it/s] 88%|########8 | 23/26 [00:00<00:00, 29.66it/s]100%|##########| 26/26 [00:01<00:00, 25.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [6][  26/  26]	Loss 0.915 (0.914)	train_nll   0.46 (  0.35)	train_penalty   0.11 (  0.03)	weight_norm   0.46 (  0.56)	train_acc   0.77 (  0.85)	train_minacc   0.05 (  0.18)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 7.4724 (6.9221)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.42it/s] 27%|##6       | 7/26 [00:00<00:00, 29.76it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.76it/s] 46%|####6     | 12/26 [00:00<00:00, 37.58it/s] 65%|######5   | 17/26 [00:00<00:00, 40.83it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.83it/s] 85%|########4 | 22/26 [00:00<00:00, 40.41it/s]100%|##########| 26/26 [00:00<00:00, 36.69it/s]
Test: [   0/  26]	Loss 0.362 (0.362)	test_acc   0.84 (  0.84)	test_minacc   0.17 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 0.362 (0.362)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.419 (0.371)	test_acc   0.81 (  0.85)	test_minacc   0.10 (  0.15)	test_majacc   0.97 (  0.97)	Loss_d 0.419 (0.371)	test_acc_d   0.81 (  0.85)	test_minacc_d   0.10 (  0.15)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.88 (  0.88)
Test: [  20/  26]	Loss 0.298 (0.375)	test_acc   0.88 (  0.85)	test_minacc   0.10 (  0.16)	test_majacc   0.97 (  0.97)	Loss_d 0.298 (0.375)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.10 (  0.16)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.88)
Test: [  26/  26]	Loss 0.409 (0.369)	test_acc   0.79 (  0.85)	test_minacc   0.16 (  0.16)	test_majacc   0.97 (  0.97)	Loss_d 0.409 (0.369)	test_acc_d   0.79 (  0.85)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.88 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.58it/s]
Test: [  0/  1]	Loss 1.649 (1.649)	test_acc   0.19 (  0.19)	test_minacc   0.11 (  0.11)	test_majacc   0.97 (  0.97)	Loss_d 1.649 (1.649)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.79 (  0.79)
Test: [  1/  1]	Loss 1.649 (1.649)	test_acc   0.19 (  0.19)	test_minacc   0.11 (  0.11)	test_majacc   0.97 (  0.97)	Loss_d 1.649 (1.649)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.79 (  0.79)
Overall Timing[  6/  1]	epoch_time 0.0429 (0.0485)	validation_time 0.0005 (0.0013)	train_time 0.0424 (0.0469)
record: (train_acc, test_acc) (0.8332000272870064, 0.31800001859664917)
last accs (train_acc, test_acc) (0.8462000297904014, 0.19300000369548798)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.53it/s] 15%|#5        | 4/26 [00:00<00:01, 18.60it/s] 27%|##6       | 7/26 [00:00<00:00, 22.53it/s] 42%|####2     | 11/26 [00:00<00:00, 25.69it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.68it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.63it/s] 88%|########8 | 23/26 [00:00<00:00, 29.11it/s]100%|##########| 26/26 [00:01<00:00, 25.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [7][  26/  26]	Loss 0.002 (0.527)	train_nll   0.60 (  0.39)	train_penalty   0.00 (  0.02)	weight_norm   0.39 (  0.38)	train_acc   0.65 (  0.82)	train_minacc   0.53 (  0.23)	train_majacc   0.69 (  0.93)	train_corr   0.00 (  0.00)	l1 8.0545 (8.2127)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.82it/s] 23%|##3       | 6/26 [00:00<00:00, 32.73it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.73it/s] 42%|####2     | 11/26 [00:00<00:00, 40.44it/s] 65%|######5   | 17/26 [00:00<00:00, 42.52it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.52it/s] 88%|########8 | 23/26 [00:00<00:00, 44.70it/s]100%|##########| 26/26 [00:00<00:00, 38.68it/s]
Test: [   0/  26]	Loss 0.605 (0.605)	test_acc   0.71 (  0.71)	test_minacc   0.51 (  0.51)	test_majacc   0.75 (  0.75)	Loss_d 0.605 (0.605)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.39 (  0.39)
Test: [  10/  26]	Loss 0.580 (0.599)	test_acc   0.72 (  0.72)	test_minacc   0.68 (  0.60)	test_majacc   0.73 (  0.74)	Loss_d 0.580 (0.599)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.68 (  0.60)	test_majacc_d   0.73 (  0.74)	test_corr_d   0.33 (  0.39)
Test: [  20/  26]	Loss 0.601 (0.600)	test_acc   0.72 (  0.72)	test_minacc   0.47 (  0.60)	test_majacc   0.75 (  0.74)	Loss_d 0.601 (0.600)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.47 (  0.60)	test_majacc_d   0.75 (  0.74)	test_corr_d   0.45 (  0.37)
Test: [  26/  26]	Loss 0.616 (0.601)	test_acc   0.65 (  0.71)	test_minacc   0.53 (  0.59)	test_majacc   0.69 (  0.73)	Loss_d 0.616 (0.601)	test_acc_d   0.65 (  0.71)	test_minacc_d   0.53 (  0.59)	test_majacc_d   0.69 (  0.73)	test_corr_d   0.25 (  0.37)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.12it/s]
Test: [  0/  1]	Loss 0.672 (0.672)	test_acc   0.57 (  0.57)	test_minacc   0.55 (  0.55)	test_majacc   0.75 (  0.75)	Loss_d 0.672 (0.672)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.75 (  0.75)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.672 (0.672)	test_acc   0.57 (  0.57)	test_minacc   0.55 (  0.55)	test_majacc   0.75 (  0.75)	Loss_d 0.672 (0.672)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.75 (  0.75)	test_corr_d  -0.16 ( -0.16)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/184/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0393 (0.0473)	validation_time 0.0004 (0.0012)	train_time 0.0388 (0.0459)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.08it/s] 15%|#5        | 4/26 [00:00<00:01, 13.52it/s] 27%|##6       | 7/26 [00:00<00:01, 18.59it/s] 42%|####2     | 11/26 [00:00<00:00, 23.01it/s] 54%|#####3    | 14/26 [00:00<00:00, 24.73it/s] 69%|######9   | 18/26 [00:00<00:00, 26.82it/s] 85%|########4 | 22/26 [00:00<00:00, 28.07it/s]100%|##########| 26/26 [00:01<00:00, 29.15it/s]100%|##########| 26/26 [00:01<00:00, 22.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [8][  26/  26]	Loss 0.000 (0.001)	train_nll   0.68 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm   0.56 (  0.50)	train_acc   0.50 (  0.58)	train_minacc   0.44 (  0.56)	train_majacc   0.51 (  0.59)	train_corr   0.00 (  0.00)	l1 7.4455 (7.6137)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.92it/s] 23%|##3       | 6/26 [00:00<00:00, 24.43it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.43it/s] 42%|####2     | 11/26 [00:00<00:00, 32.81it/s] 62%|######1   | 16/26 [00:00<00:00, 38.07it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.07it/s] 81%|########  | 21/26 [00:00<00:00, 40.59it/s]100%|##########| 26/26 [00:00<00:00, 43.31it/s]100%|##########| 26/26 [00:00<00:00, 33.35it/s]
Test: [   0/  26]	Loss 0.683 (0.683)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.683 (0.683)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.676 (0.684)	test_acc   0.53 (  0.49)	test_minacc   0.52 (  0.46)	test_majacc   0.53 (  0.50)	Loss_d 0.676 (0.684)	test_acc_d   0.53 (  0.49)	test_minacc_d   0.52 (  0.46)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.01 (  0.10)
Test: [  20/  26]	Loss 0.690 (0.683)	test_acc   0.49 (  0.50)	test_minacc   0.47 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.690 (0.683)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.10 (  0.09)
Test: [  26/  26]	Loss 0.683 (0.684)	test_acc   0.50 (  0.50)	test_minacc   0.44 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.683 (0.684)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.06 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.22it/s]
Test: [  0/  1]	Loss 0.671 (0.671)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.671 (0.671)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.28 ( -0.28)
Test: [  1/  1]	Loss 0.671 (0.671)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.671 (0.671)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.28 ( -0.28)
Overall Timing[  8/  1]	epoch_time 0.0419 (0.0467)	validation_time 0.0004 (0.0011)	train_time 0.0415 (0.0454)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5000000121593475, 0.5)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.59it/s] 19%|#9        | 5/26 [00:00<00:01, 16.45it/s] 35%|###4      | 9/26 [00:00<00:00, 21.85it/s] 46%|####6     | 12/26 [00:00<00:00, 23.92it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.72it/s] 69%|######9   | 18/26 [00:00<00:00, 26.93it/s] 85%|########4 | 22/26 [00:00<00:00, 28.03it/s]100%|##########| 26/26 [00:01<00:00, 29.16it/s]100%|##########| 26/26 [00:01<00:00, 23.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [9][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.57 (  0.57)	train_acc   0.48 (  0.49)	train_minacc   0.46 (  0.49)	train_majacc   0.49 (  0.49)	train_corr   0.00 (  0.00)	l1 7.3841 (7.4019)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.98it/s] 27%|##6       | 7/26 [00:00<00:00, 36.22it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.22it/s] 46%|####6     | 12/26 [00:00<00:00, 40.34it/s] 65%|######5   | 17/26 [00:00<00:00, 40.42it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.42it/s] 85%|########4 | 22/26 [00:00<00:00, 42.96it/s]100%|##########| 26/26 [00:00<00:00, 37.59it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.688 (0.688)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.689 (0.691)	test_acc   0.52 (  0.48)	test_minacc   0.52 (  0.46)	test_majacc   0.51 (  0.49)	Loss_d 0.689 (0.691)	test_acc_d   0.52 (  0.48)	test_minacc_d   0.52 (  0.46)	test_majacc_d   0.51 (  0.49)	test_corr_d  -0.08 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.690)	test_acc   0.47 (  0.49)	test_minacc   0.45 (  0.49)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.690)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.48 (  0.49)	test_corr_d   0.08 (  0.05)
Test: [  26/  26]	Loss 0.689 (0.690)	test_acc   0.49 (  0.49)	test_minacc   0.46 (  0.49)	test_majacc   0.50 (  0.49)	Loss_d 0.689 (0.690)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.46 (  0.49)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.11 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.88it/s]
Test: [  0/  1]	Loss 0.685 (0.685)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.47 (  0.47)	Loss_d 0.685 (0.685)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.685 (0.685)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.47 (  0.47)	Loss_d 0.685 (0.685)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.23 ( -0.23)
Overall Timing[  9/  1]	epoch_time 0.0567 (0.0477)	validation_time 0.0004 (0.0011)	train_time 0.0563 (0.0465)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.48750000742077826, 0.49400001764297485)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.45it/s] 19%|#9        | 5/26 [00:00<00:00, 23.78it/s] 31%|###       | 8/26 [00:00<00:00, 26.12it/s] 42%|####2     | 11/26 [00:00<00:00, 27.36it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.61it/s] 69%|######9   | 18/26 [00:00<00:00, 28.74it/s] 85%|########4 | 22/26 [00:00<00:00, 29.69it/s]100%|##########| 26/26 [00:00<00:00, 30.94it/s]100%|##########| 26/26 [00:00<00:00, 26.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [10][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.57 (  0.57)	train_acc   0.47 (  0.49)	train_minacc   0.46 (  0.49)	train_majacc   0.48 (  0.49)	train_corr   0.00 (  0.00)	l1 7.3625 (7.3643)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.31it/s] 23%|##3       | 6/26 [00:00<00:00, 30.62it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.62it/s] 42%|####2     | 11/26 [00:00<00:00, 37.40it/s] 62%|######1   | 16/26 [00:00<00:00, 41.13it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.13it/s] 81%|########  | 21/26 [00:00<00:00, 39.09it/s]100%|##########| 26/26 [00:00<00:00, 42.27it/s]100%|##########| 26/26 [00:00<00:00, 35.43it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.47)	test_minacc   0.51 (  0.45)	test_majacc   0.50 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.47)	test_minacc_d   0.51 (  0.45)	test_majacc_d   0.50 (  0.47)	test_corr_d  -0.12 (  0.01)
Test: [  20/  26]	Loss 0.695 (0.692)	test_acc   0.47 (  0.48)	test_minacc   0.45 (  0.48)	test_majacc   0.47 (  0.48)	Loss_d 0.695 (0.692)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.45 (  0.48)	test_majacc_d   0.47 (  0.48)	test_corr_d   0.04 (  0.02)
Test: [  26/  26]	Loss 0.691 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.46 (  0.48)	test_majacc   0.48 (  0.47)	Loss_d 0.691 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.46 (  0.48)	test_majacc_d   0.48 (  0.47)	test_corr_d  -0.10 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.50it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.44 (  0.44)	Loss_d 0.688 (0.688)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.44 (  0.44)	Loss_d 0.688 (0.688)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 10/  1]	epoch_time 0.0453 (0.0475)	validation_time 0.0004 (0.0010)	train_time 0.0449 (0.0464)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.4764000062942505, 0.4880000352859497)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.19it/s] 23%|##3       | 6/26 [00:00<00:00, 26.14it/s] 38%|###8      | 10/26 [00:00<00:00, 28.75it/s] 50%|#####     | 13/26 [00:00<00:00, 29.15it/s] 62%|######1   | 16/26 [00:00<00:00, 28.89it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.15it/s] 88%|########8 | 23/26 [00:00<00:00, 29.24it/s]100%|##########| 26/26 [00:00<00:00, 27.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [11][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.57 (  0.57)	train_acc   0.46 (  0.48)	train_minacc   0.42 (  0.48)	train_majacc   0.48 (  0.48)	train_corr   0.00 (  0.00)	l1 7.3496 (7.3488)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.53it/s] 23%|##3       | 6/26 [00:00<00:00, 24.15it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.15it/s] 42%|####2     | 11/26 [00:00<00:00, 32.49it/s] 62%|######1   | 16/26 [00:00<00:00, 35.52it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.52it/s] 81%|########  | 21/26 [00:00<00:00, 38.63it/s]100%|##########| 26/26 [00:00<00:00, 41.93it/s]100%|##########| 26/26 [00:00<00:00, 32.39it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.48 (  0.48)	Loss_d 0.691 (0.691)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.695 (0.694)	test_acc   0.49 (  0.46)	test_minacc   0.49 (  0.44)	test_majacc   0.50 (  0.47)	Loss_d 0.695 (0.694)	test_acc_d   0.49 (  0.46)	test_minacc_d   0.49 (  0.44)	test_majacc_d   0.50 (  0.47)	test_corr_d  -0.13 ( -0.00)
Test: [  20/  26]	Loss 0.695 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.47 (  0.47)	test_majacc   0.47 (  0.47)	Loss_d 0.695 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.03 (  0.00)
Test: [  26/  26]	Loss 0.691 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.44 (  0.47)	test_majacc   0.48 (  0.47)	Loss_d 0.691 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.44 (  0.47)	test_majacc_d   0.48 (  0.47)	test_corr_d  -0.09 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.09it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.40 (  0.40)	Loss_d 0.690 (0.690)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.40 (  0.40)	Loss_d 0.690 (0.690)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 11/  1]	epoch_time 0.0412 (0.0470)	validation_time 0.0004 (0.0010)	train_time 0.0407 (0.0459)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.4698000058531761, 0.47600001096725464)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.49it/s] 15%|#5        | 4/26 [00:00<00:01, 18.61it/s] 31%|###       | 8/26 [00:00<00:00, 24.53it/s] 46%|####6     | 12/26 [00:00<00:00, 27.47it/s] 62%|######1   | 16/26 [00:00<00:00, 29.16it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.95it/s] 92%|#########2| 24/26 [00:00<00:00, 30.57it/s]100%|##########| 26/26 [00:00<00:00, 26.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [12][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.57 (  0.57)	train_acc   0.47 (  0.48)	train_minacc   0.42 (  0.48)	train_majacc   0.48 (  0.48)	train_corr   0.00 (  0.00)	l1 7.3419 (7.3404)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 34.52it/s] 35%|###4      | 9/26 [00:00<00:00, 41.08it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.08it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.48it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.50it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.50it/s] 92%|#########2| 24/26 [00:00<00:00, 42.34it/s]100%|##########| 26/26 [00:00<00:00, 38.88it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.48 (  0.48)	test_minacc   0.46 (  0.46)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.695 (0.694)	test_acc   0.49 (  0.46)	test_minacc   0.49 (  0.44)	test_majacc   0.49 (  0.46)	Loss_d 0.695 (0.694)	test_acc_d   0.49 (  0.46)	test_minacc_d   0.49 (  0.44)	test_majacc_d   0.49 (  0.46)	test_corr_d  -0.13 ( -0.01)
Test: [  20/  26]	Loss 0.695 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.47 (  0.47)	test_majacc   0.47 (  0.47)	Loss_d 0.695 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.02 ( -0.00)
Test: [  26/  26]	Loss 0.691 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.42 (  0.47)	test_majacc   0.48 (  0.47)	Loss_d 0.691 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.42 (  0.47)	test_majacc_d   0.48 (  0.47)	test_corr_d  -0.08 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.81it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.47 (  0.47)	test_minacc   0.48 (  0.48)	test_majacc   0.40 (  0.40)	Loss_d 0.691 (0.691)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.47 (  0.47)	test_minacc   0.48 (  0.48)	test_majacc   0.40 (  0.40)	Loss_d 0.691 (0.691)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 12/  1]	epoch_time 0.0417 (0.0466)	validation_time 0.0003 (0.0009)	train_time 0.0414 (0.0455)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.46690000349283217, 0.4710000157356262)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.24it/s] 12%|#1        | 3/26 [00:00<00:01, 12.27it/s] 27%|##6       | 7/26 [00:00<00:00, 20.43it/s] 38%|###8      | 10/26 [00:00<00:00, 23.58it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.21it/s] 65%|######5   | 17/26 [00:00<00:00, 27.26it/s] 81%|########  | 21/26 [00:00<00:00, 28.41it/s] 92%|#########2| 24/26 [00:00<00:00, 28.66it/s]100%|##########| 26/26 [00:01<00:00, 23.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [13][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.57 (  0.57)	train_acc   0.45 (  0.47)	train_minacc   0.40 (  0.47)	train_majacc   0.47 (  0.47)	train_corr   0.00 (  0.00)	l1 7.3377 (7.3359)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.55it/s] 19%|#9        | 5/26 [00:00<00:01, 19.74it/s] 38%|###8      | 10/26 [00:00<00:00, 30.19it/s]                                                38%|###8      | 10/26 [00:00<00:00, 30.19it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.50it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.46it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.46it/s]100%|##########| 26/26 [00:00<00:00, 43.24it/s]100%|##########| 26/26 [00:00<00:00, 32.39it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.695 (0.694)	test_acc   0.48 (  0.46)	test_minacc   0.51 (  0.44)	test_majacc   0.47 (  0.46)	Loss_d 0.695 (0.694)	test_acc_d   0.48 (  0.46)	test_minacc_d   0.51 (  0.44)	test_majacc_d   0.47 (  0.46)	test_corr_d  -0.14 ( -0.01)
Test: [  20/  26]	Loss 0.695 (0.693)	test_acc   0.47 (  0.46)	test_minacc   0.45 (  0.46)	test_majacc   0.47 (  0.46)	Loss_d 0.695 (0.693)	test_acc_d   0.47 (  0.46)	test_minacc_d   0.45 (  0.46)	test_majacc_d   0.47 (  0.46)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.691 (0.693)	test_acc   0.45 (  0.46)	test_minacc   0.40 (  0.47)	test_majacc   0.47 (  0.46)	Loss_d 0.691 (0.693)	test_acc_d   0.45 (  0.46)	test_minacc_d   0.40 (  0.47)	test_majacc_d   0.47 (  0.46)	test_corr_d  -0.08 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.04it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.40 (  0.40)	Loss_d 0.691 (0.691)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.40 (  0.40)	Loss_d 0.691 (0.691)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 13/  1]	epoch_time 0.0435 (0.0464)	validation_time 0.0005 (0.0009)	train_time 0.0430 (0.0454)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.46380000379681585, 0.4750000238418579)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.49it/s] 19%|#9        | 5/26 [00:00<00:00, 22.98it/s] 31%|###       | 8/26 [00:00<00:00, 24.57it/s] 42%|####2     | 11/26 [00:00<00:00, 26.03it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.51it/s] 69%|######9   | 18/26 [00:00<00:00, 28.07it/s] 81%|########  | 21/26 [00:00<00:00, 28.32it/s] 92%|#########2| 24/26 [00:00<00:00, 28.66it/s]100%|##########| 26/26 [00:01<00:00, 25.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [14][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.57 (  0.57)	train_acc   0.45 (  0.47)	train_minacc   0.44 (  0.47)	train_majacc   0.45 (  0.47)	train_corr   0.00 (  0.00)	l1 7.3355 (7.3335)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.88it/s] 23%|##3       | 6/26 [00:00<00:00, 25.56it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.56it/s] 42%|####2     | 11/26 [00:00<00:00, 33.79it/s] 62%|######1   | 16/26 [00:00<00:00, 36.87it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.87it/s] 81%|########  | 21/26 [00:00<00:00, 38.45it/s]100%|##########| 26/26 [00:00<00:00, 41.50it/s]100%|##########| 26/26 [00:00<00:00, 32.62it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.695 (0.694)	test_acc   0.47 (  0.45)	test_minacc   0.52 (  0.45)	test_majacc   0.46 (  0.45)	Loss_d 0.695 (0.694)	test_acc_d   0.47 (  0.45)	test_minacc_d   0.52 (  0.45)	test_majacc_d   0.46 (  0.45)	test_corr_d  -0.15 ( -0.02)
Test: [  20/  26]	Loss 0.695 (0.693)	test_acc   0.45 (  0.46)	test_minacc   0.47 (  0.47)	test_majacc   0.45 (  0.46)	Loss_d 0.695 (0.693)	test_acc_d   0.45 (  0.46)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.45 (  0.46)	test_corr_d  -0.00 ( -0.01)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.45 (  0.46)	test_minacc   0.44 (  0.48)	test_majacc   0.46 (  0.46)	Loss_d 0.692 (0.693)	test_acc_d   0.45 (  0.46)	test_minacc_d   0.44 (  0.48)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.08 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.39it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.35 (  0.35)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.35 (  0.35)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.35 (  0.35)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.35 (  0.35)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 14/  1]	epoch_time 0.0449 (0.0463)	validation_time 0.0004 (0.0008)	train_time 0.0445 (0.0453)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.4593000040650368, 0.49000000953674316)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.60it/s] 15%|#5        | 4/26 [00:00<00:01, 12.89it/s] 27%|##6       | 7/26 [00:00<00:01, 18.48it/s] 42%|####2     | 11/26 [00:00<00:00, 23.42it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.24it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.00it/s] 88%|########8 | 23/26 [00:00<00:00, 28.72it/s]100%|##########| 26/26 [00:01<00:00, 23.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [15][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.57 (  0.57)	train_acc   0.45 (  0.46)	train_minacc   0.51 (  0.49)	train_majacc   0.44 (  0.45)	train_corr   0.00 (  0.00)	l1 7.3340 (7.3324)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.03it/s] 27%|##6       | 7/26 [00:00<00:00, 30.65it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.65it/s] 46%|####6     | 12/26 [00:00<00:00, 36.89it/s] 65%|######5   | 17/26 [00:00<00:00, 40.50it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.50it/s] 85%|########4 | 22/26 [00:00<00:00, 39.47it/s]100%|##########| 26/26 [00:00<00:00, 35.79it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.51 (  0.51)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.695 (0.694)	test_acc   0.45 (  0.44)	test_minacc   0.56 (  0.47)	test_majacc   0.43 (  0.44)	Loss_d 0.695 (0.694)	test_acc_d   0.45 (  0.44)	test_minacc_d   0.56 (  0.47)	test_majacc_d   0.43 (  0.44)	test_corr_d  -0.15 ( -0.02)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.45)	test_minacc   0.50 (  0.49)	test_majacc   0.42 (  0.44)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.45)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.42 (  0.44)	test_corr_d  -0.01 ( -0.01)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.46 (  0.45)	test_minacc   0.53 (  0.49)	test_majacc   0.45 (  0.44)	Loss_d 0.692 (0.693)	test_acc_d   0.46 (  0.45)	test_minacc_d   0.53 (  0.49)	test_majacc_d   0.45 (  0.44)	test_corr_d  -0.08 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 51.53it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.53 (  0.53)	test_majacc   0.31 (  0.31)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.31 (  0.31)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.53 (  0.53)	test_majacc   0.31 (  0.31)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.31 (  0.31)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 15/  1]	epoch_time 0.0455 (0.0462)	validation_time 0.0005 (0.0008)	train_time 0.0449 (0.0453)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.44970000451803205, 0.5080000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.92it/s] 15%|#5        | 4/26 [00:00<00:01, 12.91it/s] 27%|##6       | 7/26 [00:00<00:01, 18.29it/s] 38%|###8      | 10/26 [00:00<00:00, 21.88it/s] 50%|#####     | 13/26 [00:00<00:00, 24.09it/s] 62%|######1   | 16/26 [00:00<00:00, 25.81it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.18it/s] 88%|########8 | 23/26 [00:01<00:00, 27.56it/s]100%|##########| 26/26 [00:01<00:00, 22.08it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.57 (  0.57)	train_acc   0.46 (  0.45)	train_minacc   0.58 (  0.51)	train_majacc   0.43 (  0.43)	train_corr   0.00 (  0.00)	l1 7.3333 (7.3318)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.55it/s] 15%|#5        | 4/26 [00:00<00:02, 10.37it/s] 35%|###4      | 9/26 [00:00<00:00, 21.33it/s]                                               35%|###4      | 9/26 [00:00<00:00, 21.33it/s] 54%|#####3    | 14/26 [00:00<00:00, 29.01it/s] 73%|#######3  | 19/26 [00:00<00:00, 34.15it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 34.15it/s] 92%|#########2| 24/26 [00:00<00:00, 35.57it/s]100%|##########| 26/26 [00:00<00:00, 27.61it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.54 (  0.54)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.695 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.59 (  0.49)	test_majacc   0.40 (  0.42)	Loss_d 0.695 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.59 (  0.49)	test_majacc_d   0.40 (  0.42)	test_corr_d  -0.15 ( -0.03)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.40 (  0.44)	test_minacc   0.47 (  0.51)	test_majacc   0.39 (  0.42)	Loss_d 0.694 (0.693)	test_acc_d   0.40 (  0.44)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.39 (  0.42)	test_corr_d  -0.02 ( -0.02)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.47 (  0.44)	test_minacc   0.58 (  0.51)	test_majacc   0.44 (  0.42)	Loss_d 0.692 (0.693)	test_acc_d   0.47 (  0.44)	test_minacc_d   0.58 (  0.51)	test_majacc_d   0.44 (  0.42)	test_corr_d  -0.09 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 56.50it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.55 (  0.55)	test_majacc   0.30 (  0.30)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.30 (  0.30)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.55 (  0.55)	test_majacc   0.30 (  0.30)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.30 (  0.30)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 16/  1]	epoch_time 0.0464 (0.0462)	validation_time 0.0007 (0.0008)	train_time 0.0457 (0.0453)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.43620000457763675, 0.5260000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.79it/s] 19%|#9        | 5/26 [00:00<00:01, 14.72it/s] 35%|###4      | 9/26 [00:00<00:00, 20.38it/s] 46%|####6     | 12/26 [00:00<00:00, 22.92it/s] 58%|#####7    | 15/26 [00:00<00:00, 24.31it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.46it/s] 88%|########8 | 23/26 [00:01<00:00, 27.86it/s]100%|##########| 26/26 [00:01<00:00, 22.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.57 (  0.57)	train_acc   0.47 (  0.44)	train_minacc   0.58 (  0.53)	train_majacc   0.44 (  0.43)	train_corr   0.00 (  0.00)	l1 7.3331 (7.3315)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.59it/s] 19%|#9        | 5/26 [00:00<00:01, 21.00it/s] 38%|###8      | 10/26 [00:00<00:00, 30.98it/s]                                                38%|###8      | 10/26 [00:00<00:00, 30.98it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.91it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.20it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 38.20it/s] 96%|#########6| 25/26 [00:00<00:00, 40.60it/s]100%|##########| 26/26 [00:00<00:00, 32.54it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.54 (  0.54)	test_majacc   0.39 (  0.39)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.695 (0.694)	test_acc   0.43 (  0.42)	test_minacc   0.56 (  0.50)	test_majacc   0.39 (  0.41)	Loss_d 0.695 (0.694)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.56 (  0.50)	test_majacc_d   0.39 (  0.41)	test_corr_d  -0.15 ( -0.03)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.41 (  0.43)	test_minacc   0.50 (  0.51)	test_majacc   0.40 (  0.42)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.43)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.40 (  0.42)	test_corr_d  -0.03 ( -0.02)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.47 (  0.43)	test_minacc   0.60 (  0.52)	test_majacc   0.44 (  0.42)	Loss_d 0.692 (0.693)	test_acc_d   0.47 (  0.43)	test_minacc_d   0.60 (  0.52)	test_majacc_d   0.44 (  0.42)	test_corr_d  -0.08 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.27it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.55 (  0.55)	test_majacc   0.34 (  0.34)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.34 (  0.34)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.55 (  0.55)	test_majacc   0.34 (  0.34)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.34 (  0.34)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 17/  1]	epoch_time 0.0442 (0.0461)	validation_time 0.0004 (0.0008)	train_time 0.0438 (0.0452)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.4334000047445297, 0.531000018119812)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.15it/s] 12%|#1        | 3/26 [00:00<00:01, 13.49it/s] 23%|##3       | 6/26 [00:00<00:01, 19.54it/s] 35%|###4      | 9/26 [00:00<00:00, 22.96it/s] 46%|####6     | 12/26 [00:00<00:00, 24.91it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.44it/s] 69%|######9   | 18/26 [00:00<00:00, 26.66it/s] 81%|########  | 21/26 [00:00<00:00, 27.53it/s] 96%|#########6| 25/26 [00:01<00:00, 28.69it/s]100%|##########| 26/26 [00:01<00:00, 23.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.57 (  0.57)	train_acc   0.46 (  0.44)	train_minacc   0.60 (  0.54)	train_majacc   0.41 (  0.42)	train_corr   0.00 (  0.00)	l1 7.3328 (7.3314)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.27it/s] 27%|##6       | 7/26 [00:00<00:00, 30.24it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.24it/s] 46%|####6     | 12/26 [00:00<00:00, 35.64it/s] 65%|######5   | 17/26 [00:00<00:00, 39.04it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.04it/s] 85%|########4 | 22/26 [00:00<00:00, 41.71it/s]100%|##########| 26/26 [00:00<00:00, 35.02it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.54 (  0.54)	test_majacc   0.39 (  0.39)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.695 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.55 (  0.51)	test_majacc   0.40 (  0.41)	Loss_d 0.695 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.40 (  0.41)	test_corr_d  -0.15 ( -0.04)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.55 (  0.52)	test_majacc   0.42 (  0.42)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.55 (  0.52)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.04 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.44)	test_minacc   0.60 (  0.53)	test_majacc   0.44 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.44)	test_minacc_d   0.60 (  0.53)	test_majacc_d   0.44 (  0.42)	test_corr_d  -0.09 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.07it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.55 (  0.55)	test_majacc   0.34 (  0.34)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.34 (  0.34)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.55 (  0.55)	test_majacc   0.34 (  0.34)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.34 (  0.34)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 18/  1]	epoch_time 0.0446 (0.0460)	validation_time 0.0003 (0.0008)	train_time 0.0443 (0.0452)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.4356000046133995, 0.5260000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.31it/s] 15%|#5        | 4/26 [00:00<00:01, 19.64it/s] 27%|##6       | 7/26 [00:00<00:00, 24.03it/s] 42%|####2     | 11/26 [00:00<00:00, 27.22it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.65it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.07it/s] 88%|########8 | 23/26 [00:00<00:00, 29.56it/s]100%|##########| 26/26 [00:01<00:00, 25.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.57 (  0.57)	train_acc   0.47 (  0.44)	train_minacc   0.61 (  0.54)	train_majacc   0.43 (  0.43)	train_corr   0.00 (  0.00)	l1 7.3326 (7.3313)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.97it/s] 23%|##3       | 6/26 [00:00<00:00, 20.43it/s]                                               23%|##3       | 6/26 [00:00<00:00, 20.43it/s] 42%|####2     | 11/26 [00:00<00:00, 29.77it/s] 62%|######1   | 16/26 [00:00<00:00, 36.23it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.23it/s] 81%|########  | 21/26 [00:00<00:00, 36.39it/s]100%|##########| 26/26 [00:00<00:00, 39.74it/s]100%|##########| 26/26 [00:00<00:00, 30.07it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.41 (  0.41)	test_minacc   0.54 (  0.54)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.695 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.54 (  0.51)	test_majacc   0.41 (  0.41)	Loss_d 0.695 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.15 ( -0.04)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.57 (  0.53)	test_majacc   0.41 (  0.42)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.57 (  0.53)	test_majacc_d   0.41 (  0.42)	test_corr_d  -0.04 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.44)	test_minacc   0.61 (  0.53)	test_majacc   0.43 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.44)	test_minacc_d   0.61 (  0.53)	test_majacc_d   0.43 (  0.42)	test_corr_d  -0.09 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.60it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.54 (  0.54)	test_majacc   0.35 (  0.35)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.35 (  0.35)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.54 (  0.54)	test_majacc   0.35 (  0.35)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.35 (  0.35)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 19/  1]	epoch_time 0.0479 (0.0461)	validation_time 0.0004 (0.0008)	train_time 0.0474 (0.0453)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.43650000455975535, 0.5230000019073486)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.15it/s] 12%|#1        | 3/26 [00:00<00:01, 12.50it/s] 27%|##6       | 7/26 [00:00<00:00, 20.53it/s] 38%|###8      | 10/26 [00:00<00:00, 23.18it/s] 50%|#####     | 13/26 [00:00<00:00, 24.88it/s] 65%|######5   | 17/26 [00:00<00:00, 27.07it/s] 81%|########  | 21/26 [00:00<00:00, 28.69it/s] 92%|#########2| 24/26 [00:00<00:00, 29.05it/s]100%|##########| 26/26 [00:01<00:00, 23.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.57 (  0.57)	train_acc   0.47 (  0.44)	train_minacc   0.61 (  0.54)	train_majacc   0.43 (  0.43)	train_corr   0.00 (  0.00)	l1 7.3323 (7.3311)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.51it/s] 23%|##3       | 6/26 [00:00<00:00, 32.44it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.44it/s] 42%|####2     | 11/26 [00:00<00:00, 38.52it/s] 65%|######5   | 17/26 [00:00<00:00, 41.43it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.43it/s] 85%|########4 | 22/26 [00:00<00:00, 42.84it/s]100%|##########| 26/26 [00:00<00:00, 37.71it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.55 (  0.55)	test_majacc   0.39 (  0.39)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.695 (0.694)	test_acc   0.44 (  0.43)	test_minacc   0.55 (  0.52)	test_majacc   0.41 (  0.41)	Loss_d 0.695 (0.694)	test_acc_d   0.44 (  0.43)	test_minacc_d   0.55 (  0.52)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.15 ( -0.04)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.60 (  0.53)	test_majacc   0.42 (  0.42)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.60 (  0.53)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.04 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.44)	test_minacc   0.61 (  0.53)	test_majacc   0.43 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.44)	test_minacc_d   0.61 (  0.53)	test_majacc_d   0.43 (  0.42)	test_corr_d  -0.08 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.58it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.37 (  0.37)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.37 (  0.37)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 20/  1]	epoch_time 0.0431 (0.0460)	validation_time 0.0004 (0.0007)	train_time 0.0426 (0.0452)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.4378000044822693, 0.5250000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.20it/s] 15%|#5        | 4/26 [00:00<00:01, 17.58it/s] 27%|##6       | 7/26 [00:00<00:00, 22.02it/s] 42%|####2     | 11/26 [00:00<00:00, 25.40it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.32it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.75it/s] 88%|########8 | 23/26 [00:00<00:00, 29.27it/s]100%|##########| 26/26 [00:01<00:00, 24.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.57 (  0.57)	train_acc   0.48 (  0.44)	train_minacc   0.61 (  0.54)	train_majacc   0.44 (  0.43)	train_corr   0.00 (  0.00)	l1 7.3322 (7.3311)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.51it/s] 27%|##6       | 7/26 [00:00<00:00, 33.62it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.62it/s] 46%|####6     | 12/26 [00:00<00:00, 37.96it/s] 65%|######5   | 17/26 [00:00<00:00, 40.77it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.77it/s] 85%|########4 | 22/26 [00:00<00:00, 39.64it/s]100%|##########| 26/26 [00:00<00:00, 36.69it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.41 (  0.41)	test_minacc   0.52 (  0.52)	test_majacc   0.39 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.695 (0.694)	test_acc   0.44 (  0.43)	test_minacc   0.58 (  0.52)	test_majacc   0.41 (  0.41)	Loss_d 0.695 (0.694)	test_acc_d   0.44 (  0.43)	test_minacc_d   0.58 (  0.52)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.15 ( -0.04)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.44)	test_minacc   0.53 (  0.53)	test_majacc   0.42 (  0.42)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.44)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.03 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.44)	test_minacc   0.61 (  0.53)	test_majacc   0.45 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.44)	test_minacc_d   0.61 (  0.53)	test_majacc_d   0.45 (  0.42)	test_corr_d  -0.09 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 56.61it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.55 (  0.55)	test_majacc   0.40 (  0.40)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.55 (  0.55)	test_majacc   0.40 (  0.40)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 21/  1]	epoch_time 0.0482 (0.0461)	validation_time 0.0007 (0.0007)	train_time 0.0475 (0.0453)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.43730000460147855, 0.534000039100647)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.57it/s] 19%|#9        | 5/26 [00:00<00:00, 22.88it/s] 35%|###4      | 9/26 [00:00<00:00, 27.12it/s] 46%|####6     | 12/26 [00:00<00:00, 28.03it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.64it/s] 69%|######9   | 18/26 [00:00<00:00, 28.18it/s] 81%|########  | 21/26 [00:00<00:00, 28.27it/s] 92%|#########2| 24/26 [00:00<00:00, 28.75it/s]100%|##########| 26/26 [00:01<00:00, 25.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.57 (  0.57)	train_acc   0.48 (  0.44)	train_minacc   0.61 (  0.53)	train_majacc   0.45 (  0.43)	train_corr   0.00 (  0.00)	l1 7.3323 (7.3312)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.29it/s] 19%|#9        | 5/26 [00:00<00:00, 23.25it/s] 38%|###8      | 10/26 [00:00<00:00, 30.19it/s]                                                38%|###8      | 10/26 [00:00<00:00, 30.19it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.89it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.64it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.64it/s] 96%|#########6| 25/26 [00:00<00:00, 41.50it/s]100%|##########| 26/26 [00:00<00:00, 33.20it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.41 (  0.41)	test_minacc   0.52 (  0.52)	test_majacc   0.39 (  0.39)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.695 (0.694)	test_acc   0.44 (  0.43)	test_minacc   0.56 (  0.52)	test_majacc   0.41 (  0.41)	Loss_d 0.695 (0.694)	test_acc_d   0.44 (  0.43)	test_minacc_d   0.56 (  0.52)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.15 ( -0.04)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.53 (  0.53)	test_majacc   0.42 (  0.42)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.04 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.44)	test_minacc   0.61 (  0.52)	test_majacc   0.45 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.44)	test_minacc_d   0.61 (  0.52)	test_majacc_d   0.45 (  0.42)	test_corr_d  -0.09 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.73it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.39 (  0.39)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.39 (  0.39)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 22/  1]	epoch_time 0.0423 (0.0459)	validation_time 0.0003 (0.0007)	train_time 0.0420 (0.0451)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.43640000465512274, 0.5290000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.07it/s] 12%|#1        | 3/26 [00:00<00:01, 14.22it/s] 23%|##3       | 6/26 [00:00<00:00, 20.86it/s] 35%|###4      | 9/26 [00:00<00:00, 21.41it/s] 46%|####6     | 12/26 [00:00<00:00, 24.06it/s] 62%|######1   | 16/26 [00:00<00:00, 26.58it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.28it/s] 88%|########8 | 23/26 [00:00<00:00, 28.03it/s]100%|##########| 26/26 [00:01<00:00, 24.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 200
penalty weights 10000.0
l1 at pgd_anneal_iters 7.331264495849609
set z to 7.257951850891113
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 200
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 200
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 200
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 200
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 200
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
rho, theta 389 tensor(-0.0105, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 200
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 200
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 200
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 200
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 200
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 200
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 200
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 200
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 200
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 200
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 200
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 200
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 200
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 200
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 200
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 200
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 200
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 200
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
final projection at end of training
dim_v 512
Epoch: [23][  26/  26]	Loss 0.000 (0.002)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.59 (  0.57)	train_acc   0.50 (  0.48)	train_minacc   0.44 (  0.52)	train_majacc   0.51 (  0.48)	train_corr   0.00 (  0.00)	l1 6.6298 (7.0285)	zero_count 0.0000 (4.7580)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.42it/s] 19%|#9        | 5/26 [00:00<00:00, 23.97it/s] 38%|###8      | 10/26 [00:00<00:00, 33.73it/s]                                                38%|###8      | 10/26 [00:00<00:00, 33.73it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.60it/s] 77%|#######6  | 20/26 [00:00<00:00, 40.78it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 40.78it/s] 96%|#########6| 25/26 [00:00<00:00, 40.55it/s]100%|##########| 26/26 [00:00<00:00, 32.86it/s]
Test: [   0/  26]	Loss 0.681 (0.681)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.681 (0.681)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.676 (0.682)	test_acc   0.53 (  0.49)	test_minacc   0.52 (  0.46)	test_majacc   0.53 (  0.50)	Loss_d 0.676 (0.682)	test_acc_d   0.53 (  0.49)	test_minacc_d   0.52 (  0.46)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.22 (  0.22)
Test: [  20/  26]	Loss 0.690 (0.682)	test_acc   0.49 (  0.50)	test_minacc   0.47 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.690 (0.682)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.19 (  0.22)
Test: [  26/  26]	Loss 0.697 (0.683)	test_acc   0.50 (  0.50)	test_minacc   0.44 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.697 (0.683)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.15 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.34it/s]
Test: [  0/  1]	Loss 0.701 (0.701)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.701 (0.701)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 0.701 (0.701)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.701 (0.701)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.12 (  0.12)
Overall Timing[ 23/  1]	epoch_time 0.0444 (0.0459)	validation_time 0.0004 (0.0007)	train_time 0.0440 (0.0451)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5002000121474266, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.98it/s] 23%|##3       | 6/26 [00:00<00:00, 24.35it/s] 38%|###8      | 10/26 [00:00<00:00, 27.56it/s] 54%|#####3    | 14/26 [00:00<00:00, 28.88it/s] 69%|######9   | 18/26 [00:00<00:00, 29.99it/s] 85%|########4 | 22/26 [00:00<00:00, 30.44it/s]100%|##########| 26/26 [00:00<00:00, 31.06it/s]100%|##########| 26/26 [00:00<00:00, 26.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 200
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 200
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 200
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 200
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 200
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 200
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 200
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 200
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 200
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 200
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 200
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 200
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 200
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 200
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 200
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 200
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 200
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 200
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 200
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 200
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 200
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 200
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 200
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 200
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 200
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 200
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
final projection at end of training
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.61 (  0.61)	train_acc   0.48 (  0.47)	train_minacc   0.67 (  0.58)	train_majacc   0.43 (  0.45)	train_corr   0.00 (  0.00)	l1 6.4657 (6.5148)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.15it/s] 27%|##6       | 7/26 [00:00<00:00, 33.41it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.41it/s] 46%|####6     | 12/26 [00:00<00:00, 39.11it/s] 65%|######5   | 17/26 [00:00<00:00, 42.11it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.11it/s] 85%|########4 | 22/26 [00:00<00:00, 40.10it/s]100%|##########| 26/26 [00:00<00:00, 37.18it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.49 (  0.49)	test_minacc   0.55 (  0.55)	test_majacc   0.48 (  0.48)	Loss_d 0.690 (0.690)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.688 (0.691)	test_acc   0.53 (  0.50)	test_minacc   0.68 (  0.61)	test_majacc   0.50 (  0.48)	Loss_d 0.688 (0.691)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.68 (  0.61)	test_majacc_d   0.50 (  0.48)	test_corr_d   0.07 (  0.07)
Test: [  20/  26]	Loss 0.694 (0.691)	test_acc   0.46 (  0.49)	test_minacc   0.55 (  0.60)	test_majacc   0.45 (  0.47)	Loss_d 0.694 (0.691)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.55 (  0.60)	test_majacc_d   0.45 (  0.47)	test_corr_d   0.05 (  0.06)
Test: [  26/  26]	Loss 0.696 (0.691)	test_acc   0.48 (  0.49)	test_minacc   0.67 (  0.59)	test_majacc   0.43 (  0.47)	Loss_d 0.696 (0.691)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.67 (  0.59)	test_majacc_d   0.43 (  0.47)	test_corr_d  -0.13 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.01it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 24/  1]	epoch_time 0.0422 (0.0457)	validation_time 0.0006 (0.0007)	train_time 0.0415 (0.0449)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.4874000060558319, 0.5580000281333923)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.95it/s]  8%|7         | 2/26 [00:00<00:03,  6.87it/s] 23%|##3       | 6/26 [00:00<00:01, 17.23it/s] 38%|###8      | 10/26 [00:00<00:00, 22.77it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.11it/s] 65%|######5   | 17/26 [00:00<00:00, 27.17it/s] 81%|########  | 21/26 [00:00<00:00, 28.19it/s] 96%|#########6| 25/26 [00:01<00:00, 28.93it/s]100%|##########| 26/26 [00:01<00:00, 22.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 200
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 200
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 200
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 200
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 200
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 200
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 200
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 200
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 200
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 200
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 200
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 200
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 200
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 200
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 200
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 200
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 200
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 200
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 200
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 200
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 200
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 200
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 200
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 200
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 200
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 200
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.61 (  0.61)	train_acc   0.47 (  0.49)	train_minacc   0.65 (  0.58)	train_majacc   0.41 (  0.48)	train_corr   0.00 (  0.00)	l1 6.4644 (6.4639)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.45it/s] 27%|##6       | 7/26 [00:00<00:00, 30.41it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.41it/s] 46%|####6     | 12/26 [00:00<00:00, 36.36it/s] 65%|######5   | 17/26 [00:00<00:00, 40.20it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.20it/s] 85%|########4 | 22/26 [00:00<00:00, 41.79it/s]100%|##########| 26/26 [00:00<00:00, 36.82it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.54 (  0.54)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.691 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.69 (  0.58)	test_majacc   0.50 (  0.49)	Loss_d 0.691 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.69 (  0.58)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.01 (  0.01)
Test: [  20/  26]	Loss 0.695 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.50 (  0.58)	test_majacc   0.47 (  0.48)	Loss_d 0.695 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.50 (  0.58)	test_majacc_d   0.47 (  0.48)	test_corr_d   0.00 (  0.01)
Test: [  26/  26]	Loss 0.696 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.65 (  0.57)	test_majacc   0.41 (  0.48)	Loss_d 0.696 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.65 (  0.57)	test_majacc_d   0.41 (  0.48)	test_corr_d  -0.18 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.00it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 25/  1]	epoch_time 0.0435 (0.0456)	validation_time 0.0004 (0.0007)	train_time 0.0432 (0.0449)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.4948000066876411, 0.5550000071525574)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.39it/s] 12%|#1        | 3/26 [00:00<00:01, 13.61it/s] 23%|##3       | 6/26 [00:00<00:01, 19.81it/s] 35%|###4      | 9/26 [00:00<00:00, 21.74it/s] 46%|####6     | 12/26 [00:00<00:00, 24.07it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.59it/s] 69%|######9   | 18/26 [00:00<00:00, 26.88it/s] 81%|########  | 21/26 [00:00<00:00, 27.82it/s] 96%|#########6| 25/26 [00:01<00:00, 28.94it/s]100%|##########| 26/26 [00:01<00:00, 23.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 200
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 200
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 200
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 200
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 200
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 200
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 200
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 200
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 200
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 200
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 200
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 200
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 200
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 200
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 200
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 200
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 200
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 200
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 200
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 200
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 200
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 200
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 200
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 200
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 200
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 200
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
final projection at end of training
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.61 (  0.61)	train_acc   0.45 (  0.49)	train_minacc   0.65 (  0.56)	train_majacc   0.39 (  0.48)	train_corr   0.00 (  0.00)	l1 6.4655 (6.4631)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.68it/s] 23%|##3       | 6/26 [00:00<00:00, 22.42it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.42it/s] 42%|####2     | 11/26 [00:00<00:00, 31.32it/s] 65%|######5   | 17/26 [00:00<00:00, 36.20it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.20it/s] 85%|########4 | 22/26 [00:00<00:00, 39.69it/s]100%|##########| 26/26 [00:00<00:00, 31.87it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.66 (  0.57)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.66 (  0.57)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.00 (  0.01)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.47 (  0.57)	test_majacc   0.46 (  0.48)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.47 (  0.57)	test_majacc_d   0.46 (  0.48)	test_corr_d   0.01 (  0.00)
Test: [  26/  26]	Loss 0.696 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.65 (  0.56)	test_majacc   0.40 (  0.48)	Loss_d 0.696 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.65 (  0.56)	test_majacc_d   0.40 (  0.48)	test_corr_d  -0.15 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.83it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 26/  1]	epoch_time 0.0438 (0.0456)	validation_time 0.0004 (0.0007)	train_time 0.0434 (0.0448)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.48950000712275504, 0.5430000424385071)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.92it/s] 15%|#5        | 4/26 [00:00<00:01, 17.62it/s] 27%|##6       | 7/26 [00:00<00:00, 21.78it/s] 42%|####2     | 11/26 [00:00<00:00, 25.42it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.76it/s] 65%|######5   | 17/26 [00:00<00:00, 26.72it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.62it/s] 88%|########8 | 23/26 [00:00<00:00, 28.32it/s]100%|##########| 26/26 [00:01<00:00, 24.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 200
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 200
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 200
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 200
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 200
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 200
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 200
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 200
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 200
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 200
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 200
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 200
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 200
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 200
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 200
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 200
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 200
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 200
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 200
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 200
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 200
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 200
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 200
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 200
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 200
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 200
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
final projection at end of training
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.61 (  0.61)	train_acc   0.44 (  0.49)	train_minacc   0.63 (  0.56)	train_majacc   0.38 (  0.47)	train_corr   0.00 (  0.00)	l1 6.4660 (6.4652)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.99it/s] 23%|##3       | 6/26 [00:00<00:00, 32.63it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.63it/s] 42%|####2     | 11/26 [00:00<00:00, 38.67it/s] 62%|######1   | 16/26 [00:00<00:00, 42.30it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.30it/s] 81%|########  | 21/26 [00:00<00:00, 39.69it/s]100%|##########| 26/26 [00:00<00:00, 42.23it/s]100%|##########| 26/26 [00:00<00:00, 35.86it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.65 (  0.57)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.65 (  0.57)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.01 (  0.01)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.47 (  0.57)	test_majacc   0.47 (  0.48)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.47 (  0.57)	test_majacc_d   0.47 (  0.48)	test_corr_d   0.03 (  0.01)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.44 (  0.49)	test_minacc   0.63 (  0.56)	test_majacc   0.38 (  0.47)	Loss_d 0.695 (0.693)	test_acc_d   0.44 (  0.49)	test_minacc_d   0.63 (  0.56)	test_majacc_d   0.38 (  0.47)	test_corr_d  -0.13 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.09it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 27/  1]	epoch_time 0.0430 (0.0455)	validation_time 0.0004 (0.0007)	train_time 0.0426 (0.0447)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.4853000059127808, 0.5380000472068787)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.06it/s] 15%|#5        | 4/26 [00:00<00:01, 18.52it/s] 27%|##6       | 7/26 [00:00<00:00, 22.45it/s] 38%|###8      | 10/26 [00:00<00:00, 24.59it/s] 50%|#####     | 13/26 [00:00<00:00, 25.76it/s] 62%|######1   | 16/26 [00:00<00:00, 26.95it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.52it/s] 88%|########8 | 23/26 [00:00<00:00, 28.48it/s]100%|##########| 26/26 [00:01<00:00, 24.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 200
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 200
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 200
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 200
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 200
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 200
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 200
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 200
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 200
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 200
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 200
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 200
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 200
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 200
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 200
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 200
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 200
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 200
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 200
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 200
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 200
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 200
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 200
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 200
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 200
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 200
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
final projection at end of training
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.61 (  0.61)	train_acc   0.44 (  0.48)	train_minacc   0.63 (  0.56)	train_majacc   0.38 (  0.47)	train_corr   0.00 (  0.00)	l1 6.4664 (6.4661)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.82it/s] 19%|#9        | 5/26 [00:00<00:01, 15.92it/s] 35%|###4      | 9/26 [00:00<00:00, 23.57it/s]                                               35%|###4      | 9/26 [00:00<00:00, 23.57it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.90it/s] 77%|#######6  | 20/26 [00:00<00:00, 35.56it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 35.56it/s] 96%|#########6| 25/26 [00:00<00:00, 38.53it/s]100%|##########| 26/26 [00:00<00:00, 28.63it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.57 (  0.57)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.63 (  0.58)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.63 (  0.58)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.01 (  0.01)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.50 (  0.57)	test_majacc   0.45 (  0.47)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.50 (  0.57)	test_majacc_d   0.45 (  0.47)	test_corr_d   0.03 (  0.01)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.44 (  0.48)	test_minacc   0.63 (  0.56)	test_majacc   0.38 (  0.47)	Loss_d 0.695 (0.693)	test_acc_d   0.44 (  0.48)	test_minacc_d   0.63 (  0.56)	test_majacc_d   0.38 (  0.47)	test_corr_d  -0.11 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.72it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 28/  1]	epoch_time 0.0444 (0.0454)	validation_time 0.0004 (0.0007)	train_time 0.0439 (0.0447)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.4805000075697899, 0.5360000133514404)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.38it/s] 23%|##3       | 6/26 [00:00<00:00, 29.12it/s] 35%|###4      | 9/26 [00:00<00:00, 28.42it/s] 46%|####6     | 12/26 [00:00<00:00, 28.86it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.60it/s] 69%|######9   | 18/26 [00:00<00:00, 28.46it/s] 81%|########  | 21/26 [00:00<00:00, 28.79it/s] 96%|#########6| 25/26 [00:00<00:00, 29.29it/s]100%|##########| 26/26 [00:00<00:00, 26.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 200
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 200
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 200
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 200
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 200
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 200
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 200
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 200
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 200
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 200
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 200
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 200
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 200
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 200
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 200
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 200
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 200
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 200
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 200
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 200
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 200
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 200
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 200
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 200
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 200
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 200
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
final projection at end of training
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.61 (  0.61)	train_acc   0.44 (  0.48)	train_minacc   0.63 (  0.56)	train_majacc   0.38 (  0.46)	train_corr   0.00 (  0.00)	l1 6.4665 (6.4664)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.05it/s] 27%|##6       | 7/26 [00:00<00:00, 32.89it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.89it/s] 46%|####6     | 12/26 [00:00<00:00, 38.20it/s] 65%|######5   | 17/26 [00:00<00:00, 41.15it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.15it/s] 85%|########4 | 22/26 [00:00<00:00, 40.45it/s]100%|##########| 26/26 [00:00<00:00, 36.92it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.57 (  0.57)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.65 (  0.58)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.00 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.48)	test_minacc   0.50 (  0.57)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.50 (  0.57)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.03 (  0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.44 (  0.48)	test_minacc   0.63 (  0.56)	test_majacc   0.38 (  0.46)	Loss_d 0.694 (0.693)	test_acc_d   0.44 (  0.48)	test_minacc_d   0.63 (  0.56)	test_majacc_d   0.38 (  0.46)	test_corr_d  -0.11 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.42it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 29/  1]	epoch_time 0.0419 (0.0453)	validation_time 0.0003 (0.0006)	train_time 0.0416 (0.0446)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.47580000764131547, 0.5380000472068787)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.97it/s] 15%|#5        | 4/26 [00:00<00:01, 18.42it/s] 27%|##6       | 7/26 [00:00<00:00, 22.82it/s] 42%|####2     | 11/26 [00:00<00:00, 25.94it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.48it/s] 69%|######9   | 18/26 [00:00<00:00, 27.84it/s] 81%|########  | 21/26 [00:00<00:00, 27.95it/s] 96%|#########6| 25/26 [00:00<00:00, 28.75it/s]100%|##########| 26/26 [00:01<00:00, 24.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 200
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 200
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 200
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 200
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 200
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 200
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 200
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 200
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 200
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 200
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 200
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 200
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 200
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 200
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 200
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 200
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 200
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 200
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 200
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 200
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 200
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 200
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 200
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 200
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 200
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 200
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.61 (  0.61)	train_acc   0.43 (  0.47)	train_minacc   0.61 (  0.56)	train_majacc   0.37 (  0.46)	train_corr   0.00 (  0.00)	l1 6.4664 (6.4665)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.97it/s] 27%|##6       | 7/26 [00:00<00:00, 19.16it/s]                                               27%|##6       | 7/26 [00:00<00:00, 19.16it/s] 46%|####6     | 12/26 [00:00<00:00, 27.36it/s] 65%|######5   | 17/26 [00:00<00:00, 32.24it/s]                                                65%|######5   | 17/26 [00:00<00:00, 32.24it/s] 85%|########4 | 22/26 [00:00<00:00, 34.68it/s]100%|##########| 26/26 [00:00<00:00, 27.84it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.57 (  0.57)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.65 (  0.59)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.65 (  0.59)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.01 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.48)	test_minacc   0.50 (  0.57)	test_majacc   0.45 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.48)	test_minacc_d   0.50 (  0.57)	test_majacc_d   0.45 (  0.46)	test_corr_d   0.03 (  0.00)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.47)	test_minacc   0.61 (  0.56)	test_majacc   0.37 (  0.46)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.47)	test_minacc_d   0.61 (  0.56)	test_majacc_d   0.37 (  0.46)	test_corr_d  -0.10 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.36it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 30/  1]	epoch_time 0.0409 (0.0452)	validation_time 0.0006 (0.0006)	train_time 0.0402 (0.0445)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.47410000690817833, 0.5400000214576721)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.70it/s] 19%|#9        | 5/26 [00:00<00:01, 19.86it/s] 35%|###4      | 9/26 [00:00<00:00, 24.44it/s] 50%|#####     | 13/26 [00:00<00:00, 26.61it/s] 65%|######5   | 17/26 [00:00<00:00, 28.08it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.37it/s] 88%|########8 | 23/26 [00:00<00:00, 28.80it/s]100%|##########| 26/26 [00:00<00:00, 28.77it/s]100%|##########| 26/26 [00:01<00:00, 24.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 200
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 200
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 200
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 200
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 200
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 200
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 200
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 200
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 200
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 200
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 200
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 200
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 200
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 200
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 200
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 200
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 200
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 200
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 200
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 200
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 200
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 200
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 200
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 200
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 200
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 200
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
final projection at end of training
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.61 (  0.61)	train_acc   0.43 (  0.47)	train_minacc   0.63 (  0.57)	train_majacc   0.37 (  0.45)	train_corr   0.00 (  0.00)	l1 6.4663 (6.4664)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.41it/s] 27%|##6       | 7/26 [00:00<00:00, 34.63it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.63it/s] 46%|####6     | 12/26 [00:00<00:00, 38.81it/s] 65%|######5   | 17/26 [00:00<00:00, 42.01it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.01it/s] 85%|########4 | 22/26 [00:00<00:00, 39.64it/s]100%|##########| 26/26 [00:00<00:00, 37.21it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.57 (  0.57)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.48)	test_minacc   0.65 (  0.59)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.65 (  0.59)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.01 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.47)	test_minacc   0.50 (  0.57)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.47)	test_minacc_d   0.50 (  0.57)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.03 ( -0.00)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.47)	test_minacc   0.63 (  0.57)	test_majacc   0.37 (  0.45)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.47)	test_minacc_d   0.63 (  0.57)	test_majacc_d   0.37 (  0.45)	test_corr_d  -0.10 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.60it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 31/  1]	epoch_time 0.0472 (0.0452)	validation_time 0.0003 (0.0006)	train_time 0.0469 (0.0445)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.4704000071287155, 0.5360000133514404)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.78it/s] 19%|#9        | 5/26 [00:00<00:00, 22.39it/s] 35%|###4      | 9/26 [00:00<00:00, 25.89it/s] 50%|#####     | 13/26 [00:00<00:00, 27.68it/s] 65%|######5   | 17/26 [00:00<00:00, 28.51it/s] 81%|########  | 21/26 [00:00<00:00, 28.95it/s] 96%|#########6| 25/26 [00:00<00:00, 29.23it/s]100%|##########| 26/26 [00:00<00:00, 26.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 200
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 200
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 200
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 200
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 200
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 200
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 200
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 200
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 200
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 200
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 200
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 200
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 200
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 200
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 200
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 200
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 200
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 200
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 200
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 200
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 200
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 200
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 200
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 200
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 200
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 200
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
final projection at end of training
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.60 (  0.60)	train_acc   0.42 (  0.47)	train_minacc   0.63 (  0.57)	train_majacc   0.36 (  0.45)	train_corr   0.00 (  0.00)	l1 6.4662 (6.4663)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.07it/s] 27%|##6       | 7/26 [00:00<00:00, 29.64it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.64it/s] 46%|####6     | 12/26 [00:00<00:00, 36.57it/s] 65%|######5   | 17/26 [00:00<00:00, 40.51it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.51it/s] 85%|########4 | 22/26 [00:00<00:00, 42.88it/s]100%|##########| 26/26 [00:00<00:00, 36.32it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.48 (  0.48)	test_minacc   0.57 (  0.57)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.48)	test_minacc   0.65 (  0.60)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.65 (  0.60)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.02 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.47)	test_minacc   0.50 (  0.58)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.47)	test_minacc_d   0.50 (  0.58)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.03 ( -0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.42 (  0.47)	test_minacc   0.63 (  0.57)	test_majacc   0.36 (  0.45)	Loss_d 0.694 (0.693)	test_acc_d   0.42 (  0.47)	test_minacc_d   0.63 (  0.57)	test_majacc_d   0.36 (  0.45)	test_corr_d  -0.10 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.56it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 32/  1]	epoch_time 0.0458 (0.0452)	validation_time 0.0004 (0.0006)	train_time 0.0453 (0.0446)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.4678000057041645, 0.5370000004768372)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.52it/s]  8%|7         | 2/26 [00:00<00:03,  7.46it/s] 19%|#9        | 5/26 [00:00<00:01, 15.75it/s] 31%|###       | 8/26 [00:00<00:00, 20.41it/s] 42%|####2     | 11/26 [00:00<00:00, 23.38it/s] 54%|#####3    | 14/26 [00:00<00:00, 24.97it/s] 65%|######5   | 17/26 [00:00<00:00, 26.01it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.08it/s] 92%|#########2| 24/26 [00:01<00:00, 28.54it/s]100%|##########| 26/26 [00:01<00:00, 22.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 200
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 200
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 200
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 200
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 200
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 200
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 200
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 200
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 200
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 200
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 200
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 200
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 200
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 200
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 200
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 200
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 200
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 200
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 200
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 200
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 200
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 200
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 200
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 200
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 200
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 200
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
final projection at end of training
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.60 (  0.60)	train_acc   0.42 (  0.47)	train_minacc   0.65 (  0.57)	train_majacc   0.35 (  0.45)	train_corr   0.00 (  0.00)	l1 6.4661 (6.4662)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.92it/s] 23%|##3       | 6/26 [00:00<00:00, 30.94it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.94it/s] 42%|####2     | 11/26 [00:00<00:00, 34.14it/s] 62%|######1   | 16/26 [00:00<00:00, 37.93it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.93it/s] 81%|########  | 21/26 [00:00<00:00, 40.95it/s]100%|##########| 26/26 [00:00<00:00, 42.78it/s]100%|##########| 26/26 [00:00<00:00, 35.10it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.57 (  0.57)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.48)	test_minacc   0.63 (  0.60)	test_majacc   0.45 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.63 (  0.60)	test_majacc_d   0.45 (  0.46)	test_corr_d  -0.02 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.50 (  0.58)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.50 (  0.58)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.03 ( -0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.42 (  0.47)	test_minacc   0.65 (  0.57)	test_majacc   0.35 (  0.45)	Loss_d 0.694 (0.693)	test_acc_d   0.42 (  0.47)	test_minacc_d   0.65 (  0.57)	test_majacc_d   0.35 (  0.45)	test_corr_d  -0.10 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.50it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 33/  1]	epoch_time 0.0434 (0.0452)	validation_time 0.0004 (0.0006)	train_time 0.0429 (0.0445)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.4669000045955181, 0.5440000295639038)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.91it/s] 19%|#9        | 5/26 [00:00<00:00, 21.24it/s] 31%|###       | 8/26 [00:00<00:00, 24.48it/s] 42%|####2     | 11/26 [00:00<00:00, 26.22it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.76it/s] 69%|######9   | 18/26 [00:00<00:00, 28.15it/s] 81%|########  | 21/26 [00:00<00:00, 28.36it/s] 96%|#########6| 25/26 [00:00<00:00, 28.84it/s]100%|##########| 26/26 [00:01<00:00, 24.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 200
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 200
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 200
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 200
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 200
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 200
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 200
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 200
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 200
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 200
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 200
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 200
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 200
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 200
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 200
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 200
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 200
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 200
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 200
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 200
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 200
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 200
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 200
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 200
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 200
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 200
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
final projection at end of training
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.60 (  0.60)	train_acc   0.42 (  0.47)	train_minacc   0.67 (  0.57)	train_majacc   0.35 (  0.45)	train_corr   0.00 (  0.00)	l1 6.4659 (6.4661)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.62it/s] 23%|##3       | 6/26 [00:00<00:00, 26.86it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.86it/s] 42%|####2     | 11/26 [00:00<00:00, 34.89it/s] 62%|######1   | 16/26 [00:00<00:00, 39.55it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.55it/s] 81%|########  | 21/26 [00:00<00:00, 40.55it/s]100%|##########| 26/26 [00:00<00:00, 43.21it/s]100%|##########| 26/26 [00:00<00:00, 34.43it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.55 (  0.55)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.62 (  0.60)	test_majacc   0.45 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.62 (  0.60)	test_majacc_d   0.45 (  0.46)	test_corr_d  -0.03 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.50 (  0.58)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.50 (  0.58)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.03 ( -0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.42 (  0.47)	test_minacc   0.67 (  0.57)	test_majacc   0.35 (  0.45)	Loss_d 0.694 (0.693)	test_acc_d   0.42 (  0.47)	test_minacc_d   0.67 (  0.57)	test_majacc_d   0.35 (  0.45)	test_corr_d  -0.10 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.99it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 34/  1]	epoch_time 0.0426 (0.0451)	validation_time 0.0004 (0.0006)	train_time 0.0421 (0.0444)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.4653000060617924, 0.5440000295639038)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.43it/s] 19%|#9        | 5/26 [00:00<00:01, 18.04it/s] 35%|###4      | 9/26 [00:00<00:00, 23.87it/s] 50%|#####     | 13/26 [00:00<00:00, 26.37it/s] 65%|######5   | 17/26 [00:00<00:00, 27.23it/s] 81%|########  | 21/26 [00:00<00:00, 28.38it/s] 96%|#########6| 25/26 [00:00<00:00, 29.34it/s]100%|##########| 26/26 [00:01<00:00, 24.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 200
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 200
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 200
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 200
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 200
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 200
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 200
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 200
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 200
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 200
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 200
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 200
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 200
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 200
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 200
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 200
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 200
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 200
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 200
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 200
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 200
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 200
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 200
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 200
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 200
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 200
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.60 (  0.60)	train_acc   0.43 (  0.46)	train_minacc   0.67 (  0.57)	train_majacc   0.36 (  0.44)	train_corr   0.00 (  0.00)	l1 6.4657 (6.4659)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.76it/s] 27%|##6       | 7/26 [00:00<00:00, 26.18it/s]                                               27%|##6       | 7/26 [00:00<00:00, 26.18it/s] 50%|#####     | 13/26 [00:00<00:00, 34.96it/s] 73%|#######3  | 19/26 [00:00<00:00, 41.77it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 41.77it/s] 92%|#########2| 24/26 [00:00<00:00, 42.69it/s]100%|##########| 26/26 [00:00<00:00, 33.14it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.57 (  0.57)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.65 (  0.60)	test_majacc   0.44 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.65 (  0.60)	test_majacc_d   0.44 (  0.45)	test_corr_d  -0.03 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.50 (  0.58)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.50 (  0.58)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.03 ( -0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.47)	test_minacc   0.67 (  0.58)	test_majacc   0.36 (  0.45)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.47)	test_minacc_d   0.67 (  0.58)	test_majacc_d   0.36 (  0.45)	test_corr_d  -0.10 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.12it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 35/  1]	epoch_time 0.0455 (0.0451)	validation_time 0.0003 (0.0006)	train_time 0.0451 (0.0445)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.4656000050902367, 0.5420000553131104)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.34it/s] 15%|#5        | 4/26 [00:00<00:01, 19.83it/s] 31%|###       | 8/26 [00:00<00:00, 25.38it/s] 42%|####2     | 11/26 [00:00<00:00, 26.87it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.66it/s] 69%|######9   | 18/26 [00:00<00:00, 29.06it/s] 81%|########  | 21/26 [00:00<00:00, 28.98it/s] 96%|#########6| 25/26 [00:00<00:00, 29.51it/s]100%|##########| 26/26 [00:01<00:00, 25.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 200
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 200
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 200
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 200
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 200
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 200
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 200
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 200
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 200
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 200
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 200
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 200
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 200
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 200
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 200
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 200
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 200
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 200
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 200
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 200
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 200
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 200
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 200
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 200
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 200
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 200
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
final projection at end of training
dim_v 512
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.60 (  0.60)	train_acc   0.43 (  0.47)	train_minacc   0.67 (  0.58)	train_majacc   0.36 (  0.44)	train_corr   0.00 (  0.00)	l1 6.4655 (6.4657)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.48it/s] 27%|##6       | 7/26 [00:00<00:00, 27.28it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.28it/s] 50%|#####     | 13/26 [00:00<00:00, 36.03it/s] 73%|#######3  | 19/26 [00:00<00:00, 42.14it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 42.14it/s] 92%|#########2| 24/26 [00:00<00:00, 40.95it/s]100%|##########| 26/26 [00:00<00:00, 33.89it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.57 (  0.57)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.47)	test_minacc   0.65 (  0.60)	test_majacc   0.44 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.65 (  0.60)	test_majacc_d   0.44 (  0.45)	test_corr_d  -0.04 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.50 (  0.58)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.50 (  0.58)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.03 ( -0.02)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.47)	test_minacc   0.67 (  0.57)	test_majacc   0.36 (  0.45)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.47)	test_minacc_d   0.67 (  0.57)	test_majacc_d   0.36 (  0.45)	test_corr_d  -0.10 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.76it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 36/  1]	epoch_time 0.0439 (0.0451)	validation_time 0.0005 (0.0006)	train_time 0.0434 (0.0444)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.46530000340938565, 0.5400000214576721)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.23it/s] 15%|#5        | 4/26 [00:00<00:01, 19.94it/s] 27%|##6       | 7/26 [00:00<00:00, 23.19it/s] 42%|####2     | 11/26 [00:00<00:00, 26.63it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.66it/s] 65%|######5   | 17/26 [00:00<00:00, 28.19it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.75it/s] 92%|#########2| 24/26 [00:00<00:00, 29.65it/s]100%|##########| 26/26 [00:01<00:00, 25.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 200
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 200
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 200
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 200
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 200
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 200
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 200
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 200
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 200
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 200
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 200
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 200
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 200
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 200
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 200
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 200
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 200
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 200
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 200
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 200
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 200
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 200
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 200
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 200
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 200
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 200
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
final projection at end of training
dim_v 512
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.60 (  0.60)	train_acc   0.42 (  0.47)	train_minacc   0.67 (  0.57)	train_majacc   0.35 (  0.45)	train_corr   0.00 (  0.00)	l1 6.4653 (6.4654)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.54it/s] 31%|###       | 8/26 [00:00<00:00, 39.42it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.42it/s] 50%|#####     | 13/26 [00:00<00:00, 42.17it/s] 69%|######9   | 18/26 [00:00<00:00, 44.20it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.20it/s] 88%|########8 | 23/26 [00:00<00:00, 42.70it/s]100%|##########| 26/26 [00:00<00:00, 38.33it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.57 (  0.57)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.65 (  0.60)	test_majacc   0.43 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.65 (  0.60)	test_majacc_d   0.43 (  0.45)	test_corr_d  -0.04 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.53 (  0.58)	test_majacc   0.46 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.53 (  0.58)	test_majacc_d   0.46 (  0.45)	test_corr_d   0.03 ( -0.02)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.42 (  0.47)	test_minacc   0.67 (  0.57)	test_majacc   0.35 (  0.44)	Loss_d 0.694 (0.693)	test_acc_d   0.42 (  0.47)	test_minacc_d   0.67 (  0.57)	test_majacc_d   0.35 (  0.44)	test_corr_d  -0.10 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.88it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 37/  1]	epoch_time 0.0439 (0.0451)	validation_time 0.0003 (0.0006)	train_time 0.0435 (0.0444)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.46510000374913213, 0.5360000133514404)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.44it/s] 15%|#5        | 4/26 [00:00<00:01, 15.60it/s] 27%|##6       | 7/26 [00:00<00:00, 20.61it/s] 42%|####2     | 11/26 [00:00<00:00, 24.46it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.14it/s] 65%|######5   | 17/26 [00:00<00:00, 26.12it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.06it/s] 88%|########8 | 23/26 [00:00<00:00, 27.74it/s]100%|##########| 26/26 [00:01<00:00, 23.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 200
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 200
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 200
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 200
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 200
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 200
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 200
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 200
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 200
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 200
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 200
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 200
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 200
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 200
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 200
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 200
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 200
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 200
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 200
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 200
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 200
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 200
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 200
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 200
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 200
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 200
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
final projection at end of training
dim_v 512
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.60 (  0.60)	train_acc   0.44 (  0.47)	train_minacc   0.67 (  0.57)	train_majacc   0.37 (  0.45)	train_corr   0.00 (  0.00)	l1 6.4650 (6.4652)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 11.09it/s] 27%|##6       | 7/26 [00:00<00:00, 27.32it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.32it/s] 42%|####2     | 11/26 [00:00<00:00, 31.98it/s] 65%|######5   | 17/26 [00:00<00:00, 40.02it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.02it/s] 85%|########4 | 22/26 [00:00<00:00, 39.70it/s]100%|##########| 26/26 [00:00<00:00, 34.32it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.55 (  0.55)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.65 (  0.60)	test_majacc   0.42 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.65 (  0.60)	test_majacc_d   0.42 (  0.45)	test_corr_d  -0.05 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.53 (  0.58)	test_majacc   0.46 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.53 (  0.58)	test_majacc_d   0.46 (  0.45)	test_corr_d   0.03 ( -0.02)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.44 (  0.47)	test_minacc   0.67 (  0.57)	test_majacc   0.37 (  0.45)	Loss_d 0.694 (0.693)	test_acc_d   0.44 (  0.47)	test_minacc_d   0.67 (  0.57)	test_majacc_d   0.37 (  0.45)	test_corr_d  -0.10 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.29it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 38/  1]	epoch_time 0.0446 (0.0451)	validation_time 0.0004 (0.0006)	train_time 0.0442 (0.0444)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.4651000024676323, 0.5350000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.90it/s] 19%|#9        | 5/26 [00:00<00:01, 20.08it/s] 35%|###4      | 9/26 [00:00<00:00, 24.66it/s] 50%|#####     | 13/26 [00:00<00:00, 26.85it/s] 62%|######1   | 16/26 [00:00<00:00, 27.40it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.27it/s] 88%|########8 | 23/26 [00:00<00:00, 28.50it/s]100%|##########| 26/26 [00:01<00:00, 24.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 200
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 200
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 200
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 200
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 200
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 200
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 200
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 200
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 200
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 200
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 200
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 200
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 200
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 200
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 200
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 200
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 200
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 200
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 200
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 200
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 200
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 200
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 200
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 200
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 200
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 200
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
final projection at end of training
dim_v 512
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.59 (  0.59)	train_acc   0.44 (  0.47)	train_minacc   0.67 (  0.57)	train_majacc   0.37 (  0.45)	train_corr   0.00 (  0.00)	l1 6.4648 (6.4649)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.14it/s] 27%|##6       | 7/26 [00:00<00:00, 31.36it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.36it/s] 50%|#####     | 13/26 [00:00<00:00, 40.12it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.95it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.95it/s] 92%|#########2| 24/26 [00:00<00:00, 44.65it/s]100%|##########| 26/26 [00:00<00:00, 37.19it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.55 (  0.55)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.65 (  0.60)	test_majacc   0.42 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.65 (  0.60)	test_majacc_d   0.42 (  0.45)	test_corr_d  -0.05 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.53 (  0.58)	test_majacc   0.47 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.53 (  0.58)	test_majacc_d   0.47 (  0.45)	test_corr_d   0.03 ( -0.02)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.44 (  0.47)	test_minacc   0.67 (  0.57)	test_majacc   0.37 (  0.45)	Loss_d 0.694 (0.693)	test_acc_d   0.44 (  0.47)	test_minacc_d   0.67 (  0.57)	test_majacc_d   0.37 (  0.45)	test_corr_d  -0.10 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.76it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 39/  1]	epoch_time 0.0404 (0.0449)	validation_time 0.0003 (0.0006)	train_time 0.0401 (0.0443)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.46700000604987146, 0.5390000343322754)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.17it/s] 19%|#9        | 5/26 [00:00<00:01, 20.42it/s] 35%|###4      | 9/26 [00:00<00:00, 24.95it/s] 50%|#####     | 13/26 [00:00<00:00, 26.99it/s] 65%|######5   | 17/26 [00:00<00:00, 28.47it/s] 81%|########  | 21/26 [00:00<00:00, 29.41it/s] 96%|#########6| 25/26 [00:00<00:00, 29.62it/s]100%|##########| 26/26 [00:01<00:00, 25.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 200
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 200
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 200
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 200
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 200
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 200
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 200
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 200
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 200
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 200
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 200
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 200
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 200
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 200
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 200
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 200
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 200
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 200
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 200
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 200
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 200
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 200
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 200
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 200
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 200
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 200
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.59 (  0.59)	train_acc   0.45 (  0.47)	train_minacc   0.67 (  0.57)	train_majacc   0.38 (  0.45)	train_corr   0.00 (  0.00)	l1 6.4645 (6.4647)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.67it/s] 12%|#1        | 3/26 [00:00<00:02, 10.09it/s] 31%|###       | 8/26 [00:00<00:00, 21.16it/s]                                               31%|###       | 8/26 [00:00<00:00, 21.16it/s] 46%|####6     | 12/26 [00:00<00:00, 26.10it/s] 69%|######9   | 18/26 [00:00<00:00, 35.18it/s]                                                69%|######9   | 18/26 [00:00<00:00, 35.18it/s] 88%|########8 | 23/26 [00:00<00:00, 38.40it/s]100%|##########| 26/26 [00:00<00:00, 28.94it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.55 (  0.55)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.65 (  0.60)	test_majacc   0.43 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.65 (  0.60)	test_majacc_d   0.43 (  0.45)	test_corr_d  -0.05 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.47)	test_minacc   0.53 (  0.58)	test_majacc   0.47 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.53 (  0.58)	test_majacc_d   0.47 (  0.45)	test_corr_d   0.03 ( -0.02)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.47)	test_minacc   0.67 (  0.57)	test_majacc   0.38 (  0.45)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.47)	test_minacc_d   0.67 (  0.57)	test_majacc_d   0.38 (  0.45)	test_corr_d  -0.10 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.51it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 40/  1]	epoch_time 0.0432 (0.0449)	validation_time 0.0005 (0.0006)	train_time 0.0427 (0.0443)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.46850000447034834, 0.5370000004768372)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.05it/s] 15%|#5        | 4/26 [00:00<00:01, 15.13it/s] 27%|##6       | 7/26 [00:00<00:00, 20.41it/s] 38%|###8      | 10/26 [00:00<00:00, 23.66it/s] 50%|#####     | 13/26 [00:00<00:00, 25.64it/s] 65%|######5   | 17/26 [00:00<00:00, 27.37it/s] 81%|########  | 21/26 [00:00<00:00, 28.92it/s] 96%|#########6| 25/26 [00:00<00:00, 29.77it/s]100%|##########| 26/26 [00:01<00:00, 24.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 200
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 200
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 200
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 200
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 200
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 200
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 200
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 200
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 200
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 200
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 200
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 200
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 200
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 200
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 200
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 200
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 200
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 200
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 200
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 200
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 200
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 200
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 200
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 200
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 200
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 200
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
final projection at end of training
dim_v 512
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.59 (  0.59)	train_acc   0.46 (  0.47)	train_minacc   0.68 (  0.57)	train_majacc   0.39 (  0.45)	train_corr   0.00 (  0.00)	l1 6.4643 (6.4644)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.45it/s] 23%|##3       | 6/26 [00:00<00:00, 30.94it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.94it/s] 42%|####2     | 11/26 [00:00<00:00, 38.34it/s] 62%|######1   | 16/26 [00:00<00:00, 41.82it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.82it/s] 81%|########  | 21/26 [00:00<00:00, 41.90it/s]100%|##########| 26/26 [00:00<00:00, 44.41it/s]100%|##########| 26/26 [00:00<00:00, 36.10it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.55 (  0.55)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.65 (  0.60)	test_majacc   0.43 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.65 (  0.60)	test_majacc_d   0.43 (  0.45)	test_corr_d  -0.06 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.47)	test_minacc   0.50 (  0.59)	test_majacc   0.48 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.50 (  0.59)	test_majacc_d   0.48 (  0.45)	test_corr_d   0.03 ( -0.02)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.68 (  0.58)	test_majacc   0.39 (  0.45)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.68 (  0.58)	test_majacc_d   0.39 (  0.45)	test_corr_d  -0.10 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.90it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 41/  1]	epoch_time 0.0431 (0.0449)	validation_time 0.0003 (0.0006)	train_time 0.0427 (0.0442)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.47070000305771825, 0.5370000004768372)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.57it/s] 15%|#5        | 4/26 [00:00<00:01, 17.05it/s] 27%|##6       | 7/26 [00:00<00:00, 21.70it/s] 42%|####2     | 11/26 [00:00<00:00, 25.32it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.89it/s] 69%|######9   | 18/26 [00:00<00:00, 27.31it/s] 81%|########  | 21/26 [00:00<00:00, 27.50it/s] 92%|#########2| 24/26 [00:00<00:00, 28.18it/s]100%|##########| 26/26 [00:01<00:00, 24.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 200
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 200
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 200
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 200
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 200
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 200
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 200
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 200
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 200
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 200
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 200
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 200
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 200
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 200
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 200
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 200
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 200
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 200
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 200
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 200
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 200
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 200
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 200
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 200
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 200
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 200
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
final projection at end of training
dim_v 512
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.59 (  0.59)	train_acc   0.46 (  0.47)	train_minacc   0.70 (  0.58)	train_majacc   0.38 (  0.45)	train_corr   0.00 (  0.00)	l1 6.4641 (6.4642)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.41it/s] 27%|##6       | 7/26 [00:00<00:00, 34.83it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.83it/s] 46%|####6     | 12/26 [00:00<00:00, 40.49it/s] 65%|######5   | 17/26 [00:00<00:00, 42.00it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.00it/s] 88%|########8 | 23/26 [00:00<00:00, 42.63it/s]100%|##########| 26/26 [00:00<00:00, 37.49it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.55 (  0.55)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.65 (  0.61)	test_majacc   0.43 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.65 (  0.61)	test_majacc_d   0.43 (  0.45)	test_corr_d  -0.06 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.47)	test_minacc   0.50 (  0.59)	test_majacc   0.48 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.50 (  0.59)	test_majacc_d   0.48 (  0.45)	test_corr_d   0.02 ( -0.02)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.47)	test_minacc   0.70 (  0.58)	test_majacc   0.38 (  0.45)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.47)	test_minacc_d   0.70 (  0.58)	test_majacc_d   0.38 (  0.45)	test_corr_d  -0.10 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.18it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 42/  1]	epoch_time 0.0441 (0.0448)	validation_time 0.0007 (0.0006)	train_time 0.0434 (0.0442)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.47120000451803207, 0.5330000519752502)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.82it/s] 15%|#5        | 4/26 [00:00<00:01, 17.99it/s] 27%|##6       | 7/26 [00:00<00:00, 22.39it/s] 38%|###8      | 10/26 [00:00<00:00, 24.86it/s] 50%|#####     | 13/26 [00:00<00:00, 26.08it/s] 62%|######1   | 16/26 [00:00<00:00, 27.28it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.76it/s] 88%|########8 | 23/26 [00:00<00:00, 28.35it/s]100%|##########| 26/26 [00:01<00:00, 24.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 200
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 200
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 200
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 200
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 200
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 200
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 200
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 200
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 200
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 200
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 200
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 200
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 200
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 200
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 200
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 200
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 200
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 200
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 200
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 200
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 200
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 200
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 200
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 200
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 200
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 200
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
final projection at end of training
dim_v 512
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.59 (  0.59)	train_acc   0.46 (  0.47)	train_minacc   0.72 (  0.58)	train_majacc   0.38 (  0.45)	train_corr   0.00 (  0.00)	l1 6.4638 (6.4639)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.17it/s] 27%|##6       | 7/26 [00:00<00:00, 32.68it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.68it/s] 46%|####6     | 12/26 [00:00<00:00, 38.19it/s] 65%|######5   | 17/26 [00:00<00:00, 41.91it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.91it/s] 85%|########4 | 22/26 [00:00<00:00, 39.44it/s]100%|##########| 26/26 [00:00<00:00, 36.40it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.55 (  0.55)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.68 (  0.62)	test_majacc   0.43 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.68 (  0.62)	test_majacc_d   0.43 (  0.46)	test_corr_d  -0.06 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.47)	test_minacc   0.50 (  0.59)	test_majacc   0.48 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.50 (  0.59)	test_majacc_d   0.48 (  0.45)	test_corr_d   0.02 ( -0.03)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.72 (  0.58)	test_majacc   0.38 (  0.45)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.72 (  0.58)	test_majacc_d   0.38 (  0.45)	test_corr_d  -0.10 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.93it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 43/  1]	epoch_time 0.0415 (0.0448)	validation_time 0.0003 (0.0006)	train_time 0.0412 (0.0441)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.4732000040709972, 0.5360000133514404)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.22it/s] 19%|#9        | 5/26 [00:00<00:00, 21.64it/s] 35%|###4      | 9/26 [00:00<00:00, 25.78it/s] 50%|#####     | 13/26 [00:00<00:00, 27.76it/s] 65%|######5   | 17/26 [00:00<00:00, 28.81it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.04it/s] 88%|########8 | 23/26 [00:00<00:00, 29.15it/s]100%|##########| 26/26 [00:01<00:00, 25.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 200
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 200
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 200
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 200
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 200
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 200
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 200
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 200
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 200
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 200
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 200
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 200
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 200
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 200
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 200
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 200
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 200
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 200
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 200
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 200
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 200
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 200
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 200
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 200
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 200
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 200
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
final projection at end of training
dim_v 512
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.59 (  0.59)	train_acc   0.46 (  0.47)	train_minacc   0.74 (  0.59)	train_majacc   0.38 (  0.45)	train_corr   0.00 (  0.00)	l1 6.4636 (6.4637)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.20it/s] 27%|##6       | 7/26 [00:00<00:00, 30.31it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.31it/s] 46%|####6     | 12/26 [00:00<00:00, 36.87it/s] 69%|######9   | 18/26 [00:00<00:00, 43.58it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.58it/s] 88%|########8 | 23/26 [00:00<00:00, 44.01it/s]100%|##########| 26/26 [00:00<00:00, 36.82it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.55 (  0.55)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.68 (  0.62)	test_majacc   0.43 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.68 (  0.62)	test_majacc_d   0.43 (  0.46)	test_corr_d  -0.06 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.48)	test_minacc   0.50 (  0.60)	test_majacc   0.49 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.50 (  0.60)	test_majacc_d   0.49 (  0.45)	test_corr_d   0.02 ( -0.03)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.74 (  0.59)	test_majacc   0.38 (  0.45)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.74 (  0.59)	test_majacc_d   0.38 (  0.45)	test_corr_d  -0.10 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.50it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 44/  1]	epoch_time 0.0420 (0.0447)	validation_time 0.0004 (0.0006)	train_time 0.0416 (0.0441)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.4737000052034855, 0.5350000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.28it/s] 19%|#9        | 5/26 [00:00<00:00, 23.15it/s] 35%|###4      | 9/26 [00:00<00:00, 28.24it/s] 50%|#####     | 13/26 [00:00<00:00, 30.95it/s] 65%|######5   | 17/26 [00:00<00:00, 30.51it/s] 81%|########  | 21/26 [00:00<00:00, 31.07it/s] 96%|#########6| 25/26 [00:00<00:00, 31.34it/s]100%|##########| 26/26 [00:00<00:00, 27.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 200
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 200
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 200
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 200
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 200
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 200
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 200
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 200
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 200
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 200
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 200
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 200
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 200
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 200
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 200
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 200
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 200
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 200
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 200
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 200
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 200
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 200
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 200
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 200
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 200
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 200
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.58 (  0.58)	train_acc   0.47 (  0.48)	train_minacc   0.77 (  0.59)	train_majacc   0.38 (  0.45)	train_corr   0.00 (  0.00)	l1 6.4634 (6.4634)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.25it/s] 31%|###       | 8/26 [00:00<00:00, 36.74it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.74it/s] 50%|#####     | 13/26 [00:00<00:00, 40.71it/s] 69%|######9   | 18/26 [00:00<00:00, 43.86it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.86it/s] 88%|########8 | 23/26 [00:00<00:00, 39.58it/s]100%|##########| 26/26 [00:00<00:00, 37.06it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.55 (  0.55)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.68 (  0.62)	test_majacc   0.43 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.68 (  0.62)	test_majacc_d   0.43 (  0.46)	test_corr_d  -0.07 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.48)	test_minacc   0.50 (  0.60)	test_majacc   0.49 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.50 (  0.60)	test_majacc_d   0.49 (  0.45)	test_corr_d   0.02 ( -0.03)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.77 (  0.59)	test_majacc   0.38 (  0.45)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.77 (  0.59)	test_majacc_d   0.38 (  0.45)	test_corr_d  -0.10 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.06it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 45/  1]	epoch_time 0.0424 (0.0446)	validation_time 0.0004 (0.0006)	train_time 0.0420 (0.0440)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.47400000581145285, 0.5350000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.95it/s] 12%|#1        | 3/26 [00:00<00:01, 13.34it/s] 23%|##3       | 6/26 [00:00<00:01, 19.58it/s] 35%|###4      | 9/26 [00:00<00:00, 22.55it/s] 46%|####6     | 12/26 [00:00<00:00, 24.74it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.17it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.00it/s] 88%|########8 | 23/26 [00:00<00:00, 28.31it/s]100%|##########| 26/26 [00:01<00:00, 23.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 200
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 200
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 200
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 200
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 200
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 200
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 200
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 200
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 200
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 200
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 200
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 200
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 200
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 200
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 200
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 200
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 200
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 200
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 200
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 200
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 200
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 200
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 200
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 200
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 200
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 200
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
final projection at end of training
dim_v 512
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.58 (  0.58)	train_acc   0.47 (  0.48)	train_minacc   0.77 (  0.59)	train_majacc   0.38 (  0.45)	train_corr   0.00 (  0.00)	l1 6.4631 (6.4632)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.51it/s] 19%|#9        | 5/26 [00:00<00:00, 23.79it/s] 38%|###8      | 10/26 [00:00<00:00, 34.22it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.22it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.09it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.02it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.02it/s] 96%|#########6| 25/26 [00:00<00:00, 41.37it/s]100%|##########| 26/26 [00:00<00:00, 34.63it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.57 (  0.57)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.68 (  0.62)	test_majacc   0.43 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.68 (  0.62)	test_majacc_d   0.43 (  0.46)	test_corr_d  -0.07 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.50 (  0.60)	test_majacc   0.50 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.50 (  0.60)	test_majacc_d   0.50 (  0.46)	test_corr_d   0.02 ( -0.03)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.77 (  0.59)	test_majacc   0.38 (  0.45)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.77 (  0.59)	test_majacc_d   0.38 (  0.45)	test_corr_d  -0.10 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.19it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 46/  1]	epoch_time 0.0439 (0.0446)	validation_time 0.0004 (0.0006)	train_time 0.0435 (0.0440)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.4769000042676926, 0.5360000133514404)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.27it/s] 15%|#5        | 4/26 [00:00<00:01, 17.42it/s] 27%|##6       | 7/26 [00:00<00:00, 22.33it/s] 38%|###8      | 10/26 [00:00<00:00, 24.71it/s] 50%|#####     | 13/26 [00:00<00:00, 25.83it/s] 62%|######1   | 16/26 [00:00<00:00, 26.78it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.30it/s] 88%|########8 | 23/26 [00:00<00:00, 28.56it/s]100%|##########| 26/26 [00:01<00:00, 24.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 200
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 200
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 200
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 200
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 200
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 200
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 200
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 200
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 200
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 200
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 200
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 200
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 200
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 200
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 200
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 200
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 200
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 200
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 200
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 200
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 200
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 200
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 200
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 200
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 200
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 200
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
final projection at end of training
dim_v 512
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.58 (  0.58)	train_acc   0.47 (  0.48)	train_minacc   0.75 (  0.60)	train_majacc   0.39 (  0.46)	train_corr   0.00 (  0.00)	l1 6.4629 (6.4630)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.90it/s] 23%|##3       | 6/26 [00:00<00:01, 19.90it/s]                                               23%|##3       | 6/26 [00:00<00:01, 19.90it/s] 42%|####2     | 11/26 [00:00<00:00, 28.80it/s] 62%|######1   | 16/26 [00:00<00:00, 34.65it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.65it/s] 81%|########  | 21/26 [00:00<00:00, 35.57it/s]100%|##########| 26/26 [00:00<00:00, 39.55it/s]100%|##########| 26/26 [00:00<00:00, 29.60it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.57 (  0.57)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.68 (  0.62)	test_majacc   0.44 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.68 (  0.62)	test_majacc_d   0.44 (  0.46)	test_corr_d  -0.07 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.48)	test_minacc   0.50 (  0.60)	test_majacc   0.51 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.50 (  0.60)	test_majacc_d   0.51 (  0.46)	test_corr_d   0.02 ( -0.03)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.75 (  0.60)	test_majacc   0.39 (  0.46)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.75 (  0.60)	test_majacc_d   0.39 (  0.46)	test_corr_d  -0.10 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.81it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 47/  1]	epoch_time 0.0438 (0.0446)	validation_time 0.0006 (0.0006)	train_time 0.0431 (0.0440)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.47810000440478323, 0.5330000519752502)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.15it/s] 19%|#9        | 5/26 [00:00<00:01, 13.31it/s] 31%|###       | 8/26 [00:00<00:00, 18.03it/s] 42%|####2     | 11/26 [00:00<00:00, 21.32it/s] 58%|#####7    | 15/26 [00:00<00:00, 24.17it/s] 69%|######9   | 18/26 [00:00<00:00, 25.13it/s] 81%|########  | 21/26 [00:01<00:00, 25.85it/s] 96%|#########6| 25/26 [00:01<00:00, 27.21it/s]100%|##########| 26/26 [00:01<00:00, 21.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 200
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 200
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 200
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 200
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 200
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 200
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 200
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 200
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 200
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 200
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 200
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 200
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 200
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 200
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 200
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 200
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 200
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 200
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 200
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 200
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 200
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 200
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 200
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 200
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 200
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 200
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
final projection at end of training
dim_v 512
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.58 (  0.58)	train_acc   0.48 (  0.48)	train_minacc   0.75 (  0.60)	train_majacc   0.40 (  0.46)	train_corr   0.00 (  0.00)	l1 6.4627 (6.4627)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.54it/s] 23%|##3       | 6/26 [00:00<00:00, 27.38it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.38it/s] 42%|####2     | 11/26 [00:00<00:00, 35.10it/s] 62%|######1   | 16/26 [00:00<00:00, 37.52it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.52it/s] 81%|########  | 21/26 [00:00<00:00, 39.86it/s]100%|##########| 26/26 [00:00<00:00, 42.40it/s]100%|##########| 26/26 [00:00<00:00, 33.99it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.55 (  0.55)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.68 (  0.63)	test_majacc   0.44 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.68 (  0.63)	test_majacc_d   0.44 (  0.46)	test_corr_d  -0.07 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.48)	test_minacc   0.50 (  0.61)	test_majacc   0.51 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.50 (  0.61)	test_majacc_d   0.51 (  0.46)	test_corr_d   0.02 ( -0.03)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.75 (  0.60)	test_majacc   0.40 (  0.46)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.75 (  0.60)	test_majacc_d   0.40 (  0.46)	test_corr_d  -0.10 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.13it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 48/  1]	epoch_time 0.0446 (0.0446)	validation_time 0.0003 (0.0006)	train_time 0.0443 (0.0440)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.47930000537633893, 0.527999997138977)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.05it/s] 15%|#5        | 4/26 [00:00<00:01, 19.74it/s] 31%|###       | 8/26 [00:00<00:00, 25.28it/s] 42%|####2     | 11/26 [00:00<00:00, 26.88it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.04it/s] 69%|######9   | 18/26 [00:00<00:00, 28.34it/s] 81%|########  | 21/26 [00:00<00:00, 28.69it/s] 96%|#########6| 25/26 [00:00<00:00, 29.08it/s]100%|##########| 26/26 [00:01<00:00, 25.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 200
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 200
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 200
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 200
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 200
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 200
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 200
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 200
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 200
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 200
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 200
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 200
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 200
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 200
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 200
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 200
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 200
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 200
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 200
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 200
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 200
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 200
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 200
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 200
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 200
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 200
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
final projection at end of training
dim_v 512
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.58 (  0.58)	train_acc   0.48 (  0.48)	train_minacc   0.75 (  0.60)	train_majacc   0.40 (  0.46)	train_corr   0.00 (  0.00)	l1 6.4625 (6.4625)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.82it/s] 19%|#9        | 5/26 [00:00<00:00, 21.73it/s] 38%|###8      | 10/26 [00:00<00:00, 32.30it/s]                                                38%|###8      | 10/26 [00:00<00:00, 32.30it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.88it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.11it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 36.11it/s] 92%|#########2| 24/26 [00:00<00:00, 39.52it/s]100%|##########| 26/26 [00:00<00:00, 32.17it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.55 (  0.55)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.68 (  0.63)	test_majacc   0.44 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.68 (  0.63)	test_majacc_d   0.44 (  0.46)	test_corr_d  -0.07 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.48)	test_minacc   0.50 (  0.61)	test_majacc   0.51 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.50 (  0.61)	test_majacc_d   0.51 (  0.46)	test_corr_d   0.02 ( -0.03)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.75 (  0.60)	test_majacc   0.40 (  0.46)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.75 (  0.60)	test_majacc_d   0.40 (  0.46)	test_corr_d  -0.10 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.16it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 49/  1]	epoch_time 0.0444 (0.0446)	validation_time 0.0005 (0.0006)	train_time 0.0439 (0.0440)
record: (train_acc, test_acc) (0.7134000295996666, 0.5720000267028809)
last accs (train_acc, test_acc) (0.47960000282526016, 0.5240000486373901)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.158 MB of 0.158 MB uploadedwandb: \ 0.158 MB of 0.158 MB uploadedwandb: | 0.158 MB of 0.158 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmp8chtjg11'
wandb: ERROR Internal wandb error: file data was not synced
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_214304-rmmwnuhs
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/rmmwnuhs
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=200, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=5, fraction_z=0.99)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1223
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6041, 3, 32, 32) (5959, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:41,  1.68s/it] 19%|#9        | 5/26 [00:01<00:05,  3.61it/s] 35%|###4      | 9/26 [00:01<00:02,  7.00it/s] 50%|#####     | 13/26 [00:02<00:01, 10.55it/s] 65%|######5   | 17/26 [00:02<00:00, 14.10it/s] 81%|########  | 21/26 [00:02<00:00, 17.59it/s] 96%|#########6| 25/26 [00:02<00:00, 20.62it/s]100%|##########| 26/26 [00:02<00:00,  9.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [0][  26/  26]	Loss 9.873 (12.506)	train_nll   0.48 (  0.57)	train_penalty   0.10 (  0.32)	weight_norm   9.39 ( 11.94)	train_acc   0.81 (  0.81)	train_minacc   0.00 (  0.08)	train_majacc   1.00 (  0.94)	train_corr   0.00 (  0.00)	l1 6.4924 (7.9110)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.53it/s] 23%|##3       | 6/26 [00:00<00:00, 30.36it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.36it/s] 42%|####2     | 11/26 [00:00<00:00, 37.34it/s] 65%|######5   | 17/26 [00:00<00:00, 41.67it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.67it/s] 88%|########8 | 23/26 [00:00<00:00, 45.53it/s]100%|##########| 26/26 [00:00<00:00, 37.05it/s]
Test: [   0/  26]	Loss 0.438 (0.438)	test_acc   0.83 (  0.83)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.438 (0.438)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  10/  26]	Loss 0.463 (0.426)	test_acc   0.83 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.463 (0.426)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.450 (0.424)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.450 (0.424)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.483 (0.423)	test_acc   0.82 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.483 (0.423)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.49it/s]100%|##########| 1/1 [00:00<00:00,  2.49it/s]
Test: [  0/  1]	Loss 1.621 (1.621)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.621 (1.621)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 1.621 (1.621)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.621 (1.621)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/187/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0797 (0.0797)	validation_time 0.0068 (0.0068)	train_time 0.0712 (0.0712)
record: (train_acc, test_acc) (0.8475000203847886, 0.10500000417232513)
last accs (train_acc, test_acc) (0.8475000203847886, 0.10500000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.50it/s] 12%|#1        | 3/26 [00:00<00:02, 10.39it/s] 27%|##6       | 7/26 [00:00<00:01, 18.81it/s] 42%|####2     | 11/26 [00:00<00:00, 23.37it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.93it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.41it/s] 88%|########8 | 23/26 [00:00<00:00, 28.11it/s]100%|##########| 26/26 [00:01<00:00, 28.52it/s]100%|##########| 26/26 [00:01<00:00, 23.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [1][  26/  26]	Loss 5.108 (7.037)	train_nll   0.47 (  0.41)	train_penalty   0.11 (  0.05)	weight_norm   4.64 (  6.63)	train_acc   0.81 (  0.85)	train_minacc   0.00 (  0.05)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 5.6730 (6.1455)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.79it/s] 27%|##6       | 7/26 [00:00<00:00, 32.31it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.31it/s] 46%|####6     | 12/26 [00:00<00:00, 37.58it/s] 65%|######5   | 17/26 [00:00<00:00, 40.61it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.61it/s] 85%|########4 | 22/26 [00:00<00:00, 39.84it/s]100%|##########| 26/26 [00:00<00:00, 36.55it/s]
Test: [   0/  26]	Loss 0.431 (0.431)	test_acc   0.83 (  0.83)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.431 (0.431)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.434 (0.393)	test_acc   0.82 (  0.84)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  1.00)	Loss_d 0.434 (0.393)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.96 (  0.97)
Test: [  20/  26]	Loss 0.387 (0.389)	test_acc   0.86 (  0.85)	test_minacc   0.02 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.387 (0.389)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.02 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.440 (0.386)	test_acc   0.81 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.440 (0.386)	test_acc_d   0.81 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 56.79it/s]
Test: [  0/  1]	Loss 1.690 (1.690)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.690 (1.690)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  1/  1]	Loss 1.690 (1.690)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.690 (1.690)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/187/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0433 (0.0615)	validation_time 0.0005 (0.0036)	train_time 0.0428 (0.0570)
record: (train_acc, test_acc) (0.847300025999546, 0.10700000822544098)
last accs (train_acc, test_acc) (0.847300025999546, 0.10700000822544098)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.13it/s] 15%|#5        | 4/26 [00:00<00:01, 17.17it/s] 27%|##6       | 7/26 [00:00<00:00, 20.17it/s] 42%|####2     | 11/26 [00:00<00:00, 23.78it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.56it/s] 65%|######5   | 17/26 [00:00<00:00, 26.39it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.41it/s] 88%|########8 | 23/26 [00:00<00:00, 28.15it/s]100%|##########| 26/26 [00:01<00:00, 23.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [2][  26/  26]	Loss 3.066 (3.868)	train_nll   0.41 (  0.38)	train_penalty   0.05 (  0.04)	weight_norm   2.65 (  3.48)	train_acc   0.81 (  0.85)	train_minacc   0.00 (  0.11)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 4.6534 (5.0111)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  3.08it/s] 23%|##3       | 6/26 [00:00<00:01, 16.74it/s]                                               23%|##3       | 6/26 [00:00<00:01, 16.74it/s] 42%|####2     | 11/26 [00:00<00:00, 25.46it/s] 62%|######1   | 16/26 [00:00<00:00, 32.19it/s]                                                62%|######1   | 16/26 [00:00<00:00, 32.19it/s] 81%|########  | 21/26 [00:00<00:00, 35.28it/s]100%|##########| 26/26 [00:00<00:00, 39.12it/s]100%|##########| 26/26 [00:00<00:00, 27.78it/s]
Test: [   0/  26]	Loss 0.378 (0.378)	test_acc   0.83 (  0.83)	test_minacc   0.09 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.378 (0.378)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.401 (0.356)	test_acc   0.83 (  0.85)	test_minacc   0.06 (  0.09)	test_majacc   0.98 (  0.99)	Loss_d 0.401 (0.356)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.06 (  0.09)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  20/  26]	Loss 0.345 (0.350)	test_acc   0.85 (  0.85)	test_minacc   0.16 (  0.09)	test_majacc   0.97 (  0.99)	Loss_d 0.345 (0.350)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.16 (  0.09)	test_majacc_d   0.97 (  0.99)	test_corr_d   0.91 (  0.92)
Test: [  26/  26]	Loss 0.383 (0.350)	test_acc   0.81 (  0.85)	test_minacc   0.02 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.383 (0.350)	test_acc_d   0.81 (  0.85)	test_minacc_d   0.02 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 23.77it/s]
Test: [  0/  1]	Loss 1.752 (1.752)	test_acc   0.15 (  0.15)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 1.752 (1.752)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.87 (  0.87)
Test: [  1/  1]	Loss 1.752 (1.752)	test_acc   0.15 (  0.15)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 1.752 (1.752)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.87 (  0.87)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/187/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0459 (0.0563)	validation_time 0.0009 (0.0027)	train_time 0.0450 (0.0530)
record: (train_acc, test_acc) (0.8512000222802162, 0.14500001072883606)
last accs (train_acc, test_acc) (0.8512000222802162, 0.14500001072883606)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.94it/s] 15%|#5        | 4/26 [00:00<00:02, 10.89it/s] 27%|##6       | 7/26 [00:00<00:01, 16.29it/s] 42%|####2     | 11/26 [00:00<00:00, 21.39it/s] 58%|#####7    | 15/26 [00:00<00:00, 24.42it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.48it/s] 88%|########8 | 23/26 [00:01<00:00, 27.88it/s]100%|##########| 26/26 [00:01<00:00, 21.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [3][  26/  26]	Loss 2.062 (2.458)	train_nll   0.40 (  0.36)	train_penalty   0.06 (  0.03)	weight_norm   1.67 (  2.10)	train_acc   0.82 (  0.85)	train_minacc   0.00 (  0.14)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 4.1358 (4.3396)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.48it/s] 23%|##3       | 6/26 [00:00<00:00, 26.62it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.62it/s] 42%|####2     | 11/26 [00:00<00:00, 34.84it/s] 62%|######1   | 16/26 [00:00<00:00, 38.33it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.33it/s] 81%|########  | 21/26 [00:00<00:00, 38.47it/s]100%|##########| 26/26 [00:00<00:00, 41.24it/s]100%|##########| 26/26 [00:00<00:00, 32.91it/s]
Test: [   0/  26]	Loss 0.405 (0.405)	test_acc   0.83 (  0.83)	test_minacc   0.22 (  0.22)	test_majacc   0.96 (  0.96)	Loss_d 0.405 (0.405)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.82 (  0.82)
Test: [  10/  26]	Loss 0.415 (0.380)	test_acc   0.84 (  0.85)	test_minacc   0.32 (  0.28)	test_majacc   0.95 (  0.96)	Loss_d 0.415 (0.380)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.32 (  0.28)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.78 (  0.80)
Test: [  20/  26]	Loss 0.376 (0.377)	test_acc   0.87 (  0.85)	test_minacc   0.37 (  0.28)	test_majacc   0.96 (  0.96)	Loss_d 0.376 (0.377)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.37 (  0.28)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.82 (  0.80)
Test: [  26/  26]	Loss 0.371 (0.376)	test_acc   0.84 (  0.86)	test_minacc   0.26 (  0.28)	test_majacc   0.98 (  0.96)	Loss_d 0.371 (0.376)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.26 (  0.28)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.79 (  0.80)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.60it/s]
Test: [  0/  1]	Loss 1.430 (1.430)	test_acc   0.32 (  0.32)	test_minacc   0.26 (  0.26)	test_majacc   0.94 (  0.94)	Loss_d 1.430 (1.430)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.51 (  0.51)
Test: [  1/  1]	Loss 1.430 (1.430)	test_acc   0.32 (  0.32)	test_minacc   0.26 (  0.26)	test_majacc   0.94 (  0.94)	Loss_d 1.430 (1.430)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.51 (  0.51)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/187/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0429 (0.0530)	validation_time 0.0004 (0.0021)	train_time 0.0425 (0.0504)
record: (train_acc, test_acc) (0.8559000256657601, 0.3240000009536743)
last accs (train_acc, test_acc) (0.8559000256657601, 0.3240000009536743)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.11it/s] 15%|#5        | 4/26 [00:00<00:01, 16.87it/s] 27%|##6       | 7/26 [00:00<00:00, 21.71it/s] 38%|###8      | 10/26 [00:00<00:00, 24.58it/s] 50%|#####     | 13/26 [00:00<00:00, 25.91it/s] 65%|######5   | 17/26 [00:00<00:00, 27.38it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.08it/s] 88%|########8 | 23/26 [00:00<00:00, 28.64it/s]100%|##########| 26/26 [00:01<00:00, 24.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [4][  26/  26]	Loss 1.492 (1.713)	train_nll   0.40 (  0.36)	train_penalty   0.06 (  0.04)	weight_norm   1.09 (  1.35)	train_acc   0.82 (  0.85)	train_minacc   0.04 (  0.10)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 4.4725 (4.1373)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.23it/s] 23%|##3       | 6/26 [00:00<00:00, 25.86it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.86it/s] 42%|####2     | 11/26 [00:00<00:00, 34.15it/s] 62%|######1   | 16/26 [00:00<00:00, 38.80it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.80it/s] 81%|########  | 21/26 [00:00<00:00, 37.43it/s]100%|##########| 26/26 [00:00<00:00, 40.42it/s]100%|##########| 26/26 [00:00<00:00, 32.70it/s]
Test: [   0/  26]	Loss 0.347 (0.347)	test_acc   0.84 (  0.84)	test_minacc   0.25 (  0.25)	test_majacc   0.97 (  0.97)	Loss_d 0.347 (0.347)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.83 (  0.83)
Test: [  10/  26]	Loss 0.395 (0.353)	test_acc   0.85 (  0.85)	test_minacc   0.30 (  0.28)	test_majacc   0.96 (  0.96)	Loss_d 0.395 (0.353)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.30 (  0.28)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.79 (  0.82)
Test: [  20/  26]	Loss 0.336 (0.347)	test_acc   0.88 (  0.86)	test_minacc   0.37 (  0.29)	test_majacc   0.96 (  0.96)	Loss_d 0.336 (0.347)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.37 (  0.29)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.85 (  0.82)
Test: [  26/  26]	Loss 0.342 (0.347)	test_acc   0.85 (  0.86)	test_minacc   0.33 (  0.29)	test_majacc   0.97 (  0.96)	Loss_d 0.342 (0.347)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.33 (  0.29)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.79 (  0.82)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.43it/s]
Test: [  0/  1]	Loss 1.437 (1.437)	test_acc   0.33 (  0.33)	test_minacc   0.25 (  0.25)	test_majacc   0.97 (  0.97)	Loss_d 1.437 (1.437)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.53 (  0.53)
Test: [  1/  1]	Loss 1.437 (1.437)	test_acc   0.33 (  0.33)	test_minacc   0.25 (  0.25)	test_majacc   0.97 (  0.97)	Loss_d 1.437 (1.437)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.53 (  0.53)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/187/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0429 (0.0509)	validation_time 0.0004 (0.0018)	train_time 0.0424 (0.0488)
record: (train_acc, test_acc) (0.8562000212073326, 0.32600000500679016)
last accs (train_acc, test_acc) (0.8562000212073326, 0.32600000500679016)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02,  9.77it/s] 19%|#9        | 5/26 [00:00<00:01, 17.71it/s] 31%|###       | 8/26 [00:00<00:00, 22.13it/s] 42%|####2     | 11/26 [00:00<00:00, 22.92it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.68it/s] 69%|######9   | 18/26 [00:00<00:00, 26.76it/s] 81%|########  | 21/26 [00:00<00:00, 27.43it/s] 92%|#########2| 24/26 [00:00<00:00, 27.56it/s]100%|##########| 26/26 [00:01<00:00, 23.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [5][  26/  26]	Loss 1.136 (1.240)	train_nll   0.41 (  0.35)	train_penalty   0.05 (  0.03)	weight_norm   0.72 (  0.89)	train_acc   0.82 (  0.85)	train_minacc   0.17 (  0.17)	train_majacc   0.97 (  0.97)	train_corr   0.00 (  0.00)	l1 5.4698 (4.7879)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.36it/s] 23%|##3       | 6/26 [00:00<00:00, 27.02it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.02it/s] 42%|####2     | 11/26 [00:00<00:00, 34.83it/s] 65%|######5   | 17/26 [00:00<00:00, 38.03it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.03it/s] 85%|########4 | 22/26 [00:00<00:00, 41.13it/s]100%|##########| 26/26 [00:00<00:00, 34.20it/s]
Test: [   0/  26]	Loss 0.393 (0.393)	test_acc   0.82 (  0.82)	test_minacc   0.18 (  0.18)	test_majacc   0.95 (  0.95)	Loss_d 0.393 (0.393)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.81 (  0.81)
Test: [  10/  26]	Loss 0.386 (0.374)	test_acc   0.86 (  0.85)	test_minacc   0.33 (  0.28)	test_majacc   0.96 (  0.95)	Loss_d 0.386 (0.374)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.33 (  0.28)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.76 (  0.79)
Test: [  20/  26]	Loss 0.352 (0.367)	test_acc   0.87 (  0.85)	test_minacc   0.44 (  0.29)	test_majacc   0.95 (  0.95)	Loss_d 0.352 (0.367)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.44 (  0.29)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.80 (  0.79)
Test: [  26/  26]	Loss 0.334 (0.364)	test_acc   0.87 (  0.86)	test_minacc   0.33 (  0.29)	test_majacc   0.99 (  0.96)	Loss_d 0.334 (0.364)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.33 (  0.29)	test_majacc_d   0.99 (  0.96)	test_corr_d   0.79 (  0.80)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.63it/s]
Test: [  0/  1]	Loss 1.421 (1.421)	test_acc   0.31 (  0.31)	test_minacc   0.24 (  0.24)	test_majacc   0.96 (  0.96)	Loss_d 1.421 (1.421)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.50 (  0.50)
Test: [  1/  1]	Loss 1.421 (1.421)	test_acc   0.31 (  0.31)	test_minacc   0.24 (  0.24)	test_majacc   0.96 (  0.96)	Loss_d 1.421 (1.421)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.50 (  0.50)
Overall Timing[  5/  1]	epoch_time 0.0450 (0.0499)	validation_time 0.0003 (0.0015)	train_time 0.0446 (0.0481)
record: (train_acc, test_acc) (0.8562000212073326, 0.32600000500679016)
last accs (train_acc, test_acc) (0.8554000219702721, 0.3110000193119049)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.45it/s] 19%|#9        | 5/26 [00:00<00:00, 21.92it/s] 31%|###       | 8/26 [00:00<00:00, 25.02it/s] 42%|####2     | 11/26 [00:00<00:00, 26.38it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.38it/s] 65%|######5   | 17/26 [00:00<00:00, 27.57it/s] 81%|########  | 21/26 [00:00<00:00, 28.63it/s] 92%|#########2| 24/26 [00:00<00:00, 28.35it/s]100%|##########| 26/26 [00:01<00:00, 25.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [6][  26/  26]	Loss 0.878 (0.949)	train_nll   0.38 (  0.35)	train_penalty   0.03 (  0.03)	weight_norm   0.50 (  0.60)	train_acc   0.82 (  0.85)	train_minacc   0.04 (  0.15)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 6.2911 (5.7674)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.96it/s] 23%|##3       | 6/26 [00:00<00:00, 22.92it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.92it/s] 42%|####2     | 11/26 [00:00<00:00, 31.33it/s] 62%|######1   | 16/26 [00:00<00:00, 36.44it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.44it/s] 81%|########  | 21/26 [00:00<00:00, 37.47it/s]100%|##########| 26/26 [00:00<00:00, 31.97it/s]
Test: [   0/  26]	Loss 0.376 (0.376)	test_acc   0.83 (  0.83)	test_minacc   0.63 (  0.63)	test_majacc   0.87 (  0.87)	Loss_d 0.376 (0.376)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.383 (0.376)	test_acc   0.82 (  0.82)	test_minacc   0.67 (  0.65)	test_majacc   0.85 (  0.85)	Loss_d 0.383 (0.376)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.67 (  0.65)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.68 (  0.71)
Test: [  20/  26]	Loss 0.372 (0.373)	test_acc   0.81 (  0.83)	test_minacc   0.60 (  0.65)	test_majacc   0.85 (  0.86)	Loss_d 0.372 (0.373)	test_acc_d   0.81 (  0.83)	test_minacc_d   0.60 (  0.65)	test_majacc_d   0.85 (  0.86)	test_corr_d   0.76 (  0.71)
Test: [  26/  26]	Loss 0.373 (0.372)	test_acc   0.82 (  0.83)	test_minacc   0.72 (  0.66)	test_majacc   0.84 (  0.86)	Loss_d 0.373 (0.372)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.72 (  0.66)	test_majacc_d   0.84 (  0.86)	test_corr_d   0.68 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.02it/s]
Test: [  0/  1]	Loss 1.252 (1.252)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.90 (  0.90)	Loss_d 1.252 (1.252)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.27 (  0.27)
Test: [  1/  1]	Loss 1.252 (1.252)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.90 (  0.90)	Loss_d 1.252 (1.252)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.27 (  0.27)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/187/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0426 (0.0489)	validation_time 0.0004 (0.0014)	train_time 0.0422 (0.0472)
record: (train_acc, test_acc) (0.8255000207424164, 0.5410000085830688)
last accs (train_acc, test_acc) (0.8255000207424164, 0.5410000085830688)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.12it/s] 19%|#9        | 5/26 [00:00<00:00, 22.75it/s] 31%|###       | 8/26 [00:00<00:00, 25.56it/s] 42%|####2     | 11/26 [00:00<00:00, 26.79it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.74it/s] 69%|######9   | 18/26 [00:00<00:00, 28.26it/s] 81%|########  | 21/26 [00:00<00:00, 28.50it/s] 96%|#########6| 25/26 [00:00<00:00, 29.51it/s]100%|##########| 26/26 [00:00<00:00, 26.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [7][  26/  26]	Loss 0.004 (0.556)	train_nll   0.52 (  0.39)	train_penalty   0.00 (  0.02)	weight_norm   0.38 (  0.43)	train_acc   0.77 (  0.83)	train_minacc   0.61 (  0.34)	train_majacc   0.81 (  0.92)	train_corr   0.00 (  0.00)	l1 6.4749 (6.7024)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.90it/s] 19%|#9        | 5/26 [00:00<00:00, 26.51it/s] 35%|###4      | 9/26 [00:00<00:00, 32.47it/s]                                               35%|###4      | 9/26 [00:00<00:00, 32.47it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.59it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.83it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.83it/s] 92%|#########2| 24/26 [00:00<00:00, 41.81it/s]100%|##########| 26/26 [00:00<00:00, 34.92it/s]
Test: [   0/  26]	Loss 0.530 (0.530)	test_acc   0.76 (  0.76)	test_minacc   0.62 (  0.62)	test_majacc   0.79 (  0.79)	Loss_d 0.530 (0.530)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.51 (  0.51)
Test: [  10/  26]	Loss 0.536 (0.528)	test_acc   0.75 (  0.75)	test_minacc   0.62 (  0.59)	test_majacc   0.78 (  0.78)	Loss_d 0.536 (0.528)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.62 (  0.59)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.52 (  0.52)
Test: [  20/  26]	Loss 0.516 (0.530)	test_acc   0.82 (  0.76)	test_minacc   0.58 (  0.60)	test_majacc   0.86 (  0.79)	Loss_d 0.516 (0.530)	test_acc_d   0.82 (  0.76)	test_minacc_d   0.58 (  0.60)	test_majacc_d   0.86 (  0.79)	test_corr_d   0.55 (  0.52)
Test: [  26/  26]	Loss 0.544 (0.531)	test_acc   0.74 (  0.76)	test_minacc   0.63 (  0.59)	test_majacc   0.76 (  0.78)	Loss_d 0.544 (0.531)	test_acc_d   0.74 (  0.76)	test_minacc_d   0.63 (  0.59)	test_majacc_d   0.76 (  0.78)	test_corr_d   0.52 (  0.52)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.10it/s]
Test: [  0/  1]	Loss 0.753 (0.753)	test_acc   0.58 (  0.58)	test_minacc   0.56 (  0.56)	test_majacc   0.83 (  0.83)	Loss_d 0.753 (0.753)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.753 (0.753)	test_acc   0.58 (  0.58)	test_minacc   0.56 (  0.56)	test_majacc   0.83 (  0.83)	Loss_d 0.753 (0.753)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.03 (  0.03)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/187/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0421 (0.0480)	validation_time 0.0004 (0.0013)	train_time 0.0416 (0.0465)
record: (train_acc, test_acc) (0.7561000331044198, 0.5830000042915344)
last accs (train_acc, test_acc) (0.7561000331044198, 0.5830000042915344)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.56it/s] 19%|#9        | 5/26 [00:00<00:01, 16.19it/s] 35%|###4      | 9/26 [00:00<00:00, 22.25it/s] 50%|#####     | 13/26 [00:00<00:00, 25.19it/s] 65%|######5   | 17/26 [00:00<00:00, 26.89it/s] 81%|########  | 21/26 [00:00<00:00, 28.25it/s] 96%|#########6| 25/26 [00:01<00:00, 28.79it/s]100%|##########| 26/26 [00:01<00:00, 23.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [8][  26/  26]	Loss 0.000 (0.001)	train_nll   0.63 (  0.60)	train_penalty   0.00 (  0.00)	weight_norm   0.44 (  0.42)	train_acc   0.62 (  0.66)	train_minacc   0.70 (  0.66)	train_majacc   0.60 (  0.66)	train_corr   0.00 (  0.00)	l1 5.9816 (6.1362)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.57it/s] 27%|##6       | 7/26 [00:00<00:00, 33.13it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.13it/s] 46%|####6     | 12/26 [00:00<00:00, 39.11it/s] 65%|######5   | 17/26 [00:00<00:00, 38.98it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.98it/s] 85%|########4 | 22/26 [00:00<00:00, 40.44it/s]100%|##########| 26/26 [00:00<00:00, 35.37it/s]
Test: [   0/  26]	Loss 0.629 (0.629)	test_acc   0.62 (  0.62)	test_minacc   0.54 (  0.54)	test_majacc   0.63 (  0.63)	Loss_d 0.629 (0.629)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.27 (  0.27)
Test: [  10/  26]	Loss 0.626 (0.619)	test_acc   0.62 (  0.63)	test_minacc   0.65 (  0.63)	test_majacc   0.61 (  0.63)	Loss_d 0.626 (0.619)	test_acc_d   0.62 (  0.63)	test_minacc_d   0.65 (  0.63)	test_majacc_d   0.61 (  0.63)	test_corr_d   0.30 (  0.27)
Test: [  20/  26]	Loss 0.610 (0.621)	test_acc   0.68 (  0.64)	test_minacc   0.68 (  0.64)	test_majacc   0.68 (  0.64)	Loss_d 0.610 (0.621)	test_acc_d   0.68 (  0.64)	test_minacc_d   0.68 (  0.64)	test_majacc_d   0.68 (  0.64)	test_corr_d   0.28 (  0.27)
Test: [  26/  26]	Loss 0.627 (0.623)	test_acc   0.62 (  0.64)	test_minacc   0.70 (  0.64)	test_majacc   0.60 (  0.63)	Loss_d 0.627 (0.623)	test_acc_d   0.62 (  0.64)	test_minacc_d   0.70 (  0.64)	test_majacc_d   0.60 (  0.63)	test_corr_d   0.29 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.59it/s]
Test: [  0/  1]	Loss 0.642 (0.642)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.68 (  0.68)	Loss_d 0.642 (0.642)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.642 (0.642)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.68 (  0.68)	Loss_d 0.642 (0.642)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.24 ( -0.24)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/187/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0418 (0.0473)	validation_time 0.0003 (0.0012)	train_time 0.0414 (0.0460)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.07it/s] 15%|#5        | 4/26 [00:00<00:01, 17.94it/s] 27%|##6       | 7/26 [00:00<00:00, 22.52it/s] 42%|####2     | 11/26 [00:00<00:00, 25.75it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.88it/s] 65%|######5   | 17/26 [00:00<00:00, 27.24it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.97it/s] 88%|########8 | 23/26 [00:00<00:00, 28.18it/s]100%|##########| 26/26 [00:01<00:00, 24.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [9][  26/  26]	Loss 0.000 (0.001)	train_nll   0.65 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.59 (  0.62)	train_minacc   0.65 (  0.63)	train_majacc   0.58 (  0.62)	train_corr   0.00 (  0.00)	l1 5.8388 (5.8992)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.23it/s] 15%|#5        | 4/26 [00:00<00:01, 18.36it/s] 38%|###8      | 10/26 [00:00<00:00, 33.24it/s]                                                38%|###8      | 10/26 [00:00<00:00, 33.24it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.09it/s] 77%|#######6  | 20/26 [00:00<00:00, 40.94it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 40.94it/s] 96%|#########6| 25/26 [00:00<00:00, 43.08it/s]100%|##########| 26/26 [00:00<00:00, 34.80it/s]
Test: [   0/  26]	Loss 0.642 (0.642)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.60 (  0.60)	Loss_d 0.642 (0.642)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.646 (0.639)	test_acc   0.59 (  0.60)	test_minacc   0.62 (  0.61)	test_majacc   0.59 (  0.60)	Loss_d 0.646 (0.639)	test_acc_d   0.59 (  0.60)	test_minacc_d   0.62 (  0.61)	test_majacc_d   0.59 (  0.60)	test_corr_d   0.21 (  0.23)
Test: [  20/  26]	Loss 0.645 (0.640)	test_acc   0.64 (  0.61)	test_minacc   0.58 (  0.61)	test_majacc   0.65 (  0.61)	Loss_d 0.645 (0.640)	test_acc_d   0.64 (  0.61)	test_minacc_d   0.58 (  0.61)	test_majacc_d   0.65 (  0.61)	test_corr_d   0.24 (  0.23)
Test: [  26/  26]	Loss 0.654 (0.641)	test_acc   0.59 (  0.61)	test_minacc   0.65 (  0.62)	test_majacc   0.57 (  0.61)	Loss_d 0.654 (0.641)	test_acc_d   0.59 (  0.61)	test_minacc_d   0.65 (  0.62)	test_majacc_d   0.57 (  0.61)	test_corr_d   0.24 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.53it/s]
Test: [  0/  1]	Loss 0.646 (0.646)	test_acc   0.60 (  0.60)	test_minacc   0.59 (  0.59)	test_majacc   0.67 (  0.67)	Loss_d 0.646 (0.646)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.646 (0.646)	test_acc   0.60 (  0.60)	test_minacc   0.59 (  0.59)	test_majacc   0.67 (  0.67)	Loss_d 0.646 (0.646)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.23 ( -0.23)
Overall Timing[  9/  1]	epoch_time 0.0419 (0.0468)	validation_time 0.0007 (0.0011)	train_time 0.0412 (0.0455)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.6084000076055527, 0.5960000157356262)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.55it/s] 15%|#5        | 4/26 [00:00<00:01, 14.49it/s] 27%|##6       | 7/26 [00:00<00:00, 19.90it/s] 42%|####2     | 11/26 [00:00<00:00, 23.88it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.05it/s] 69%|######9   | 18/26 [00:00<00:00, 26.73it/s] 81%|########  | 21/26 [00:00<00:00, 27.35it/s] 96%|#########6| 25/26 [00:01<00:00, 28.26it/s]100%|##########| 26/26 [00:01<00:00, 23.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [10][  26/  26]	Loss 0.000 (0.000)	train_nll   0.65 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.57 (  0.60)	train_minacc   0.63 (  0.61)	train_majacc   0.56 (  0.60)	train_corr   0.00 (  0.00)	l1 5.8075 (5.8268)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 11.68it/s] 31%|###       | 8/26 [00:00<00:00, 31.43it/s]                                               31%|###       | 8/26 [00:00<00:00, 31.43it/s] 50%|#####     | 13/26 [00:00<00:00, 36.91it/s] 69%|######9   | 18/26 [00:00<00:00, 38.90it/s]                                                69%|######9   | 18/26 [00:00<00:00, 38.90it/s] 92%|#########2| 24/26 [00:00<00:00, 44.27it/s]100%|##########| 26/26 [00:00<00:00, 35.63it/s]
Test: [   0/  26]	Loss 0.653 (0.653)	test_acc   0.59 (  0.59)	test_minacc   0.53 (  0.53)	test_majacc   0.61 (  0.61)	Loss_d 0.653 (0.653)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.650 (0.646)	test_acc   0.58 (  0.60)	test_minacc   0.65 (  0.60)	test_majacc   0.57 (  0.60)	Loss_d 0.650 (0.646)	test_acc_d   0.58 (  0.60)	test_minacc_d   0.65 (  0.60)	test_majacc_d   0.57 (  0.60)	test_corr_d   0.21 (  0.21)
Test: [  20/  26]	Loss 0.650 (0.648)	test_acc   0.64 (  0.60)	test_minacc   0.60 (  0.61)	test_majacc   0.65 (  0.60)	Loss_d 0.650 (0.648)	test_acc_d   0.64 (  0.60)	test_minacc_d   0.60 (  0.61)	test_majacc_d   0.65 (  0.60)	test_corr_d   0.21 (  0.21)
Test: [  26/  26]	Loss 0.650 (0.649)	test_acc   0.57 (  0.60)	test_minacc   0.63 (  0.61)	test_majacc   0.56 (  0.60)	Loss_d 0.650 (0.649)	test_acc_d   0.57 (  0.60)	test_minacc_d   0.63 (  0.61)	test_majacc_d   0.56 (  0.60)	test_corr_d   0.26 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.86it/s]
Test: [  0/  1]	Loss 0.649 (0.649)	test_acc   0.59 (  0.59)	test_minacc   0.58 (  0.58)	test_majacc   0.63 (  0.63)	Loss_d 0.649 (0.649)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.649 (0.649)	test_acc   0.59 (  0.59)	test_minacc   0.58 (  0.58)	test_majacc   0.63 (  0.63)	Loss_d 0.649 (0.649)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 10/  1]	epoch_time 0.0433 (0.0465)	validation_time 0.0004 (0.0011)	train_time 0.0429 (0.0453)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.5984000088572502, 0.5870000123977661)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.95it/s] 15%|#5        | 4/26 [00:00<00:01, 16.58it/s] 27%|##6       | 7/26 [00:00<00:00, 21.07it/s] 38%|###8      | 10/26 [00:00<00:00, 23.63it/s] 50%|#####     | 13/26 [00:00<00:00, 25.02it/s] 62%|######1   | 16/26 [00:00<00:00, 26.31it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.16it/s] 88%|########8 | 23/26 [00:00<00:00, 28.04it/s]100%|##########| 26/26 [00:01<00:00, 23.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [11][  26/  26]	Loss 0.000 (0.000)	train_nll   0.66 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.57 (  0.60)	train_minacc   0.63 (  0.61)	train_majacc   0.56 (  0.59)	train_corr   0.00 (  0.00)	l1 5.7882 (5.8062)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.05it/s] 23%|##3       | 6/26 [00:00<00:00, 28.65it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.65it/s] 42%|####2     | 11/26 [00:00<00:00, 35.61it/s] 65%|######5   | 17/26 [00:00<00:00, 39.61it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.61it/s] 85%|########4 | 22/26 [00:00<00:00, 41.47it/s]100%|##########| 26/26 [00:00<00:00, 34.98it/s]
Test: [   0/  26]	Loss 0.654 (0.654)	test_acc   0.58 (  0.58)	test_minacc   0.53 (  0.53)	test_majacc   0.60 (  0.60)	Loss_d 0.654 (0.654)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.653 (0.650)	test_acc   0.59 (  0.59)	test_minacc   0.65 (  0.59)	test_majacc   0.58 (  0.59)	Loss_d 0.653 (0.650)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.65 (  0.59)	test_majacc_d   0.58 (  0.59)	test_corr_d   0.20 (  0.21)
Test: [  20/  26]	Loss 0.658 (0.650)	test_acc   0.64 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.64 (  0.60)	Loss_d 0.658 (0.650)	test_acc_d   0.64 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.64 (  0.60)	test_corr_d   0.22 (  0.21)
Test: [  26/  26]	Loss 0.660 (0.651)	test_acc   0.57 (  0.60)	test_minacc   0.63 (  0.60)	test_majacc   0.56 (  0.59)	Loss_d 0.660 (0.651)	test_acc_d   0.57 (  0.60)	test_minacc_d   0.63 (  0.60)	test_majacc_d   0.56 (  0.59)	test_corr_d   0.24 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.06it/s]
Test: [  0/  1]	Loss 0.653 (0.653)	test_acc   0.58 (  0.58)	test_minacc   0.57 (  0.57)	test_majacc   0.62 (  0.62)	Loss_d 0.653 (0.653)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.22 ( -0.22)
Test: [  1/  1]	Loss 0.653 (0.653)	test_acc   0.58 (  0.58)	test_minacc   0.57 (  0.57)	test_majacc   0.62 (  0.62)	Loss_d 0.653 (0.653)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.22 ( -0.22)
Overall Timing[ 11/  1]	epoch_time 0.0410 (0.0460)	validation_time 0.0003 (0.0010)	train_time 0.0406 (0.0449)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.5955000101923943, 0.5790000557899475)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.85it/s] 23%|##3       | 6/26 [00:00<00:00, 25.23it/s] 35%|###4      | 9/26 [00:00<00:00, 26.95it/s] 46%|####6     | 12/26 [00:00<00:00, 27.14it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.75it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.72it/s] 88%|########8 | 23/26 [00:00<00:00, 29.17it/s]100%|##########| 26/26 [00:00<00:00, 26.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [12][  26/  26]	Loss 0.000 (0.000)	train_nll   0.66 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.56 (  0.59)	train_minacc   0.59 (  0.59)	train_majacc   0.55 (  0.59)	train_corr   0.00 (  0.00)	l1 5.7758 (5.7936)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.80it/s] 23%|##3       | 6/26 [00:00<00:01, 15.74it/s]                                               23%|##3       | 6/26 [00:00<00:01, 15.74it/s] 42%|####2     | 11/26 [00:00<00:00, 24.52it/s] 62%|######1   | 16/26 [00:00<00:00, 31.20it/s]                                                62%|######1   | 16/26 [00:00<00:00, 31.20it/s] 81%|########  | 21/26 [00:00<00:00, 33.57it/s]100%|##########| 26/26 [00:00<00:00, 37.90it/s]100%|##########| 26/26 [00:00<00:00, 26.57it/s]
Test: [   0/  26]	Loss 0.662 (0.662)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.58 (  0.58)	Loss_d 0.662 (0.662)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.657 (0.655)	test_acc   0.57 (  0.59)	test_minacc   0.64 (  0.59)	test_majacc   0.56 (  0.59)	Loss_d 0.657 (0.655)	test_acc_d   0.57 (  0.59)	test_minacc_d   0.64 (  0.59)	test_majacc_d   0.56 (  0.59)	test_corr_d   0.18 (  0.19)
Test: [  20/  26]	Loss 0.660 (0.656)	test_acc   0.64 (  0.59)	test_minacc   0.60 (  0.59)	test_majacc   0.65 (  0.59)	Loss_d 0.660 (0.656)	test_acc_d   0.64 (  0.59)	test_minacc_d   0.60 (  0.59)	test_majacc_d   0.65 (  0.59)	test_corr_d   0.21 (  0.19)
Test: [  26/  26]	Loss 0.662 (0.656)	test_acc   0.56 (  0.59)	test_minacc   0.59 (  0.59)	test_majacc   0.55 (  0.59)	Loss_d 0.662 (0.656)	test_acc_d   0.56 (  0.59)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.55 (  0.59)	test_corr_d   0.23 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.97it/s]
Test: [  0/  1]	Loss 0.655 (0.655)	test_acc   0.58 (  0.58)	test_minacc   0.57 (  0.57)	test_majacc   0.61 (  0.61)	Loss_d 0.655 (0.655)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.22 ( -0.22)
Test: [  1/  1]	Loss 0.655 (0.655)	test_acc   0.58 (  0.58)	test_minacc   0.57 (  0.57)	test_majacc   0.61 (  0.61)	Loss_d 0.655 (0.655)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.22 ( -0.22)
Overall Timing[ 12/  1]	epoch_time 0.0438 (0.0459)	validation_time 0.0004 (0.0009)	train_time 0.0434 (0.0448)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.5900000122189522, 0.5770000219345093)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.06it/s] 15%|#5        | 4/26 [00:00<00:01, 13.55it/s] 27%|##6       | 7/26 [00:00<00:00, 19.11it/s] 42%|####2     | 11/26 [00:00<00:00, 23.63it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.47it/s] 65%|######5   | 17/26 [00:00<00:00, 26.65it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.35it/s] 88%|########8 | 23/26 [00:00<00:00, 27.94it/s]100%|##########| 26/26 [00:01<00:00, 22.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [13][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.56 (  0.59)	train_minacc   0.57 (  0.59)	train_majacc   0.55 (  0.59)	train_corr   0.00 (  0.00)	l1 5.7646 (5.7717)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.74it/s] 31%|###       | 8/26 [00:00<00:00, 37.51it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.51it/s] 50%|#####     | 13/26 [00:00<00:00, 41.54it/s] 69%|######9   | 18/26 [00:00<00:00, 39.84it/s]                                                69%|######9   | 18/26 [00:00<00:00, 39.84it/s] 88%|########8 | 23/26 [00:00<00:00, 41.50it/s]100%|##########| 26/26 [00:00<00:00, 38.01it/s]
Test: [   0/  26]	Loss 0.665 (0.665)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.57 (  0.57)	Loss_d 0.665 (0.665)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.15 (  0.15)
Test: [  10/  26]	Loss 0.663 (0.661)	test_acc   0.57 (  0.58)	test_minacc   0.64 (  0.57)	test_majacc   0.56 (  0.58)	Loss_d 0.663 (0.661)	test_acc_d   0.57 (  0.58)	test_minacc_d   0.64 (  0.57)	test_majacc_d   0.56 (  0.58)	test_corr_d   0.16 (  0.18)
Test: [  20/  26]	Loss 0.668 (0.660)	test_acc   0.64 (  0.59)	test_minacc   0.60 (  0.58)	test_majacc   0.65 (  0.59)	Loss_d 0.668 (0.660)	test_acc_d   0.64 (  0.59)	test_minacc_d   0.60 (  0.58)	test_majacc_d   0.65 (  0.59)	test_corr_d   0.20 (  0.18)
Test: [  26/  26]	Loss 0.671 (0.661)	test_acc   0.56 (  0.58)	test_minacc   0.57 (  0.58)	test_majacc   0.55 (  0.58)	Loss_d 0.671 (0.661)	test_acc_d   0.56 (  0.58)	test_minacc_d   0.57 (  0.58)	test_majacc_d   0.55 (  0.58)	test_corr_d   0.20 (  0.18)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.58it/s]
Test: [  0/  1]	Loss 0.659 (0.659)	test_acc   0.57 (  0.57)	test_minacc   0.56 (  0.56)	test_majacc   0.61 (  0.61)	Loss_d 0.659 (0.659)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.659 (0.659)	test_acc   0.57 (  0.57)	test_minacc   0.56 (  0.56)	test_majacc   0.61 (  0.61)	Loss_d 0.659 (0.659)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 13/  1]	epoch_time 0.0412 (0.0455)	validation_time 0.0004 (0.0009)	train_time 0.0407 (0.0445)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.5841000115275383, 0.5690000057220459)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.94it/s] 19%|#9        | 5/26 [00:00<00:01, 15.09it/s] 35%|###4      | 9/26 [00:00<00:00, 20.81it/s] 50%|#####     | 13/26 [00:00<00:00, 24.01it/s] 65%|######5   | 17/26 [00:00<00:00, 25.98it/s] 81%|########  | 21/26 [00:00<00:00, 27.31it/s] 92%|#########2| 24/26 [00:01<00:00, 27.95it/s]100%|##########| 26/26 [00:01<00:00, 22.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [14][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.55 (  0.58)	train_minacc   0.54 (  0.58)	train_majacc   0.55 (  0.58)	train_corr   0.00 (  0.00)	l1 5.7585 (5.7682)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.58it/s] 27%|##6       | 7/26 [00:00<00:00, 33.50it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.50it/s] 46%|####6     | 12/26 [00:00<00:00, 39.24it/s] 65%|######5   | 17/26 [00:00<00:00, 42.48it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.48it/s] 85%|########4 | 22/26 [00:00<00:00, 40.85it/s]100%|##########| 26/26 [00:00<00:00, 37.69it/s]
Test: [   0/  26]	Loss 0.672 (0.672)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.57 (  0.57)	Loss_d 0.672 (0.672)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.667 (0.666)	test_acc   0.56 (  0.57)	test_minacc   0.65 (  0.57)	test_majacc   0.54 (  0.57)	Loss_d 0.667 (0.666)	test_acc_d   0.56 (  0.57)	test_minacc_d   0.65 (  0.57)	test_majacc_d   0.54 (  0.57)	test_corr_d   0.14 (  0.16)
Test: [  20/  26]	Loss 0.665 (0.665)	test_acc   0.63 (  0.58)	test_minacc   0.60 (  0.58)	test_majacc   0.64 (  0.59)	Loss_d 0.665 (0.665)	test_acc_d   0.63 (  0.58)	test_minacc_d   0.60 (  0.58)	test_majacc_d   0.64 (  0.59)	test_corr_d   0.19 (  0.16)
Test: [  26/  26]	Loss 0.670 (0.665)	test_acc   0.55 (  0.58)	test_minacc   0.54 (  0.57)	test_majacc   0.55 (  0.58)	Loss_d 0.670 (0.665)	test_acc_d   0.55 (  0.58)	test_minacc_d   0.54 (  0.57)	test_majacc_d   0.55 (  0.58)	test_corr_d   0.20 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.09it/s]
Test: [  0/  1]	Loss 0.660 (0.660)	test_acc   0.57 (  0.57)	test_minacc   0.56 (  0.56)	test_majacc   0.60 (  0.60)	Loss_d 0.660 (0.660)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.660 (0.660)	test_acc   0.57 (  0.57)	test_minacc   0.56 (  0.56)	test_majacc   0.60 (  0.60)	Loss_d 0.660 (0.660)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 14/  1]	epoch_time 0.0456 (0.0455)	validation_time 0.0004 (0.0009)	train_time 0.0452 (0.0445)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.5803000113368034, 0.5660000443458557)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.15it/s] 19%|#9        | 5/26 [00:00<00:01, 20.77it/s] 35%|###4      | 9/26 [00:00<00:00, 24.88it/s] 50%|#####     | 13/26 [00:00<00:00, 26.76it/s] 62%|######1   | 16/26 [00:00<00:00, 27.70it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.74it/s] 92%|#########2| 24/26 [00:00<00:00, 29.56it/s]100%|##########| 26/26 [00:01<00:00, 25.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [15][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.55 (  0.58)	train_minacc   0.54 (  0.57)	train_majacc   0.55 (  0.58)	train_corr   0.00 (  0.00)	l1 5.7479 (5.7497)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.84it/s] 23%|##3       | 6/26 [00:00<00:00, 25.86it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.86it/s] 46%|####6     | 12/26 [00:00<00:00, 37.45it/s] 65%|######5   | 17/26 [00:00<00:00, 41.35it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.35it/s] 85%|########4 | 22/26 [00:00<00:00, 42.92it/s]100%|##########| 26/26 [00:00<00:00, 35.63it/s]
Test: [   0/  26]	Loss 0.681 (0.681)	test_acc   0.56 (  0.56)	test_minacc   0.54 (  0.54)	test_majacc   0.57 (  0.57)	Loss_d 0.681 (0.681)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.674 (0.674)	test_acc   0.55 (  0.57)	test_minacc   0.64 (  0.56)	test_majacc   0.53 (  0.57)	Loss_d 0.674 (0.674)	test_acc_d   0.55 (  0.57)	test_minacc_d   0.64 (  0.56)	test_majacc_d   0.53 (  0.57)	test_corr_d   0.10 (  0.13)
Test: [  20/  26]	Loss 0.672 (0.673)	test_acc   0.64 (  0.58)	test_minacc   0.56 (  0.57)	test_majacc   0.65 (  0.58)	Loss_d 0.672 (0.673)	test_acc_d   0.64 (  0.58)	test_minacc_d   0.56 (  0.57)	test_majacc_d   0.65 (  0.58)	test_corr_d   0.18 (  0.13)
Test: [  26/  26]	Loss 0.678 (0.673)	test_acc   0.55 (  0.58)	test_minacc   0.54 (  0.57)	test_majacc   0.55 (  0.58)	Loss_d 0.678 (0.673)	test_acc_d   0.55 (  0.58)	test_minacc_d   0.54 (  0.57)	test_majacc_d   0.55 (  0.58)	test_corr_d   0.17 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.14it/s]
Test: [  0/  1]	Loss 0.664 (0.664)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.60 (  0.60)	Loss_d 0.664 (0.664)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.664 (0.664)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.60 (  0.60)	Loss_d 0.664 (0.664)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 15/  1]	epoch_time 0.0474 (0.0456)	validation_time 0.0003 (0.0008)	train_time 0.0471 (0.0447)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.5752000081539154, 0.5610000491142273)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.27it/s] 15%|#5        | 4/26 [00:00<00:01, 19.93it/s] 31%|###       | 8/26 [00:00<00:00, 25.73it/s] 42%|####2     | 11/26 [00:00<00:00, 27.22it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.28it/s] 69%|######9   | 18/26 [00:00<00:00, 28.80it/s] 85%|########4 | 22/26 [00:00<00:00, 29.63it/s] 96%|#########6| 25/26 [00:00<00:00, 29.45it/s]100%|##########| 26/26 [00:00<00:00, 26.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.52 (  0.57)	train_minacc   0.57 (  0.57)	train_majacc   0.51 (  0.57)	train_corr   0.00 (  0.00)	l1 5.7438 (5.7450)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.69it/s] 15%|#5        | 4/26 [00:00<00:01, 20.83it/s] 35%|###4      | 9/26 [00:00<00:00, 32.92it/s]                                               35%|###4      | 9/26 [00:00<00:00, 32.92it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.85it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.49it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.49it/s] 92%|#########2| 24/26 [00:00<00:00, 41.16it/s]100%|##########| 26/26 [00:00<00:00, 34.29it/s]
Test: [   0/  26]	Loss 0.682 (0.682)	test_acc   0.55 (  0.55)	test_minacc   0.54 (  0.54)	test_majacc   0.55 (  0.55)	Loss_d 0.682 (0.682)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.678 (0.678)	test_acc   0.52 (  0.55)	test_minacc   0.64 (  0.57)	test_majacc   0.50 (  0.55)	Loss_d 0.678 (0.678)	test_acc_d   0.52 (  0.55)	test_minacc_d   0.64 (  0.57)	test_majacc_d   0.50 (  0.55)	test_corr_d   0.07 (  0.10)
Test: [  20/  26]	Loss 0.677 (0.677)	test_acc   0.63 (  0.56)	test_minacc   0.60 (  0.58)	test_majacc   0.63 (  0.56)	Loss_d 0.677 (0.677)	test_acc_d   0.63 (  0.56)	test_minacc_d   0.60 (  0.58)	test_majacc_d   0.63 (  0.56)	test_corr_d   0.16 (  0.11)
Test: [  26/  26]	Loss 0.681 (0.677)	test_acc   0.53 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.56)	Loss_d 0.681 (0.677)	test_acc_d   0.53 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.56)	test_corr_d   0.14 (  0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.18it/s]
Test: [  0/  1]	Loss 0.666 (0.666)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.59 (  0.59)	Loss_d 0.666 (0.666)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.666 (0.666)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.59 (  0.59)	Loss_d 0.666 (0.666)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 16/  1]	epoch_time 0.0452 (0.0456)	validation_time 0.0004 (0.0008)	train_time 0.0447 (0.0447)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.5592000082731247, 0.5680000185966492)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.90it/s] 15%|#5        | 4/26 [00:00<00:02, 10.68it/s] 27%|##6       | 7/26 [00:00<00:01, 15.71it/s] 42%|####2     | 11/26 [00:00<00:00, 20.71it/s] 58%|#####7    | 15/26 [00:00<00:00, 24.03it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.46it/s] 88%|########8 | 23/26 [00:01<00:00, 27.98it/s]100%|##########| 26/26 [00:01<00:00, 21.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.50 (  0.56)	train_minacc   0.57 (  0.58)	train_majacc   0.49 (  0.55)	train_corr   0.00 (  0.00)	l1 5.7425 (5.7397)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:02, 10.71it/s] 31%|###       | 8/26 [00:00<00:00, 23.71it/s]                                               31%|###       | 8/26 [00:00<00:00, 23.71it/s] 50%|#####     | 13/26 [00:00<00:00, 31.05it/s] 69%|######9   | 18/26 [00:00<00:00, 36.53it/s]                                                69%|######9   | 18/26 [00:00<00:00, 36.53it/s] 88%|########8 | 23/26 [00:00<00:00, 36.92it/s]100%|##########| 26/26 [00:00<00:00, 31.02it/s]
Test: [   0/  26]	Loss 0.686 (0.686)	test_acc   0.52 (  0.52)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.686 (0.686)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.681 (0.682)	test_acc   0.50 (  0.52)	test_minacc   0.67 (  0.57)	test_majacc   0.47 (  0.51)	Loss_d 0.681 (0.682)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.67 (  0.57)	test_majacc_d   0.47 (  0.51)	test_corr_d   0.06 (  0.08)
Test: [  20/  26]	Loss 0.676 (0.681)	test_acc   0.61 (  0.53)	test_minacc   0.60 (  0.58)	test_majacc   0.61 (  0.52)	Loss_d 0.676 (0.681)	test_acc_d   0.61 (  0.53)	test_minacc_d   0.60 (  0.58)	test_majacc_d   0.61 (  0.52)	test_corr_d   0.15 (  0.09)
Test: [  26/  26]	Loss 0.681 (0.681)	test_acc   0.50 (  0.53)	test_minacc   0.57 (  0.58)	test_majacc   0.49 (  0.52)	Loss_d 0.681 (0.681)	test_acc_d   0.50 (  0.53)	test_minacc_d   0.57 (  0.58)	test_majacc_d   0.49 (  0.52)	test_corr_d   0.13 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 55.78it/s]
Test: [  0/  1]	Loss 0.666 (0.666)	test_acc   0.58 (  0.58)	test_minacc   0.58 (  0.58)	test_majacc   0.58 (  0.58)	Loss_d 0.666 (0.666)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.666 (0.666)	test_acc   0.58 (  0.58)	test_minacc   0.58 (  0.58)	test_majacc   0.58 (  0.58)	Loss_d 0.666 (0.666)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 17/  1]	epoch_time 0.0440 (0.0455)	validation_time 0.0004 (0.0008)	train_time 0.0437 (0.0446)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.5302000100314617, 0.581000030040741)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.68it/s] 12%|#1        | 3/26 [00:00<00:01, 15.40it/s] 23%|##3       | 6/26 [00:00<00:01, 19.30it/s] 35%|###4      | 9/26 [00:00<00:00, 22.68it/s] 50%|#####     | 13/26 [00:00<00:00, 25.94it/s] 65%|######5   | 17/26 [00:00<00:00, 27.72it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.33it/s] 88%|########8 | 23/26 [00:00<00:00, 28.32it/s]100%|##########| 26/26 [00:01<00:00, 24.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.49 (  0.54)	train_minacc   0.63 (  0.58)	train_majacc   0.46 (  0.53)	train_corr   0.00 (  0.00)	l1 5.7408 (5.7382)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.92it/s] 23%|##3       | 6/26 [00:00<00:00, 20.32it/s]                                               23%|##3       | 6/26 [00:00<00:00, 20.32it/s] 42%|####2     | 11/26 [00:00<00:00, 27.83it/s] 62%|######1   | 16/26 [00:00<00:00, 34.14it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.14it/s] 81%|########  | 21/26 [00:00<00:00, 36.95it/s]100%|##########| 26/26 [00:00<00:00, 40.37it/s]100%|##########| 26/26 [00:00<00:00, 29.79it/s]
Test: [   0/  26]	Loss 0.685 (0.685)	test_acc   0.48 (  0.48)	test_minacc   0.54 (  0.54)	test_majacc   0.46 (  0.46)	Loss_d 0.685 (0.685)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.684 (0.684)	test_acc   0.45 (  0.48)	test_minacc   0.62 (  0.57)	test_majacc   0.42 (  0.46)	Loss_d 0.684 (0.684)	test_acc_d   0.45 (  0.48)	test_minacc_d   0.62 (  0.57)	test_majacc_d   0.42 (  0.46)	test_corr_d   0.04 (  0.07)
Test: [  20/  26]	Loss 0.683 (0.683)	test_acc   0.56 (  0.49)	test_minacc   0.60 (  0.59)	test_majacc   0.56 (  0.47)	Loss_d 0.683 (0.683)	test_acc_d   0.56 (  0.49)	test_minacc_d   0.60 (  0.59)	test_majacc_d   0.56 (  0.47)	test_corr_d   0.14 (  0.08)
Test: [  26/  26]	Loss 0.685 (0.683)	test_acc   0.49 (  0.49)	test_minacc   0.63 (  0.59)	test_majacc   0.46 (  0.48)	Loss_d 0.685 (0.683)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.63 (  0.59)	test_majacc_d   0.46 (  0.48)	test_corr_d   0.11 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.08it/s]
Test: [  0/  1]	Loss 0.670 (0.670)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.53 (  0.53)	Loss_d 0.670 (0.670)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.670 (0.670)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.53 (  0.53)	Loss_d 0.670 (0.670)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 18/  1]	epoch_time 0.0450 (0.0455)	validation_time 0.0004 (0.0008)	train_time 0.0446 (0.0446)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4937000100016594, 0.6010000109672546)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.03it/s] 19%|#9        | 5/26 [00:00<00:00, 22.68it/s] 35%|###4      | 9/26 [00:00<00:00, 26.64it/s] 50%|#####     | 13/26 [00:00<00:00, 28.53it/s] 65%|######5   | 17/26 [00:00<00:00, 29.43it/s] 81%|########  | 21/26 [00:00<00:00, 30.21it/s] 96%|#########6| 25/26 [00:00<00:00, 30.64it/s]100%|##########| 26/26 [00:00<00:00, 27.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.48 (  0.51)	train_minacc   0.63 (  0.59)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.7410 (5.7379)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.64it/s]  8%|7         | 2/26 [00:00<00:02,  9.76it/s] 27%|##6       | 7/26 [00:00<00:00, 26.49it/s]                                               27%|##6       | 7/26 [00:00<00:00, 26.49it/s] 46%|####6     | 12/26 [00:00<00:00, 34.30it/s] 65%|######5   | 17/26 [00:00<00:00, 38.54it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.54it/s] 85%|########4 | 22/26 [00:00<00:00, 37.98it/s]100%|##########| 26/26 [00:00<00:00, 32.75it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.47 (  0.47)	test_minacc   0.54 (  0.54)	test_majacc   0.45 (  0.45)	Loss_d 0.687 (0.687)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.685 (0.685)	test_acc   0.46 (  0.47)	test_minacc   0.64 (  0.57)	test_majacc   0.42 (  0.45)	Loss_d 0.685 (0.685)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.64 (  0.57)	test_majacc_d   0.42 (  0.45)	test_corr_d   0.03 (  0.06)
Test: [  20/  26]	Loss 0.681 (0.684)	test_acc   0.56 (  0.48)	test_minacc   0.60 (  0.58)	test_majacc   0.56 (  0.47)	Loss_d 0.681 (0.684)	test_acc_d   0.56 (  0.48)	test_minacc_d   0.60 (  0.58)	test_majacc_d   0.56 (  0.47)	test_corr_d   0.13 (  0.07)
Test: [  26/  26]	Loss 0.684 (0.684)	test_acc   0.48 (  0.49)	test_minacc   0.63 (  0.59)	test_majacc   0.45 (  0.47)	Loss_d 0.684 (0.684)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.63 (  0.59)	test_majacc_d   0.45 (  0.47)	test_corr_d   0.10 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.74it/s]
Test: [  0/  1]	Loss 0.668 (0.668)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.53 (  0.53)	Loss_d 0.668 (0.668)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.668 (0.668)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.53 (  0.53)	Loss_d 0.668 (0.668)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 19/  1]	epoch_time 0.0419 (0.0453)	validation_time 0.0003 (0.0008)	train_time 0.0416 (0.0445)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4871000107228756, 0.5980000495910645)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.18it/s] 19%|#9        | 5/26 [00:00<00:00, 21.46it/s] 35%|###4      | 9/26 [00:00<00:00, 25.63it/s] 50%|#####     | 13/26 [00:00<00:00, 27.74it/s] 65%|######5   | 17/26 [00:00<00:00, 28.70it/s] 81%|########  | 21/26 [00:00<00:00, 29.36it/s] 96%|#########6| 25/26 [00:00<00:00, 29.82it/s]100%|##########| 26/26 [00:00<00:00, 26.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.48 (  0.51)	train_minacc   0.61 (  0.58)	train_majacc   0.45 (  0.49)	train_corr   0.00 (  0.00)	l1 5.7401 (5.7380)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.72it/s] 19%|#9        | 5/26 [00:00<00:00, 25.67it/s] 35%|###4      | 9/26 [00:00<00:00, 31.46it/s]                                               35%|###4      | 9/26 [00:00<00:00, 31.46it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.84it/s] 73%|#######3  | 19/26 [00:00<00:00, 40.41it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 40.41it/s] 92%|#########2| 24/26 [00:00<00:00, 39.23it/s]100%|##########| 26/26 [00:00<00:00, 34.22it/s]
Test: [   0/  26]	Loss 0.685 (0.685)	test_acc   0.46 (  0.46)	test_minacc   0.54 (  0.54)	test_majacc   0.44 (  0.44)	Loss_d 0.685 (0.685)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.684 (0.684)	test_acc   0.45 (  0.47)	test_minacc   0.62 (  0.56)	test_majacc   0.42 (  0.45)	Loss_d 0.684 (0.684)	test_acc_d   0.45 (  0.47)	test_minacc_d   0.62 (  0.56)	test_majacc_d   0.42 (  0.45)	test_corr_d   0.04 (  0.07)
Test: [  20/  26]	Loss 0.684 (0.684)	test_acc   0.54 (  0.48)	test_minacc   0.58 (  0.57)	test_majacc   0.53 (  0.46)	Loss_d 0.684 (0.684)	test_acc_d   0.54 (  0.48)	test_minacc_d   0.58 (  0.57)	test_majacc_d   0.53 (  0.46)	test_corr_d   0.13 (  0.07)
Test: [  26/  26]	Loss 0.685 (0.684)	test_acc   0.48 (  0.48)	test_minacc   0.61 (  0.58)	test_majacc   0.45 (  0.47)	Loss_d 0.685 (0.684)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.61 (  0.58)	test_majacc_d   0.45 (  0.47)	test_corr_d   0.10 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.25it/s]
Test: [  0/  1]	Loss 0.670 (0.670)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.54 (  0.54)	Loss_d 0.670 (0.670)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.670 (0.670)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.54 (  0.54)	Loss_d 0.670 (0.670)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 20/  1]	epoch_time 0.0436 (0.0452)	validation_time 0.0004 (0.0007)	train_time 0.0431 (0.0444)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4830000061094761, 0.6000000238418579)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.34it/s] 19%|#9        | 5/26 [00:00<00:00, 24.27it/s] 31%|###       | 8/26 [00:00<00:00, 26.76it/s] 42%|####2     | 11/26 [00:00<00:00, 27.93it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.99it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.40it/s] 88%|########8 | 23/26 [00:00<00:00, 29.64it/s]100%|##########| 26/26 [00:00<00:00, 26.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.48 (  0.50)	train_minacc   0.61 (  0.58)	train_majacc   0.46 (  0.49)	train_corr   0.00 (  0.00)	l1 5.7394 (5.7382)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.02it/s]  8%|7         | 2/26 [00:00<00:02,  9.09it/s] 27%|##6       | 7/26 [00:00<00:00, 25.74it/s]                                               27%|##6       | 7/26 [00:00<00:00, 25.74it/s] 46%|####6     | 12/26 [00:00<00:00, 33.72it/s] 65%|######5   | 17/26 [00:00<00:00, 38.96it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.96it/s] 85%|########4 | 22/26 [00:00<00:00, 38.13it/s]100%|##########| 26/26 [00:00<00:00, 32.84it/s]
Test: [   0/  26]	Loss 0.685 (0.685)	test_acc   0.47 (  0.47)	test_minacc   0.54 (  0.54)	test_majacc   0.46 (  0.46)	Loss_d 0.685 (0.685)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.684 (0.684)	test_acc   0.46 (  0.48)	test_minacc   0.62 (  0.55)	test_majacc   0.43 (  0.46)	Loss_d 0.684 (0.684)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.62 (  0.55)	test_majacc_d   0.43 (  0.46)	test_corr_d   0.04 (  0.07)
Test: [  20/  26]	Loss 0.682 (0.684)	test_acc   0.56 (  0.49)	test_minacc   0.60 (  0.57)	test_majacc   0.55 (  0.48)	Loss_d 0.682 (0.684)	test_acc_d   0.56 (  0.49)	test_minacc_d   0.60 (  0.57)	test_majacc_d   0.55 (  0.48)	test_corr_d   0.13 (  0.08)
Test: [  26/  26]	Loss 0.684 (0.684)	test_acc   0.48 (  0.49)	test_minacc   0.61 (  0.58)	test_majacc   0.46 (  0.48)	Loss_d 0.684 (0.684)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.61 (  0.58)	test_majacc_d   0.46 (  0.48)	test_corr_d   0.10 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.21it/s]
Test: [  0/  1]	Loss 0.670 (0.670)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.54 (  0.54)	Loss_d 0.670 (0.670)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.670 (0.670)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.54 (  0.54)	Loss_d 0.670 (0.670)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 21/  1]	epoch_time 0.0444 (0.0452)	validation_time 0.0004 (0.0007)	train_time 0.0440 (0.0444)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.49250000807642935, 0.5920000076293945)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.64it/s] 15%|#5        | 4/26 [00:00<00:01, 20.28it/s] 27%|##6       | 7/26 [00:00<00:00, 24.15it/s] 42%|####2     | 11/26 [00:00<00:00, 26.69it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.57it/s] 65%|######5   | 17/26 [00:00<00:00, 28.14it/s] 81%|########  | 21/26 [00:00<00:00, 29.02it/s] 96%|#########6| 25/26 [00:00<00:00, 30.44it/s]100%|##########| 26/26 [00:00<00:00, 26.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.48 (  0.50)	train_minacc   0.61 (  0.57)	train_majacc   0.46 (  0.49)	train_corr   0.00 (  0.00)	l1 5.7386 (5.7383)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.62it/s] 23%|##3       | 6/26 [00:00<00:00, 32.01it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.01it/s] 42%|####2     | 11/26 [00:00<00:00, 37.99it/s] 62%|######1   | 16/26 [00:00<00:00, 41.89it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.89it/s] 81%|########  | 21/26 [00:00<00:00, 39.82it/s]100%|##########| 26/26 [00:00<00:00, 42.68it/s]100%|##########| 26/26 [00:00<00:00, 36.06it/s]
Test: [   0/  26]	Loss 0.684 (0.684)	test_acc   0.47 (  0.47)	test_minacc   0.53 (  0.53)	test_majacc   0.46 (  0.46)	Loss_d 0.684 (0.684)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.683 (0.683)	test_acc   0.47 (  0.49)	test_minacc   0.62 (  0.56)	test_majacc   0.44 (  0.47)	Loss_d 0.683 (0.683)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.62 (  0.56)	test_majacc_d   0.44 (  0.47)	test_corr_d   0.05 (  0.08)
Test: [  20/  26]	Loss 0.682 (0.683)	test_acc   0.56 (  0.50)	test_minacc   0.61 (  0.57)	test_majacc   0.56 (  0.49)	Loss_d 0.682 (0.683)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.61 (  0.57)	test_majacc_d   0.56 (  0.49)	test_corr_d   0.14 (  0.08)
Test: [  26/  26]	Loss 0.685 (0.683)	test_acc   0.49 (  0.50)	test_minacc   0.61 (  0.57)	test_majacc   0.46 (  0.49)	Loss_d 0.685 (0.683)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.61 (  0.57)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.10 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 52.04it/s]
Test: [  0/  1]	Loss 0.671 (0.671)	test_acc   0.59 (  0.59)	test_minacc   0.59 (  0.59)	test_majacc   0.53 (  0.53)	Loss_d 0.671 (0.671)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.671 (0.671)	test_acc   0.59 (  0.59)	test_minacc   0.59 (  0.59)	test_majacc   0.53 (  0.53)	Loss_d 0.671 (0.671)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 22/  1]	epoch_time 0.0432 (0.0451)	validation_time 0.0005 (0.0007)	train_time 0.0426 (0.0443)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.5001000148057938, 0.5850000381469727)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.64it/s] 19%|#9        | 5/26 [00:00<00:00, 23.07it/s] 31%|###       | 8/26 [00:00<00:00, 23.20it/s] 42%|####2     | 11/26 [00:00<00:00, 24.36it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.11it/s] 65%|######5   | 17/26 [00:00<00:00, 27.33it/s] 77%|#######6  | 20/26 [00:00<00:00, 26.44it/s] 88%|########8 | 23/26 [00:00<00:00, 27.05it/s]100%|##########| 26/26 [00:01<00:00, 24.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 200
penalty weights 10000.0
l1 at pgd_anneal_iters 5.73945426940918
set z to 5.682059726715088
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 200
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 200
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 200
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 200
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 200
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
rho, theta 394 tensor(-0.0072, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 200
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 200
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 200
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 200
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 200
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 200
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 200
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 200
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 200
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 200
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
rho, theta 369 tensor(-0.0105, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 200
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 200
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 200
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 200
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 200
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 200
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 200
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 200
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
final projection at end of training
dim_v 512
Epoch: [23][  26/  26]	Loss 0.000 (0.006)	train_nll   0.68 (  0.70)	train_penalty   0.00 (  0.01)	weight_norm   0.94 (  0.61)	train_acc   0.53 (  0.51)	train_minacc   0.61 (  0.52)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 5.5906 (5.5115)	zero_count 0.0000 (10.1010)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:13,  1.91it/s] 23%|##3       | 6/26 [00:00<00:01, 12.05it/s]                                               23%|##3       | 6/26 [00:00<00:01, 12.05it/s] 42%|####2     | 11/26 [00:00<00:00, 20.32it/s] 62%|######1   | 16/26 [00:00<00:00, 27.14it/s]                                                62%|######1   | 16/26 [00:00<00:00, 27.14it/s] 81%|########  | 21/26 [00:00<00:00, 29.80it/s]100%|##########| 26/26 [00:01<00:00, 34.22it/s]100%|##########| 26/26 [00:01<00:00, 22.30it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.37 (  0.37)	test_majacc   0.49 (  0.49)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.25 (  0.25)
Test: [  10/  26]	Loss 0.683 (0.683)	test_acc   0.50 (  0.51)	test_minacc   0.56 (  0.47)	test_majacc   0.49 (  0.51)	Loss_d 0.683 (0.683)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.56 (  0.47)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.28 (  0.30)
Test: [  20/  26]	Loss 0.672 (0.681)	test_acc   0.58 (  0.51)	test_minacc   0.56 (  0.48)	test_majacc   0.59 (  0.52)	Loss_d 0.672 (0.681)	test_acc_d   0.58 (  0.51)	test_minacc_d   0.56 (  0.48)	test_majacc_d   0.59 (  0.52)	test_corr_d   0.19 (  0.29)
Test: [  26/  26]	Loss 0.686 (0.681)	test_acc   0.60 (  0.51)	test_minacc   0.43 (  0.48)	test_majacc   0.64 (  0.52)	Loss_d 0.686 (0.681)	test_acc_d   0.60 (  0.51)	test_minacc_d   0.43 (  0.48)	test_majacc_d   0.64 (  0.52)	test_corr_d   0.28 (  0.29)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.29it/s]
Test: [  0/  1]	Loss 0.726 (0.726)	test_acc   0.31 (  0.31)	test_minacc   0.27 (  0.27)	test_majacc   0.65 (  0.65)	Loss_d 0.726 (0.726)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.37 (  0.37)
Test: [  1/  1]	Loss 0.726 (0.726)	test_acc   0.31 (  0.31)	test_minacc   0.27 (  0.27)	test_majacc   0.65 (  0.65)	Loss_d 0.726 (0.726)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.37 (  0.37)
Overall Timing[ 23/  1]	epoch_time 0.0497 (0.0453)	validation_time 0.0006 (0.0007)	train_time 0.0491 (0.0445)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.5139000092148781, 0.3110000193119049)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.52it/s] 19%|#9        | 5/26 [00:00<00:00, 22.42it/s] 31%|###       | 8/26 [00:00<00:00, 23.24it/s] 42%|####2     | 11/26 [00:00<00:00, 25.57it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.39it/s] 65%|######5   | 17/26 [00:00<00:00, 24.99it/s] 81%|########  | 21/26 [00:00<00:00, 27.31it/s] 92%|#########2| 24/26 [00:00<00:00, 26.70it/s]100%|##########| 26/26 [00:01<00:00, 24.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 200
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 200
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 200
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 200
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 200
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 200
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 200
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
rho, theta 337 tensor(-0.0045, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 200
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 200
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 200
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 200
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 200
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
rho, theta 339 tensor(-0.0007, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 200
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 200
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 200
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 200
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 200
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
rho, theta 348 tensor(-0.0005, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 200
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 200
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 200
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 200
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 200
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
rho, theta 356 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 200
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 200
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 200
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 200
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
final projection at end of training
dim_v 512
rho, theta 355 tensor(-0.0002, device='cuda:0')
Epoch: [24][  26/  26]	Loss 0.001 (0.001)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.14 (  1.08)	train_acc   0.51 (  0.52)	train_minacc   0.61 (  0.45)	train_majacc   0.49 (  0.53)	train_corr   0.00 (  0.00)	l1 5.7191 (5.6916)	zero_count 0.0000 (25.8960)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.16it/s] 27%|##6       | 7/26 [00:00<00:00, 32.14it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.14it/s] 50%|#####     | 13/26 [00:00<00:00, 41.07it/s] 69%|######9   | 18/26 [00:00<00:00, 43.72it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.72it/s] 88%|########8 | 23/26 [00:00<00:00, 40.86it/s]100%|##########| 26/26 [00:00<00:00, 37.24it/s]
Test: [   0/  26]	Loss 0.698 (0.698)	test_acc   0.46 (  0.46)	test_minacc   0.37 (  0.37)	test_majacc   0.48 (  0.48)	Loss_d 0.698 (0.698)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.13 (  0.13)
Test: [  10/  26]	Loss 0.691 (0.688)	test_acc   0.50 (  0.50)	test_minacc   0.59 (  0.49)	test_majacc   0.48 (  0.50)	Loss_d 0.691 (0.688)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.59 (  0.49)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.12 (  0.17)
Test: [  20/  26]	Loss 0.678 (0.687)	test_acc   0.58 (  0.50)	test_minacc   0.56 (  0.49)	test_majacc   0.59 (  0.50)	Loss_d 0.678 (0.687)	test_acc_d   0.58 (  0.50)	test_minacc_d   0.56 (  0.49)	test_majacc_d   0.59 (  0.50)	test_corr_d   0.07 (  0.16)
Test: [  26/  26]	Loss 0.690 (0.687)	test_acc   0.51 (  0.50)	test_minacc   0.61 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.690 (0.687)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.61 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.18 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.17it/s]
Test: [  0/  1]	Loss 0.706 (0.706)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.706 (0.706)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.706 (0.706)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.706 (0.706)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.09 (  0.09)
Overall Timing[ 24/  1]	epoch_time 0.0445 (0.0453)	validation_time 0.0004 (0.0007)	train_time 0.0441 (0.0445)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.5000000097155571, 0.49800002574920654)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.54it/s] 15%|#5        | 4/26 [00:00<00:01, 16.29it/s] 27%|##6       | 7/26 [00:00<00:00, 19.56it/s] 38%|###8      | 10/26 [00:00<00:00, 23.00it/s] 50%|#####     | 13/26 [00:00<00:00, 23.10it/s] 62%|######1   | 16/26 [00:00<00:00, 22.99it/s] 73%|#######3  | 19/26 [00:00<00:00, 24.77it/s] 85%|########4 | 22/26 [00:00<00:00, 24.98it/s]100%|##########| 26/26 [00:01<00:00, 25.30it/s]100%|##########| 26/26 [00:01<00:00, 21.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 200
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
rho, theta 356 tensor(-5.0346e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 200
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 200
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 200
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 200
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 200
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
rho, theta 356 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 200
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 200
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 200
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 200
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 200
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
rho, theta 355 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 200
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 200
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 200
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 200
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 200
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
rho, theta 354 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 200
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 200
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 200
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 200
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 200
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
rho, theta 355 tensor(-7.0181e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 200
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 200
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 200
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 200
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 200
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
rho, theta 357 tensor(-5.7175e-05, device='cuda:0')
final projection at end of training
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   1.16 (  1.16)	train_acc   0.52 (  0.50)	train_minacc   0.63 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 5.6962 (5.6998)	zero_count 0.0000 (36.4650)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.61it/s]  8%|7         | 2/26 [00:00<00:02,  8.24it/s] 31%|###       | 8/26 [00:00<00:00, 28.56it/s]                                               31%|###       | 8/26 [00:00<00:00, 28.56it/s] 50%|#####     | 13/26 [00:00<00:00, 35.09it/s] 69%|######9   | 18/26 [00:00<00:00, 38.89it/s]                                                69%|######9   | 18/26 [00:00<00:00, 38.89it/s] 88%|########8 | 23/26 [00:00<00:00, 40.42it/s]100%|##########| 26/26 [00:00<00:00, 31.88it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.46 (  0.46)	test_minacc   0.37 (  0.37)	test_majacc   0.48 (  0.48)	Loss_d 0.695 (0.695)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.690 (0.688)	test_acc   0.50 (  0.50)	test_minacc   0.59 (  0.49)	test_majacc   0.48 (  0.50)	Loss_d 0.690 (0.688)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.59 (  0.49)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.10 (  0.14)
Test: [  20/  26]	Loss 0.679 (0.687)	test_acc   0.58 (  0.50)	test_minacc   0.56 (  0.49)	test_majacc   0.59 (  0.50)	Loss_d 0.679 (0.687)	test_acc_d   0.58 (  0.50)	test_minacc_d   0.56 (  0.49)	test_majacc_d   0.59 (  0.50)	test_corr_d   0.05 (  0.13)
Test: [  26/  26]	Loss 0.689 (0.687)	test_acc   0.52 (  0.50)	test_minacc   0.63 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.689 (0.687)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.63 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.15 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.79it/s]
Test: [  0/  1]	Loss 0.700 (0.700)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.700 (0.700)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.700 (0.700)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.700 (0.700)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.05 (  0.05)
Overall Timing[ 25/  1]	epoch_time 0.0477 (0.0454)	validation_time 0.0003 (0.0007)	train_time 0.0473 (0.0446)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.5010000104904175, 0.49900001287460327)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.40it/s] 15%|#5        | 4/26 [00:00<00:01, 18.47it/s] 27%|##6       | 7/26 [00:00<00:00, 20.26it/s] 38%|###8      | 10/26 [00:00<00:00, 22.06it/s] 50%|#####     | 13/26 [00:00<00:00, 24.50it/s] 62%|######1   | 16/26 [00:00<00:00, 24.54it/s] 77%|#######6  | 20/26 [00:00<00:00, 25.23it/s] 88%|########8 | 23/26 [00:00<00:00, 26.34it/s]100%|##########| 26/26 [00:01<00:00, 25.83it/s]100%|##########| 26/26 [00:01<00:00, 22.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 200
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 200
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 200
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 200
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 200
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
rho, theta 354 tensor(-6.5697e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 200
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 200
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 200
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 200
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 200
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
rho, theta 353 tensor(-5.1185e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 200
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 200
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 200
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 200
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 200
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
rho, theta 352 tensor(-4.4820e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 200
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 200
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 200
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 200
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 200
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
rho, theta 351 tensor(-3.7783e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 200
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 200
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 200
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 200
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 200
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
rho, theta 351 tensor(-2.9533e-05, device='cuda:0')
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 200
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
final projection at end of training
dim_v 512
rho, theta 351 tensor(-8.1211e-06, device='cuda:0')
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.16 (  1.16)	train_acc   0.51 (  0.50)	train_minacc   0.65 (  0.50)	train_majacc   0.48 (  0.50)	train_corr   0.00 (  0.00)	l1 5.6821 (5.6960)	zero_count 160.0000 (34.7320)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.98it/s] 23%|##3       | 6/26 [00:00<00:00, 31.91it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.91it/s] 42%|####2     | 11/26 [00:00<00:00, 37.74it/s] 62%|######1   | 16/26 [00:00<00:00, 42.10it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.10it/s] 81%|########  | 21/26 [00:00<00:00, 37.89it/s]100%|##########| 26/26 [00:00<00:00, 35.61it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.46 (  0.46)	test_minacc   0.37 (  0.37)	test_majacc   0.48 (  0.48)	Loss_d 0.695 (0.695)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.691 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.59 (  0.49)	test_majacc   0.48 (  0.50)	Loss_d 0.691 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.59 (  0.49)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.07 (  0.11)
Test: [  20/  26]	Loss 0.682 (0.688)	test_acc   0.58 (  0.50)	test_minacc   0.56 (  0.50)	test_majacc   0.59 (  0.50)	Loss_d 0.682 (0.688)	test_acc_d   0.58 (  0.50)	test_minacc_d   0.56 (  0.50)	test_majacc_d   0.59 (  0.50)	test_corr_d   0.02 (  0.10)
Test: [  26/  26]	Loss 0.690 (0.688)	test_acc   0.50 (  0.50)	test_minacc   0.65 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.690 (0.688)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.65 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.12 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.32it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.697 (0.697)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.697 (0.697)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.02 (  0.02)
Overall Timing[ 26/  1]	epoch_time 0.0445 (0.0453)	validation_time 0.0004 (0.0007)	train_time 0.0440 (0.0446)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4999000083506107, 0.5170000195503235)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.31it/s] 12%|#1        | 3/26 [00:00<00:02,  9.81it/s] 23%|##3       | 6/26 [00:00<00:01, 15.18it/s] 35%|###4      | 9/26 [00:00<00:00, 18.24it/s] 50%|#####     | 13/26 [00:00<00:00, 22.49it/s] 62%|######1   | 16/26 [00:00<00:00, 23.18it/s] 73%|#######3  | 19/26 [00:00<00:00, 23.32it/s] 88%|########8 | 23/26 [00:01<00:00, 25.40it/s]100%|##########| 26/26 [00:01<00:00, 25.01it/s]100%|##########| 26/26 [00:01<00:00, 19.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 200
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 200
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 200
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 200
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
rho, theta 351 tensor(-3.5198e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 200
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 200
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 200
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 200
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 200
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
rho, theta 351 tensor(-3.5153e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 200
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 200
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 200
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 200
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 200
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
rho, theta 351 tensor(-3.1569e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 200
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 200
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 200
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 200
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 200
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
rho, theta 351 tensor(-2.9252e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 200
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 200
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 200
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 200
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 200
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
rho, theta 351 tensor(-2.1803e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 200
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 200
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
final projection at end of training
dim_v 512
rho, theta 351 tensor(-1.0695e-05, device='cuda:0')
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.15 (  1.15)	train_acc   0.50 (  0.50)	train_minacc   0.65 (  0.51)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 5.6859 (5.6940)	zero_count 0.0000 (37.4400)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.55it/s] 27%|##6       | 7/26 [00:00<00:00, 27.79it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.79it/s] 46%|####6     | 12/26 [00:00<00:00, 32.03it/s] 65%|######5   | 17/26 [00:00<00:00, 36.53it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.53it/s] 85%|########4 | 22/26 [00:00<00:00, 39.98it/s]100%|##########| 26/26 [00:00<00:00, 33.30it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.46 (  0.46)	test_minacc   0.38 (  0.38)	test_majacc   0.48 (  0.48)	Loss_d 0.695 (0.695)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.59 (  0.50)	test_majacc   0.48 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.59 (  0.50)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.06 (  0.10)
Test: [  20/  26]	Loss 0.682 (0.689)	test_acc   0.58 (  0.50)	test_minacc   0.56 (  0.51)	test_majacc   0.58 (  0.50)	Loss_d 0.682 (0.689)	test_acc_d   0.58 (  0.50)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.58 (  0.50)	test_corr_d   0.01 (  0.09)
Test: [  26/  26]	Loss 0.690 (0.689)	test_acc   0.50 (  0.50)	test_minacc   0.65 (  0.51)	test_majacc   0.47 (  0.50)	Loss_d 0.690 (0.689)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.65 (  0.51)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.11 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.72it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.49)	Loss_d 0.696 (0.696)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.49)	Loss_d 0.696 (0.696)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.01 (  0.01)
Overall Timing[ 27/  1]	epoch_time 0.0447 (0.0453)	validation_time 0.0005 (0.0007)	train_time 0.0443 (0.0446)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4983000072836876, 0.5220000147819519)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.38it/s] 15%|#5        | 4/26 [00:00<00:01, 17.09it/s] 27%|##6       | 7/26 [00:00<00:00, 21.66it/s] 38%|###8      | 10/26 [00:00<00:00, 22.22it/s] 50%|#####     | 13/26 [00:00<00:00, 22.74it/s] 65%|######5   | 17/26 [00:00<00:00, 25.13it/s] 77%|#######6  | 20/26 [00:00<00:00, 25.12it/s] 88%|########8 | 23/26 [00:01<00:00, 24.54it/s]100%|##########| 26/26 [00:01<00:00, 22.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 200
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 200
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 200
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
rho, theta 350 tensor(-2.0594e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 200
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 200
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 200
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 200
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 200
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
rho, theta 350 tensor(-2.8272e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 200
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 200
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 200
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 200
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 200
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
rho, theta 350 tensor(-2.3085e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 200
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 200
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 200
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 200
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 200
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
rho, theta 349 tensor(-2.3674e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 200
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 200
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 200
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 200
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 200
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
rho, theta 349 tensor(-1.8331e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 200
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 200
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 200
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
final projection at end of training
dim_v 512
rho, theta 349 tensor(-1.1580e-05, device='cuda:0')
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.15 (  1.15)	train_acc   0.50 (  0.50)	train_minacc   0.65 (  0.52)	train_majacc   0.46 (  0.49)	train_corr   0.00 (  0.00)	l1 5.6887 (5.6915)	zero_count 0.0000 (37.7130)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.10it/s] 27%|##6       | 7/26 [00:00<00:00, 31.23it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.23it/s] 46%|####6     | 12/26 [00:00<00:00, 33.74it/s] 65%|######5   | 17/26 [00:00<00:00, 38.46it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.46it/s] 85%|########4 | 22/26 [00:00<00:00, 42.16it/s]100%|##########| 26/26 [00:00<00:00, 36.28it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.38 (  0.38)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.691 (0.690)	test_acc   0.50 (  0.49)	test_minacc   0.59 (  0.50)	test_majacc   0.48 (  0.49)	Loss_d 0.691 (0.690)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.59 (  0.50)	test_majacc_d   0.48 (  0.49)	test_corr_d   0.05 (  0.09)
Test: [  20/  26]	Loss 0.683 (0.689)	test_acc   0.58 (  0.50)	test_minacc   0.56 (  0.51)	test_majacc   0.58 (  0.49)	Loss_d 0.683 (0.689)	test_acc_d   0.58 (  0.50)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.58 (  0.49)	test_corr_d   0.00 (  0.08)
Test: [  26/  26]	Loss 0.690 (0.689)	test_acc   0.50 (  0.50)	test_minacc   0.65 (  0.52)	test_majacc   0.46 (  0.49)	Loss_d 0.690 (0.689)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.65 (  0.52)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.10 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.17it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.49)	Loss_d 0.695 (0.695)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.49)	Loss_d 0.695 (0.695)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.00 (  0.00)
Overall Timing[ 28/  1]	epoch_time 0.0508 (0.0455)	validation_time 0.0004 (0.0007)	train_time 0.0504 (0.0448)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.49570000660419467, 0.5250000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.81it/s] 12%|#1        | 3/26 [00:00<00:01, 14.15it/s] 27%|##6       | 7/26 [00:00<00:00, 20.27it/s] 38%|###8      | 10/26 [00:00<00:00, 23.20it/s] 50%|#####     | 13/26 [00:00<00:00, 23.13it/s] 62%|######1   | 16/26 [00:00<00:00, 24.75it/s] 73%|#######3  | 19/26 [00:00<00:00, 24.25it/s] 85%|########4 | 22/26 [00:00<00:00, 24.50it/s]100%|##########| 26/26 [00:01<00:00, 27.18it/s]100%|##########| 26/26 [00:01<00:00, 22.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 200
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 200
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
rho, theta 349 tensor(-1.1499e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 200
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 200
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 200
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 200
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 200
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
rho, theta 348 tensor(-2.4163e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 200
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 200
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 200
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 200
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 200
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
rho, theta 348 tensor(-1.9263e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 200
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 200
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 200
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 200
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 200
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
rho, theta 347 tensor(-1.9456e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 200
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 200
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 200
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 200
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 200
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
rho, theta 347 tensor(-1.6419e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 200
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 200
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 200
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 200
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
final projection at end of training
dim_v 512
rho, theta 347 tensor(-1.2507e-05, device='cuda:0')
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.15 (  1.15)	train_acc   0.50 (  0.49)	train_minacc   0.67 (  0.52)	train_majacc   0.46 (  0.49)	train_corr   0.00 (  0.00)	l1 5.6910 (5.6902)	zero_count 0.0000 (38.1420)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 11.25it/s] 27%|##6       | 7/26 [00:00<00:00, 27.16it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.16it/s] 46%|####6     | 12/26 [00:00<00:00, 34.95it/s] 65%|######5   | 17/26 [00:00<00:00, 37.78it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.78it/s] 85%|########4 | 22/26 [00:00<00:00, 38.91it/s]100%|##########| 26/26 [00:00<00:00, 34.42it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.40 (  0.40)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.61 (  0.52)	test_majacc   0.47 (  0.49)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.61 (  0.52)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.04 (  0.09)
Test: [  20/  26]	Loss 0.684 (0.690)	test_acc   0.57 (  0.49)	test_minacc   0.56 (  0.53)	test_majacc   0.58 (  0.49)	Loss_d 0.684 (0.690)	test_acc_d   0.57 (  0.49)	test_minacc_d   0.56 (  0.53)	test_majacc_d   0.58 (  0.49)	test_corr_d   0.00 (  0.08)
Test: [  26/  26]	Loss 0.690 (0.690)	test_acc   0.50 (  0.49)	test_minacc   0.67 (  0.53)	test_majacc   0.46 (  0.49)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.67 (  0.53)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.10 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.10it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 29/  1]	epoch_time 0.0445 (0.0455)	validation_time 0.0007 (0.0007)	train_time 0.0438 (0.0447)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.49360000967979434, 0.5270000100135803)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.36it/s] 15%|#5        | 4/26 [00:00<00:01, 20.76it/s] 27%|##6       | 7/26 [00:00<00:00, 22.09it/s] 42%|####2     | 11/26 [00:00<00:00, 23.61it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.43it/s] 65%|######5   | 17/26 [00:00<00:00, 24.53it/s] 77%|#######6  | 20/26 [00:00<00:00, 26.03it/s] 88%|########8 | 23/26 [00:00<00:00, 25.39it/s]100%|##########| 26/26 [00:01<00:00, 25.69it/s]100%|##########| 26/26 [00:01<00:00, 23.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 200
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
rho, theta 347 tensor(-5.3082e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 200
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 200
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 200
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 200
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 200
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
rho, theta 347 tensor(-2.1748e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 200
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 200
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 200
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 200
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 200
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
rho, theta 347 tensor(-1.6850e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 200
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 200
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 200
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 200
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 200
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
rho, theta 347 tensor(-1.5964e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 200
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 200
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 200
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 200
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 200
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
rho, theta 347 tensor(-1.5512e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 200
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 200
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 200
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 200
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 200
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
rho, theta 347 tensor(-1.3576e-05, device='cuda:0')
final projection at end of training
dim_v 512
rho, theta 347 tensor(-3.9736e-08, device='cuda:0')
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.14 (  1.14)	train_acc   0.50 (  0.49)	train_minacc   0.67 (  0.54)	train_majacc   0.46 (  0.48)	train_corr   0.00 (  0.00)	l1 5.6929 (5.6893)	zero_count 0.0000 (38.3760)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.49it/s] 27%|##6       | 7/26 [00:00<00:00, 35.39it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.39it/s] 46%|####6     | 12/26 [00:00<00:00, 39.36it/s] 65%|######5   | 17/26 [00:00<00:00, 39.11it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.11it/s] 85%|########4 | 22/26 [00:00<00:00, 41.43it/s]100%|##########| 26/26 [00:00<00:00, 36.63it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.38 (  0.38)	test_majacc   0.44 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.65 (  0.53)	test_majacc   0.45 (  0.48)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.65 (  0.53)	test_majacc_d   0.45 (  0.48)	test_corr_d   0.03 (  0.08)
Test: [  20/  26]	Loss 0.685 (0.690)	test_acc   0.57 (  0.49)	test_minacc   0.56 (  0.54)	test_majacc   0.58 (  0.49)	Loss_d 0.685 (0.690)	test_acc_d   0.57 (  0.49)	test_minacc_d   0.56 (  0.54)	test_majacc_d   0.58 (  0.49)	test_corr_d   0.00 (  0.07)
Test: [  26/  26]	Loss 0.690 (0.690)	test_acc   0.50 (  0.49)	test_minacc   0.67 (  0.54)	test_majacc   0.46 (  0.48)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.67 (  0.54)	test_majacc_d   0.46 (  0.48)	test_corr_d   0.09 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.91it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 30/  1]	epoch_time 0.0482 (0.0456)	validation_time 0.0004 (0.0007)	train_time 0.0477 (0.0448)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.49300001204013827, 0.5350000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.02it/s] 15%|#5        | 4/26 [00:00<00:01, 13.10it/s] 27%|##6       | 7/26 [00:00<00:01, 17.33it/s] 38%|###8      | 10/26 [00:00<00:00, 19.61it/s] 50%|#####     | 13/26 [00:00<00:00, 22.33it/s] 62%|######1   | 16/26 [00:00<00:00, 22.86it/s] 73%|#######3  | 19/26 [00:00<00:00, 23.98it/s] 85%|########4 | 22/26 [00:01<00:00, 23.90it/s] 96%|#########6| 25/26 [00:01<00:00, 24.50it/s]100%|##########| 26/26 [00:01<00:00, 20.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 200
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 200
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 200
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 200
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 200
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
rho, theta 347 tensor(-2.0144e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 200
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 200
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 200
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 200
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 200
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
rho, theta 346 tensor(-1.4845e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 200
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 200
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 200
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 200
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 200
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
rho, theta 344 tensor(-1.2554e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 200
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 200
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 200
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 200
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 200
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
rho, theta 344 tensor(-1.4846e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 200
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 200
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 200
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 200
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 200
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
rho, theta 344 tensor(-1.0756e-05, device='cuda:0')
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 200
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
final projection at end of training
dim_v 512
rho, theta 344 tensor(-3.7000e-06, device='cuda:0')
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.14 (  1.14)	train_acc   0.49 (  0.49)	train_minacc   0.65 (  0.55)	train_majacc   0.46 (  0.48)	train_corr   0.00 (  0.00)	l1 5.6821 (5.6887)	zero_count 167.0000 (30.0320)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.94it/s] 27%|##6       | 7/26 [00:00<00:00, 30.63it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.63it/s] 46%|####6     | 12/26 [00:00<00:00, 37.23it/s] 65%|######5   | 17/26 [00:00<00:00, 41.11it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.11it/s] 85%|########4 | 22/26 [00:00<00:00, 39.51it/s]100%|##########| 26/26 [00:00<00:00, 35.83it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.46 (  0.46)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.47 (  0.48)	test_minacc   0.65 (  0.54)	test_majacc   0.44 (  0.47)	Loss_d 0.691 (0.692)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.65 (  0.54)	test_majacc_d   0.44 (  0.47)	test_corr_d   0.02 (  0.08)
Test: [  20/  26]	Loss 0.685 (0.691)	test_acc   0.57 (  0.49)	test_minacc   0.56 (  0.55)	test_majacc   0.57 (  0.48)	Loss_d 0.685 (0.691)	test_acc_d   0.57 (  0.49)	test_minacc_d   0.56 (  0.55)	test_majacc_d   0.57 (  0.48)	test_corr_d   0.00 (  0.07)
Test: [  26/  26]	Loss 0.690 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.65 (  0.55)	test_majacc   0.45 (  0.48)	Loss_d 0.690 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.65 (  0.55)	test_majacc_d   0.45 (  0.48)	test_corr_d   0.09 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.98it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 31/  1]	epoch_time 0.0457 (0.0456)	validation_time 0.0004 (0.0006)	train_time 0.0452 (0.0448)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4893000108003616, 0.5450000166893005)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.18it/s] 15%|#5        | 4/26 [00:00<00:01, 15.84it/s] 27%|##6       | 7/26 [00:00<00:00, 20.31it/s] 38%|###8      | 10/26 [00:00<00:00, 21.83it/s] 54%|#####3    | 14/26 [00:00<00:00, 23.64it/s] 65%|######5   | 17/26 [00:00<00:00, 24.78it/s] 77%|#######6  | 20/26 [00:00<00:00, 24.77it/s] 92%|#########2| 24/26 [00:01<00:00, 25.31it/s]100%|##########| 26/26 [00:01<00:00, 22.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 200
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 200
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 200
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 200
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
rho, theta 344 tensor(-1.4282e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 200
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 200
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 200
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 200
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 200
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
rho, theta 343 tensor(-1.4107e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 200
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 200
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 200
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 200
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 200
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
rho, theta 343 tensor(-1.0694e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 200
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 200
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 200
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 200
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 200
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
rho, theta 342 tensor(-1.3990e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 200
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 200
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 200
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 200
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 200
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
rho, theta 341 tensor(-1.0074e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 200
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 200
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
final projection at end of training
dim_v 512
rho, theta 341 tensor(-4.8465e-06, device='cuda:0')
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.14 (  1.14)	train_acc   0.49 (  0.49)	train_minacc   0.65 (  0.56)	train_majacc   0.45 (  0.47)	train_corr   0.00 (  0.00)	l1 5.6841 (5.6875)	zero_count 0.0000 (39.3510)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.42it/s] 27%|##6       | 7/26 [00:00<00:00, 33.44it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.44it/s] 46%|####6     | 12/26 [00:00<00:00, 39.23it/s] 65%|######5   | 17/26 [00:00<00:00, 41.84it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.84it/s] 85%|########4 | 22/26 [00:00<00:00, 42.72it/s]100%|##########| 26/26 [00:00<00:00, 37.78it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.44 (  0.44)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.48 (  0.48)	test_minacc   0.70 (  0.55)	test_majacc   0.43 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.70 (  0.55)	test_majacc_d   0.43 (  0.47)	test_corr_d   0.02 (  0.08)
Test: [  20/  26]	Loss 0.686 (0.691)	test_acc   0.57 (  0.49)	test_minacc   0.56 (  0.55)	test_majacc   0.57 (  0.48)	Loss_d 0.686 (0.691)	test_acc_d   0.57 (  0.49)	test_minacc_d   0.56 (  0.55)	test_majacc_d   0.57 (  0.48)	test_corr_d   0.00 (  0.07)
Test: [  26/  26]	Loss 0.690 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.65 (  0.56)	test_majacc   0.45 (  0.47)	Loss_d 0.690 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.65 (  0.56)	test_majacc_d   0.45 (  0.47)	test_corr_d   0.09 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.97it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 32/  1]	epoch_time 0.0455 (0.0456)	validation_time 0.0004 (0.0006)	train_time 0.0450 (0.0448)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.48600000634789464, 0.5610000491142273)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.44it/s] 15%|#5        | 4/26 [00:00<00:01, 11.09it/s] 27%|##6       | 7/26 [00:00<00:01, 16.41it/s] 38%|###8      | 10/26 [00:00<00:00, 18.78it/s] 50%|#####     | 13/26 [00:00<00:00, 20.22it/s] 62%|######1   | 16/26 [00:00<00:00, 22.72it/s] 73%|#######3  | 19/26 [00:01<00:00, 21.52it/s] 88%|########8 | 23/26 [00:01<00:00, 23.14it/s]100%|##########| 26/26 [00:01<00:00, 19.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 200
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 200
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 200
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
rho, theta 341 tensor(-9.3123e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 200
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 200
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 200
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 200
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 200
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
rho, theta 341 tensor(-1.3351e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 200
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 200
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 200
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 200
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 200
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
rho, theta 341 tensor(-9.2663e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 200
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 200
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 200
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 200
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 200
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
rho, theta 341 tensor(-1.2260e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 200
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 200
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 200
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 200
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 200
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
rho, theta 341 tensor(-9.5925e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 200
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 200
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 200
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
final projection at end of training
dim_v 512
rho, theta 340 tensor(-5.8912e-06, device='cuda:0')
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.13 (  1.13)	train_acc   0.50 (  0.48)	train_minacc   0.70 (  0.57)	train_majacc   0.45 (  0.47)	train_corr   0.00 (  0.00)	l1 5.6857 (5.6869)	zero_count 0.0000 (39.7800)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.23it/s] 23%|##3       | 6/26 [00:00<00:01, 17.69it/s]                                               23%|##3       | 6/26 [00:00<00:01, 17.69it/s] 42%|####2     | 11/26 [00:00<00:00, 26.99it/s] 62%|######1   | 16/26 [00:00<00:00, 33.30it/s]                                                62%|######1   | 16/26 [00:00<00:00, 33.30it/s] 81%|########  | 21/26 [00:00<00:00, 34.19it/s]100%|##########| 26/26 [00:00<00:00, 37.80it/s]100%|##########| 26/26 [00:00<00:00, 27.54it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.47 (  0.47)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.47 (  0.48)	test_minacc   0.68 (  0.56)	test_majacc   0.42 (  0.46)	Loss_d 0.692 (0.692)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.68 (  0.56)	test_majacc_d   0.42 (  0.46)	test_corr_d   0.01 (  0.07)
Test: [  20/  26]	Loss 0.687 (0.691)	test_acc   0.57 (  0.48)	test_minacc   0.56 (  0.56)	test_majacc   0.57 (  0.47)	Loss_d 0.687 (0.691)	test_acc_d   0.57 (  0.48)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.57 (  0.47)	test_corr_d   0.00 (  0.06)
Test: [  26/  26]	Loss 0.690 (0.691)	test_acc   0.50 (  0.48)	test_minacc   0.70 (  0.57)	test_majacc   0.45 (  0.47)	Loss_d 0.690 (0.691)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.70 (  0.57)	test_majacc_d   0.45 (  0.47)	test_corr_d   0.09 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.42it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 33/  1]	epoch_time 0.0484 (0.0456)	validation_time 0.0004 (0.0006)	train_time 0.0479 (0.0449)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.48220000392198564, 0.5720000267028809)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.62it/s] 12%|#1        | 3/26 [00:00<00:01, 14.49it/s] 23%|##3       | 6/26 [00:00<00:00, 21.11it/s] 35%|###4      | 9/26 [00:00<00:00, 22.36it/s] 46%|####6     | 12/26 [00:00<00:00, 22.90it/s] 58%|#####7    | 15/26 [00:00<00:00, 24.29it/s] 69%|######9   | 18/26 [00:00<00:00, 24.44it/s] 81%|########  | 21/26 [00:00<00:00, 25.57it/s] 92%|#########2| 24/26 [00:01<00:00, 25.90it/s]100%|##########| 26/26 [00:01<00:00, 22.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 200
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 200
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
rho, theta 340 tensor(-5.5738e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 200
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 200
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 200
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 200
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 200
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
rho, theta 340 tensor(-1.2350e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 200
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 200
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 200
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 200
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 200
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
rho, theta 340 tensor(-9.0347e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 200
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 200
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 200
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 200
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 200
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
rho, theta 340 tensor(-1.0209e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 200
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 200
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 200
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 200
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 200
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
rho, theta 340 tensor(-9.0180e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 200
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 200
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 200
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 200
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
final projection at end of training
dim_v 512
rho, theta 340 tensor(-6.2660e-06, device='cuda:0')
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.13 (  1.13)	train_acc   0.50 (  0.48)	train_minacc   0.70 (  0.58)	train_majacc   0.45 (  0.46)	train_corr   0.00 (  0.00)	l1 5.6871 (5.6868)	zero_count 0.0000 (40.0140)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 14.51it/s] 35%|###4      | 9/26 [00:00<00:00, 30.92it/s]                                               35%|###4      | 9/26 [00:00<00:00, 30.92it/s] 54%|#####3    | 14/26 [00:00<00:00, 37.20it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.94it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 37.94it/s] 92%|#########2| 24/26 [00:00<00:00, 41.12it/s]100%|##########| 26/26 [00:00<00:00, 34.59it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.49 (  0.49)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.47 (  0.48)	test_minacc   0.70 (  0.56)	test_majacc   0.43 (  0.46)	Loss_d 0.692 (0.692)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.70 (  0.56)	test_majacc_d   0.43 (  0.46)	test_corr_d   0.01 (  0.07)
Test: [  20/  26]	Loss 0.688 (0.691)	test_acc   0.57 (  0.48)	test_minacc   0.58 (  0.57)	test_majacc   0.57 (  0.47)	Loss_d 0.688 (0.691)	test_acc_d   0.57 (  0.48)	test_minacc_d   0.58 (  0.57)	test_majacc_d   0.57 (  0.47)	test_corr_d   0.00 (  0.06)
Test: [  26/  26]	Loss 0.690 (0.691)	test_acc   0.50 (  0.48)	test_minacc   0.72 (  0.58)	test_majacc   0.45 (  0.46)	Loss_d 0.690 (0.691)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.72 (  0.58)	test_majacc_d   0.45 (  0.46)	test_corr_d   0.09 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.80it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 34/  1]	epoch_time 0.0473 (0.0457)	validation_time 0.0004 (0.0006)	train_time 0.0469 (0.0450)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.48100000461936, 0.5830000042915344)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.48it/s] 15%|#5        | 4/26 [00:00<00:01, 15.57it/s] 27%|##6       | 7/26 [00:00<00:01, 18.97it/s] 38%|###8      | 10/26 [00:00<00:00, 21.89it/s] 50%|#####     | 13/26 [00:00<00:00, 22.39it/s] 62%|######1   | 16/26 [00:00<00:00, 22.33it/s] 73%|#######3  | 19/26 [00:00<00:00, 24.03it/s] 85%|########4 | 22/26 [00:01<00:00, 24.05it/s] 96%|#########6| 25/26 [00:01<00:00, 25.55it/s]100%|##########| 26/26 [00:01<00:00, 20.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 200
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
rho, theta 340 tensor(-2.6499e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 200
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 200
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 200
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 200
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 200
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
rho, theta 340 tensor(-1.1278e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 200
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 200
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 200
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 200
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 200
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
rho, theta 340 tensor(-8.4726e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 200
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 200
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 200
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 200
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 200
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
rho, theta 340 tensor(-8.5313e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 200
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 200
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 200
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 200
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 200
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
rho, theta 340 tensor(-8.8543e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 200
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 200
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 200
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 200
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 200
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
rho, theta 339 tensor(-7.0572e-06, device='cuda:0')
final projection at end of training
dim_v 512
rho, theta 339 tensor(-2.1037e-08, device='cuda:0')
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.12 (  1.13)	train_acc   0.49 (  0.48)	train_minacc   0.72 (  0.58)	train_majacc   0.44 (  0.46)	train_corr   0.00 (  0.00)	l1 5.6884 (5.6865)	zero_count 0.0000 (40.0140)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.98it/s] 31%|###       | 8/26 [00:00<00:00, 38.20it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.20it/s] 50%|#####     | 13/26 [00:00<00:00, 41.35it/s] 69%|######9   | 18/26 [00:00<00:00, 41.49it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.49it/s] 88%|########8 | 23/26 [00:00<00:00, 41.48it/s]100%|##########| 26/26 [00:00<00:00, 38.26it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.50 (  0.50)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.47 (  0.48)	test_minacc   0.73 (  0.58)	test_majacc   0.42 (  0.46)	Loss_d 0.692 (0.692)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.73 (  0.58)	test_majacc_d   0.42 (  0.46)	test_corr_d   0.00 (  0.07)
Test: [  20/  26]	Loss 0.688 (0.692)	test_acc   0.56 (  0.48)	test_minacc   0.56 (  0.58)	test_majacc   0.56 (  0.46)	Loss_d 0.688 (0.692)	test_acc_d   0.56 (  0.48)	test_minacc_d   0.56 (  0.58)	test_majacc_d   0.56 (  0.46)	test_corr_d   0.00 (  0.06)
Test: [  26/  26]	Loss 0.690 (0.691)	test_acc   0.50 (  0.48)	test_minacc   0.72 (  0.59)	test_majacc   0.45 (  0.46)	Loss_d 0.690 (0.691)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.72 (  0.59)	test_majacc_d   0.45 (  0.46)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.59it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 35/  1]	epoch_time 0.0468 (0.0457)	validation_time 0.0003 (0.0006)	train_time 0.0464 (0.0450)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4789000076055527, 0.5850000381469727)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.14it/s] 15%|#5        | 4/26 [00:00<00:01, 14.11it/s] 27%|##6       | 7/26 [00:00<00:01, 18.20it/s] 38%|###8      | 10/26 [00:00<00:00, 21.59it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.25it/s] 65%|######5   | 17/26 [00:00<00:00, 24.79it/s] 77%|#######6  | 20/26 [00:00<00:00, 24.53it/s] 88%|########8 | 23/26 [00:01<00:00, 25.85it/s]100%|##########| 26/26 [00:01<00:00, 25.70it/s]100%|##########| 26/26 [00:01<00:00, 21.57it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 200
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 200
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 200
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 200
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 200
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
rho, theta 339 tensor(-1.0482e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 200
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 200
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 200
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 200
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 200
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
rho, theta 338 tensor(-7.8910e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 200
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 200
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 200
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 200
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 200
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
rho, theta 338 tensor(-6.8544e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 200
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 200
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 200
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 200
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 200
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
rho, theta 338 tensor(-8.9108e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 200
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 200
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 200
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 200
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 200
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
rho, theta 338 tensor(-5.8613e-06, device='cuda:0')
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 200
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
final projection at end of training
dim_v 512
rho, theta 338 tensor(-1.9608e-06, device='cuda:0')
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.12 (  1.12)	train_acc   0.49 (  0.48)	train_minacc   0.72 (  0.59)	train_majacc   0.44 (  0.46)	train_corr   0.00 (  0.00)	l1 5.6821 (5.6865)	zero_count 173.0000 (31.2740)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.44it/s] 27%|##6       | 7/26 [00:00<00:00, 34.60it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.60it/s] 46%|####6     | 12/26 [00:00<00:00, 40.12it/s] 65%|######5   | 17/26 [00:00<00:00, 39.62it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.62it/s] 85%|########4 | 22/26 [00:00<00:00, 41.48it/s]100%|##########| 26/26 [00:00<00:00, 37.13it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.53 (  0.53)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.47 (  0.47)	test_minacc   0.71 (  0.58)	test_majacc   0.42 (  0.45)	Loss_d 0.692 (0.692)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.71 (  0.58)	test_majacc_d   0.42 (  0.45)	test_corr_d  -0.00 (  0.07)
Test: [  20/  26]	Loss 0.689 (0.692)	test_acc   0.56 (  0.48)	test_minacc   0.56 (  0.58)	test_majacc   0.56 (  0.46)	Loss_d 0.689 (0.692)	test_acc_d   0.56 (  0.48)	test_minacc_d   0.56 (  0.58)	test_majacc_d   0.56 (  0.46)	test_corr_d   0.00 (  0.06)
Test: [  26/  26]	Loss 0.690 (0.691)	test_acc   0.49 (  0.48)	test_minacc   0.72 (  0.59)	test_majacc   0.44 (  0.46)	Loss_d 0.690 (0.691)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.72 (  0.59)	test_majacc_d   0.44 (  0.46)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.25it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 36/  1]	epoch_time 0.0433 (0.0457)	validation_time 0.0006 (0.0006)	train_time 0.0427 (0.0450)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.47580000579357146, 0.6000000238418579)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.23it/s] 19%|#9        | 5/26 [00:00<00:00, 21.22it/s] 31%|###       | 8/26 [00:00<00:00, 24.59it/s] 42%|####2     | 11/26 [00:00<00:00, 23.27it/s] 54%|#####3    | 14/26 [00:00<00:00, 22.33it/s] 65%|######5   | 17/26 [00:00<00:00, 23.56it/s] 77%|#######6  | 20/26 [00:00<00:00, 23.09it/s] 88%|########8 | 23/26 [00:00<00:00, 24.64it/s]100%|##########| 26/26 [00:01<00:00, 24.74it/s]100%|##########| 26/26 [00:01<00:00, 22.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 200
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 200
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 200
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 200
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
rho, theta 338 tensor(-7.5126e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 200
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 200
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 200
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 200
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 200
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
rho, theta 337 tensor(-7.6717e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 200
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 200
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 200
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 200
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 200
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
rho, theta 339 tensor(-5.6800e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 200
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 200
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 200
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 200
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 200
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
rho, theta 337 tensor(-8.7566e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 200
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 200
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 200
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 200
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 200
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
rho, theta 337 tensor(-5.8222e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 200
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 200
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
final projection at end of training
dim_v 512
rho, theta 337 tensor(-2.5521e-06, device='cuda:0')
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.12 (  1.12)	train_acc   0.47 (  0.47)	train_minacc   0.72 (  0.59)	train_majacc   0.42 (  0.45)	train_corr   0.00 (  0.00)	l1 5.6835 (5.6862)	zero_count 0.0000 (40.5600)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.44it/s] 23%|##3       | 6/26 [00:00<00:00, 27.83it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.83it/s] 42%|####2     | 11/26 [00:00<00:00, 35.37it/s] 62%|######1   | 16/26 [00:00<00:00, 40.28it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.28it/s] 81%|########  | 21/26 [00:00<00:00, 39.08it/s]100%|##########| 26/26 [00:00<00:00, 34.33it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.53 (  0.53)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.47 (  0.47)	test_minacc   0.71 (  0.58)	test_majacc   0.43 (  0.45)	Loss_d 0.693 (0.692)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.71 (  0.58)	test_majacc_d   0.43 (  0.45)	test_corr_d  -0.00 (  0.07)
Test: [  20/  26]	Loss 0.689 (0.692)	test_acc   0.55 (  0.47)	test_minacc   0.56 (  0.59)	test_majacc   0.55 (  0.45)	Loss_d 0.689 (0.692)	test_acc_d   0.55 (  0.47)	test_minacc_d   0.56 (  0.59)	test_majacc_d   0.55 (  0.45)	test_corr_d   0.00 (  0.06)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.47 (  0.47)	test_minacc   0.72 (  0.60)	test_majacc   0.41 (  0.45)	Loss_d 0.690 (0.692)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.72 (  0.60)	test_majacc_d   0.41 (  0.45)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.53it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.61 (  0.61)	test_minacc   0.63 (  0.63)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.61 (  0.61)	test_minacc   0.63 (  0.63)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 37/  1]	epoch_time 0.0456 (0.0457)	validation_time 0.0003 (0.0006)	train_time 0.0452 (0.0450)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4716000045835972, 0.6100000143051147)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.83it/s] 15%|#5        | 4/26 [00:00<00:01, 16.89it/s] 27%|##6       | 7/26 [00:00<00:00, 21.85it/s] 38%|###8      | 10/26 [00:00<00:00, 22.66it/s] 50%|#####     | 13/26 [00:00<00:00, 23.11it/s] 62%|######1   | 16/26 [00:00<00:00, 24.99it/s] 73%|#######3  | 19/26 [00:00<00:00, 24.51it/s] 88%|########8 | 23/26 [00:01<00:00, 25.03it/s]100%|##########| 26/26 [00:01<00:00, 22.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 200
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 200
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 200
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
rho, theta 337 tensor(-5.0802e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 200
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 200
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 200
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 200
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 200
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
rho, theta 337 tensor(-7.1794e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 200
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 200
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 200
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 200
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 200
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
rho, theta 341 tensor(-5.1448e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 200
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 200
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 200
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 200
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 200
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
rho, theta 336 tensor(-8.1345e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 200
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 200
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 200
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 200
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 200
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
rho, theta 336 tensor(-6.0192e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 200
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 200
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 200
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
final projection at end of training
dim_v 512
rho, theta 336 tensor(-3.1143e-06, device='cuda:0')
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.11 (  1.11)	train_acc   0.48 (  0.47)	train_minacc   0.78 (  0.60)	train_majacc   0.41 (  0.45)	train_corr   0.00 (  0.00)	l1 5.6848 (5.6860)	zero_count 0.0000 (40.6380)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.45it/s] 23%|##3       | 6/26 [00:00<00:00, 21.81it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.81it/s] 42%|####2     | 11/26 [00:00<00:00, 29.52it/s] 65%|######5   | 17/26 [00:00<00:00, 37.42it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.42it/s] 88%|########8 | 23/26 [00:00<00:00, 41.30it/s]100%|##########| 26/26 [00:00<00:00, 31.88it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.53 (  0.53)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.47)	test_minacc   0.73 (  0.59)	test_majacc   0.43 (  0.45)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.73 (  0.59)	test_majacc_d   0.43 (  0.45)	test_corr_d  -0.01 (  0.07)
Test: [  20/  26]	Loss 0.690 (0.692)	test_acc   0.55 (  0.47)	test_minacc   0.58 (  0.59)	test_majacc   0.54 (  0.45)	Loss_d 0.690 (0.692)	test_acc_d   0.55 (  0.47)	test_minacc_d   0.58 (  0.59)	test_majacc_d   0.54 (  0.45)	test_corr_d   0.00 (  0.06)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.48 (  0.47)	test_minacc   0.78 (  0.60)	test_majacc   0.41 (  0.44)	Loss_d 0.690 (0.692)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.78 (  0.60)	test_majacc_d   0.41 (  0.44)	test_corr_d   0.09 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.70it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.62 (  0.62)	test_minacc   0.63 (  0.63)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.62 (  0.62)	test_minacc   0.63 (  0.63)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 38/  1]	epoch_time 0.0435 (0.0456)	validation_time 0.0004 (0.0006)	train_time 0.0430 (0.0449)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.46940000575780866, 0.6170000433921814)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.03it/s] 15%|#5        | 4/26 [00:00<00:01, 15.18it/s] 27%|##6       | 7/26 [00:00<00:01, 18.78it/s] 38%|###8      | 10/26 [00:00<00:00, 21.94it/s] 50%|#####     | 13/26 [00:00<00:00, 22.60it/s] 62%|######1   | 16/26 [00:00<00:00, 24.21it/s] 73%|#######3  | 19/26 [00:00<00:00, 23.95it/s] 85%|########4 | 22/26 [00:01<00:00, 24.28it/s] 96%|#########6| 25/26 [00:01<00:00, 25.84it/s]100%|##########| 26/26 [00:01<00:00, 21.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 200
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 200
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
rho, theta 336 tensor(-3.0662e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 200
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 200
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 200
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 200
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 200
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
rho, theta 336 tensor(-6.8667e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 200
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 200
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 200
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 200
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 200
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
rho, theta 340 tensor(-5.0215e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 200
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 200
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 200
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 200
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 200
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
rho, theta 336 tensor(-6.7281e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 200
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 200
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 200
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 200
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 200
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
rho, theta 336 tensor(-5.8466e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 200
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 200
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 200
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 200
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
final projection at end of training
dim_v 512
rho, theta 335 tensor(-3.8445e-06, device='cuda:0')
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.11 (  1.11)	train_acc   0.47 (  0.47)	train_minacc   0.78 (  0.61)	train_majacc   0.40 (  0.44)	train_corr   0.00 (  0.00)	l1 5.6860 (5.6861)	zero_count 0.0000 (40.7940)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.26it/s] 19%|#9        | 5/26 [00:00<00:00, 23.48it/s] 38%|###8      | 10/26 [00:00<00:00, 30.44it/s]                                                38%|###8      | 10/26 [00:00<00:00, 30.44it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.99it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.37it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.37it/s] 96%|#########6| 25/26 [00:00<00:00, 41.75it/s]100%|##########| 26/26 [00:00<00:00, 33.81it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.51 (  0.51)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.47 (  0.47)	test_minacc   0.73 (  0.59)	test_majacc   0.42 (  0.44)	Loss_d 0.693 (0.692)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.73 (  0.59)	test_majacc_d   0.42 (  0.44)	test_corr_d  -0.01 (  0.06)
Test: [  20/  26]	Loss 0.690 (0.692)	test_acc   0.54 (  0.47)	test_minacc   0.58 (  0.60)	test_majacc   0.54 (  0.45)	Loss_d 0.690 (0.692)	test_acc_d   0.54 (  0.47)	test_minacc_d   0.58 (  0.60)	test_majacc_d   0.54 (  0.45)	test_corr_d   0.00 (  0.05)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.47 (  0.47)	test_minacc   0.78 (  0.61)	test_majacc   0.40 (  0.44)	Loss_d 0.690 (0.692)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.78 (  0.61)	test_majacc_d   0.40 (  0.44)	test_corr_d   0.09 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.47it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.62 (  0.62)	test_minacc   0.64 (  0.64)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.62 (  0.62)	test_minacc   0.64 (  0.64)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 39/  1]	epoch_time 0.0430 (0.0455)	validation_time 0.0004 (0.0006)	train_time 0.0426 (0.0449)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.46640000510215757, 0.6240000128746033)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.42it/s] 15%|#5        | 4/26 [00:00<00:01, 15.84it/s] 27%|##6       | 7/26 [00:00<00:00, 19.06it/s] 38%|###8      | 10/26 [00:00<00:00, 22.40it/s] 50%|#####     | 13/26 [00:00<00:00, 22.87it/s] 62%|######1   | 16/26 [00:00<00:00, 23.64it/s] 77%|#######6  | 20/26 [00:00<00:00, 26.12it/s] 88%|########8 | 23/26 [00:01<00:00, 25.44it/s]100%|##########| 26/26 [00:01<00:00, 25.23it/s]100%|##########| 26/26 [00:01<00:00, 21.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 200
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
rho, theta 335 tensor(-1.5455e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 200
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 200
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 200
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 200
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 200
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
rho, theta 334 tensor(-6.4224e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 200
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 200
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 200
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 200
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 200
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
rho, theta 337 tensor(-4.7373e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 200
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 200
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 200
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 200
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 200
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
rho, theta 336 tensor(-5.5763e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 200
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 200
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 200
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 200
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 200
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
rho, theta 334 tensor(-6.0039e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 200
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 200
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 200
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 200
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 200
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
rho, theta 334 tensor(-4.4951e-06, device='cuda:0')
final projection at end of training
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.10 (  1.11)	train_acc   0.47 (  0.46)	train_minacc   0.80 (  0.62)	train_majacc   0.39 (  0.44)	train_corr   0.00 (  0.00)	l1 5.6874 (5.6860)	zero_count 0.0000 (41.1450)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02, 10.00it/s] 23%|##3       | 6/26 [00:00<00:00, 32.08it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.08it/s] 42%|####2     | 11/26 [00:00<00:00, 39.30it/s] 65%|######5   | 17/26 [00:00<00:00, 43.89it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.89it/s] 85%|########4 | 22/26 [00:00<00:00, 45.56it/s]100%|##########| 26/26 [00:00<00:00, 38.72it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.53 (  0.53)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.47 (  0.46)	test_minacc   0.73 (  0.59)	test_majacc   0.41 (  0.44)	Loss_d 0.693 (0.692)	test_acc_d   0.47 (  0.46)	test_minacc_d   0.73 (  0.59)	test_majacc_d   0.41 (  0.44)	test_corr_d  -0.01 (  0.06)
Test: [  20/  26]	Loss 0.690 (0.692)	test_acc   0.55 (  0.47)	test_minacc   0.58 (  0.61)	test_majacc   0.54 (  0.44)	Loss_d 0.690 (0.692)	test_acc_d   0.55 (  0.47)	test_minacc_d   0.58 (  0.61)	test_majacc_d   0.54 (  0.44)	test_corr_d  -0.00 (  0.05)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.47 (  0.46)	test_minacc   0.78 (  0.61)	test_majacc   0.40 (  0.44)	Loss_d 0.690 (0.692)	test_acc_d   0.47 (  0.46)	test_minacc_d   0.78 (  0.61)	test_majacc_d   0.40 (  0.44)	test_corr_d   0.09 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.29it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.64 (  0.64)	test_minacc   0.66 (  0.66)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.64 (  0.64)	test_minacc   0.66 (  0.66)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 40/  1]	epoch_time 0.0509 (0.0457)	validation_time 0.0004 (0.0006)	train_time 0.0504 (0.0450)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4629000027775764, 0.6380000114440918)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.51it/s] 15%|#5        | 4/26 [00:00<00:01, 16.78it/s] 27%|##6       | 7/26 [00:00<00:00, 19.26it/s] 38%|###8      | 10/26 [00:00<00:00, 20.68it/s] 50%|#####     | 13/26 [00:00<00:00, 22.96it/s] 62%|######1   | 16/26 [00:00<00:00, 23.51it/s] 73%|#######3  | 19/26 [00:00<00:00, 24.88it/s] 85%|########4 | 22/26 [00:00<00:00, 24.62it/s] 96%|#########6| 25/26 [00:01<00:00, 24.59it/s]100%|##########| 26/26 [00:01<00:00, 20.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 200
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 200
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 200
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 200
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 200
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
rho, theta 333 tensor(-6.6072e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 200
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 200
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 200
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 200
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 200
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
rho, theta 337 tensor(-4.1095e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 200
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 200
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 200
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 200
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 200
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
rho, theta 336 tensor(-4.5123e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 200
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 200
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 200
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 200
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 200
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
rho, theta 333 tensor(-6.6172e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 200
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 200
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 200
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 200
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 200
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
rho, theta 333 tensor(-4.0588e-06, device='cuda:0')
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 200
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
final projection at end of training
dim_v 512
rho, theta 333 tensor(-1.2977e-06, device='cuda:0')
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.10 (  1.10)	train_acc   0.48 (  0.46)	train_minacc   0.80 (  0.62)	train_majacc   0.41 (  0.43)	train_corr   0.00 (  0.00)	l1 5.6822 (5.6861)	zero_count 178.0000 (38.8090)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.19it/s] 15%|#5        | 4/26 [00:00<00:01, 15.39it/s] 35%|###4      | 9/26 [00:00<00:00, 28.26it/s]                                               35%|###4      | 9/26 [00:00<00:00, 28.26it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.01it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.97it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.97it/s] 92%|#########2| 24/26 [00:00<00:00, 40.13it/s]100%|##########| 26/26 [00:00<00:00, 32.07it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.56 (  0.56)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.46)	test_minacc   0.73 (  0.60)	test_majacc   0.41 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.46)	test_minacc_d   0.73 (  0.60)	test_majacc_d   0.41 (  0.44)	test_corr_d  -0.01 (  0.06)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.55 (  0.47)	test_minacc   0.60 (  0.61)	test_majacc   0.54 (  0.44)	Loss_d 0.691 (0.692)	test_acc_d   0.55 (  0.47)	test_minacc_d   0.60 (  0.61)	test_majacc_d   0.54 (  0.44)	test_corr_d  -0.00 (  0.05)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.48 (  0.46)	test_minacc   0.83 (  0.62)	test_majacc   0.41 (  0.43)	Loss_d 0.690 (0.692)	test_acc_d   0.48 (  0.46)	test_minacc_d   0.83 (  0.62)	test_majacc_d   0.41 (  0.43)	test_corr_d   0.09 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.82it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.64 (  0.64)	test_minacc   0.67 (  0.67)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.64 (  0.64)	test_minacc   0.67 (  0.67)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 41/  1]	epoch_time 0.0549 (0.0459)	validation_time 0.0004 (0.0006)	train_time 0.0545 (0.0452)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.463200002849102, 0.6440000534057617)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.61it/s] 15%|#5        | 4/26 [00:00<00:01, 13.22it/s] 27%|##6       | 7/26 [00:00<00:01, 18.24it/s] 38%|###8      | 10/26 [00:00<00:00, 20.27it/s] 50%|#####     | 13/26 [00:00<00:00, 22.86it/s] 62%|######1   | 16/26 [00:00<00:00, 23.06it/s] 73%|#######3  | 19/26 [00:00<00:00, 22.82it/s] 85%|########4 | 22/26 [00:01<00:00, 24.51it/s] 96%|#########6| 25/26 [00:01<00:00, 24.24it/s]100%|##########| 26/26 [00:01<00:00, 20.57it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 200
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 200
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 200
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 200
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
rho, theta 333 tensor(-4.6899e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 200
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 200
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 200
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 200
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 200
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
rho, theta 336 tensor(-4.1005e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 200
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 200
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 200
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 200
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 200
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
rho, theta 337 tensor(-3.8203e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 200
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 200
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 200
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 200
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 200
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
rho, theta 333 tensor(-6.5115e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 200
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 200
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 200
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 200
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 200
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
rho, theta 333 tensor(-4.2801e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 200
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 200
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
final projection at end of training
dim_v 512
rho, theta 333 tensor(-1.7118e-06, device='cuda:0')
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.10 (  1.10)	train_acc   0.47 (  0.46)	train_minacc   0.80 (  0.63)	train_majacc   0.40 (  0.43)	train_corr   0.00 (  0.00)	l1 5.6834 (5.6858)	zero_count 0.0000 (41.3790)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.29it/s] 23%|##3       | 6/26 [00:00<00:00, 28.30it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.30it/s] 42%|####2     | 11/26 [00:00<00:00, 36.74it/s] 62%|######1   | 16/26 [00:00<00:00, 40.38it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.38it/s] 81%|########  | 21/26 [00:00<00:00, 40.47it/s]100%|##########| 26/26 [00:00<00:00, 36.07it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.56 (  0.56)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.73 (  0.61)	test_majacc   0.41 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.73 (  0.61)	test_majacc_d   0.41 (  0.43)	test_corr_d  -0.02 (  0.06)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.55 (  0.46)	test_minacc   0.60 (  0.62)	test_majacc   0.54 (  0.43)	Loss_d 0.691 (0.692)	test_acc_d   0.55 (  0.46)	test_minacc_d   0.60 (  0.62)	test_majacc_d   0.54 (  0.43)	test_corr_d  -0.00 (  0.05)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.47 (  0.46)	test_minacc   0.80 (  0.63)	test_majacc   0.40 (  0.43)	Loss_d 0.690 (0.692)	test_acc_d   0.47 (  0.46)	test_minacc_d   0.80 (  0.63)	test_majacc_d   0.40 (  0.43)	test_corr_d   0.09 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.14it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.65 (  0.65)	test_minacc   0.68 (  0.68)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.65 (  0.65)	test_minacc   0.68 (  0.68)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 42/  1]	epoch_time 0.0449 (0.0459)	validation_time 0.0004 (0.0006)	train_time 0.0444 (0.0452)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4605000042915344, 0.6510000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.10it/s] 15%|#5        | 4/26 [00:00<00:01, 14.99it/s] 27%|##6       | 7/26 [00:00<00:00, 19.98it/s] 38%|###8      | 10/26 [00:00<00:00, 21.54it/s] 50%|#####     | 13/26 [00:00<00:00, 22.08it/s] 62%|######1   | 16/26 [00:00<00:00, 23.84it/s] 73%|#######3  | 19/26 [00:00<00:00, 23.80it/s] 88%|########8 | 23/26 [00:01<00:00, 24.39it/s]100%|##########| 26/26 [00:01<00:00, 21.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 200
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 200
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 200
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
rho, theta 333 tensor(-3.2979e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 200
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 200
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 200
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 200
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 200
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
rho, theta 335 tensor(-4.0999e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 200
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 200
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 200
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 200
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 200
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
rho, theta 337 tensor(-3.3788e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 200
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 200
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 200
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 200
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 200
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
rho, theta 333 tensor(-6.2203e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 200
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 200
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 200
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 200
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 200
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
rho, theta 333 tensor(-4.5628e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 200
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 200
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 200
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
final projection at end of training
dim_v 512
rho, theta 333 tensor(-2.2400e-06, device='cuda:0')
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.09 (  1.09)	train_acc   0.48 (  0.46)	train_minacc   0.80 (  0.63)	train_majacc   0.40 (  0.43)	train_corr   0.00 (  0.00)	l1 5.6846 (5.6856)	zero_count 0.0000 (41.4180)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.72it/s] 23%|##3       | 6/26 [00:00<00:00, 25.09it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.09it/s] 46%|####6     | 12/26 [00:00<00:00, 35.88it/s] 65%|######5   | 17/26 [00:00<00:00, 40.09it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.09it/s] 85%|########4 | 22/26 [00:00<00:00, 42.72it/s]100%|##########| 26/26 [00:00<00:00, 34.49it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.57 (  0.57)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.76 (  0.62)	test_majacc   0.40 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.76 (  0.62)	test_majacc_d   0.40 (  0.43)	test_corr_d  -0.02 (  0.06)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.55 (  0.46)	test_minacc   0.61 (  0.63)	test_majacc   0.54 (  0.43)	Loss_d 0.691 (0.692)	test_acc_d   0.55 (  0.46)	test_minacc_d   0.61 (  0.63)	test_majacc_d   0.54 (  0.43)	test_corr_d  -0.01 (  0.05)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.48 (  0.46)	test_minacc   0.80 (  0.63)	test_majacc   0.40 (  0.43)	Loss_d 0.690 (0.692)	test_acc_d   0.48 (  0.46)	test_minacc_d   0.80 (  0.63)	test_majacc_d   0.40 (  0.43)	test_corr_d   0.09 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.37it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.66 (  0.66)	test_minacc   0.69 (  0.69)	test_majacc   0.39 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.66 (  0.66)	test_minacc   0.69 (  0.69)	test_majacc   0.39 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 43/  1]	epoch_time 0.0485 (0.0459)	validation_time 0.0004 (0.0006)	train_time 0.0481 (0.0453)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.45840000504255296, 0.6600000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.78it/s] 15%|#5        | 4/26 [00:00<00:01, 16.83it/s] 27%|##6       | 7/26 [00:00<00:00, 19.30it/s] 38%|###8      | 10/26 [00:00<00:00, 22.24it/s] 50%|#####     | 13/26 [00:00<00:00, 22.66it/s] 65%|######5   | 17/26 [00:00<00:00, 23.69it/s] 81%|########  | 21/26 [00:00<00:00, 26.02it/s] 92%|#########2| 24/26 [00:01<00:00, 25.82it/s]100%|##########| 26/26 [00:01<00:00, 22.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 200
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 200
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
rho, theta 333 tensor(-2.0644e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 200
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 200
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 200
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 200
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 200
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
rho, theta 333 tensor(-4.4529e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 200
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 200
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 200
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 200
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 200
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
rho, theta 337 tensor(-3.1869e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 200
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 200
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 200
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 200
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 200
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
rho, theta 335 tensor(-5.0167e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 200
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 200
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 200
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 200
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 200
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
rho, theta 333 tensor(-4.5542e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 200
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 200
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 200
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 200
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
final projection at end of training
dim_v 512
rho, theta 333 tensor(-2.8710e-06, device='cuda:0')
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.09 (  1.09)	train_acc   0.47 (  0.46)	train_minacc   0.78 (  0.64)	train_majacc   0.40 (  0.43)	train_corr   0.00 (  0.00)	l1 5.6856 (5.6857)	zero_count 0.0000 (41.4180)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.34it/s] 23%|##3       | 6/26 [00:00<00:00, 30.36it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.36it/s] 42%|####2     | 11/26 [00:00<00:00, 33.33it/s] 62%|######1   | 16/26 [00:00<00:00, 38.24it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.24it/s] 81%|########  | 21/26 [00:00<00:00, 40.79it/s]100%|##########| 26/26 [00:00<00:00, 43.03it/s]100%|##########| 26/26 [00:00<00:00, 35.66it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.59 (  0.59)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.76 (  0.62)	test_majacc   0.40 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.76 (  0.62)	test_majacc_d   0.40 (  0.42)	test_corr_d  -0.02 (  0.05)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.54 (  0.46)	test_minacc   0.61 (  0.63)	test_majacc   0.53 (  0.43)	Loss_d 0.691 (0.692)	test_acc_d   0.54 (  0.46)	test_minacc_d   0.61 (  0.63)	test_majacc_d   0.53 (  0.43)	test_corr_d  -0.01 (  0.04)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.47 (  0.46)	test_minacc   0.78 (  0.63)	test_majacc   0.40 (  0.42)	Loss_d 0.690 (0.692)	test_acc_d   0.47 (  0.46)	test_minacc_d   0.78 (  0.63)	test_majacc_d   0.40 (  0.42)	test_corr_d   0.09 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.08it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.67 (  0.67)	test_minacc   0.70 (  0.70)	test_majacc   0.36 (  0.36)	Loss_d 0.693 (0.693)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.36 (  0.36)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.67 (  0.67)	test_minacc   0.70 (  0.70)	test_majacc   0.36 (  0.36)	Loss_d 0.693 (0.693)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.36 (  0.36)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 44/  1]	epoch_time 0.0467 (0.0459)	validation_time 0.0003 (0.0006)	train_time 0.0463 (0.0453)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4566000056862831, 0.6660000085830688)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.18it/s] 15%|#5        | 4/26 [00:00<00:01, 13.44it/s] 27%|##6       | 7/26 [00:00<00:01, 17.27it/s] 38%|###8      | 10/26 [00:00<00:00, 20.71it/s] 50%|#####     | 13/26 [00:00<00:00, 21.45it/s] 62%|######1   | 16/26 [00:00<00:00, 22.44it/s] 77%|#######6  | 20/26 [00:00<00:00, 25.25it/s] 88%|########8 | 23/26 [00:01<00:00, 24.72it/s]100%|##########| 26/26 [00:01<00:00, 24.70it/s]100%|##########| 26/26 [00:01<00:00, 20.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 200
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
rho, theta 332 tensor(-1.3403e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 200
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 200
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 200
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 200
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 200
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
rho, theta 332 tensor(-4.3216e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 200
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 200
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 200
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 200
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 200
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
rho, theta 336 tensor(-2.9671e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 200
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 200
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 200
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 200
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 200
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
rho, theta 334 tensor(-4.2118e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 200
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 200
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 200
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 200
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 200
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
rho, theta 332 tensor(-4.8586e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 200
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 200
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 200
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 200
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 200
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
rho, theta 332 tensor(-3.5054e-06, device='cuda:0')
final projection at end of training
dim_v 512
rho, theta 332 tensor(-1.0024e-08, device='cuda:0')
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.08 (  1.09)	train_acc   0.49 (  0.46)	train_minacc   0.80 (  0.64)	train_majacc   0.42 (  0.42)	train_corr   0.00 (  0.00)	l1 5.6868 (5.6856)	zero_count 0.0000 (41.6130)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.63it/s] 23%|##3       | 6/26 [00:00<00:00, 31.30it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.30it/s] 42%|####2     | 11/26 [00:00<00:00, 37.70it/s] 65%|######5   | 17/26 [00:00<00:00, 38.55it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.55it/s] 85%|########4 | 22/26 [00:00<00:00, 41.41it/s]100%|##########| 26/26 [00:00<00:00, 35.48it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.60 (  0.60)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.45)	test_minacc   0.76 (  0.63)	test_majacc   0.41 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.45)	test_minacc_d   0.76 (  0.63)	test_majacc_d   0.41 (  0.42)	test_corr_d  -0.02 (  0.05)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.54 (  0.46)	test_minacc   0.63 (  0.64)	test_majacc   0.53 (  0.42)	Loss_d 0.691 (0.692)	test_acc_d   0.54 (  0.46)	test_minacc_d   0.63 (  0.64)	test_majacc_d   0.53 (  0.42)	test_corr_d  -0.01 (  0.04)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.49 (  0.46)	test_minacc   0.80 (  0.64)	test_majacc   0.42 (  0.42)	Loss_d 0.691 (0.692)	test_acc_d   0.49 (  0.46)	test_minacc_d   0.80 (  0.64)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.09 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.98it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.67 (  0.67)	test_minacc   0.71 (  0.71)	test_majacc   0.33 (  0.33)	Loss_d 0.693 (0.693)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.33 (  0.33)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.67 (  0.67)	test_minacc   0.71 (  0.71)	test_majacc   0.33 (  0.33)	Loss_d 0.693 (0.693)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.33 (  0.33)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 45/  1]	epoch_time 0.0447 (0.0459)	validation_time 0.0004 (0.0006)	train_time 0.0443 (0.0453)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4559000064432621, 0.6680000424385071)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.28it/s] 15%|#5        | 4/26 [00:00<00:01, 16.35it/s] 27%|##6       | 7/26 [00:00<00:00, 19.53it/s] 38%|###8      | 10/26 [00:00<00:00, 21.55it/s] 54%|#####3    | 14/26 [00:00<00:00, 24.88it/s] 65%|######5   | 17/26 [00:00<00:00, 24.74it/s] 77%|#######6  | 20/26 [00:00<00:00, 24.76it/s] 92%|#########2| 24/26 [00:01<00:00, 26.79it/s]100%|##########| 26/26 [00:01<00:00, 22.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 200
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 200
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 200
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 200
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 200
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
rho, theta 332 tensor(-4.4118e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 200
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 200
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 200
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 200
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 200
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
rho, theta 336 tensor(-2.7945e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 200
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 200
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 200
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 200
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 200
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
rho, theta 336 tensor(-3.3945e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 200
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 200
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 200
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 200
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 200
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
rho, theta 334 tensor(-4.9776e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 200
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 200
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 200
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 200
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 200
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
rho, theta 332 tensor(-3.4109e-06, device='cuda:0')
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 200
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
final projection at end of training
dim_v 512
rho, theta 332 tensor(-9.9520e-07, device='cuda:0')
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.08 (  1.08)	train_acc   0.49 (  0.46)	train_minacc   0.78 (  0.65)	train_majacc   0.42 (  0.42)	train_corr   0.00 (  0.00)	l1 5.6821 (5.6856)	zero_count 179.0000 (32.0090)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.64it/s] 27%|##6       | 7/26 [00:00<00:00, 32.66it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.66it/s] 46%|####6     | 12/26 [00:00<00:00, 37.00it/s] 65%|######5   | 17/26 [00:00<00:00, 40.09it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.09it/s] 85%|########4 | 22/26 [00:00<00:00, 42.17it/s]100%|##########| 26/26 [00:00<00:00, 36.63it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.60 (  0.60)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.45)	test_minacc   0.77 (  0.64)	test_majacc   0.40 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.45)	test_minacc_d   0.77 (  0.64)	test_majacc_d   0.40 (  0.42)	test_corr_d  -0.02 (  0.05)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.54 (  0.46)	test_minacc   0.63 (  0.64)	test_majacc   0.53 (  0.42)	Loss_d 0.691 (0.692)	test_acc_d   0.54 (  0.46)	test_minacc_d   0.63 (  0.64)	test_majacc_d   0.53 (  0.42)	test_corr_d  -0.01 (  0.04)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.49 (  0.46)	test_minacc   0.78 (  0.64)	test_majacc   0.42 (  0.42)	Loss_d 0.691 (0.692)	test_acc_d   0.49 (  0.46)	test_minacc_d   0.78 (  0.64)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.08 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.80it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.67 (  0.67)	test_minacc   0.71 (  0.71)	test_majacc   0.33 (  0.33)	Loss_d 0.693 (0.693)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.33 (  0.33)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.67 (  0.67)	test_minacc   0.71 (  0.71)	test_majacc   0.33 (  0.33)	Loss_d 0.693 (0.693)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.33 (  0.33)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 46/  1]	epoch_time 0.0450 (0.0459)	validation_time 0.0004 (0.0006)	train_time 0.0446 (0.0453)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4557000035047531, 0.6700000166893005)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.24it/s] 15%|#5        | 4/26 [00:00<00:02, 10.53it/s] 27%|##6       | 7/26 [00:00<00:01, 15.70it/s] 38%|###8      | 10/26 [00:00<00:00, 18.42it/s] 50%|#####     | 13/26 [00:00<00:00, 21.38it/s] 62%|######1   | 16/26 [00:00<00:00, 22.22it/s] 73%|#######3  | 19/26 [00:01<00:00, 22.93it/s] 88%|########8 | 23/26 [00:01<00:00, 25.36it/s]100%|##########| 26/26 [00:01<00:00, 25.51it/s]100%|##########| 26/26 [00:01<00:00, 19.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 200
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 200
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 200
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 200
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
rho, theta 332 tensor(-3.3923e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 200
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 200
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 200
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 200
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 200
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
rho, theta 336 tensor(-2.9049e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 200
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 200
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 200
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 200
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 200
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
rho, theta 336 tensor(-2.8695e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 200
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 200
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 200
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 200
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 200
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
rho, theta 333 tensor(-4.9211e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 200
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 200
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 200
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 200
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 200
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
rho, theta 331 tensor(-3.4829e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 200
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 200
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
final projection at end of training
dim_v 512
rho, theta 330 tensor(-1.3441e-06, device='cuda:0')
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.08 (  1.08)	train_acc   0.48 (  0.46)	train_minacc   0.76 (  0.65)	train_majacc   0.42 (  0.42)	train_corr   0.00 (  0.00)	l1 5.6832 (5.6853)	zero_count 0.0000 (41.5740)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.85it/s] 23%|##3       | 6/26 [00:00<00:00, 30.88it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.88it/s] 42%|####2     | 11/26 [00:00<00:00, 37.33it/s] 62%|######1   | 16/26 [00:00<00:00, 40.71it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.71it/s] 81%|########  | 21/26 [00:00<00:00, 38.09it/s]100%|##########| 26/26 [00:00<00:00, 41.17it/s]100%|##########| 26/26 [00:00<00:00, 34.93it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.60 (  0.60)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.45)	test_minacc   0.77 (  0.64)	test_majacc   0.40 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.45)	test_minacc_d   0.77 (  0.64)	test_majacc_d   0.40 (  0.42)	test_corr_d  -0.02 (  0.05)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.53 (  0.46)	test_minacc   0.61 (  0.64)	test_majacc   0.52 (  0.42)	Loss_d 0.691 (0.692)	test_acc_d   0.53 (  0.46)	test_minacc_d   0.61 (  0.64)	test_majacc_d   0.52 (  0.42)	test_corr_d  -0.01 (  0.04)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.48 (  0.45)	test_minacc   0.76 (  0.65)	test_majacc   0.42 (  0.42)	Loss_d 0.691 (0.692)	test_acc_d   0.48 (  0.45)	test_minacc_d   0.76 (  0.65)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.08 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.14it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.68 (  0.68)	test_minacc   0.72 (  0.72)	test_majacc   0.33 (  0.33)	Loss_d 0.693 (0.693)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.33 (  0.33)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.68 (  0.68)	test_minacc   0.72 (  0.72)	test_majacc   0.33 (  0.33)	Loss_d 0.693 (0.693)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.33 (  0.33)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 47/  1]	epoch_time 0.0465 (0.0459)	validation_time 0.0007 (0.0006)	train_time 0.0458 (0.0453)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4549000056684017, 0.6780000329017639)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.23it/s] 12%|#1        | 3/26 [00:00<00:01, 12.17it/s] 23%|##3       | 6/26 [00:00<00:01, 18.92it/s] 35%|###4      | 9/26 [00:00<00:00, 20.92it/s] 46%|####6     | 12/26 [00:00<00:00, 23.68it/s] 58%|#####7    | 15/26 [00:00<00:00, 23.54it/s] 69%|######9   | 18/26 [00:00<00:00, 23.72it/s] 85%|########4 | 22/26 [00:00<00:00, 26.05it/s] 96%|#########6| 25/26 [00:01<00:00, 25.29it/s]100%|##########| 26/26 [00:01<00:00, 21.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 200
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 200
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 200
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
rho, theta 330 tensor(-2.3583e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 200
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 200
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 200
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 200
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 200
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
rho, theta 333 tensor(-2.8853e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 200
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 200
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 200
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 200
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 200
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
rho, theta 333 tensor(-2.3071e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 200
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 200
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 200
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 200
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 200
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
rho, theta 331 tensor(-4.5687e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 200
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 200
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 200
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 200
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 200
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
rho, theta 329 tensor(-3.6023e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 200
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 200
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 200
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
final projection at end of training
dim_v 512
rho, theta 328 tensor(-1.8624e-06, device='cuda:0')
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.07 (  1.07)	train_acc   0.49 (  0.45)	train_minacc   0.76 (  0.65)	train_majacc   0.43 (  0.42)	train_corr   0.00 (  0.00)	l1 5.6843 (5.6853)	zero_count 0.0000 (42.1200)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.92it/s] 23%|##3       | 6/26 [00:00<00:00, 22.25it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.25it/s] 42%|####2     | 11/26 [00:00<00:00, 30.80it/s] 62%|######1   | 16/26 [00:00<00:00, 33.44it/s]                                                62%|######1   | 16/26 [00:00<00:00, 33.44it/s] 81%|########  | 21/26 [00:00<00:00, 37.40it/s]100%|##########| 26/26 [00:00<00:00, 40.35it/s]100%|##########| 26/26 [00:00<00:00, 31.06it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.60 (  0.60)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.45)	test_minacc   0.77 (  0.64)	test_majacc   0.40 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.45)	test_minacc_d   0.77 (  0.64)	test_majacc_d   0.40 (  0.42)	test_corr_d  -0.02 (  0.05)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.46)	test_minacc   0.61 (  0.65)	test_majacc   0.52 (  0.42)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.46)	test_minacc_d   0.61 (  0.65)	test_majacc_d   0.52 (  0.42)	test_corr_d  -0.01 (  0.04)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.49 (  0.45)	test_minacc   0.76 (  0.65)	test_majacc   0.43 (  0.42)	Loss_d 0.691 (0.692)	test_acc_d   0.49 (  0.45)	test_minacc_d   0.76 (  0.65)	test_majacc_d   0.43 (  0.42)	test_corr_d   0.08 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.57it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.68 (  0.68)	test_minacc   0.72 (  0.72)	test_majacc   0.33 (  0.33)	Loss_d 0.693 (0.693)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.33 (  0.33)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.68 (  0.68)	test_minacc   0.72 (  0.72)	test_majacc   0.33 (  0.33)	Loss_d 0.693 (0.693)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.33 (  0.33)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 48/  1]	epoch_time 0.0448 (0.0459)	validation_time 0.0004 (0.0006)	train_time 0.0443 (0.0453)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.45370000424981116, 0.6830000281333923)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 11.89it/s] 19%|#9        | 5/26 [00:00<00:01, 19.76it/s] 31%|###       | 8/26 [00:00<00:00, 21.28it/s] 42%|####2     | 11/26 [00:00<00:00, 23.06it/s] 54%|#####3    | 14/26 [00:00<00:00, 23.28it/s] 65%|######5   | 17/26 [00:00<00:00, 23.51it/s] 81%|########  | 21/26 [00:00<00:00, 25.91it/s] 92%|#########2| 24/26 [00:01<00:00, 25.84it/s]100%|##########| 26/26 [00:01<00:00, 22.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 200
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 200
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
rho, theta 328 tensor(-1.4885e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 200
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 200
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 200
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 200
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 200
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
rho, theta 331 tensor(-2.8438e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 200
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 200
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 200
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 200
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 200
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
rho, theta 333 tensor(-2.1615e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 200
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 200
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 200
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 200
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 200
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
rho, theta 330 tensor(-3.7700e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 200
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 200
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 200
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 200
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 200
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
rho, theta 328 tensor(-3.5886e-06, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 200
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 200
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 200
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 200
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
final projection at end of training
dim_v 512
rho, theta 328 tensor(-2.2552e-06, device='cuda:0')
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.07 (  1.07)	train_acc   0.48 (  0.45)	train_minacc   0.72 (  0.65)	train_majacc   0.43 (  0.42)	train_corr   0.00 (  0.00)	l1 5.6853 (5.6854)	zero_count 0.0000 (42.3540)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.38it/s] 27%|##6       | 7/26 [00:00<00:00, 29.76it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.76it/s] 46%|####6     | 12/26 [00:00<00:00, 36.82it/s] 69%|######9   | 18/26 [00:00<00:00, 40.62it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.62it/s] 92%|#########2| 24/26 [00:00<00:00, 45.39it/s]100%|##########| 26/26 [00:00<00:00, 37.14it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.63 (  0.63)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.45)	test_minacc   0.77 (  0.64)	test_majacc   0.40 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.45)	test_minacc_d   0.77 (  0.64)	test_majacc_d   0.40 (  0.41)	test_corr_d  -0.03 (  0.05)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.46)	test_minacc   0.61 (  0.65)	test_majacc   0.52 (  0.42)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.46)	test_minacc_d   0.61 (  0.65)	test_majacc_d   0.52 (  0.42)	test_corr_d  -0.01 (  0.04)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.48 (  0.45)	test_minacc   0.72 (  0.65)	test_majacc   0.43 (  0.42)	Loss_d 0.691 (0.692)	test_acc_d   0.48 (  0.45)	test_minacc_d   0.72 (  0.65)	test_majacc_d   0.43 (  0.42)	test_corr_d   0.08 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.11it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.69 (  0.69)	test_minacc   0.72 (  0.72)	test_majacc   0.33 (  0.33)	Loss_d 0.693 (0.693)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.33 (  0.33)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.69 (  0.69)	test_minacc   0.72 (  0.72)	test_majacc   0.33 (  0.33)	Loss_d 0.693 (0.693)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.33 (  0.33)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 49/  1]	epoch_time 0.0443 (0.0458)	validation_time 0.0003 (0.0006)	train_time 0.0439 (0.0452)
record: (train_acc, test_acc) (0.6358000178933143, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4526000058054924, 0.6850000619888306)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.155 MB of 0.155 MB uploadedwandb: \ 0.155 MB of 0.155 MB uploadedwandb: | 0.155 MB of 0.155 MB uploadedwandb: / 0.155 MB of 0.155 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmpz18vbi9a'
wandb: ERROR Internal wandb error: file data was not synced
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_214559-1t8rnr6r
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/1t8rnr6r
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=200, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=5, fraction_z=0.99)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1218
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6002, 3, 32, 32) (5998, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:35,  1.41s/it] 15%|#5        | 4/26 [00:01<00:06,  3.39it/s] 31%|###       | 8/26 [00:01<00:02,  7.38it/s] 42%|####2     | 11/26 [00:01<00:01, 10.50it/s] 58%|#####7    | 15/26 [00:01<00:00, 14.70it/s] 69%|######9   | 18/26 [00:01<00:00, 17.50it/s] 85%|########4 | 22/26 [00:02<00:00, 20.83it/s]100%|##########| 26/26 [00:02<00:00, 14.17it/s]100%|##########| 26/26 [00:02<00:00, 10.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [0][  26/  26]	Loss 9.319 (12.123)	train_nll   0.42 (  0.58)	train_penalty   0.06 (  0.27)	weight_norm   8.90 ( 11.55)	train_acc   0.85 (  0.80)	train_minacc   0.00 (  0.08)	train_majacc   1.00 (  0.92)	train_corr   0.00 (  0.00)	l1 6.4144 (7.8070)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.43it/s] 23%|##3       | 6/26 [00:00<00:00, 31.78it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.78it/s] 42%|####2     | 11/26 [00:00<00:00, 38.22it/s] 62%|######1   | 16/26 [00:00<00:00, 41.32it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.32it/s] 81%|########  | 21/26 [00:00<00:00, 39.27it/s]100%|##########| 26/26 [00:00<00:00, 41.58it/s]100%|##########| 26/26 [00:00<00:00, 34.85it/s]
Test: [   0/  26]	Loss 0.441 (0.441)	test_acc   0.84 (  0.84)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.441 (0.441)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  10/  26]	Loss 0.378 (0.422)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.378 (0.422)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.99 (  0.99)
Test: [  20/  26]	Loss 0.436 (0.426)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.436 (0.426)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.99 (  0.99)
Test: [  26/  26]	Loss 0.408 (0.428)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.408 (0.428)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.52it/s]100%|##########| 1/1 [00:00<00:00,  2.52it/s]
Test: [  0/  1]	Loss 1.926 (1.926)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 1.926 (1.926)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.99 (  0.99)
Test: [  1/  1]	Loss 1.926 (1.926)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 1.926 (1.926)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.99 (  0.99)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/189/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0813 (0.0813)	validation_time 0.0068 (0.0068)	train_time 0.0703 (0.0703)
record: (train_acc, test_acc) (0.8469000279903411, 0.10200000554323196)
last accs (train_acc, test_acc) (0.8469000279903411, 0.10200000554323196)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.46it/s] 19%|#9        | 5/26 [00:00<00:01, 16.50it/s] 35%|###4      | 9/26 [00:00<00:00, 21.81it/s] 50%|#####     | 13/26 [00:00<00:00, 24.83it/s] 65%|######5   | 17/26 [00:00<00:00, 26.51it/s] 81%|########  | 21/26 [00:00<00:00, 27.50it/s] 96%|#########6| 25/26 [00:01<00:00, 28.72it/s]100%|##########| 26/26 [00:01<00:00, 23.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [1][  26/  26]	Loss 4.767 (6.673)	train_nll   0.40 (  0.42)	train_penalty   0.04 (  0.06)	weight_norm   4.37 (  6.25)	train_acc   0.85 (  0.85)	train_minacc   0.00 (  0.01)	train_majacc   1.00 (  1.00)	train_corr   0.00 (  0.00)	l1 5.6488 (6.0196)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.25it/s] 23%|##3       | 6/26 [00:00<00:00, 30.79it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.79it/s] 42%|####2     | 11/26 [00:00<00:00, 36.83it/s] 62%|######1   | 16/26 [00:00<00:00, 40.46it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.46it/s] 81%|########  | 21/26 [00:00<00:00, 38.97it/s]100%|##########| 26/26 [00:00<00:00, 42.06it/s]100%|##########| 26/26 [00:00<00:00, 34.84it/s]
Test: [   0/  26]	Loss 0.421 (0.421)	test_acc   0.84 (  0.84)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.421 (0.421)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.357 (0.398)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.357 (0.398)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.410 (0.400)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.410 (0.400)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.97)
Test: [  26/  26]	Loss 0.375 (0.402)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.375 (0.402)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.19it/s]
Test: [  0/  1]	Loss 1.853 (1.853)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.853 (1.853)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.853 (1.853)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.853 (1.853)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/189/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0431 (0.0622)	validation_time 0.0003 (0.0036)	train_time 0.0427 (0.0565)
record: (train_acc, test_acc) (0.8483000242114067, 0.1080000028014183)
last accs (train_acc, test_acc) (0.8483000242114067, 0.1080000028014183)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.32it/s] 19%|#9        | 5/26 [00:00<00:00, 21.74it/s] 35%|###4      | 9/26 [00:00<00:00, 25.90it/s] 46%|####6     | 12/26 [00:00<00:00, 27.19it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.04it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.84it/s] 85%|########4 | 22/26 [00:00<00:00, 29.14it/s] 96%|#########6| 25/26 [00:00<00:00, 29.22it/s]100%|##########| 26/26 [00:01<00:00, 25.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [2][  26/  26]	Loss 2.909 (3.709)	train_nll   0.39 (  0.41)	train_penalty   0.03 (  0.06)	weight_norm   2.52 (  3.30)	train_acc   0.85 (  0.85)	train_minacc   0.00 (  0.03)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 4.9497 (5.2366)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.80it/s] 31%|###       | 8/26 [00:00<00:00, 32.01it/s]                                               31%|###       | 8/26 [00:00<00:00, 32.01it/s] 50%|#####     | 13/26 [00:00<00:00, 38.08it/s] 69%|######9   | 18/26 [00:00<00:00, 42.00it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.00it/s] 88%|########8 | 23/26 [00:00<00:00, 41.95it/s]100%|##########| 26/26 [00:00<00:00, 37.70it/s]
Test: [   0/  26]	Loss 0.416 (0.416)	test_acc   0.84 (  0.84)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.416 (0.416)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.337 (0.389)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.337 (0.389)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.407 (0.391)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.407 (0.391)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.368 (0.392)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.368 (0.392)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.52it/s]
Test: [  0/  1]	Loss 1.832 (1.832)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.832 (1.832)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.832 (1.832)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.832 (1.832)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Overall Timing[  2/  1]	epoch_time 0.0445 (0.0563)	validation_time 0.0004 (0.0025)	train_time 0.0440 (0.0523)
record: (train_acc, test_acc) (0.8483000242114067, 0.1080000028014183)
last accs (train_acc, test_acc) (0.8486000300049782, 0.10700000822544098)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.96it/s] 19%|#9        | 5/26 [00:00<00:01, 17.46it/s] 35%|###4      | 9/26 [00:00<00:00, 23.69it/s] 50%|#####     | 13/26 [00:00<00:00, 26.42it/s] 65%|######5   | 17/26 [00:00<00:00, 27.80it/s] 81%|########  | 21/26 [00:00<00:00, 28.66it/s] 96%|#########6| 25/26 [00:00<00:00, 29.17it/s]100%|##########| 26/26 [00:01<00:00, 24.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [3][  26/  26]	Loss 1.949 (2.396)	train_nll   0.35 (  0.39)	train_penalty   0.03 (  0.05)	weight_norm   1.60 (  2.00)	train_acc   0.85 (  0.85)	train_minacc   0.00 (  0.05)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 4.6533 (4.7653)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.12it/s] 27%|##6       | 7/26 [00:00<00:00, 31.91it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.91it/s] 46%|####6     | 12/26 [00:00<00:00, 38.00it/s] 65%|######5   | 17/26 [00:00<00:00, 39.95it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.95it/s] 85%|########4 | 22/26 [00:00<00:00, 39.57it/s]100%|##########| 26/26 [00:00<00:00, 35.87it/s]
Test: [   0/  26]	Loss 0.411 (0.411)	test_acc   0.84 (  0.84)	test_minacc   0.06 (  0.06)	test_majacc   0.98 (  0.98)	Loss_d 0.411 (0.411)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.337 (0.384)	test_acc   0.86 (  0.85)	test_minacc   0.02 (  0.06)	test_majacc   0.99 (  0.98)	Loss_d 0.337 (0.384)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.02 (  0.06)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.95 (  0.94)
Test: [  20/  26]	Loss 0.400 (0.382)	test_acc   0.84 (  0.85)	test_minacc   0.05 (  0.08)	test_majacc   0.98 (  0.98)	Loss_d 0.400 (0.382)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.05 (  0.08)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.94)
Test: [  26/  26]	Loss 0.327 (0.383)	test_acc   0.86 (  0.85)	test_minacc   0.06 (  0.07)	test_majacc   1.00 (  0.99)	Loss_d 0.327 (0.383)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.06 (  0.07)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.75it/s]
Test: [  0/  1]	Loss 1.758 (1.758)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 1.758 (1.758)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.85 (  0.85)
Test: [  1/  1]	Loss 1.758 (1.758)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 1.758 (1.758)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.85 (  0.85)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/189/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0493 (0.0545)	validation_time 0.0004 (0.0020)	train_time 0.0488 (0.0515)
record: (train_acc, test_acc) (0.847800024330616, 0.1730000078678131)
last accs (train_acc, test_acc) (0.847800024330616, 0.1730000078678131)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.57it/s] 15%|#5        | 4/26 [00:00<00:01, 18.95it/s] 27%|##6       | 7/26 [00:00<00:00, 22.34it/s] 38%|###8      | 10/26 [00:00<00:00, 25.01it/s] 50%|#####     | 13/26 [00:00<00:00, 26.67it/s] 65%|######5   | 17/26 [00:00<00:00, 28.10it/s] 81%|########  | 21/26 [00:00<00:00, 28.87it/s] 92%|#########2| 24/26 [00:00<00:00, 29.13it/s]100%|##########| 26/26 [00:01<00:00, 24.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [4][  26/  26]	Loss 1.413 (1.688)	train_nll   0.36 (  0.39)	train_penalty   0.03 (  0.04)	weight_norm   1.06 (  1.30)	train_acc   0.86 (  0.84)	train_minacc   0.03 (  0.07)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 4.9833 (4.7889)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.43it/s] 23%|##3       | 6/26 [00:00<00:00, 24.76it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.76it/s] 42%|####2     | 11/26 [00:00<00:00, 32.64it/s] 62%|######1   | 16/26 [00:00<00:00, 38.27it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.27it/s] 81%|########  | 21/26 [00:00<00:00, 40.58it/s]100%|##########| 26/26 [00:00<00:00, 33.75it/s]
Test: [   0/  26]	Loss 0.389 (0.389)	test_acc   0.84 (  0.84)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.389 (0.389)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.323 (0.364)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.323 (0.364)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.95)
Test: [  20/  26]	Loss 0.379 (0.363)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.379 (0.363)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.95)
Test: [  26/  26]	Loss 0.323 (0.361)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.323 (0.361)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.09it/s]
Test: [  0/  1]	Loss 1.727 (1.727)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.727 (1.727)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.92)
Test: [  1/  1]	Loss 1.727 (1.727)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.727 (1.727)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.92)
Overall Timing[  4/  1]	epoch_time 0.0400 (0.0516)	validation_time 0.0004 (0.0017)	train_time 0.0396 (0.0491)
record: (train_acc, test_acc) (0.847800024330616, 0.1730000078678131)
last accs (train_acc, test_acc) (0.8488000243902206, 0.11300000548362732)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.30it/s] 19%|#9        | 5/26 [00:00<00:01, 20.52it/s] 35%|###4      | 9/26 [00:00<00:00, 25.22it/s] 50%|#####     | 13/26 [00:00<00:00, 27.41it/s] 65%|######5   | 17/26 [00:00<00:00, 28.57it/s] 81%|########  | 21/26 [00:00<00:00, 29.51it/s] 96%|#########6| 25/26 [00:00<00:00, 29.99it/s]100%|##########| 26/26 [00:01<00:00, 25.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [5][  26/  26]	Loss 1.035 (1.247)	train_nll   0.32 (  0.37)	train_penalty   0.02 (  0.04)	weight_norm   0.72 (  0.87)	train_acc   0.86 (  0.85)	train_minacc   0.17 (  0.08)	train_majacc   0.98 (  0.98)	train_corr   0.00 (  0.00)	l1 5.4459 (5.3505)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.98it/s] 31%|###       | 8/26 [00:00<00:00, 31.97it/s]                                               31%|###       | 8/26 [00:00<00:00, 31.97it/s] 50%|#####     | 13/26 [00:00<00:00, 37.83it/s] 69%|######9   | 18/26 [00:00<00:00, 41.82it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.82it/s] 88%|########8 | 23/26 [00:00<00:00, 41.71it/s]100%|##########| 26/26 [00:00<00:00, 36.73it/s]
Test: [   0/  26]	Loss 0.403 (0.403)	test_acc   0.84 (  0.84)	test_minacc   0.11 (  0.11)	test_majacc   0.98 (  0.98)	Loss_d 0.403 (0.403)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.327 (0.364)	test_acc   0.88 (  0.86)	test_minacc   0.15 (  0.11)	test_majacc   0.99 (  0.98)	Loss_d 0.327 (0.364)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.15 (  0.11)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.94 (  0.93)
Test: [  20/  26]	Loss 0.394 (0.365)	test_acc   0.84 (  0.85)	test_minacc   0.05 (  0.11)	test_majacc   0.98 (  0.98)	Loss_d 0.394 (0.365)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.05 (  0.11)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  26/  26]	Loss 0.306 (0.366)	test_acc   0.88 (  0.85)	test_minacc   0.17 (  0.11)	test_majacc   1.00 (  0.98)	Loss_d 0.306 (0.366)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.17 (  0.11)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.94 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.92it/s]
Test: [  0/  1]	Loss 1.615 (1.615)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.98 (  0.98)	Loss_d 1.615 (1.615)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.82 (  0.82)
Test: [  1/  1]	Loss 1.615 (1.615)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.98 (  0.98)	Loss_d 1.615 (1.615)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.82 (  0.82)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/189/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0409 (0.0498)	validation_time 0.0004 (0.0015)	train_time 0.0404 (0.0477)
record: (train_acc, test_acc) (0.8512000240087509, 0.18700000643730164)
last accs (train_acc, test_acc) (0.8512000240087509, 0.18700000643730164)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.13it/s] 15%|#5        | 4/26 [00:00<00:01, 20.45it/s] 27%|##6       | 7/26 [00:00<00:00, 24.22it/s] 42%|####2     | 11/26 [00:00<00:00, 27.01it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.42it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.22it/s] 88%|########8 | 23/26 [00:00<00:00, 29.43it/s]100%|##########| 26/26 [00:01<00:00, 25.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [6][  26/  26]	Loss 0.812 (0.943)	train_nll   0.34 (  0.37)	train_penalty   0.02 (  0.04)	weight_norm   0.47 (  0.57)	train_acc   0.86 (  0.85)	train_minacc   0.06 (  0.10)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 6.4122 (6.1296)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.48it/s] 31%|###       | 8/26 [00:00<00:00, 36.79it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.79it/s] 50%|#####     | 13/26 [00:00<00:00, 40.01it/s] 69%|######9   | 18/26 [00:00<00:00, 43.05it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.05it/s] 88%|########8 | 23/26 [00:00<00:00, 40.07it/s]100%|##########| 26/26 [00:00<00:00, 37.52it/s]
Test: [   0/  26]	Loss 0.399 (0.399)	test_acc   0.84 (  0.84)	test_minacc   0.06 (  0.06)	test_majacc   0.98 (  0.98)	Loss_d 0.399 (0.399)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.333 (0.373)	test_acc   0.87 (  0.85)	test_minacc   0.08 (  0.07)	test_majacc   1.00 (  0.99)	Loss_d 0.333 (0.373)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.08 (  0.07)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  20/  26]	Loss 0.392 (0.372)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.392 (0.372)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.91)
Test: [  26/  26]	Loss 0.321 (0.372)	test_acc   0.86 (  0.85)	test_minacc   0.06 (  0.07)	test_majacc   1.00 (  0.99)	Loss_d 0.321 (0.372)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.06 (  0.07)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.93 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.99it/s]
Test: [  0/  1]	Loss 1.557 (1.557)	test_acc   0.16 (  0.16)	test_minacc   0.06 (  0.06)	test_majacc   0.98 (  0.98)	Loss_d 1.557 (1.557)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.83 (  0.83)
Test: [  1/  1]	Loss 1.557 (1.557)	test_acc   0.16 (  0.16)	test_minacc   0.06 (  0.06)	test_majacc   0.98 (  0.98)	Loss_d 1.557 (1.557)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.83 (  0.83)
Overall Timing[  6/  1]	epoch_time 0.0444 (0.0491)	validation_time 0.0003 (0.0013)	train_time 0.0441 (0.0471)
record: (train_acc, test_acc) (0.8512000240087509, 0.18700000643730164)
last accs (train_acc, test_acc) (0.8484000233411789, 0.15600000321865082)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.23it/s] 12%|#1        | 3/26 [00:00<00:01, 13.41it/s] 27%|##6       | 7/26 [00:00<00:00, 21.59it/s] 42%|####2     | 11/26 [00:00<00:00, 25.40it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.32it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.39it/s] 88%|########8 | 23/26 [00:00<00:00, 28.65it/s]100%|##########| 26/26 [00:01<00:00, 24.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [7][  26/  26]	Loss 0.001 (0.544)	train_nll   0.60 (  0.40)	train_penalty   0.00 (  0.03)	weight_norm   0.38 (  0.40)	train_acc   0.69 (  0.82)	train_minacc   0.67 (  0.25)	train_majacc   0.70 (  0.92)	train_corr   0.00 (  0.00)	l1 7.2528 (7.1405)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.79it/s] 23%|##3       | 6/26 [00:00<00:00, 29.11it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.11it/s] 42%|####2     | 11/26 [00:00<00:00, 36.01it/s] 62%|######1   | 16/26 [00:00<00:00, 40.17it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.17it/s] 81%|########  | 21/26 [00:00<00:00, 38.80it/s]100%|##########| 26/26 [00:00<00:00, 41.71it/s]100%|##########| 26/26 [00:00<00:00, 34.68it/s]
Test: [   0/  26]	Loss 0.709 (0.709)	test_acc   0.57 (  0.57)	test_minacc   0.65 (  0.65)	test_majacc   0.56 (  0.56)	Loss_d 0.709 (0.709)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.685 (0.684)	test_acc   0.63 (  0.62)	test_minacc   0.70 (  0.71)	test_majacc   0.62 (  0.60)	Loss_d 0.685 (0.684)	test_acc_d   0.63 (  0.62)	test_minacc_d   0.70 (  0.71)	test_majacc_d   0.62 (  0.60)	test_corr_d   0.09 (  0.06)
Test: [  20/  26]	Loss 0.678 (0.680)	test_acc   0.61 (  0.62)	test_minacc   0.64 (  0.71)	test_majacc   0.61 (  0.61)	Loss_d 0.678 (0.680)	test_acc_d   0.61 (  0.62)	test_minacc_d   0.64 (  0.71)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.15 (  0.07)
Test: [  26/  26]	Loss 0.657 (0.682)	test_acc   0.66 (  0.62)	test_minacc   0.69 (  0.71)	test_majacc   0.65 (  0.61)	Loss_d 0.657 (0.682)	test_acc_d   0.66 (  0.62)	test_minacc_d   0.69 (  0.71)	test_majacc_d   0.65 (  0.61)	test_corr_d   0.13 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.31it/s]
Test: [  0/  1]	Loss 0.603 (0.603)	test_acc   0.66 (  0.66)	test_minacc   0.67 (  0.67)	test_majacc   0.53 (  0.53)	Loss_d 0.603 (0.603)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.46 ( -0.46)
Test: [  1/  1]	Loss 0.603 (0.603)	test_acc   0.66 (  0.66)	test_minacc   0.67 (  0.67)	test_majacc   0.53 (  0.53)	Loss_d 0.603 (0.603)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.46 ( -0.46)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/189/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0428 (0.0483)	validation_time 0.0004 (0.0012)	train_time 0.0424 (0.0466)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.24it/s] 19%|#9        | 5/26 [00:00<00:01, 17.50it/s] 35%|###4      | 9/26 [00:00<00:00, 22.83it/s] 50%|#####     | 13/26 [00:00<00:00, 25.57it/s] 65%|######5   | 17/26 [00:00<00:00, 27.41it/s] 81%|########  | 21/26 [00:00<00:00, 28.65it/s] 96%|#########6| 25/26 [00:00<00:00, 29.46it/s]100%|##########| 26/26 [00:01<00:00, 24.57it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [8][  26/  26]	Loss 0.000 (0.001)	train_nll   0.69 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.44)	train_acc   0.50 (  0.55)	train_minacc   0.47 (  0.58)	train_majacc   0.50 (  0.54)	train_corr   0.00 (  0.00)	l1 6.7372 (6.8939)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 29.51it/s] 31%|###       | 8/26 [00:00<00:00, 37.89it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.89it/s] 50%|#####     | 13/26 [00:00<00:00, 39.19it/s] 69%|######9   | 18/26 [00:00<00:00, 40.84it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.84it/s] 88%|########8 | 23/26 [00:00<00:00, 42.58it/s]100%|##########| 26/26 [00:00<00:00, 37.77it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.47 (  0.47)	test_minacc   0.53 (  0.53)	test_majacc   0.45 (  0.45)	Loss_d 0.691 (0.691)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.694 (0.691)	test_acc   0.46 (  0.50)	test_minacc   0.40 (  0.51)	test_majacc   0.47 (  0.50)	Loss_d 0.694 (0.691)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.40 (  0.51)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.03 (  0.02)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.47 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.47 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.07 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.47 (  0.51)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.01 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.93it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.690 (0.690)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.690 (0.690)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.08 ( -0.08)
Overall Timing[  8/  1]	epoch_time 0.0390 (0.0473)	validation_time 0.0005 (0.0011)	train_time 0.0385 (0.0457)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.4957000089287758, 0.5060000419616699)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.95it/s] 15%|#5        | 4/26 [00:00<00:01, 21.51it/s] 27%|##6       | 7/26 [00:00<00:00, 24.35it/s] 42%|####2     | 11/26 [00:00<00:00, 26.73it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.79it/s] 65%|######5   | 17/26 [00:00<00:00, 28.23it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.76it/s] 88%|########8 | 23/26 [00:00<00:00, 28.93it/s]100%|##########| 26/26 [00:01<00:00, 25.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [9][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.42 (  0.49)	train_minacc   0.42 (  0.54)	train_majacc   0.43 (  0.48)	train_corr   0.00 (  0.00)	l1 6.6949 (6.7031)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.18it/s] 23%|##3       | 6/26 [00:00<00:00, 28.06it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.06it/s] 42%|####2     | 11/26 [00:00<00:00, 35.51it/s] 62%|######1   | 16/26 [00:00<00:00, 39.89it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.89it/s] 81%|########  | 21/26 [00:00<00:00, 38.82it/s]100%|##########| 26/26 [00:00<00:00, 41.84it/s]100%|##########| 26/26 [00:00<00:00, 34.22it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.56 (  0.56)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.695 (0.694)	test_acc   0.44 (  0.48)	test_minacc   0.45 (  0.53)	test_majacc   0.44 (  0.48)	Loss_d 0.695 (0.694)	test_acc_d   0.44 (  0.48)	test_minacc_d   0.45 (  0.53)	test_majacc_d   0.44 (  0.48)	test_corr_d  -0.08 ( -0.08)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.48)	test_corr_d  -0.04 ( -0.08)
Test: [  26/  26]	Loss 0.696 (0.694)	test_acc   0.42 (  0.48)	test_minacc   0.42 (  0.52)	test_majacc   0.43 (  0.48)	Loss_d 0.696 (0.694)	test_acc_d   0.42 (  0.48)	test_minacc_d   0.42 (  0.52)	test_majacc_d   0.43 (  0.48)	test_corr_d  -0.10 ( -0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.92it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.06 ( -0.06)
Overall Timing[  9/  1]	epoch_time 0.0414 (0.0467)	validation_time 0.0004 (0.0010)	train_time 0.0410 (0.0452)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.4842000107467175, 0.5170000195503235)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.94it/s] 19%|#9        | 5/26 [00:00<00:00, 22.11it/s] 31%|###       | 8/26 [00:00<00:00, 25.32it/s] 42%|####2     | 11/26 [00:00<00:00, 26.98it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.46it/s] 69%|######9   | 18/26 [00:00<00:00, 28.91it/s] 81%|########  | 21/26 [00:00<00:00, 29.20it/s] 96%|#########6| 25/26 [00:00<00:00, 29.64it/s]100%|##########| 26/26 [00:00<00:00, 26.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [10][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.49 (  0.52)	train_minacc   0.47 (  0.53)	train_majacc   0.50 (  0.52)	train_corr   0.00 (  0.00)	l1 6.6936 (6.6922)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.80it/s] 27%|##6       | 7/26 [00:00<00:00, 34.63it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.63it/s] 46%|####6     | 12/26 [00:00<00:00, 39.48it/s] 65%|######5   | 17/26 [00:00<00:00, 38.86it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.86it/s] 85%|########4 | 22/26 [00:00<00:00, 41.52it/s]100%|##########| 26/26 [00:00<00:00, 36.36it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.58 (  0.58)	test_minacc   0.50 (  0.50)	test_majacc   0.60 (  0.60)	Loss_d 0.692 (0.692)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.47 (  0.50)	test_majacc   0.51 (  0.52)	Loss_d 0.694 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.51 (  0.52)	test_corr_d  -0.00 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.04 ( -0.01)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.47 (  0.49)	test_majacc   0.50 (  0.52)	Loss_d 0.695 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.97it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.02 (  0.02)
Overall Timing[ 10/  1]	epoch_time 0.0388 (0.0460)	validation_time 0.0004 (0.0010)	train_time 0.0385 (0.0446)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.5135000101923942, 0.49000000953674316)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.28it/s] 19%|#9        | 5/26 [00:00<00:01, 17.83it/s] 31%|###       | 8/26 [00:00<00:00, 21.95it/s] 42%|####2     | 11/26 [00:00<00:00, 23.95it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.28it/s] 65%|######5   | 17/26 [00:00<00:00, 26.40it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.28it/s] 92%|#########2| 24/26 [00:00<00:00, 28.56it/s]100%|##########| 26/26 [00:01<00:00, 23.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [11][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.52 (  0.53)	train_minacc   0.50 (  0.51)	train_majacc   0.52 (  0.53)	train_corr   0.00 (  0.00)	l1 6.6936 (6.6931)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.93it/s] 27%|##6       | 7/26 [00:00<00:00, 29.34it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.34it/s] 46%|####6     | 12/26 [00:00<00:00, 34.92it/s] 65%|######5   | 17/26 [00:00<00:00, 38.79it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.79it/s] 85%|########4 | 22/26 [00:00<00:00, 41.54it/s]100%|##########| 26/26 [00:00<00:00, 33.76it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.60 (  0.60)	Loss_d 0.692 (0.692)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.53)	test_minacc   0.47 (  0.52)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.47 (  0.52)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.01 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.53)	test_minacc   0.56 (  0.51)	test_majacc   0.56 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.53)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.56 (  0.53)	test_corr_d   0.05 (  0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.50 (  0.51)	test_majacc   0.52 (  0.53)	Loss_d 0.694 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.52 (  0.53)	test_corr_d  -0.02 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.24it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.03 (  0.03)
Overall Timing[ 11/  1]	epoch_time 0.0422 (0.0456)	validation_time 0.0003 (0.0009)	train_time 0.0418 (0.0444)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.5244000077247619, 0.5040000081062317)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.96it/s] 15%|#5        | 4/26 [00:00<00:01, 15.14it/s] 27%|##6       | 7/26 [00:00<00:00, 20.44it/s] 38%|###8      | 10/26 [00:00<00:00, 23.57it/s] 50%|#####     | 13/26 [00:00<00:00, 25.54it/s] 65%|######5   | 17/26 [00:00<00:00, 27.19it/s] 81%|########  | 21/26 [00:00<00:00, 28.33it/s] 92%|#########2| 24/26 [00:00<00:00, 28.71it/s]100%|##########| 26/26 [00:01<00:00, 23.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [12][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.52 (  0.53)	train_minacc   0.47 (  0.52)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 6.6932 (6.6931)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.17it/s] 23%|##3       | 6/26 [00:00<00:00, 25.50it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.50it/s] 42%|####2     | 11/26 [00:00<00:00, 32.92it/s] 65%|######5   | 17/26 [00:00<00:00, 37.03it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.03it/s] 85%|########4 | 22/26 [00:00<00:00, 40.34it/s]100%|##########| 26/26 [00:00<00:00, 33.18it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.59 (  0.59)	test_minacc   0.55 (  0.55)	test_majacc   0.60 (  0.60)	Loss_d 0.692 (0.692)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.02 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.53)	test_minacc   0.54 (  0.52)	test_majacc   0.55 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.06 (  0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.50 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.01 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.73it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.04 (  0.04)
Overall Timing[ 12/  1]	epoch_time 0.0424 (0.0454)	validation_time 0.0004 (0.0009)	train_time 0.0420 (0.0442)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.526800009995699, 0.5120000243186951)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.71it/s] 15%|#5        | 4/26 [00:00<00:01, 17.36it/s] 27%|##6       | 7/26 [00:00<00:00, 21.31it/s] 38%|###8      | 10/26 [00:00<00:00, 24.04it/s] 50%|#####     | 13/26 [00:00<00:00, 25.33it/s] 62%|######1   | 16/26 [00:00<00:00, 26.36it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.78it/s] 88%|########8 | 23/26 [00:00<00:00, 27.75it/s]100%|##########| 26/26 [00:01<00:00, 24.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [13][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.53 (  0.53)	train_minacc   0.47 (  0.53)	train_majacc   0.54 (  0.53)	train_corr   0.00 (  0.00)	l1 6.6928 (6.6928)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.42it/s] 31%|###       | 8/26 [00:00<00:00, 35.82it/s]                                               31%|###       | 8/26 [00:00<00:00, 35.82it/s] 50%|#####     | 13/26 [00:00<00:00, 39.24it/s] 69%|######9   | 18/26 [00:00<00:00, 41.39it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.39it/s] 88%|########8 | 23/26 [00:00<00:00, 39.33it/s]100%|##########| 26/26 [00:00<00:00, 36.74it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.60 (  0.60)	test_minacc   0.55 (  0.55)	test_majacc   0.61 (  0.61)	Loss_d 0.692 (0.692)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.02 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.53)	test_minacc   0.54 (  0.52)	test_majacc   0.55 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.06 (  0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.47 (  0.53)	test_majacc   0.55 (  0.52)	Loss_d 0.694 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.47 (  0.53)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.01 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.90it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.05 (  0.05)
Overall Timing[ 13/  1]	epoch_time 0.0504 (0.0457)	validation_time 0.0003 (0.0008)	train_time 0.0500 (0.0446)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.5258000093102455, 0.5180000066757202)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.97it/s] 15%|#5        | 4/26 [00:00<00:01, 17.02it/s] 27%|##6       | 7/26 [00:00<00:00, 21.38it/s] 38%|###8      | 10/26 [00:00<00:00, 24.39it/s] 50%|#####     | 13/26 [00:00<00:00, 25.84it/s] 62%|######1   | 16/26 [00:00<00:00, 26.76it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.99it/s] 85%|########4 | 22/26 [00:00<00:00, 27.80it/s] 96%|#########6| 25/26 [00:01<00:00, 27.77it/s]100%|##########| 26/26 [00:01<00:00, 23.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [14][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.53 (  0.52)	train_minacc   0.44 (  0.53)	train_majacc   0.55 (  0.52)	train_corr   0.00 (  0.00)	l1 6.6924 (6.6924)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.44it/s] 23%|##3       | 6/26 [00:00<00:00, 21.83it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.83it/s] 42%|####2     | 11/26 [00:00<00:00, 31.19it/s] 65%|######5   | 17/26 [00:00<00:00, 37.46it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.46it/s] 88%|########8 | 23/26 [00:00<00:00, 43.36it/s]100%|##########| 26/26 [00:00<00:00, 33.12it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.60 (  0.60)	test_minacc   0.55 (  0.55)	test_majacc   0.61 (  0.61)	Loss_d 0.692 (0.692)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.55 (  0.55)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.02 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.52)	test_minacc   0.56 (  0.53)	test_majacc   0.56 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.56 (  0.53)	test_majacc_d   0.56 (  0.52)	test_corr_d   0.06 (  0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.44 (  0.53)	test_majacc   0.54 (  0.52)	Loss_d 0.694 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.44 (  0.53)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.00 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.68it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.05 (  0.05)
Overall Timing[ 14/  1]	epoch_time 0.0430 (0.0456)	validation_time 0.0004 (0.0008)	train_time 0.0426 (0.0445)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.5243000101447105, 0.5190000534057617)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.85it/s] 15%|#5        | 4/26 [00:00<00:01, 14.50it/s] 27%|##6       | 7/26 [00:00<00:00, 19.78it/s] 42%|####2     | 11/26 [00:00<00:00, 24.19it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.33it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.89it/s] 88%|########8 | 23/26 [00:00<00:00, 29.06it/s]100%|##########| 26/26 [00:01<00:00, 23.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [15][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.54 (  0.52)	train_minacc   0.47 (  0.53)	train_majacc   0.56 (  0.52)	train_corr   0.00 (  0.00)	l1 6.6921 (6.6921)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.21it/s] 31%|###       | 8/26 [00:00<00:00, 35.91it/s]                                               31%|###       | 8/26 [00:00<00:00, 35.91it/s] 50%|#####     | 13/26 [00:00<00:00, 40.24it/s] 69%|######9   | 18/26 [00:00<00:00, 42.91it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.91it/s] 88%|########8 | 23/26 [00:00<00:00, 41.27it/s]100%|##########| 26/26 [00:00<00:00, 38.02it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.59 (  0.59)	test_minacc   0.55 (  0.55)	test_majacc   0.60 (  0.60)	Loss_d 0.692 (0.692)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.02 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.52)	test_minacc   0.56 (  0.53)	test_majacc   0.56 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.56 (  0.53)	test_majacc_d   0.56 (  0.52)	test_corr_d   0.06 (  0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.47 (  0.53)	test_majacc   0.55 (  0.52)	Loss_d 0.694 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.47 (  0.53)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.00 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.01it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.57 (  0.57)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.57 (  0.57)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.06 (  0.06)
Overall Timing[ 15/  1]	epoch_time 0.0465 (0.0456)	validation_time 0.0004 (0.0008)	train_time 0.0461 (0.0446)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.5214000177085399, 0.5160000324249268)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.17it/s] 15%|#5        | 4/26 [00:00<00:01, 15.18it/s] 27%|##6       | 7/26 [00:00<00:00, 20.32it/s] 42%|####2     | 11/26 [00:00<00:00, 24.36it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.07it/s] 69%|######9   | 18/26 [00:00<00:00, 27.79it/s] 81%|########  | 21/26 [00:00<00:00, 28.20it/s] 96%|#########6| 25/26 [00:01<00:00, 29.15it/s]100%|##########| 26/26 [00:01<00:00, 23.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.54 (  0.52)	train_minacc   0.47 (  0.54)	train_majacc   0.55 (  0.52)	train_corr   0.00 (  0.00)	l1 6.6917 (6.6917)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.36it/s] 23%|##3       | 6/26 [00:00<00:00, 27.25it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.25it/s] 46%|####6     | 12/26 [00:00<00:00, 39.40it/s] 65%|######5   | 17/26 [00:00<00:00, 37.97it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.97it/s] 85%|########4 | 22/26 [00:00<00:00, 40.42it/s]100%|##########| 26/26 [00:00<00:00, 35.01it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.59 (  0.59)	Loss_d 0.692 (0.692)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.53)	test_minacc   0.51 (  0.54)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.51 (  0.54)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.02 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.54 (  0.53)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.54 (  0.53)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.06 (  0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.47 (  0.53)	test_majacc   0.54 (  0.52)	Loss_d 0.694 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.47 (  0.53)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.00 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.20it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.58 (  0.58)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.58 (  0.58)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.06 (  0.06)
Overall Timing[ 16/  1]	epoch_time 0.0478 (0.0457)	validation_time 0.0003 (0.0008)	train_time 0.0474 (0.0447)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.5206000070869923, 0.5160000324249268)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.77it/s] 15%|#5        | 4/26 [00:00<00:01, 14.82it/s] 27%|##6       | 7/26 [00:00<00:00, 19.94it/s] 42%|####2     | 11/26 [00:00<00:00, 23.89it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.12it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.45it/s] 88%|########8 | 23/26 [00:00<00:00, 28.43it/s]100%|##########| 26/26 [00:01<00:00, 23.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.53 (  0.52)	train_minacc   0.47 (  0.53)	train_majacc   0.54 (  0.51)	train_corr   0.00 (  0.00)	l1 6.6914 (6.6914)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.97it/s] 23%|##3       | 6/26 [00:00<00:00, 29.53it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.53it/s] 42%|####2     | 11/26 [00:00<00:00, 36.10it/s] 62%|######1   | 16/26 [00:00<00:00, 40.59it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.59it/s] 81%|########  | 21/26 [00:00<00:00, 39.70it/s]100%|##########| 26/26 [00:00<00:00, 42.50it/s]100%|##########| 26/26 [00:00<00:00, 34.96it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.58 (  0.58)	test_minacc   0.56 (  0.56)	test_majacc   0.59 (  0.59)	Loss_d 0.692 (0.692)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.53)	test_minacc   0.49 (  0.54)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.49 (  0.54)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.02 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.51 (  0.53)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.06 (  0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.47 (  0.53)	test_majacc   0.54 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.47 (  0.53)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.00 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.97it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.58 (  0.58)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.58 (  0.58)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.06 (  0.06)
Overall Timing[ 17/  1]	epoch_time 0.0433 (0.0456)	validation_time 0.0004 (0.0007)	train_time 0.0430 (0.0446)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.5178000082075596, 0.5120000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.40it/s] 15%|#5        | 4/26 [00:00<00:01, 18.51it/s] 27%|##6       | 7/26 [00:00<00:00, 23.08it/s] 42%|####2     | 11/26 [00:00<00:00, 26.32it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.00it/s] 69%|######9   | 18/26 [00:00<00:00, 27.36it/s] 85%|########4 | 22/26 [00:00<00:00, 28.49it/s] 96%|#########6| 25/26 [00:00<00:00, 28.69it/s]100%|##########| 26/26 [00:01<00:00, 24.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.54 (  0.51)	train_minacc   0.53 (  0.53)	train_majacc   0.54 (  0.51)	train_corr   0.00 (  0.00)	l1 6.6911 (6.6910)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.27it/s] 27%|##6       | 7/26 [00:00<00:00, 31.52it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.52it/s] 46%|####6     | 12/26 [00:00<00:00, 37.34it/s] 65%|######5   | 17/26 [00:00<00:00, 40.18it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.18it/s] 85%|########4 | 22/26 [00:00<00:00, 39.12it/s]100%|##########| 26/26 [00:00<00:00, 35.78it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.58 (  0.58)	test_minacc   0.58 (  0.58)	test_majacc   0.58 (  0.58)	Loss_d 0.692 (0.692)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.49 (  0.54)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.49 (  0.54)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.51)	test_minacc   0.51 (  0.53)	test_majacc   0.56 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.56 (  0.51)	test_corr_d   0.06 (  0.00)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.00 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.36it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.58 (  0.58)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.58 (  0.58)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.06 (  0.06)
Overall Timing[ 18/  1]	epoch_time 0.0435 (0.0455)	validation_time 0.0004 (0.0007)	train_time 0.0431 (0.0445)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.514500009983778, 0.5180000066757202)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.15it/s] 15%|#5        | 4/26 [00:00<00:01, 13.53it/s] 27%|##6       | 7/26 [00:00<00:00, 19.14it/s] 42%|####2     | 11/26 [00:00<00:00, 23.86it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.33it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.63it/s] 88%|########8 | 23/26 [00:00<00:00, 29.04it/s]100%|##########| 26/26 [00:01<00:00, 23.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.49)	train_acc   0.53 (  0.51)	train_minacc   0.53 (  0.54)	train_majacc   0.53 (  0.51)	train_corr   0.00 (  0.00)	l1 6.6908 (6.6908)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.66it/s] 23%|##3       | 6/26 [00:00<00:00, 30.73it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.73it/s] 42%|####2     | 11/26 [00:00<00:00, 37.85it/s] 65%|######5   | 17/26 [00:00<00:00, 43.04it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.04it/s] 88%|########8 | 23/26 [00:00<00:00, 46.71it/s]100%|##########| 26/26 [00:00<00:00, 37.70it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.58 (  0.58)	test_minacc   0.58 (  0.58)	test_majacc   0.58 (  0.58)	Loss_d 0.692 (0.692)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.49 (  0.53)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.49 (  0.53)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.49 (  0.52)	test_majacc   0.54 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.49 (  0.52)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.06 (  0.00)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.01 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.93it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.58 (  0.58)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.58 (  0.58)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.07 (  0.07)
Overall Timing[ 19/  1]	epoch_time 0.0438 (0.0454)	validation_time 0.0004 (0.0007)	train_time 0.0434 (0.0445)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.5097000135481358, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.31it/s] 12%|#1        | 3/26 [00:00<00:02,  9.11it/s] 23%|##3       | 6/26 [00:00<00:01, 15.71it/s] 38%|###8      | 10/26 [00:00<00:00, 21.22it/s] 54%|#####3    | 14/26 [00:00<00:00, 24.47it/s] 69%|######9   | 18/26 [00:00<00:00, 26.60it/s] 81%|########  | 21/26 [00:00<00:00, 27.26it/s] 92%|#########2| 24/26 [00:01<00:00, 27.80it/s]100%|##########| 26/26 [00:01<00:00, 21.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.54 (  0.51)	train_minacc   0.56 (  0.53)	train_majacc   0.53 (  0.51)	train_corr   0.00 (  0.00)	l1 6.6905 (6.6905)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.90it/s] 23%|##3       | 6/26 [00:00<00:00, 27.75it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.75it/s] 42%|####2     | 11/26 [00:00<00:00, 35.45it/s] 62%|######1   | 16/26 [00:00<00:00, 39.58it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.58it/s] 81%|########  | 21/26 [00:00<00:00, 38.30it/s]100%|##########| 26/26 [00:00<00:00, 41.35it/s]100%|##########| 26/26 [00:00<00:00, 33.43it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.58 (  0.58)	test_minacc   0.58 (  0.58)	test_majacc   0.58 (  0.58)	Loss_d 0.692 (0.692)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.49 (  0.52)	test_majacc   0.53 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.49 (  0.52)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.06 (  0.00)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.56 (  0.53)	test_majacc   0.53 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.56 (  0.53)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.01 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.23it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.59 (  0.59)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.59 (  0.59)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.07 (  0.07)
Overall Timing[ 20/  1]	epoch_time 0.0422 (0.0453)	validation_time 0.0004 (0.0007)	train_time 0.0418 (0.0444)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.5073000090420247, 0.5160000324249268)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.31it/s] 15%|#5        | 4/26 [00:00<00:01, 11.57it/s] 27%|##6       | 7/26 [00:00<00:01, 17.20it/s] 42%|####2     | 11/26 [00:00<00:00, 22.24it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.40it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.32it/s] 88%|########8 | 23/26 [00:01<00:00, 28.42it/s]100%|##########| 26/26 [00:01<00:00, 22.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.54 (  0.51)	train_minacc   0.56 (  0.53)	train_majacc   0.53 (  0.50)	train_corr   0.00 (  0.00)	l1 6.6903 (6.6902)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.93it/s] 23%|##3       | 6/26 [00:00<00:00, 22.40it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.40it/s] 42%|####2     | 11/26 [00:00<00:00, 30.91it/s] 62%|######1   | 16/26 [00:00<00:00, 37.20it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.20it/s] 81%|########  | 21/26 [00:00<00:00, 36.66it/s]100%|##########| 26/26 [00:00<00:00, 39.91it/s]100%|##########| 26/26 [00:00<00:00, 31.32it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.58 (  0.58)	test_minacc   0.58 (  0.58)	test_majacc   0.58 (  0.58)	Loss_d 0.692 (0.692)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.49 (  0.52)	test_majacc   0.53 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.49 (  0.52)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.05 (  0.00)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.01 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.32it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.60 (  0.60)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.60 (  0.60)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.07 (  0.07)
Overall Timing[ 21/  1]	epoch_time 0.0413 (0.0451)	validation_time 0.0004 (0.0007)	train_time 0.0409 (0.0442)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.5063000067770481, 0.5130000114440918)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.82it/s] 19%|#9        | 5/26 [00:00<00:01, 12.40it/s] 35%|###4      | 9/26 [00:00<00:00, 18.27it/s] 50%|#####     | 13/26 [00:00<00:00, 22.12it/s] 65%|######5   | 17/26 [00:00<00:00, 24.50it/s] 81%|########  | 21/26 [00:01<00:00, 26.63it/s] 96%|#########6| 25/26 [00:01<00:00, 28.29it/s]100%|##########| 26/26 [00:01<00:00, 21.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.53 (  0.51)	train_minacc   0.53 (  0.53)	train_majacc   0.53 (  0.50)	train_corr   0.00 (  0.00)	l1 6.6901 (6.6900)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.28it/s] 23%|##3       | 6/26 [00:00<00:00, 21.37it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.37it/s] 42%|####2     | 11/26 [00:00<00:00, 28.18it/s] 62%|######1   | 16/26 [00:00<00:00, 34.38it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.38it/s] 81%|########  | 21/26 [00:00<00:00, 36.68it/s]100%|##########| 26/26 [00:00<00:00, 40.28it/s]100%|##########| 26/26 [00:00<00:00, 30.22it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.56 (  0.56)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.47 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.47 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.49 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.05 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.53 (  0.52)	test_majacc   0.53 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.01 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.06it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.60 (  0.60)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.60 (  0.60)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.06 (  0.06)
Overall Timing[ 22/  1]	epoch_time 0.0442 (0.0450)	validation_time 0.0004 (0.0007)	train_time 0.0438 (0.0442)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.5051000124514103, 0.5139999985694885)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.47it/s] 15%|#5        | 4/26 [00:00<00:01, 16.60it/s] 27%|##6       | 7/26 [00:00<00:00, 21.62it/s] 38%|###8      | 10/26 [00:00<00:00, 22.50it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.82it/s] 69%|######9   | 18/26 [00:00<00:00, 27.79it/s] 81%|########  | 21/26 [00:00<00:00, 27.46it/s] 92%|#########2| 24/26 [00:00<00:00, 27.78it/s]100%|##########| 26/26 [00:01<00:00, 23.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 200
penalty weights 10000.0
l1 at pgd_anneal_iters 6.690296649932861
set z to 6.623393683433533
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 200
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 200
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 200
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 200
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 200
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
rho, theta 382 tensor(-0.0096, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 200
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 200
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 200
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 200
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 200
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 200
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 200
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 200
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 200
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 200
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 200
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 200
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 200
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 200
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 200
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 200
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 200
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 200
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
final projection at end of training
dim_v 512
Epoch: [23][  26/  26]	Loss 0.000 (0.003)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.62 (  0.53)	train_acc   0.50 (  0.47)	train_minacc   0.47 (  0.56)	train_majacc   0.50 (  0.46)	train_corr   0.00 (  0.00)	l1 5.5997 (6.1656)	zero_count 0.0000 (5.0310)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.16it/s] 27%|##6       | 7/26 [00:00<00:00, 33.44it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.44it/s] 46%|####6     | 12/26 [00:00<00:00, 39.10it/s] 65%|######5   | 17/26 [00:00<00:00, 41.34it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.34it/s] 85%|########4 | 22/26 [00:00<00:00, 40.29it/s]100%|##########| 26/26 [00:00<00:00, 36.32it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.46 (  0.46)	test_minacc   0.60 (  0.60)	test_majacc   0.44 (  0.44)	Loss_d 0.690 (0.690)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.34 (  0.34)
Test: [  10/  26]	Loss 0.687 (0.688)	test_acc   0.45 (  0.49)	test_minacc   0.55 (  0.55)	test_majacc   0.44 (  0.48)	Loss_d 0.687 (0.688)	test_acc_d   0.45 (  0.49)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.44 (  0.48)	test_corr_d   0.35 (  0.37)
Test: [  20/  26]	Loss 0.688 (0.688)	test_acc   0.45 (  0.49)	test_minacc   0.58 (  0.54)	test_majacc   0.43 (  0.48)	Loss_d 0.688 (0.688)	test_acc_d   0.45 (  0.49)	test_minacc_d   0.58 (  0.54)	test_majacc_d   0.43 (  0.48)	test_corr_d   0.36 (  0.38)
Test: [  26/  26]	Loss 0.687 (0.688)	test_acc   0.52 (  0.49)	test_minacc   0.42 (  0.53)	test_majacc   0.54 (  0.48)	Loss_d 0.687 (0.688)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.42 (  0.53)	test_majacc_d   0.54 (  0.48)	test_corr_d   0.44 (  0.38)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.60it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.42 (  0.42)	Loss_d 0.696 (0.696)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.24 (  0.24)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.42 (  0.42)	Loss_d 0.696 (0.696)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.24 (  0.24)
Overall Timing[ 23/  1]	epoch_time 0.0460 (0.0451)	validation_time 0.0004 (0.0006)	train_time 0.0457 (0.0442)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.4860000076889992, 0.5760000348091125)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.36it/s] 15%|#5        | 4/26 [00:00<00:01, 17.31it/s] 27%|##6       | 7/26 [00:00<00:00, 21.78it/s] 38%|###8      | 10/26 [00:00<00:00, 24.55it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.96it/s] 65%|######5   | 17/26 [00:00<00:00, 27.52it/s] 81%|########  | 21/26 [00:00<00:00, 28.29it/s] 96%|#########6| 25/26 [00:00<00:00, 28.89it/s]100%|##########| 26/26 [00:01<00:00, 24.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 200
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 200
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 200
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 200
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 200
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 200
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 200
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 200
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 200
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 200
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 200
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 200
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 200
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 200
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 200
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 200
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 200
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 200
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 200
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 200
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 200
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 200
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 200
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 200
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 200
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 200
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
final projection at end of training
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.68 (  0.66)	train_acc   0.56 (  0.54)	train_minacc   0.39 (  0.46)	train_majacc   0.58 (  0.56)	train_corr   0.00 (  0.00)	l1 5.5261 (5.5558)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.29it/s] 23%|##3       | 6/26 [00:00<00:00, 24.29it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.29it/s] 42%|####2     | 11/26 [00:00<00:00, 32.84it/s] 62%|######1   | 16/26 [00:00<00:00, 38.08it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.08it/s] 81%|########  | 21/26 [00:00<00:00, 37.96it/s]100%|##########| 26/26 [00:00<00:00, 41.22it/s]100%|##########| 26/26 [00:00<00:00, 32.42it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.56 (  0.56)	test_minacc   0.37 (  0.37)	test_majacc   0.59 (  0.59)	Loss_d 0.689 (0.689)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.31 (  0.31)
Test: [  10/  26]	Loss 0.690 (0.691)	test_acc   0.57 (  0.56)	test_minacc   0.55 (  0.43)	test_majacc   0.57 (  0.58)	Loss_d 0.690 (0.691)	test_acc_d   0.57 (  0.56)	test_minacc_d   0.55 (  0.43)	test_majacc_d   0.57 (  0.58)	test_corr_d   0.23 (  0.26)
Test: [  20/  26]	Loss 0.690 (0.691)	test_acc   0.56 (  0.55)	test_minacc   0.41 (  0.43)	test_majacc   0.59 (  0.57)	Loss_d 0.690 (0.691)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.41 (  0.43)	test_majacc_d   0.59 (  0.57)	test_corr_d   0.30 (  0.26)
Test: [  26/  26]	Loss 0.692 (0.691)	test_acc   0.56 (  0.55)	test_minacc   0.44 (  0.43)	test_majacc   0.58 (  0.57)	Loss_d 0.692 (0.691)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.44 (  0.43)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.22 (  0.26)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.87it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.56 (  0.56)	Loss_d 0.697 (0.697)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.56 (  0.56)	Loss_d 0.697 (0.697)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.29 (  0.29)
Overall Timing[ 24/  1]	epoch_time 0.0412 (0.0449)	validation_time 0.0005 (0.0006)	train_time 0.0407 (0.0441)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.552300009816885, 0.46800002455711365)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.02it/s] 19%|#9        | 5/26 [00:00<00:00, 24.00it/s] 35%|###4      | 9/26 [00:00<00:00, 26.90it/s] 46%|####6     | 12/26 [00:00<00:00, 27.71it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.31it/s] 69%|######9   | 18/26 [00:00<00:00, 27.24it/s] 85%|########4 | 22/26 [00:00<00:00, 28.40it/s]100%|##########| 26/26 [00:00<00:00, 29.15it/s]100%|##########| 26/26 [00:01<00:00, 25.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 200
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 200
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 200
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 200
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 200
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 200
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 200
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 200
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 200
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 200
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 200
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 200
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 200
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 200
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 200
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 200
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 200
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 200
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 200
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 200
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 200
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 200
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 200
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 200
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 200
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 200
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.68 (  0.68)	train_acc   0.55 (  0.53)	train_minacc   0.47 (  0.47)	train_majacc   0.57 (  0.54)	train_corr   0.00 (  0.00)	l1 5.5039 (5.5181)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.73it/s] 23%|##3       | 6/26 [00:00<00:00, 22.73it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.73it/s] 42%|####2     | 11/26 [00:00<00:00, 31.80it/s] 65%|######5   | 17/26 [00:00<00:00, 36.36it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.36it/s] 85%|########4 | 22/26 [00:00<00:00, 39.18it/s]100%|##########| 26/26 [00:00<00:00, 31.69it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.55 (  0.55)	test_minacc   0.35 (  0.35)	test_majacc   0.59 (  0.59)	Loss_d 0.691 (0.691)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.25 (  0.25)
Test: [  10/  26]	Loss 0.690 (0.691)	test_acc   0.58 (  0.56)	test_minacc   0.55 (  0.43)	test_majacc   0.58 (  0.58)	Loss_d 0.690 (0.691)	test_acc_d   0.58 (  0.56)	test_minacc_d   0.55 (  0.43)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.20 (  0.25)
Test: [  20/  26]	Loss 0.691 (0.691)	test_acc   0.57 (  0.56)	test_minacc   0.42 (  0.43)	test_majacc   0.59 (  0.58)	Loss_d 0.691 (0.691)	test_acc_d   0.57 (  0.56)	test_minacc_d   0.42 (  0.43)	test_majacc_d   0.59 (  0.58)	test_corr_d   0.27 (  0.25)
Test: [  26/  26]	Loss 0.692 (0.691)	test_acc   0.55 (  0.56)	test_minacc   0.47 (  0.43)	test_majacc   0.57 (  0.58)	Loss_d 0.692 (0.691)	test_acc_d   0.55 (  0.56)	test_minacc_d   0.47 (  0.43)	test_majacc_d   0.57 (  0.58)	test_corr_d   0.23 (  0.25)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.31it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.53 (  0.53)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.17 (  0.17)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.53 (  0.53)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.17 (  0.17)
Overall Timing[ 25/  1]	epoch_time 0.0471 (0.0450)	validation_time 0.0004 (0.0006)	train_time 0.0467 (0.0442)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.5556000153422356, 0.4690000116825104)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.41it/s] 15%|#5        | 4/26 [00:00<00:01, 17.60it/s] 27%|##6       | 7/26 [00:00<00:00, 22.34it/s] 38%|###8      | 10/26 [00:00<00:00, 24.78it/s] 50%|#####     | 13/26 [00:00<00:00, 26.23it/s] 62%|######1   | 16/26 [00:00<00:00, 27.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.79it/s] 85%|########4 | 22/26 [00:00<00:00, 28.10it/s]100%|##########| 26/26 [00:01<00:00, 29.08it/s]100%|##########| 26/26 [00:01<00:00, 24.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 200
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 200
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 200
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 200
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 200
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 200
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 200
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 200
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 200
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 200
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 200
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 200
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 200
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 200
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 200
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 200
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 200
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 200
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 200
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 200
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 200
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 200
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 200
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 200
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 200
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 200
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
final projection at end of training
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.68 (  0.68)	train_acc   0.60 (  0.54)	train_minacc   0.47 (  0.46)	train_majacc   0.62 (  0.55)	train_corr   0.00 (  0.00)	l1 5.4931 (5.5010)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.01it/s] 27%|##6       | 7/26 [00:00<00:00, 32.94it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.94it/s] 46%|####6     | 12/26 [00:00<00:00, 38.54it/s] 65%|######5   | 17/26 [00:00<00:00, 41.92it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.92it/s] 85%|########4 | 22/26 [00:00<00:00, 39.63it/s]100%|##########| 26/26 [00:00<00:00, 35.29it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.58 (  0.58)	test_minacc   0.32 (  0.32)	test_majacc   0.62 (  0.62)	Loss_d 0.692 (0.692)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.13 (  0.13)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.61 (  0.59)	test_minacc   0.55 (  0.40)	test_majacc   0.61 (  0.62)	Loss_d 0.691 (0.692)	test_acc_d   0.61 (  0.59)	test_minacc_d   0.55 (  0.40)	test_majacc_d   0.61 (  0.62)	test_corr_d   0.11 (  0.16)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.60 (  0.59)	test_minacc   0.36 (  0.41)	test_majacc   0.65 (  0.62)	Loss_d 0.691 (0.692)	test_acc_d   0.60 (  0.59)	test_minacc_d   0.36 (  0.41)	test_majacc_d   0.65 (  0.62)	test_corr_d   0.16 (  0.16)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.60 (  0.59)	test_minacc   0.47 (  0.41)	test_majacc   0.62 (  0.62)	Loss_d 0.692 (0.692)	test_acc_d   0.60 (  0.59)	test_minacc_d   0.47 (  0.41)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.16 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.07it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.03 (  0.03)
Overall Timing[ 26/  1]	epoch_time 0.0431 (0.0449)	validation_time 0.0004 (0.0006)	train_time 0.0427 (0.0442)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.5864000107049943, 0.44300001859664917)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.95it/s] 15%|#5        | 4/26 [00:00<00:01, 19.53it/s] 27%|##6       | 7/26 [00:00<00:00, 23.32it/s] 38%|###8      | 10/26 [00:00<00:00, 25.03it/s] 50%|#####     | 13/26 [00:00<00:00, 25.67it/s] 65%|######5   | 17/26 [00:00<00:00, 28.17it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.03it/s] 88%|########8 | 23/26 [00:00<00:00, 28.26it/s]100%|##########| 26/26 [00:01<00:00, 24.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 200
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 200
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 200
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 200
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 200
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 200
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 200
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 200
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 200
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 200
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 200
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 200
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 200
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 200
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 200
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 200
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 200
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 200
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 200
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 200
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 200
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 200
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 200
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 200
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 200
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 200
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
final projection at end of training
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.67 (  0.68)	train_acc   0.62 (  0.57)	train_minacc   0.47 (  0.44)	train_majacc   0.65 (  0.59)	train_corr   0.00 (  0.00)	l1 5.4874 (5.4921)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.36it/s] 15%|#5        | 4/26 [00:00<00:01, 19.66it/s] 35%|###4      | 9/26 [00:00<00:00, 31.31it/s]                                               35%|###4      | 9/26 [00:00<00:00, 31.31it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.79it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.99it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.99it/s] 96%|#########6| 25/26 [00:00<00:00, 41.67it/s]100%|##########| 26/26 [00:00<00:00, 34.37it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.58 (  0.58)	test_minacc   0.31 (  0.31)	test_majacc   0.63 (  0.63)	Loss_d 0.692 (0.692)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.62 (  0.60)	test_minacc   0.55 (  0.40)	test_majacc   0.64 (  0.63)	Loss_d 0.691 (0.692)	test_acc_d   0.62 (  0.60)	test_minacc_d   0.55 (  0.40)	test_majacc_d   0.64 (  0.63)	test_corr_d   0.06 (  0.10)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.61 (  0.60)	test_minacc   0.37 (  0.40)	test_majacc   0.66 (  0.63)	Loss_d 0.692 (0.692)	test_acc_d   0.61 (  0.60)	test_minacc_d   0.37 (  0.40)	test_majacc_d   0.66 (  0.63)	test_corr_d   0.10 (  0.11)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.63 (  0.60)	test_minacc   0.44 (  0.41)	test_majacc   0.66 (  0.63)	Loss_d 0.692 (0.692)	test_acc_d   0.63 (  0.60)	test_minacc_d   0.44 (  0.41)	test_majacc_d   0.66 (  0.63)	test_corr_d   0.10 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.12it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 27/  1]	epoch_time 0.0421 (0.0448)	validation_time 0.0003 (0.0006)	train_time 0.0418 (0.0441)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.5968000112175942, 0.4400000274181366)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.69it/s] 19%|#9        | 5/26 [00:00<00:01, 19.87it/s] 31%|###       | 8/26 [00:00<00:00, 22.91it/s] 42%|####2     | 11/26 [00:00<00:00, 24.61it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.33it/s] 65%|######5   | 17/26 [00:00<00:00, 25.72it/s] 77%|#######6  | 20/26 [00:00<00:00, 26.99it/s] 88%|########8 | 23/26 [00:00<00:00, 27.64it/s]100%|##########| 26/26 [00:01<00:00, 24.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 200
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 200
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 200
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 200
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 200
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 200
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 200
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 200
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 200
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 200
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 200
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 200
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 200
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 200
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 200
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 200
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 200
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 200
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 200
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 200
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 200
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 200
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 200
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 200
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 200
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 200
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
final projection at end of training
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.67 (  0.67)	train_acc   0.64 (  0.58)	train_minacc   0.56 (  0.43)	train_majacc   0.65 (  0.61)	train_corr   0.00 (  0.00)	l1 5.4836 (5.4868)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.23it/s] 23%|##3       | 6/26 [00:00<00:00, 21.72it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.72it/s] 42%|####2     | 11/26 [00:00<00:00, 30.56it/s] 62%|######1   | 16/26 [00:00<00:00, 35.96it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.96it/s] 81%|########  | 21/26 [00:00<00:00, 38.72it/s]100%|##########| 26/26 [00:00<00:00, 41.39it/s]100%|##########| 26/26 [00:00<00:00, 31.70it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.31 (  0.31)	test_majacc   0.62 (  0.62)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.63 (  0.60)	test_minacc   0.57 (  0.40)	test_majacc   0.64 (  0.63)	Loss_d 0.692 (0.692)	test_acc_d   0.63 (  0.60)	test_minacc_d   0.57 (  0.40)	test_majacc_d   0.64 (  0.63)	test_corr_d   0.03 (  0.07)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.62 (  0.60)	test_minacc   0.39 (  0.41)	test_majacc   0.66 (  0.63)	Loss_d 0.692 (0.692)	test_acc_d   0.62 (  0.60)	test_minacc_d   0.39 (  0.41)	test_majacc_d   0.66 (  0.63)	test_corr_d   0.08 (  0.08)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.64 (  0.60)	test_minacc   0.53 (  0.42)	test_majacc   0.66 (  0.63)	Loss_d 0.693 (0.692)	test_acc_d   0.64 (  0.60)	test_minacc_d   0.53 (  0.42)	test_majacc_d   0.66 (  0.63)	test_corr_d   0.07 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.41it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.58 (  0.58)	Loss_d 0.692 (0.692)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.58 (  0.58)	Loss_d 0.692 (0.692)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 28/  1]	epoch_time 0.0434 (0.0448)	validation_time 0.0004 (0.0006)	train_time 0.0430 (0.0440)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.6006000034809112, 0.4410000145435333)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.17it/s] 15%|#5        | 4/26 [00:00<00:01, 11.08it/s] 27%|##6       | 7/26 [00:00<00:01, 16.48it/s] 38%|###8      | 10/26 [00:00<00:00, 20.12it/s] 50%|#####     | 13/26 [00:00<00:00, 22.94it/s] 62%|######1   | 16/26 [00:00<00:00, 24.50it/s] 73%|#######3  | 19/26 [00:00<00:00, 25.82it/s] 88%|########8 | 23/26 [00:01<00:00, 27.47it/s]100%|##########| 26/26 [00:01<00:00, 20.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 200
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 200
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 200
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 200
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 200
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 200
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 200
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 200
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 200
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 200
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 200
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 200
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 200
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 200
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 200
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 200
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 200
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 200
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 200
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 200
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 200
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 200
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 200
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 200
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 200
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 200
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
final projection at end of training
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.67 (  0.67)	train_acc   0.62 (  0.59)	train_minacc   0.56 (  0.43)	train_majacc   0.64 (  0.62)	train_corr   0.00 (  0.00)	l1 5.4808 (5.4831)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:03,  6.79it/s] 27%|##6       | 7/26 [00:00<00:00, 20.09it/s]                                               27%|##6       | 7/26 [00:00<00:00, 20.09it/s] 46%|####6     | 12/26 [00:00<00:00, 28.78it/s] 65%|######5   | 17/26 [00:00<00:00, 33.62it/s]                                                65%|######5   | 17/26 [00:00<00:00, 33.62it/s] 85%|########4 | 22/26 [00:00<00:00, 35.45it/s]100%|##########| 26/26 [00:00<00:00, 29.61it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.32 (  0.32)	test_majacc   0.62 (  0.62)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.62 (  0.60)	test_minacc   0.55 (  0.41)	test_majacc   0.63 (  0.63)	Loss_d 0.692 (0.693)	test_acc_d   0.62 (  0.60)	test_minacc_d   0.55 (  0.41)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.01 (  0.06)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.62 (  0.60)	test_minacc   0.37 (  0.41)	test_majacc   0.66 (  0.64)	Loss_d 0.692 (0.693)	test_acc_d   0.62 (  0.60)	test_minacc_d   0.37 (  0.41)	test_majacc_d   0.66 (  0.64)	test_corr_d   0.06 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.62 (  0.60)	test_minacc   0.47 (  0.42)	test_majacc   0.64 (  0.64)	Loss_d 0.693 (0.693)	test_acc_d   0.62 (  0.60)	test_minacc_d   0.47 (  0.42)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.05 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.57it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.45 (  0.45)	test_minacc   0.43 (  0.43)	test_majacc   0.58 (  0.58)	Loss_d 0.692 (0.692)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.45 (  0.45)	test_minacc   0.43 (  0.43)	test_majacc   0.58 (  0.58)	Loss_d 0.692 (0.692)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 29/  1]	epoch_time 0.0469 (0.0449)	validation_time 0.0004 (0.0006)	train_time 0.0465 (0.0441)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.6027000139355659, 0.4490000307559967)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.35it/s] 15%|#5        | 4/26 [00:00<00:01, 18.72it/s] 31%|###       | 8/26 [00:00<00:00, 24.47it/s] 46%|####6     | 12/26 [00:00<00:00, 27.01it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.50it/s] 69%|######9   | 18/26 [00:00<00:00, 28.18it/s] 85%|########4 | 22/26 [00:00<00:00, 29.21it/s] 96%|#########6| 25/26 [00:00<00:00, 29.33it/s]100%|##########| 26/26 [00:01<00:00, 25.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 200
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 200
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 200
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 200
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 200
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 200
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 200
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 200
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 200
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 200
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 200
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 200
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 200
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 200
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 200
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 200
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 200
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 200
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 200
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 200
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 200
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 200
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 200
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 200
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 200
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 200
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.67 (  0.67)	train_acc   0.60 (  0.59)	train_minacc   0.50 (  0.43)	train_majacc   0.61 (  0.62)	train_corr   0.00 (  0.00)	l1 5.4785 (5.4803)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.38it/s] 19%|#9        | 5/26 [00:00<00:01, 19.39it/s] 38%|###8      | 10/26 [00:00<00:00, 27.78it/s]                                                38%|###8      | 10/26 [00:00<00:00, 27.78it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.83it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.17it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 38.17it/s] 96%|#########6| 25/26 [00:00<00:00, 40.44it/s]100%|##########| 26/26 [00:00<00:00, 31.33it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.34 (  0.34)	test_majacc   0.63 (  0.63)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.63 (  0.60)	test_minacc   0.53 (  0.41)	test_majacc   0.64 (  0.63)	Loss_d 0.692 (0.693)	test_acc_d   0.63 (  0.60)	test_minacc_d   0.53 (  0.41)	test_majacc_d   0.64 (  0.63)	test_corr_d  -0.00 (  0.05)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.62 (  0.60)	test_minacc   0.37 (  0.42)	test_majacc   0.67 (  0.64)	Loss_d 0.692 (0.693)	test_acc_d   0.62 (  0.60)	test_minacc_d   0.37 (  0.42)	test_majacc_d   0.67 (  0.64)	test_corr_d   0.06 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.60 (  0.60)	test_minacc   0.50 (  0.42)	test_majacc   0.61 (  0.64)	Loss_d 0.693 (0.693)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.50 (  0.42)	test_majacc_d   0.61 (  0.64)	test_corr_d   0.03 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.70it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.45 (  0.45)	test_minacc   0.43 (  0.43)	test_majacc   0.59 (  0.59)	Loss_d 0.692 (0.692)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.45 (  0.45)	test_minacc   0.43 (  0.43)	test_majacc   0.59 (  0.59)	Loss_d 0.692 (0.692)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 30/  1]	epoch_time 0.0436 (0.0448)	validation_time 0.0003 (0.0006)	train_time 0.0433 (0.0441)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.6040000106096268, 0.4480000138282776)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.72it/s] 15%|#5        | 4/26 [00:00<00:01, 17.72it/s] 31%|###       | 8/26 [00:00<00:00, 23.91it/s] 46%|####6     | 12/26 [00:00<00:00, 26.95it/s] 62%|######1   | 16/26 [00:00<00:00, 28.55it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.88it/s] 85%|########4 | 22/26 [00:00<00:00, 29.04it/s] 96%|#########6| 25/26 [00:00<00:00, 28.98it/s]100%|##########| 26/26 [00:01<00:00, 25.08it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 200
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 200
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 200
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 200
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 200
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 200
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 200
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 200
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 200
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 200
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 200
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 200
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 200
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 200
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 200
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 200
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 200
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 200
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 200
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 200
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 200
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 200
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 200
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 200
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 200
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 200
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
final projection at end of training
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.67 (  0.67)	train_acc   0.58 (  0.59)	train_minacc   0.56 (  0.43)	train_majacc   0.58 (  0.62)	train_corr   0.00 (  0.00)	l1 5.4766 (5.4780)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.86it/s] 23%|##3       | 6/26 [00:00<00:01, 16.19it/s]                                               23%|##3       | 6/26 [00:00<00:01, 16.19it/s] 42%|####2     | 11/26 [00:00<00:00, 25.65it/s] 62%|######1   | 16/26 [00:00<00:00, 32.09it/s]                                                62%|######1   | 16/26 [00:00<00:00, 32.09it/s] 81%|########  | 21/26 [00:00<00:00, 33.02it/s]100%|##########| 26/26 [00:00<00:00, 37.18it/s]100%|##########| 26/26 [00:00<00:00, 26.56it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.34 (  0.34)	test_majacc   0.63 (  0.63)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.63 (  0.60)	test_minacc   0.55 (  0.42)	test_majacc   0.64 (  0.63)	Loss_d 0.692 (0.693)	test_acc_d   0.63 (  0.60)	test_minacc_d   0.55 (  0.42)	test_majacc_d   0.64 (  0.63)	test_corr_d  -0.01 (  0.04)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.62 (  0.60)	test_minacc   0.37 (  0.43)	test_majacc   0.66 (  0.63)	Loss_d 0.692 (0.693)	test_acc_d   0.62 (  0.60)	test_minacc_d   0.37 (  0.43)	test_majacc_d   0.66 (  0.63)	test_corr_d   0.05 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.59 (  0.60)	test_minacc   0.56 (  0.43)	test_majacc   0.59 (  0.63)	Loss_d 0.693 (0.693)	test_acc_d   0.59 (  0.60)	test_minacc_d   0.56 (  0.43)	test_majacc_d   0.59 (  0.63)	test_corr_d   0.02 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.83it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.58 (  0.58)	Loss_d 0.692 (0.692)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.58 (  0.58)	Loss_d 0.692 (0.692)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 31/  1]	epoch_time 0.0449 (0.0448)	validation_time 0.0004 (0.0006)	train_time 0.0445 (0.0441)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.6039000136852264, 0.45100003480911255)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 21.77it/s] 23%|##3       | 6/26 [00:00<00:00, 25.69it/s] 35%|###4      | 9/26 [00:00<00:00, 25.94it/s] 46%|####6     | 12/26 [00:00<00:00, 26.87it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.81it/s] 69%|######9   | 18/26 [00:00<00:00, 26.24it/s] 81%|########  | 21/26 [00:00<00:00, 26.93it/s] 92%|#########2| 24/26 [00:00<00:00, 27.69it/s]100%|##########| 26/26 [00:01<00:00, 25.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 200
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 200
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 200
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 200
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 200
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 200
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 200
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 200
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 200
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 200
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 200
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 200
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 200
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 200
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 200
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 200
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 200
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 200
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 200
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 200
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 200
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 200
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 200
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 200
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 200
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 200
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
final projection at end of training
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.66 (  0.67)	train_acc   0.52 (  0.59)	train_minacc   0.56 (  0.44)	train_majacc   0.52 (  0.62)	train_corr   0.00 (  0.00)	l1 5.4750 (5.4761)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.19it/s] 23%|##3       | 6/26 [00:00<00:00, 29.84it/s] 38%|###8      | 10/26 [00:00<00:00, 33.61it/s]                                                38%|###8      | 10/26 [00:00<00:00, 33.61it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.73it/s] 77%|#######6  | 20/26 [00:00<00:00, 41.37it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 41.37it/s] 96%|#########6| 25/26 [00:00<00:00, 39.11it/s]100%|##########| 26/26 [00:00<00:00, 33.99it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.59 (  0.59)	test_minacc   0.37 (  0.37)	test_majacc   0.63 (  0.63)	Loss_d 0.693 (0.693)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.63 (  0.60)	test_minacc   0.55 (  0.43)	test_majacc   0.65 (  0.63)	Loss_d 0.692 (0.693)	test_acc_d   0.63 (  0.60)	test_minacc_d   0.55 (  0.43)	test_majacc_d   0.65 (  0.63)	test_corr_d  -0.02 (  0.03)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.61 (  0.60)	test_minacc   0.37 (  0.43)	test_majacc   0.66 (  0.63)	Loss_d 0.692 (0.693)	test_acc_d   0.61 (  0.60)	test_minacc_d   0.37 (  0.43)	test_majacc_d   0.66 (  0.63)	test_corr_d   0.05 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.60)	test_minacc   0.56 (  0.43)	test_majacc   0.53 (  0.63)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.60)	test_minacc_d   0.56 (  0.43)	test_majacc_d   0.53 (  0.63)	test_corr_d   0.01 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.17it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.60 (  0.60)	Loss_d 0.692 (0.692)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.60 (  0.60)	Loss_d 0.692 (0.692)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 32/  1]	epoch_time 0.0508 (0.0450)	validation_time 0.0004 (0.0006)	train_time 0.0504 (0.0443)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.6005000106692314, 0.4540000259876251)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.87it/s] 15%|#5        | 4/26 [00:00<00:01, 19.19it/s] 27%|##6       | 7/26 [00:00<00:00, 23.47it/s] 42%|####2     | 11/26 [00:00<00:00, 26.28it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.64it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.52it/s] 85%|########4 | 22/26 [00:00<00:00, 28.70it/s] 96%|#########6| 25/26 [00:00<00:00, 28.72it/s]100%|##########| 26/26 [00:01<00:00, 25.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 200
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 200
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 200
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 200
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 200
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 200
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 200
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 200
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 200
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 200
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 200
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 200
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 200
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 200
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 200
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 200
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 200
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 200
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 200
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 200
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 200
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 200
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 200
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 200
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 200
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 200
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
final projection at end of training
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.66 (  0.66)	train_acc   0.48 (  0.59)	train_minacc   0.56 (  0.44)	train_majacc   0.47 (  0.61)	train_corr   0.00 (  0.00)	l1 5.4736 (5.4746)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.61it/s] 23%|##3       | 6/26 [00:00<00:00, 31.24it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.24it/s] 42%|####2     | 11/26 [00:00<00:00, 36.65it/s] 62%|######1   | 16/26 [00:00<00:00, 41.16it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.16it/s] 81%|########  | 21/26 [00:00<00:00, 38.47it/s]100%|##########| 26/26 [00:00<00:00, 41.65it/s]100%|##########| 26/26 [00:00<00:00, 34.42it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.59 (  0.59)	test_minacc   0.37 (  0.37)	test_majacc   0.63 (  0.63)	Loss_d 0.693 (0.693)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.62 (  0.59)	test_minacc   0.55 (  0.43)	test_majacc   0.63 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.62 (  0.59)	test_minacc_d   0.55 (  0.43)	test_majacc_d   0.63 (  0.61)	test_corr_d  -0.02 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.62 (  0.59)	test_minacc   0.37 (  0.43)	test_majacc   0.66 (  0.62)	Loss_d 0.693 (0.693)	test_acc_d   0.62 (  0.59)	test_minacc_d   0.37 (  0.43)	test_majacc_d   0.66 (  0.62)	test_corr_d   0.05 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.59)	test_minacc   0.53 (  0.44)	test_majacc   0.50 (  0.62)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.59)	test_minacc_d   0.53 (  0.44)	test_majacc_d   0.50 (  0.62)	test_corr_d  -0.00 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.28it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.59 (  0.59)	Loss_d 0.692 (0.692)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.59 (  0.59)	Loss_d 0.692 (0.692)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 33/  1]	epoch_time 0.0473 (0.0451)	validation_time 0.0004 (0.0006)	train_time 0.0469 (0.0444)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.5928000111579895, 0.4580000340938568)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.70it/s] 15%|#5        | 4/26 [00:00<00:01, 21.30it/s] 27%|##6       | 7/26 [00:00<00:00, 24.62it/s] 38%|###8      | 10/26 [00:00<00:00, 25.72it/s] 50%|#####     | 13/26 [00:00<00:00, 26.66it/s] 62%|######1   | 16/26 [00:00<00:00, 27.56it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.90it/s] 85%|########4 | 22/26 [00:00<00:00, 28.22it/s] 96%|#########6| 25/26 [00:00<00:00, 28.67it/s]100%|##########| 26/26 [00:01<00:00, 25.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 200
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 200
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 200
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 200
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 200
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 200
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 200
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 200
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 200
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 200
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 200
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 200
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 200
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 200
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 200
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 200
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 200
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 200
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 200
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 200
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 200
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 200
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 200
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 200
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 200
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 200
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
final projection at end of training
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.66 (  0.66)	train_acc   0.43 (  0.58)	train_minacc   0.53 (  0.44)	train_majacc   0.42 (  0.60)	train_corr   0.00 (  0.00)	l1 5.4725 (5.4732)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 11.90it/s] 27%|##6       | 7/26 [00:00<00:00, 27.78it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.78it/s] 46%|####6     | 12/26 [00:00<00:00, 35.30it/s] 65%|######5   | 17/26 [00:00<00:00, 38.91it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.91it/s] 85%|########4 | 22/26 [00:00<00:00, 38.49it/s]100%|##########| 26/26 [00:00<00:00, 34.04it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.59 (  0.59)	test_minacc   0.37 (  0.37)	test_majacc   0.63 (  0.63)	Loss_d 0.693 (0.693)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.61 (  0.58)	test_minacc   0.55 (  0.43)	test_majacc   0.62 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.61 (  0.58)	test_minacc_d   0.55 (  0.43)	test_majacc_d   0.62 (  0.60)	test_corr_d  -0.03 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.61 (  0.58)	test_minacc   0.36 (  0.44)	test_majacc   0.66 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.61 (  0.58)	test_minacc_d   0.36 (  0.44)	test_majacc_d   0.66 (  0.61)	test_corr_d   0.04 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.58)	test_minacc   0.53 (  0.44)	test_majacc   0.43 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.58)	test_minacc_d   0.53 (  0.44)	test_majacc_d   0.43 (  0.61)	test_corr_d  -0.01 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.34it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.60 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.60 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 34/  1]	epoch_time 0.0442 (0.0451)	validation_time 0.0004 (0.0006)	train_time 0.0438 (0.0444)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.5826000096201897, 0.46300002932548523)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.51it/s]  8%|7         | 2/26 [00:00<00:03,  7.32it/s] 12%|#1        | 3/26 [00:00<00:02,  8.21it/s] 23%|##3       | 6/26 [00:00<00:01, 15.72it/s] 35%|###4      | 9/26 [00:00<00:00, 18.82it/s] 50%|#####     | 13/26 [00:00<00:00, 22.90it/s] 62%|######1   | 16/26 [00:00<00:00, 24.67it/s] 73%|#######3  | 19/26 [00:00<00:00, 25.48it/s] 85%|########4 | 22/26 [00:01<00:00, 26.68it/s] 96%|#########6| 25/26 [00:01<00:00, 27.26it/s]100%|##########| 26/26 [00:01<00:00, 20.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 200
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 200
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 200
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 200
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 200
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 200
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 200
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 200
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 200
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 200
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 200
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 200
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 200
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 200
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 200
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 200
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 200
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 200
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 200
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 200
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 200
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 200
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 200
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 200
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 200
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 200
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.66 (  0.66)	train_acc   0.42 (  0.57)	train_minacc   0.53 (  0.45)	train_majacc   0.40 (  0.59)	train_corr   0.00 (  0.00)	l1 5.4715 (5.4721)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.40it/s] 23%|##3       | 6/26 [00:00<00:00, 24.69it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.69it/s] 42%|####2     | 11/26 [00:00<00:00, 33.05it/s] 62%|######1   | 16/26 [00:00<00:00, 37.68it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.68it/s] 81%|########  | 21/26 [00:00<00:00, 37.19it/s]100%|##########| 26/26 [00:00<00:00, 40.45it/s]100%|##########| 26/26 [00:00<00:00, 32.28it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.59 (  0.59)	test_minacc   0.37 (  0.37)	test_majacc   0.63 (  0.63)	Loss_d 0.693 (0.693)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.61 (  0.57)	test_minacc   0.57 (  0.45)	test_majacc   0.62 (  0.59)	Loss_d 0.693 (0.693)	test_acc_d   0.61 (  0.57)	test_minacc_d   0.57 (  0.45)	test_majacc_d   0.62 (  0.59)	test_corr_d  -0.03 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.61 (  0.57)	test_minacc   0.36 (  0.45)	test_majacc   0.66 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.61 (  0.57)	test_minacc_d   0.36 (  0.45)	test_majacc_d   0.66 (  0.60)	test_corr_d   0.04 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.58)	test_minacc   0.53 (  0.45)	test_majacc   0.41 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.58)	test_minacc_d   0.53 (  0.45)	test_majacc_d   0.41 (  0.60)	test_corr_d  -0.01 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.99it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.45 (  0.45)	test_majacc   0.61 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.45 (  0.45)	test_majacc   0.61 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 35/  1]	epoch_time 0.0448 (0.0450)	validation_time 0.0004 (0.0006)	train_time 0.0444 (0.0444)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.5753000134527684, 0.46800002455711365)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.99it/s] 15%|#5        | 4/26 [00:00<00:01, 15.89it/s] 27%|##6       | 7/26 [00:00<00:00, 20.81it/s] 38%|###8      | 10/26 [00:00<00:00, 23.91it/s] 50%|#####     | 13/26 [00:00<00:00, 25.57it/s] 62%|######1   | 16/26 [00:00<00:00, 26.89it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.65it/s] 88%|########8 | 23/26 [00:00<00:00, 28.64it/s]100%|##########| 26/26 [00:01<00:00, 24.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 200
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 200
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 200
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 200
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 200
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 200
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 200
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 200
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 200
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 200
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 200
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 200
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 200
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 200
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 200
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 200
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 200
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 200
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 200
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 200
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 200
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 200
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 200
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 200
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 200
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 200
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
final projection at end of training
dim_v 512
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.66 (  0.66)	train_acc   0.41 (  0.56)	train_minacc   0.56 (  0.46)	train_majacc   0.39 (  0.58)	train_corr   0.00 (  0.00)	l1 5.4707 (5.4711)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.04it/s] 23%|##3       | 6/26 [00:00<00:00, 25.67it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.67it/s] 42%|####2     | 11/26 [00:00<00:00, 33.64it/s] 62%|######1   | 16/26 [00:00<00:00, 37.91it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.91it/s] 81%|########  | 21/26 [00:00<00:00, 37.34it/s]100%|##########| 26/26 [00:00<00:00, 40.55it/s]100%|##########| 26/26 [00:00<00:00, 32.69it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.39 (  0.39)	test_majacc   0.62 (  0.62)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.59 (  0.56)	test_minacc   0.57 (  0.47)	test_majacc   0.59 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.59 (  0.56)	test_minacc_d   0.57 (  0.47)	test_majacc_d   0.59 (  0.57)	test_corr_d  -0.04 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.61 (  0.56)	test_minacc   0.37 (  0.46)	test_majacc   0.65 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.61 (  0.56)	test_minacc_d   0.37 (  0.46)	test_majacc_d   0.65 (  0.58)	test_corr_d   0.04 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.57)	test_minacc   0.56 (  0.46)	test_majacc   0.39 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.57)	test_minacc_d   0.56 (  0.46)	test_majacc_d   0.39 (  0.58)	test_corr_d  -0.02 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.05it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.45 (  0.45)	test_majacc   0.61 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.45 (  0.45)	test_majacc   0.61 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 36/  1]	epoch_time 0.0401 (0.0449)	validation_time 0.0004 (0.0006)	train_time 0.0397 (0.0442)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.5661000066101551, 0.4660000205039978)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.13it/s] 15%|#5        | 4/26 [00:00<00:01, 16.79it/s] 27%|##6       | 7/26 [00:00<00:00, 21.30it/s] 38%|###8      | 10/26 [00:00<00:00, 23.85it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.75it/s] 65%|######5   | 17/26 [00:00<00:00, 27.70it/s] 81%|########  | 21/26 [00:00<00:00, 28.56it/s] 96%|#########6| 25/26 [00:00<00:00, 29.01it/s]100%|##########| 26/26 [00:01<00:00, 23.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 200
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 200
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 200
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 200
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 200
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 200
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 200
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 200
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 200
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 200
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 200
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 200
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 200
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 200
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 200
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 200
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 200
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 200
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 200
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 200
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 200
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 200
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 200
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 200
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 200
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 200
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
final projection at end of training
dim_v 512
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.65 (  0.66)	train_acc   0.39 (  0.56)	train_minacc   0.56 (  0.47)	train_majacc   0.36 (  0.57)	train_corr   0.00 (  0.00)	l1 5.4699 (5.4703)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.48it/s] 27%|##6       | 7/26 [00:00<00:00, 21.30it/s]                                               27%|##6       | 7/26 [00:00<00:00, 21.30it/s] 46%|####6     | 12/26 [00:00<00:00, 29.12it/s] 65%|######5   | 17/26 [00:00<00:00, 34.49it/s]                                                65%|######5   | 17/26 [00:00<00:00, 34.49it/s] 85%|########4 | 22/26 [00:00<00:00, 38.14it/s]100%|##########| 26/26 [00:00<00:00, 29.51it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.39 (  0.39)	test_majacc   0.61 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.59 (  0.55)	test_minacc   0.58 (  0.47)	test_majacc   0.59 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.59 (  0.55)	test_minacc_d   0.58 (  0.47)	test_majacc_d   0.59 (  0.56)	test_corr_d  -0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.62 (  0.56)	test_minacc   0.37 (  0.47)	test_majacc   0.66 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.62 (  0.56)	test_minacc_d   0.37 (  0.47)	test_majacc_d   0.66 (  0.57)	test_corr_d   0.04 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.40 (  0.56)	test_minacc   0.53 (  0.46)	test_majacc   0.37 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.40 (  0.56)	test_minacc_d   0.53 (  0.46)	test_majacc_d   0.37 (  0.57)	test_corr_d  -0.02 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.48it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.45 (  0.45)	test_majacc   0.61 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.45 (  0.45)	test_majacc   0.61 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 37/  1]	epoch_time 0.0424 (0.0448)	validation_time 0.0004 (0.0005)	train_time 0.0420 (0.0442)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.5582000145018101, 0.4660000205039978)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.99it/s] 15%|#5        | 4/26 [00:00<00:01, 19.44it/s] 27%|##6       | 7/26 [00:00<00:00, 22.40it/s] 42%|####2     | 11/26 [00:00<00:00, 25.75it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.62it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.49it/s] 88%|########8 | 23/26 [00:00<00:00, 29.17it/s]100%|##########| 26/26 [00:01<00:00, 24.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 200
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 200
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 200
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 200
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 200
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 200
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 200
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 200
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 200
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 200
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 200
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 200
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 200
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 200
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 200
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 200
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 200
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 200
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 200
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 200
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 200
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 200
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 200
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 200
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 200
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 200
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
final projection at end of training
dim_v 512
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.65 (  0.65)	train_acc   0.39 (  0.55)	train_minacc   0.53 (  0.47)	train_majacc   0.36 (  0.56)	train_corr   0.00 (  0.00)	l1 5.4693 (5.4696)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.90it/s] 12%|#1        | 3/26 [00:00<00:01, 14.41it/s] 31%|###       | 8/26 [00:00<00:00, 29.13it/s]                                               31%|###       | 8/26 [00:00<00:00, 29.13it/s] 50%|#####     | 13/26 [00:00<00:00, 36.11it/s] 69%|######9   | 18/26 [00:00<00:00, 36.62it/s]                                                69%|######9   | 18/26 [00:00<00:00, 36.62it/s] 88%|########8 | 23/26 [00:00<00:00, 39.23it/s]100%|##########| 26/26 [00:00<00:00, 33.03it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.39 (  0.39)	test_majacc   0.61 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.59 (  0.54)	test_minacc   0.58 (  0.49)	test_majacc   0.59 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.59 (  0.54)	test_minacc_d   0.58 (  0.49)	test_majacc_d   0.59 (  0.55)	test_corr_d  -0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.61 (  0.55)	test_minacc   0.37 (  0.47)	test_majacc   0.65 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.61 (  0.55)	test_minacc_d   0.37 (  0.47)	test_majacc_d   0.65 (  0.56)	test_corr_d   0.04 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.40 (  0.55)	test_minacc   0.53 (  0.47)	test_majacc   0.38 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.40 (  0.55)	test_minacc_d   0.53 (  0.47)	test_majacc_d   0.38 (  0.57)	test_corr_d  -0.02 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.91it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.60 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.60 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 38/  1]	epoch_time 0.0414 (0.0448)	validation_time 0.0003 (0.0005)	train_time 0.0411 (0.0441)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.551700007379055, 0.4700000286102295)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.79it/s] 15%|#5        | 4/26 [00:00<00:01, 18.64it/s] 27%|##6       | 7/26 [00:00<00:00, 22.39it/s] 38%|###8      | 10/26 [00:00<00:00, 24.91it/s] 50%|#####     | 13/26 [00:00<00:00, 26.01it/s] 62%|######1   | 16/26 [00:00<00:00, 27.00it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.67it/s] 85%|########4 | 22/26 [00:00<00:00, 28.28it/s] 96%|#########6| 25/26 [00:00<00:00, 28.54it/s]100%|##########| 26/26 [00:01<00:00, 24.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 200
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 200
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 200
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 200
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 200
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 200
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 200
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 200
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 200
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 200
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 200
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 200
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 200
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 200
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 200
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 200
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 200
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 200
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 200
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 200
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 200
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 200
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 200
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 200
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 200
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 200
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
final projection at end of training
dim_v 512
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.65 (  0.65)	train_acc   0.37 (  0.54)	train_minacc   0.53 (  0.48)	train_majacc   0.34 (  0.55)	train_corr   0.00 (  0.00)	l1 5.4687 (5.4690)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.46it/s] 23%|##3       | 6/26 [00:00<00:00, 24.30it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.30it/s] 42%|####2     | 11/26 [00:00<00:00, 33.00it/s] 62%|######1   | 16/26 [00:00<00:00, 38.34it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.34it/s] 81%|########  | 21/26 [00:00<00:00, 37.51it/s]100%|##########| 26/26 [00:00<00:00, 40.46it/s]100%|##########| 26/26 [00:00<00:00, 31.91it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.39 (  0.39)	test_majacc   0.60 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.58 (  0.53)	test_minacc   0.58 (  0.49)	test_majacc   0.58 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.53)	test_minacc_d   0.58 (  0.49)	test_majacc_d   0.58 (  0.54)	test_corr_d  -0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.61 (  0.54)	test_minacc   0.39 (  0.48)	test_majacc   0.65 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.61 (  0.54)	test_minacc_d   0.39 (  0.48)	test_majacc_d   0.65 (  0.55)	test_corr_d   0.03 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.38 (  0.54)	test_minacc   0.53 (  0.47)	test_majacc   0.36 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.38 (  0.54)	test_minacc_d   0.53 (  0.47)	test_majacc_d   0.36 (  0.56)	test_corr_d  -0.02 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.87it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.45 (  0.45)	test_majacc   0.60 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.45 (  0.45)	test_majacc   0.60 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 39/  1]	epoch_time 0.0410 (0.0447)	validation_time 0.0004 (0.0005)	train_time 0.0406 (0.0440)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.5437000071406365, 0.4690000116825104)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.29it/s] 19%|#9        | 5/26 [00:00<00:01, 15.86it/s] 35%|###4      | 9/26 [00:00<00:00, 21.51it/s] 50%|#####     | 13/26 [00:00<00:00, 24.61it/s] 65%|######5   | 17/26 [00:00<00:00, 26.70it/s] 81%|########  | 21/26 [00:00<00:00, 28.06it/s] 96%|#########6| 25/26 [00:01<00:00, 28.97it/s]100%|##########| 26/26 [00:01<00:00, 23.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 200
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 200
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 200
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 200
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 200
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 200
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 200
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 200
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 200
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 200
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 200
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 200
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 200
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 200
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 200
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 200
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 200
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 200
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 200
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 200
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 200
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 200
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 200
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 200
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 200
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 200
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.65 (  0.65)	train_acc   0.37 (  0.54)	train_minacc   0.53 (  0.48)	train_majacc   0.34 (  0.55)	train_corr   0.00 (  0.00)	l1 5.4682 (5.4684)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.56it/s] 12%|#1        | 3/26 [00:00<00:02, 10.12it/s] 35%|###4      | 9/26 [00:00<00:00, 26.14it/s]                                               35%|###4      | 9/26 [00:00<00:00, 26.14it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.98it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.47it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 35.47it/s] 92%|#########2| 24/26 [00:00<00:00, 39.24it/s]100%|##########| 26/26 [00:00<00:00, 29.27it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.39 (  0.39)	test_majacc   0.60 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.58 (  0.53)	test_minacc   0.58 (  0.50)	test_majacc   0.58 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.53)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.58 (  0.54)	test_corr_d  -0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.61 (  0.54)	test_minacc   0.39 (  0.49)	test_majacc   0.65 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.61 (  0.54)	test_minacc_d   0.39 (  0.49)	test_majacc_d   0.65 (  0.55)	test_corr_d   0.03 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.37 (  0.54)	test_minacc   0.53 (  0.48)	test_majacc   0.35 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.37 (  0.54)	test_minacc_d   0.53 (  0.48)	test_majacc_d   0.35 (  0.55)	test_corr_d  -0.02 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.06it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.60 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.60 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 40/  1]	epoch_time 0.0404 (0.0446)	validation_time 0.0004 (0.0005)	train_time 0.0401 (0.0439)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.5405000104010105, 0.4740000367164612)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.60it/s] 19%|#9        | 5/26 [00:00<00:01, 20.17it/s] 31%|###       | 8/26 [00:00<00:00, 23.47it/s] 42%|####2     | 11/26 [00:00<00:00, 25.41it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.70it/s] 69%|######9   | 18/26 [00:00<00:00, 28.35it/s] 85%|########4 | 22/26 [00:00<00:00, 29.06it/s] 96%|#########6| 25/26 [00:00<00:00, 29.28it/s]100%|##########| 26/26 [00:01<00:00, 24.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 200
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 200
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 200
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 200
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 200
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 200
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 200
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 200
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 200
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 200
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 200
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 200
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 200
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 200
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 200
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 200
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 200
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 200
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 200
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 200
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 200
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 200
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 200
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 200
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 200
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 200
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
final projection at end of training
dim_v 512
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.65 (  0.65)	train_acc   0.36 (  0.53)	train_minacc   0.53 (  0.48)	train_majacc   0.33 (  0.54)	train_corr   0.00 (  0.00)	l1 5.4678 (5.4679)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.66it/s] 23%|##3       | 6/26 [00:00<00:00, 32.53it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.53it/s] 42%|####2     | 11/26 [00:00<00:00, 37.95it/s] 62%|######1   | 16/26 [00:00<00:00, 41.77it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.77it/s] 81%|########  | 21/26 [00:00<00:00, 39.88it/s]100%|##########| 26/26 [00:00<00:00, 42.16it/s]100%|##########| 26/26 [00:00<00:00, 35.82it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.39 (  0.39)	test_majacc   0.60 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.53)	test_minacc   0.58 (  0.51)	test_majacc   0.57 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.53)	test_minacc_d   0.58 (  0.51)	test_majacc_d   0.57 (  0.53)	test_corr_d  -0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.61 (  0.54)	test_minacc   0.39 (  0.49)	test_majacc   0.65 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.61 (  0.54)	test_minacc_d   0.39 (  0.49)	test_majacc_d   0.65 (  0.54)	test_corr_d   0.03 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.37 (  0.54)	test_minacc   0.53 (  0.49)	test_majacc   0.35 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.37 (  0.54)	test_minacc_d   0.53 (  0.49)	test_majacc_d   0.35 (  0.55)	test_corr_d  -0.02 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.35it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.46 (  0.46)	test_majacc   0.60 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.46 (  0.46)	test_majacc   0.60 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 41/  1]	epoch_time 0.0418 (0.0445)	validation_time 0.0004 (0.0005)	train_time 0.0414 (0.0438)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.5373000047802925, 0.4750000238418579)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.23it/s] 15%|#5        | 4/26 [00:00<00:01, 18.08it/s] 27%|##6       | 7/26 [00:00<00:00, 22.49it/s] 42%|####2     | 11/26 [00:00<00:00, 25.66it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.94it/s] 65%|######5   | 17/26 [00:00<00:00, 27.04it/s] 81%|########  | 21/26 [00:00<00:00, 28.34it/s] 96%|#########6| 25/26 [00:00<00:00, 29.16it/s]100%|##########| 26/26 [00:01<00:00, 24.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 200
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 200
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 200
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 200
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 200
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 200
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 200
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 200
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 200
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 200
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 200
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 200
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 200
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 200
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 200
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 200
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 200
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 200
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 200
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 200
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 200
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 200
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 200
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 200
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 200
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 200
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
final projection at end of training
dim_v 512
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.64 (  0.64)	train_acc   0.35 (  0.53)	train_minacc   0.53 (  0.49)	train_majacc   0.32 (  0.54)	train_corr   0.00 (  0.00)	l1 5.4673 (5.4675)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.19it/s] 23%|##3       | 6/26 [00:00<00:00, 28.39it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.39it/s] 42%|####2     | 11/26 [00:00<00:00, 35.86it/s] 65%|######5   | 17/26 [00:00<00:00, 39.10it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.10it/s] 85%|########4 | 22/26 [00:00<00:00, 41.83it/s]100%|##########| 26/26 [00:00<00:00, 34.54it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.39 (  0.39)	test_majacc   0.60 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.52)	test_minacc   0.57 (  0.52)	test_majacc   0.57 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.52)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.57 (  0.53)	test_corr_d  -0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.61 (  0.53)	test_minacc   0.39 (  0.50)	test_majacc   0.65 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.61 (  0.53)	test_minacc_d   0.39 (  0.50)	test_majacc_d   0.65 (  0.54)	test_corr_d   0.03 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.36 (  0.54)	test_minacc   0.53 (  0.49)	test_majacc   0.33 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.36 (  0.54)	test_minacc_d   0.53 (  0.49)	test_majacc_d   0.33 (  0.54)	test_corr_d  -0.02 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.33it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.46 (  0.46)	test_majacc   0.60 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.46 (  0.46)	test_majacc   0.60 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 42/  1]	epoch_time 0.0432 (0.0445)	validation_time 0.0003 (0.0005)	train_time 0.0428 (0.0438)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.5354000050127506, 0.4750000238418579)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.77it/s] 15%|#5        | 4/26 [00:00<00:01, 17.75it/s] 27%|##6       | 7/26 [00:00<00:00, 22.25it/s] 38%|###8      | 10/26 [00:00<00:00, 24.58it/s] 50%|#####     | 13/26 [00:00<00:00, 26.23it/s] 65%|######5   | 17/26 [00:00<00:00, 27.86it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.90it/s] 88%|########8 | 23/26 [00:00<00:00, 28.40it/s]100%|##########| 26/26 [00:01<00:00, 24.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 200
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 200
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 200
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 200
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 200
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 200
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 200
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 200
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 200
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 200
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 200
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 200
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 200
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 200
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 200
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 200
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 200
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 200
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 200
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 200
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 200
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 200
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 200
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 200
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 200
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 200
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
final projection at end of training
dim_v 512
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.64 (  0.64)	train_acc   0.35 (  0.53)	train_minacc   0.53 (  0.49)	train_majacc   0.32 (  0.54)	train_corr   0.00 (  0.00)	l1 5.4670 (5.4671)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.16it/s] 23%|##3       | 6/26 [00:00<00:00, 26.22it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.22it/s] 42%|####2     | 11/26 [00:00<00:00, 34.44it/s] 62%|######1   | 16/26 [00:00<00:00, 39.35it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.35it/s] 81%|########  | 21/26 [00:00<00:00, 40.02it/s]100%|##########| 26/26 [00:00<00:00, 34.57it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.39 (  0.39)	test_majacc   0.59 (  0.59)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.52)	test_minacc   0.57 (  0.52)	test_majacc   0.56 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.56 (  0.52)	test_corr_d  -0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.61 (  0.53)	test_minacc   0.39 (  0.50)	test_majacc   0.65 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.61 (  0.53)	test_minacc_d   0.39 (  0.50)	test_majacc_d   0.65 (  0.54)	test_corr_d   0.03 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.36 (  0.53)	test_minacc   0.50 (  0.49)	test_majacc   0.33 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.36 (  0.53)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.33 (  0.54)	test_corr_d  -0.02 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.67it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.46 (  0.46)	test_majacc   0.60 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.46 (  0.46)	test_majacc   0.60 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 43/  1]	epoch_time 0.0424 (0.0444)	validation_time 0.0004 (0.0005)	train_time 0.0420 (0.0438)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.5334000025987625, 0.47700002789497375)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.63it/s] 19%|#9        | 5/26 [00:00<00:00, 21.03it/s] 31%|###       | 8/26 [00:00<00:00, 23.43it/s] 46%|####6     | 12/26 [00:00<00:00, 26.37it/s] 62%|######1   | 16/26 [00:00<00:00, 27.94it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.44it/s] 88%|########8 | 23/26 [00:00<00:00, 29.31it/s]100%|##########| 26/26 [00:01<00:00, 25.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 200
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 200
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 200
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 200
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 200
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 200
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 200
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 200
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 200
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 200
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 200
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 200
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 200
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 200
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 200
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 200
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 200
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 200
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 200
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 200
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 200
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 200
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 200
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 200
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 200
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 200
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
final projection at end of training
dim_v 512
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.64 (  0.64)	train_acc   0.34 (  0.53)	train_minacc   0.50 (  0.49)	train_majacc   0.32 (  0.53)	train_corr   0.00 (  0.00)	l1 5.4666 (5.4667)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.01it/s] 12%|#1        | 3/26 [00:00<00:01, 13.64it/s] 38%|###8      | 10/26 [00:00<00:00, 35.85it/s]                                                38%|###8      | 10/26 [00:00<00:00, 35.85it/s] 58%|#####7    | 15/26 [00:00<00:00, 39.96it/s] 77%|#######6  | 20/26 [00:00<00:00, 40.16it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 40.16it/s] 96%|#########6| 25/26 [00:00<00:00, 41.33it/s]100%|##########| 26/26 [00:00<00:00, 33.66it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.39 (  0.39)	test_majacc   0.59 (  0.59)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.52)	test_minacc   0.57 (  0.52)	test_majacc   0.56 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.56 (  0.52)	test_corr_d  -0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.61 (  0.53)	test_minacc   0.39 (  0.50)	test_majacc   0.65 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.61 (  0.53)	test_minacc_d   0.39 (  0.50)	test_majacc_d   0.65 (  0.53)	test_corr_d   0.03 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.35 (  0.53)	test_minacc   0.50 (  0.49)	test_majacc   0.33 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.35 (  0.53)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.33 (  0.54)	test_corr_d  -0.02 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.17it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.46 (  0.46)	test_majacc   0.60 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.46 (  0.46)	test_majacc   0.60 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 44/  1]	epoch_time 0.0457 (0.0444)	validation_time 0.0004 (0.0005)	train_time 0.0453 (0.0438)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.5309000079333782, 0.47700002789497375)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.94it/s] 19%|#9        | 5/26 [00:00<00:01, 20.35it/s] 35%|###4      | 9/26 [00:00<00:00, 24.93it/s] 50%|#####     | 13/26 [00:00<00:00, 26.78it/s] 62%|######1   | 16/26 [00:00<00:00, 26.59it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.10it/s] 88%|########8 | 23/26 [00:00<00:00, 28.22it/s]100%|##########| 26/26 [00:01<00:00, 24.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 200
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 200
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 200
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 200
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 200
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 200
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 200
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 200
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 200
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 200
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 200
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 200
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 200
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 200
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 200
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 200
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 200
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 200
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 200
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 200
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 200
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 200
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 200
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 200
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 200
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 200
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.64 (  0.64)	train_acc   0.35 (  0.53)	train_minacc   0.50 (  0.49)	train_majacc   0.32 (  0.53)	train_corr   0.00 (  0.00)	l1 5.4663 (5.4664)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.16it/s] 27%|##6       | 7/26 [00:00<00:00, 35.49it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.49it/s] 46%|####6     | 12/26 [00:00<00:00, 40.85it/s] 65%|######5   | 17/26 [00:00<00:00, 42.61it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.61it/s] 85%|########4 | 22/26 [00:00<00:00, 39.53it/s]100%|##########| 26/26 [00:00<00:00, 37.24it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.39 (  0.39)	test_majacc   0.59 (  0.59)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.52)	test_minacc   0.57 (  0.52)	test_majacc   0.56 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.56 (  0.52)	test_corr_d  -0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.60 (  0.53)	test_minacc   0.39 (  0.50)	test_majacc   0.64 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.60 (  0.53)	test_minacc_d   0.39 (  0.50)	test_majacc_d   0.64 (  0.53)	test_corr_d   0.03 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.35 (  0.53)	test_minacc   0.50 (  0.49)	test_majacc   0.33 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.35 (  0.53)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.33 (  0.54)	test_corr_d  -0.02 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.14it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.60 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.60 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 45/  1]	epoch_time 0.0429 (0.0444)	validation_time 0.0003 (0.0005)	train_time 0.0426 (0.0438)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.5296000068485737, 0.4790000319480896)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.05it/s] 15%|#5        | 4/26 [00:00<00:01, 18.25it/s] 27%|##6       | 7/26 [00:00<00:00, 22.65it/s] 38%|###8      | 10/26 [00:00<00:00, 24.55it/s] 50%|#####     | 13/26 [00:00<00:00, 25.43it/s] 62%|######1   | 16/26 [00:00<00:00, 26.42it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.88it/s] 85%|########4 | 22/26 [00:00<00:00, 27.74it/s] 96%|#########6| 25/26 [00:00<00:00, 28.27it/s]100%|##########| 26/26 [00:01<00:00, 24.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 200
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 200
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 200
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 200
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 200
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 200
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 200
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 200
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 200
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 200
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 200
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 200
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 200
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 200
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 200
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 200
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 200
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 200
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 200
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 200
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 200
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 200
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 200
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 200
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 200
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 200
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
final projection at end of training
dim_v 512
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.63 (  0.64)	train_acc   0.35 (  0.53)	train_minacc   0.50 (  0.49)	train_majacc   0.33 (  0.53)	train_corr   0.00 (  0.00)	l1 5.4660 (5.4661)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.09it/s] 27%|##6       | 7/26 [00:00<00:00, 32.73it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.73it/s] 46%|####6     | 12/26 [00:00<00:00, 39.50it/s] 65%|######5   | 17/26 [00:00<00:00, 41.42it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.42it/s] 85%|########4 | 22/26 [00:00<00:00, 40.27it/s]100%|##########| 26/26 [00:00<00:00, 36.44it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.39 (  0.39)	test_majacc   0.59 (  0.59)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.52)	test_minacc   0.57 (  0.52)	test_majacc   0.56 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.56 (  0.52)	test_corr_d  -0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.59 (  0.53)	test_minacc   0.39 (  0.50)	test_majacc   0.63 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.59 (  0.53)	test_minacc_d   0.39 (  0.50)	test_majacc_d   0.63 (  0.53)	test_corr_d   0.02 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.36 (  0.53)	test_minacc   0.50 (  0.49)	test_majacc   0.33 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.36 (  0.53)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.33 (  0.54)	test_corr_d  -0.02 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.89it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.60 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.60 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 46/  1]	epoch_time 0.0490 (0.0445)	validation_time 0.0004 (0.0005)	train_time 0.0486 (0.0439)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.5294000121355057, 0.48100003600120544)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.53it/s] 19%|#9        | 5/26 [00:00<00:01, 20.48it/s] 31%|###       | 8/26 [00:00<00:00, 24.05it/s] 42%|####2     | 11/26 [00:00<00:00, 25.44it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.20it/s] 65%|######5   | 17/26 [00:00<00:00, 27.30it/s] 81%|########  | 21/26 [00:00<00:00, 28.53it/s] 92%|#########2| 24/26 [00:00<00:00, 28.88it/s]100%|##########| 26/26 [00:01<00:00, 24.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 200
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 200
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 200
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 200
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 200
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 200
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 200
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 200
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 200
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 200
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 200
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 200
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 200
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 200
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 200
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 200
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 200
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 200
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 200
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 200
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 200
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 200
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 200
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 200
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 200
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 200
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
final projection at end of training
dim_v 512
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.63 (  0.63)	train_acc   0.35 (  0.53)	train_minacc   0.50 (  0.49)	train_majacc   0.32 (  0.53)	train_corr   0.00 (  0.00)	l1 5.4657 (5.4658)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.52it/s] 19%|#9        | 5/26 [00:00<00:01, 17.21it/s] 38%|###8      | 10/26 [00:00<00:00, 27.85it/s]                                                38%|###8      | 10/26 [00:00<00:00, 27.85it/s] 58%|#####7    | 15/26 [00:00<00:00, 31.09it/s] 77%|#######6  | 20/26 [00:00<00:00, 35.99it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 35.99it/s] 96%|#########6| 25/26 [00:00<00:00, 38.52it/s]100%|##########| 26/26 [00:00<00:00, 28.27it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.39 (  0.39)	test_majacc   0.60 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.52)	test_minacc   0.60 (  0.53)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.60 (  0.53)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.59 (  0.53)	test_minacc   0.41 (  0.50)	test_majacc   0.63 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.59 (  0.53)	test_minacc_d   0.41 (  0.50)	test_majacc_d   0.63 (  0.53)	test_corr_d   0.02 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.35 (  0.53)	test_minacc   0.50 (  0.50)	test_majacc   0.33 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.35 (  0.53)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.33 (  0.53)	test_corr_d  -0.02 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.65it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.61 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.61 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 47/  1]	epoch_time 0.0417 (0.0445)	validation_time 0.0004 (0.0005)	train_time 0.0413 (0.0438)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.5288000173568725, 0.48100003600120544)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.41it/s] 15%|#5        | 4/26 [00:00<00:01, 18.52it/s] 27%|##6       | 7/26 [00:00<00:00, 22.96it/s] 42%|####2     | 11/26 [00:00<00:00, 26.04it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.53it/s] 69%|######9   | 18/26 [00:00<00:00, 27.92it/s] 81%|########  | 21/26 [00:00<00:00, 28.24it/s] 92%|#########2| 24/26 [00:00<00:00, 28.63it/s]100%|##########| 26/26 [00:01<00:00, 24.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 200
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 200
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 200
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 200
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 200
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 200
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 200
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 200
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 200
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 200
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 200
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 200
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 200
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 200
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 200
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 200
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 200
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 200
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 200
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 200
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 200
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 200
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 200
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 200
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 200
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 200
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
final projection at end of training
dim_v 512
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.63 (  0.63)	train_acc   0.35 (  0.53)	train_minacc   0.50 (  0.49)	train_majacc   0.32 (  0.53)	train_corr   0.00 (  0.00)	l1 5.4655 (5.4655)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.75it/s] 23%|##3       | 6/26 [00:00<00:00, 24.77it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.77it/s] 42%|####2     | 11/26 [00:00<00:00, 33.01it/s] 62%|######1   | 16/26 [00:00<00:00, 37.91it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.91it/s] 81%|########  | 21/26 [00:00<00:00, 39.33it/s]100%|##########| 26/26 [00:00<00:00, 33.35it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.39 (  0.39)	test_majacc   0.60 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.52)	test_minacc   0.60 (  0.53)	test_majacc   0.56 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.52)	test_minacc_d   0.60 (  0.53)	test_majacc_d   0.56 (  0.52)	test_corr_d  -0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.59 (  0.53)	test_minacc   0.41 (  0.50)	test_majacc   0.63 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.59 (  0.53)	test_minacc_d   0.41 (  0.50)	test_majacc_d   0.63 (  0.53)	test_corr_d   0.02 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.36 (  0.53)	test_minacc   0.50 (  0.50)	test_majacc   0.34 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.36 (  0.53)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.34 (  0.54)	test_corr_d  -0.02 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.13it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.46 (  0.46)	test_majacc   0.61 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.46 (  0.46)	test_majacc   0.61 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 48/  1]	epoch_time 0.0457 (0.0445)	validation_time 0.0003 (0.0005)	train_time 0.0453 (0.0439)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.5296000076830387, 0.4790000319480896)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.93it/s] 15%|#5        | 4/26 [00:00<00:01, 16.90it/s] 27%|##6       | 7/26 [00:00<00:00, 21.99it/s] 42%|####2     | 11/26 [00:00<00:00, 25.64it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.46it/s] 69%|######9   | 18/26 [00:00<00:00, 27.82it/s] 81%|########  | 21/26 [00:00<00:00, 27.92it/s] 96%|#########6| 25/26 [00:00<00:00, 29.06it/s]100%|##########| 26/26 [00:01<00:00, 24.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 200
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 200
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 200
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 200
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 200
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 200
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 200
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 200
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 200
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 200
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 200
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 200
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 200
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 200
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 200
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 200
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 200
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 200
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 200
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 200
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 200
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 200
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 200
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 200
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 200
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 200
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
final projection at end of training
dim_v 512
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.63 (  0.63)	train_acc   0.35 (  0.53)	train_minacc   0.50 (  0.49)	train_majacc   0.33 (  0.53)	train_corr   0.00 (  0.00)	l1 5.4652 (5.4652)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.43it/s] 19%|#9        | 5/26 [00:00<00:01, 20.88it/s]                                               19%|#9        | 5/26 [00:00<00:01, 20.88it/s] 42%|####2     | 11/26 [00:00<00:00, 33.95it/s] 62%|######1   | 16/26 [00:00<00:00, 35.00it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.00it/s] 81%|########  | 21/26 [00:00<00:00, 38.19it/s]100%|##########| 26/26 [00:00<00:00, 40.83it/s]100%|##########| 26/26 [00:00<00:00, 32.07it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.39 (  0.39)	test_majacc   0.60 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.52)	test_minacc   0.60 (  0.52)	test_majacc   0.56 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.52)	test_minacc_d   0.60 (  0.52)	test_majacc_d   0.56 (  0.52)	test_corr_d  -0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.59 (  0.53)	test_minacc   0.41 (  0.50)	test_majacc   0.63 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.59 (  0.53)	test_minacc_d   0.41 (  0.50)	test_majacc_d   0.63 (  0.53)	test_corr_d   0.02 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.37 (  0.53)	test_minacc   0.50 (  0.49)	test_majacc   0.35 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.37 (  0.53)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.35 (  0.54)	test_corr_d  -0.02 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.24it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.61 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.61 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 49/  1]	epoch_time 0.0425 (0.0444)	validation_time 0.0004 (0.0005)	train_time 0.0421 (0.0438)
record: (train_acc, test_acc) (0.6221000073552132, 0.6570000052452087)
last accs (train_acc, test_acc) (0.5297000104188919, 0.48000001907348633)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.161 MB of 0.161 MB uploadedwandb: \ 0.161 MB of 0.161 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmpwphlv8lj'
wandb: ERROR Internal wandb error: file data was not synced
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_214855-ehht6pux
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/ehht6pux
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=200, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=5, fraction_z=0.99)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1203
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6015, 3, 32, 32) (5985, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:37,  1.52s/it] 19%|#9        | 5/26 [00:01<00:05,  3.95it/s] 31%|###       | 8/26 [00:01<00:02,  6.65it/s] 42%|####2     | 11/26 [00:01<00:01,  9.69it/s] 58%|#####7    | 15/26 [00:01<00:00, 13.89it/s] 73%|#######3  | 19/26 [00:02<00:00, 17.75it/s] 88%|########8 | 23/26 [00:02<00:00, 20.79it/s]100%|##########| 26/26 [00:02<00:00, 13.63it/s]100%|##########| 26/26 [00:02<00:00,  9.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [0][  26/  26]	Loss 9.971 (12.596)	train_nll   0.39 (  0.59)	train_penalty   0.03 (  0.34)	weight_norm   9.58 ( 12.01)	train_acc   0.86 (  0.78)	train_minacc   0.03 (  0.11)	train_majacc   1.00 (  0.90)	train_corr   0.00 (  0.00)	l1 8.4800 (8.2053)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 11.75it/s] 27%|##6       | 7/26 [00:00<00:00, 28.10it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.10it/s] 46%|####6     | 12/26 [00:00<00:00, 36.19it/s] 65%|######5   | 17/26 [00:00<00:00, 39.67it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.67it/s] 85%|########4 | 22/26 [00:00<00:00, 40.60it/s]100%|##########| 26/26 [00:00<00:00, 35.19it/s]
Test: [   0/  26]	Loss 0.470 (0.470)	test_acc   0.81 (  0.81)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.470 (0.470)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.388 (0.413)	test_acc   0.86 (  0.85)	test_minacc   0.04 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.388 (0.413)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.04 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.372 (0.415)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   0.98 (  0.99)	Loss_d 0.372 (0.415)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.377 (0.415)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.377 (0.415)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.53it/s]100%|##########| 1/1 [00:00<00:00,  2.53it/s]
Test: [  0/  1]	Loss 1.663 (1.663)	test_acc   0.12 (  0.12)	test_minacc   0.03 (  0.03)	test_majacc   0.97 (  0.97)	Loss_d 1.663 (1.663)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.663 (1.663)	test_acc   0.12 (  0.12)	test_minacc   0.03 (  0.03)	test_majacc   0.97 (  0.97)	Loss_d 1.663 (1.663)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.94 (  0.94)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/191/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0752 (0.0752)	validation_time 0.0067 (0.0067)	train_time 0.0665 (0.0665)
record: (train_acc, test_acc) (0.8454000222682952, 0.12000000476837158)
last accs (train_acc, test_acc) (0.8454000222682952, 0.12000000476837158)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.44it/s] 15%|#5        | 4/26 [00:00<00:01, 20.38it/s] 31%|###       | 8/26 [00:00<00:00, 25.71it/s] 42%|####2     | 11/26 [00:00<00:00, 26.71it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.03it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.94it/s] 88%|########8 | 23/26 [00:00<00:00, 29.20it/s]100%|##########| 26/26 [00:01<00:00, 25.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [1][  26/  26]	Loss 5.229 (7.250)	train_nll   0.39 (  0.41)	train_penalty   0.03 (  0.06)	weight_norm   4.84 (  6.84)	train_acc   0.86 (  0.85)	train_minacc   0.03 (  0.03)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 8.3287 (8.6430)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.54it/s] 27%|##6       | 7/26 [00:00<00:00, 35.06it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.06it/s] 46%|####6     | 12/26 [00:00<00:00, 39.49it/s] 65%|######5   | 17/26 [00:00<00:00, 37.66it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.66it/s] 85%|########4 | 22/26 [00:00<00:00, 40.45it/s]100%|##########| 26/26 [00:00<00:00, 35.73it/s]
Test: [   0/  26]	Loss 0.467 (0.467)	test_acc   0.82 (  0.82)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.467 (0.467)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.387 (0.404)	test_acc   0.87 (  0.85)	test_minacc   0.04 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.387 (0.404)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.04 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.97)
Test: [  20/  26]	Loss 0.355 (0.403)	test_acc   0.89 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.355 (0.403)	test_acc_d   0.89 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.364 (0.401)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.364 (0.401)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.61it/s]
Test: [  0/  1]	Loss 1.710 (1.710)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.710 (1.710)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.710 (1.710)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.710 (1.710)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Overall Timing[  1/  1]	epoch_time 0.0427 (0.0590)	validation_time 0.0004 (0.0036)	train_time 0.0423 (0.0544)
record: (train_acc, test_acc) (0.8454000222682952, 0.12000000476837158)
last accs (train_acc, test_acc) (0.8493000277280808, 0.10400000214576721)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.46it/s] 19%|#9        | 5/26 [00:00<00:01, 19.44it/s] 31%|###       | 8/26 [00:00<00:00, 23.13it/s] 42%|####2     | 11/26 [00:00<00:00, 25.34it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.31it/s] 88%|########8 | 23/26 [00:00<00:00, 29.12it/s]100%|##########| 26/26 [00:01<00:00, 25.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [2][  26/  26]	Loss 3.178 (4.055)	train_nll   0.37 (  0.40)	train_penalty   0.02 (  0.05)	weight_norm   2.80 (  3.66)	train_acc   0.86 (  0.85)	train_minacc   0.09 (  0.06)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 6.8226 (7.5931)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.94it/s] 15%|#5        | 4/26 [00:00<00:01, 21.19it/s] 35%|###4      | 9/26 [00:00<00:00, 32.58it/s]                                               35%|###4      | 9/26 [00:00<00:00, 32.58it/s] 54%|#####3    | 14/26 [00:00<00:00, 37.38it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.94it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 35.94it/s] 92%|#########2| 24/26 [00:00<00:00, 39.25it/s]100%|##########| 26/26 [00:00<00:00, 34.23it/s]
Test: [   0/  26]	Loss 0.441 (0.441)	test_acc   0.81 (  0.81)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.441 (0.441)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.359 (0.383)	test_acc   0.86 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.359 (0.383)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.97)
Test: [  20/  26]	Loss 0.339 (0.383)	test_acc   0.89 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.339 (0.383)	test_acc_d   0.89 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.97)
Test: [  26/  26]	Loss 0.342 (0.381)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.342 (0.381)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.57it/s]
Test: [  0/  1]	Loss 1.770 (1.770)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.770 (1.770)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.770 (1.770)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.770 (1.770)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Overall Timing[  2/  1]	epoch_time 0.0421 (0.0534)	validation_time 0.0004 (0.0025)	train_time 0.0417 (0.0502)
record: (train_acc, test_acc) (0.8454000222682952, 0.12000000476837158)
last accs (train_acc, test_acc) (0.8490000326037407, 0.10600000619888306)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.38it/s] 12%|#1        | 3/26 [00:00<00:02, 10.45it/s] 23%|##3       | 6/26 [00:00<00:01, 16.19it/s] 38%|###8      | 10/26 [00:00<00:00, 21.52it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.12it/s] 65%|######5   | 17/26 [00:00<00:00, 26.27it/s] 77%|#######6  | 20/26 [00:00<00:00, 26.98it/s] 88%|########8 | 23/26 [00:01<00:00, 27.81it/s]100%|##########| 26/26 [00:01<00:00, 22.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [3][  26/  26]	Loss 2.120 (2.594)	train_nll   0.35 (  0.37)	train_penalty   0.02 (  0.04)	weight_norm   1.77 (  2.22)	train_acc   0.85 (  0.85)	train_minacc   0.03 (  0.07)	train_majacc   0.98 (  0.98)	train_corr   0.00 (  0.00)	l1 5.8343 (6.3937)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.74it/s] 23%|##3       | 6/26 [00:00<00:00, 22.88it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.88it/s] 42%|####2     | 11/26 [00:00<00:00, 31.63it/s] 62%|######1   | 16/26 [00:00<00:00, 37.35it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.35it/s] 81%|########  | 21/26 [00:00<00:00, 36.30it/s]100%|##########| 26/26 [00:00<00:00, 31.97it/s]
Test: [   0/  26]	Loss 0.427 (0.427)	test_acc   0.81 (  0.81)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.427 (0.427)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.346 (0.367)	test_acc   0.86 (  0.85)	test_minacc   0.04 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.346 (0.367)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.04 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.95)
Test: [  20/  26]	Loss 0.321 (0.364)	test_acc   0.89 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.321 (0.364)	test_acc_d   0.89 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.95)
Test: [  26/  26]	Loss 0.334 (0.363)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.334 (0.363)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.51it/s]
Test: [  0/  1]	Loss 1.748 (1.748)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.748 (1.748)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  1/  1]	Loss 1.748 (1.748)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.748 (1.748)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Overall Timing[  3/  1]	epoch_time 0.0440 (0.0510)	validation_time 0.0003 (0.0020)	train_time 0.0436 (0.0485)
record: (train_acc, test_acc) (0.8454000222682952, 0.12000000476837158)
last accs (train_acc, test_acc) (0.8491000230908394, 0.10900000482797623)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.42it/s] 19%|#9        | 5/26 [00:00<00:01, 19.30it/s] 31%|###       | 8/26 [00:00<00:00, 22.29it/s] 46%|####6     | 12/26 [00:00<00:00, 25.76it/s] 62%|######1   | 16/26 [00:00<00:00, 27.69it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.62it/s] 88%|########8 | 23/26 [00:00<00:00, 28.42it/s]100%|##########| 26/26 [00:00<00:00, 28.74it/s]100%|##########| 26/26 [00:01<00:00, 24.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [4][  26/  26]	Loss 1.545 (1.788)	train_nll   0.39 (  0.36)	train_penalty   0.01 (  0.03)	weight_norm   1.15 (  1.43)	train_acc   0.77 (  0.84)	train_minacc   0.29 (  0.11)	train_majacc   0.85 (  0.97)	train_corr   0.00 (  0.00)	l1 5.7000 (5.8222)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.19it/s] 23%|##3       | 6/26 [00:00<00:00, 28.14it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.14it/s] 42%|####2     | 11/26 [00:00<00:00, 35.65it/s] 62%|######1   | 16/26 [00:00<00:00, 40.05it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.05it/s] 81%|########  | 21/26 [00:00<00:00, 39.87it/s]100%|##########| 26/26 [00:00<00:00, 42.22it/s]100%|##########| 26/26 [00:00<00:00, 34.84it/s]
Test: [   0/  26]	Loss 0.379 (0.379)	test_acc   0.82 (  0.82)	test_minacc   0.08 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.379 (0.379)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.321 (0.347)	test_acc   0.87 (  0.86)	test_minacc   0.13 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 0.321 (0.347)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.13 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.91)
Test: [  20/  26]	Loss 0.299 (0.342)	test_acc   0.89 (  0.85)	test_minacc   0.05 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.299 (0.342)	test_acc_d   0.89 (  0.85)	test_minacc_d   0.05 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.92)
Test: [  26/  26]	Loss 0.302 (0.339)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.08)	test_majacc   1.00 (  0.99)	Loss_d 0.302 (0.339)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.08)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.92 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.56it/s]
Test: [  0/  1]	Loss 1.711 (1.711)	test_acc   0.22 (  0.22)	test_minacc   0.13 (  0.13)	test_majacc   0.97 (  0.97)	Loss_d 1.711 (1.711)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.79 (  0.79)
Test: [  1/  1]	Loss 1.711 (1.711)	test_acc   0.22 (  0.22)	test_minacc   0.13 (  0.13)	test_majacc   0.97 (  0.97)	Loss_d 1.711 (1.711)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.79 (  0.79)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/191/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0440 (0.0496)	validation_time 0.0004 (0.0017)	train_time 0.0435 (0.0475)
record: (train_acc, test_acc) (0.8524000277519226, 0.2160000056028366)
last accs (train_acc, test_acc) (0.8524000277519226, 0.2160000056028366)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.34it/s] 12%|#1        | 3/26 [00:00<00:02,  9.53it/s] 27%|##6       | 7/26 [00:00<00:01, 18.40it/s] 42%|####2     | 11/26 [00:00<00:00, 23.54it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.80it/s] 69%|######9   | 18/26 [00:00<00:00, 26.92it/s] 85%|########4 | 22/26 [00:00<00:00, 28.29it/s] 96%|#########6| 25/26 [00:01<00:00, 28.66it/s]100%|##########| 26/26 [00:01<00:00, 22.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [5][  26/  26]	Loss 1.095 (1.296)	train_nll   0.33 (  0.35)	train_penalty   0.01 (  0.03)	weight_norm   0.77 (  0.94)	train_acc   0.85 (  0.85)	train_minacc   0.11 (  0.13)	train_majacc   0.97 (  0.98)	train_corr   0.00 (  0.00)	l1 6.2776 (5.9389)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.57it/s] 31%|###       | 8/26 [00:00<00:00, 38.19it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.19it/s] 50%|#####     | 13/26 [00:00<00:00, 38.73it/s] 69%|######9   | 18/26 [00:00<00:00, 41.49it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.49it/s] 88%|########8 | 23/26 [00:00<00:00, 41.93it/s]100%|##########| 26/26 [00:00<00:00, 36.94it/s]
Test: [   0/  26]	Loss 0.408 (0.408)	test_acc   0.83 (  0.83)	test_minacc   0.08 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.408 (0.408)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.324 (0.343)	test_acc   0.87 (  0.85)	test_minacc   0.04 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.324 (0.343)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.04 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.95)
Test: [  20/  26]	Loss 0.301 (0.340)	test_acc   0.89 (  0.85)	test_minacc   0.02 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.301 (0.340)	test_acc_d   0.89 (  0.85)	test_minacc_d   0.02 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.95)
Test: [  26/  26]	Loss 0.293 (0.337)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.293 (0.337)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.40it/s]
Test: [  0/  1]	Loss 2.002 (2.002)	test_acc   0.15 (  0.15)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 2.002 (2.002)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.88 (  0.88)
Test: [  1/  1]	Loss 2.002 (2.002)	test_acc   0.15 (  0.15)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 2.002 (2.002)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.88 (  0.88)
Overall Timing[  5/  1]	epoch_time 0.0415 (0.0483)	validation_time 0.0004 (0.0015)	train_time 0.0411 (0.0465)
record: (train_acc, test_acc) (0.8524000277519226, 0.2160000056028366)
last accs (train_acc, test_acc) (0.8528000264763832, 0.1469999998807907)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.91it/s] 19%|#9        | 5/26 [00:00<00:01, 18.74it/s] 35%|###4      | 9/26 [00:00<00:00, 23.99it/s] 50%|#####     | 13/26 [00:00<00:00, 26.71it/s] 65%|######5   | 17/26 [00:00<00:00, 28.38it/s] 81%|########  | 21/26 [00:00<00:00, 29.24it/s] 96%|#########6| 25/26 [00:00<00:00, 29.81it/s]100%|##########| 26/26 [00:01<00:00, 25.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [6][  26/  26]	Loss 0.829 (0.975)	train_nll   0.32 (  0.34)	train_penalty   0.01 (  0.03)	weight_norm   0.51 (  0.63)	train_acc   0.84 (  0.85)	train_minacc   0.26 (  0.18)	train_majacc   0.93 (  0.97)	train_corr   0.00 (  0.00)	l1 7.8081 (7.0805)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.34it/s] 19%|#9        | 5/26 [00:00<00:00, 23.65it/s] 38%|###8      | 10/26 [00:00<00:00, 34.16it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.16it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.65it/s] 77%|#######6  | 20/26 [00:00<00:00, 40.12it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 40.12it/s] 96%|#########6| 25/26 [00:00<00:00, 41.42it/s]100%|##########| 26/26 [00:00<00:00, 33.99it/s]
Test: [   0/  26]	Loss 0.367 (0.367)	test_acc   0.83 (  0.83)	test_minacc   0.19 (  0.19)	test_majacc   0.98 (  0.98)	Loss_d 0.367 (0.367)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.310 (0.327)	test_acc   0.87 (  0.85)	test_minacc   0.15 (  0.14)	test_majacc   0.99 (  0.98)	Loss_d 0.310 (0.327)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.15 (  0.14)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.92 (  0.90)
Test: [  20/  26]	Loss 0.302 (0.322)	test_acc   0.89 (  0.86)	test_minacc   0.14 (  0.14)	test_majacc   0.99 (  0.98)	Loss_d 0.302 (0.322)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.92 (  0.90)
Test: [  26/  26]	Loss 0.274 (0.319)	test_acc   0.87 (  0.86)	test_minacc   0.11 (  0.14)	test_majacc   1.00 (  0.98)	Loss_d 0.274 (0.319)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.11 (  0.14)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.91 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.71it/s]
Test: [  0/  1]	Loss 1.679 (1.679)	test_acc   0.23 (  0.23)	test_minacc   0.14 (  0.14)	test_majacc   0.96 (  0.96)	Loss_d 1.679 (1.679)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.73 (  0.73)
Test: [  1/  1]	Loss 1.679 (1.679)	test_acc   0.23 (  0.23)	test_minacc   0.14 (  0.14)	test_majacc   0.96 (  0.96)	Loss_d 1.679 (1.679)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.73 (  0.73)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/191/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0410 (0.0472)	validation_time 0.0005 (0.0013)	train_time 0.0405 (0.0456)
record: (train_acc, test_acc) (0.8560000256299972, 0.22600001096725464)
last accs (train_acc, test_acc) (0.8560000256299972, 0.22600001096725464)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02,  9.10it/s] 23%|##3       | 6/26 [00:00<00:01, 19.07it/s] 38%|###8      | 10/26 [00:00<00:00, 23.91it/s] 50%|#####     | 13/26 [00:00<00:00, 25.54it/s] 65%|######5   | 17/26 [00:00<00:00, 27.83it/s] 81%|########  | 21/26 [00:00<00:00, 29.24it/s] 96%|#########6| 25/26 [00:00<00:00, 29.58it/s]100%|##########| 26/26 [00:01<00:00, 24.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [7][  26/  26]	Loss 0.002 (0.567)	train_nll   0.54 (  0.37)	train_penalty   0.00 (  0.02)	weight_norm   0.40 (  0.44)	train_acc   0.70 (  0.82)	train_minacc   0.74 (  0.23)	train_majacc   0.69 (  0.93)	train_corr   0.00 (  0.00)	l1 9.2879 (8.4348)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.15it/s] 23%|##3       | 6/26 [00:00<00:00, 25.82it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.82it/s] 42%|####2     | 11/26 [00:00<00:00, 33.29it/s] 62%|######1   | 16/26 [00:00<00:00, 38.15it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.15it/s] 81%|########  | 21/26 [00:00<00:00, 38.09it/s]100%|##########| 26/26 [00:00<00:00, 40.85it/s]100%|##########| 26/26 [00:00<00:00, 33.28it/s]
Test: [   0/  26]	Loss 0.587 (0.587)	test_acc   0.69 (  0.69)	test_minacc   0.61 (  0.61)	test_majacc   0.71 (  0.71)	Loss_d 0.587 (0.587)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.33 (  0.33)
Test: [  10/  26]	Loss 0.596 (0.583)	test_acc   0.66 (  0.69)	test_minacc   0.63 (  0.68)	test_majacc   0.66 (  0.69)	Loss_d 0.596 (0.583)	test_acc_d   0.66 (  0.69)	test_minacc_d   0.63 (  0.68)	test_majacc_d   0.66 (  0.69)	test_corr_d   0.31 (  0.33)
Test: [  20/  26]	Loss 0.599 (0.583)	test_acc   0.68 (  0.69)	test_minacc   0.66 (  0.71)	test_majacc   0.68 (  0.69)	Loss_d 0.599 (0.583)	test_acc_d   0.68 (  0.69)	test_minacc_d   0.66 (  0.71)	test_majacc_d   0.68 (  0.69)	test_corr_d   0.36 (  0.32)
Test: [  26/  26]	Loss 0.574 (0.585)	test_acc   0.67 (  0.69)	test_minacc   0.74 (  0.70)	test_majacc   0.66 (  0.68)	Loss_d 0.574 (0.585)	test_acc_d   0.67 (  0.69)	test_minacc_d   0.74 (  0.70)	test_majacc_d   0.66 (  0.68)	test_corr_d   0.31 (  0.32)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.76it/s]
Test: [  0/  1]	Loss 0.607 (0.607)	test_acc   0.68 (  0.68)	test_minacc   0.67 (  0.67)	test_majacc   0.71 (  0.71)	Loss_d 0.607 (0.607)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.607 (0.607)	test_acc   0.68 (  0.68)	test_minacc   0.67 (  0.67)	test_majacc   0.71 (  0.71)	Loss_d 0.607 (0.607)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.31 ( -0.31)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/191/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0468 (0.0472)	validation_time 0.0003 (0.0012)	train_time 0.0465 (0.0457)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.89it/s] 19%|#9        | 5/26 [00:00<00:00, 23.35it/s] 35%|###4      | 9/26 [00:00<00:00, 27.41it/s] 50%|#####     | 13/26 [00:00<00:00, 29.05it/s] 62%|######1   | 16/26 [00:00<00:00, 28.82it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.07it/s] 88%|########8 | 23/26 [00:00<00:00, 29.76it/s]100%|##########| 26/26 [00:00<00:00, 26.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [8][  26/  26]	Loss 0.000 (0.001)	train_nll   0.68 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.45)	train_acc   0.50 (  0.55)	train_minacc   0.43 (  0.57)	train_majacc   0.51 (  0.55)	train_corr   0.00 (  0.00)	l1 9.1489 (9.2275)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.76it/s] 27%|##6       | 7/26 [00:00<00:00, 34.08it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.08it/s] 50%|#####     | 13/26 [00:00<00:00, 38.43it/s] 69%|######9   | 18/26 [00:00<00:00, 42.04it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.04it/s] 88%|########8 | 23/26 [00:00<00:00, 42.70it/s]100%|##########| 26/26 [00:00<00:00, 36.62it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.45 (  0.45)	test_minacc   0.47 (  0.47)	test_majacc   0.44 (  0.44)	Loss_d 0.692 (0.692)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.694 (0.687)	test_acc   0.46 (  0.48)	test_minacc   0.46 (  0.47)	test_majacc   0.46 (  0.49)	Loss_d 0.694 (0.687)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.46 (  0.47)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.04 (  0.07)
Test: [  20/  26]	Loss 0.688 (0.687)	test_acc   0.49 (  0.49)	test_minacc   0.55 (  0.48)	test_majacc   0.49 (  0.49)	Loss_d 0.688 (0.687)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.55 (  0.48)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.04 (  0.07)
Test: [  26/  26]	Loss 0.682 (0.687)	test_acc   0.50 (  0.49)	test_minacc   0.43 (  0.48)	test_majacc   0.51 (  0.49)	Loss_d 0.682 (0.687)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.43 (  0.48)	test_majacc_d   0.51 (  0.49)	test_corr_d   0.10 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 52.21it/s]
Test: [  0/  1]	Loss 0.683 (0.683)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.46 (  0.46)	Loss_d 0.683 (0.683)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.683 (0.683)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.46 (  0.46)	Loss_d 0.683 (0.683)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.16 ( -0.16)
Overall Timing[  8/  1]	epoch_time 0.0411 (0.0465)	validation_time 0.0005 (0.0011)	train_time 0.0406 (0.0451)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.48800000885128975, 0.49900001287460327)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.75it/s]  8%|7         | 2/26 [00:00<00:03,  7.33it/s] 19%|#9        | 5/26 [00:00<00:01, 15.83it/s] 35%|###4      | 9/26 [00:00<00:00, 21.83it/s] 50%|#####     | 13/26 [00:00<00:00, 25.10it/s] 65%|######5   | 17/26 [00:00<00:00, 26.86it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.66it/s] 88%|########8 | 23/26 [00:00<00:00, 28.06it/s]100%|##########| 26/26 [00:01<00:00, 22.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [9][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.47 (  0.48)	train_minacc   0.40 (  0.47)	train_majacc   0.48 (  0.48)	train_corr   0.00 (  0.00)	l1 9.1106 (9.1234)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.81it/s] 23%|##3       | 6/26 [00:00<00:00, 20.01it/s]                                               23%|##3       | 6/26 [00:00<00:00, 20.01it/s] 42%|####2     | 11/26 [00:00<00:00, 28.52it/s] 65%|######5   | 17/26 [00:00<00:00, 33.85it/s]                                                65%|######5   | 17/26 [00:00<00:00, 33.85it/s] 85%|########4 | 22/26 [00:00<00:00, 37.73it/s]100%|##########| 26/26 [00:00<00:00, 29.93it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.45 (  0.45)	test_minacc   0.51 (  0.51)	test_majacc   0.44 (  0.44)	Loss_d 0.690 (0.690)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.694 (0.690)	test_acc   0.44 (  0.46)	test_minacc   0.37 (  0.43)	test_majacc   0.45 (  0.46)	Loss_d 0.694 (0.690)	test_acc_d   0.44 (  0.46)	test_minacc_d   0.37 (  0.43)	test_majacc_d   0.45 (  0.46)	test_corr_d   0.04 (  0.06)
Test: [  20/  26]	Loss 0.691 (0.690)	test_acc   0.47 (  0.46)	test_minacc   0.55 (  0.45)	test_majacc   0.47 (  0.46)	Loss_d 0.691 (0.690)	test_acc_d   0.47 (  0.46)	test_minacc_d   0.55 (  0.45)	test_majacc_d   0.47 (  0.46)	test_corr_d   0.01 (  0.05)
Test: [  26/  26]	Loss 0.689 (0.690)	test_acc   0.47 (  0.46)	test_minacc   0.40 (  0.45)	test_majacc   0.48 (  0.46)	Loss_d 0.689 (0.690)	test_acc_d   0.47 (  0.46)	test_minacc_d   0.40 (  0.45)	test_majacc_d   0.48 (  0.46)	test_corr_d   0.06 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.78it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.47 (  0.47)	test_minacc   0.48 (  0.48)	test_majacc   0.45 (  0.45)	Loss_d 0.688 (0.688)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.47 (  0.47)	test_minacc   0.48 (  0.48)	test_majacc   0.45 (  0.45)	Loss_d 0.688 (0.688)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.13 ( -0.13)
Overall Timing[  9/  1]	epoch_time 0.0447 (0.0463)	validation_time 0.0006 (0.0011)	train_time 0.0441 (0.0450)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.46040000408887866, 0.4740000367164612)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  3.03it/s] 15%|#5        | 4/26 [00:00<00:01, 11.16it/s] 27%|##6       | 7/26 [00:00<00:01, 16.58it/s] 38%|###8      | 10/26 [00:00<00:00, 20.04it/s] 50%|#####     | 13/26 [00:00<00:00, 22.28it/s] 62%|######1   | 16/26 [00:00<00:00, 24.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 25.71it/s] 88%|########8 | 23/26 [00:01<00:00, 27.40it/s]100%|##########| 26/26 [00:01<00:00, 20.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [10][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.42 (  0.45)	train_minacc   0.40 (  0.45)	train_majacc   0.43 (  0.45)	train_corr   0.00 (  0.00)	l1 9.1046 (9.1064)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.51it/s] 23%|##3       | 6/26 [00:00<00:00, 24.42it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.42it/s] 42%|####2     | 11/26 [00:00<00:00, 31.44it/s] 62%|######1   | 16/26 [00:00<00:00, 36.95it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.95it/s] 81%|########  | 21/26 [00:00<00:00, 36.78it/s]100%|##########| 26/26 [00:00<00:00, 39.89it/s]100%|##########| 26/26 [00:00<00:00, 31.47it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.52 (  0.52)	test_minacc   0.61 (  0.61)	test_majacc   0.49 (  0.49)	Loss_d 0.689 (0.689)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.44 (  0.46)	test_minacc   0.39 (  0.46)	test_majacc   0.45 (  0.46)	Loss_d 0.692 (0.691)	test_acc_d   0.44 (  0.46)	test_minacc_d   0.39 (  0.46)	test_majacc_d   0.45 (  0.46)	test_corr_d   0.06 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.691)	test_acc   0.46 (  0.46)	test_minacc   0.50 (  0.48)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.691)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.50 (  0.48)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.02 (  0.04)
Test: [  26/  26]	Loss 0.692 (0.691)	test_acc   0.42 (  0.46)	test_minacc   0.40 (  0.49)	test_majacc   0.43 (  0.46)	Loss_d 0.692 (0.691)	test_acc_d   0.42 (  0.46)	test_minacc_d   0.40 (  0.49)	test_majacc_d   0.43 (  0.46)	test_corr_d   0.00 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.00it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.40 (  0.40)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.40 (  0.40)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 10/  1]	epoch_time 0.0460 (0.0463)	validation_time 0.0004 (0.0010)	train_time 0.0456 (0.0451)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.4627000050544739, 0.5210000276565552)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.58it/s] 15%|#5        | 4/26 [00:00<00:01, 17.28it/s] 27%|##6       | 7/26 [00:00<00:00, 21.90it/s] 42%|####2     | 11/26 [00:00<00:00, 26.11it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.26it/s] 65%|######5   | 17/26 [00:00<00:00, 27.41it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.17it/s] 92%|#########2| 24/26 [00:00<00:00, 29.31it/s]100%|##########| 26/26 [00:01<00:00, 24.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [11][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.44 (  0.47)	train_minacc   0.54 (  0.50)	train_majacc   0.42 (  0.46)	train_corr   0.00 (  0.00)	l1 9.1022 (9.1030)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.61it/s] 23%|##3       | 6/26 [00:00<00:00, 28.36it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.36it/s] 42%|####2     | 11/26 [00:00<00:00, 35.85it/s] 62%|######1   | 16/26 [00:00<00:00, 39.96it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.96it/s] 81%|########  | 21/26 [00:00<00:00, 38.44it/s]100%|##########| 26/26 [00:00<00:00, 41.49it/s]100%|##########| 26/26 [00:00<00:00, 34.17it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.58 (  0.58)	test_minacc   0.61 (  0.61)	test_majacc   0.58 (  0.58)	Loss_d 0.690 (0.690)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.46 (  0.54)	test_majacc   0.51 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.46 (  0.54)	test_majacc_d   0.51 (  0.49)	test_corr_d   0.08 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.51)	test_minacc   0.55 (  0.55)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.48 (  0.50)	test_corr_d  -0.03 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.44 (  0.50)	test_minacc   0.57 (  0.56)	test_majacc   0.42 (  0.49)	Loss_d 0.693 (0.692)	test_acc_d   0.44 (  0.50)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.42 (  0.49)	test_corr_d  -0.03 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.12it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.44 (  0.44)	Loss_d 0.690 (0.690)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.44 (  0.44)	Loss_d 0.690 (0.690)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 11/  1]	epoch_time 0.0397 (0.0457)	validation_time 0.0003 (0.0009)	train_time 0.0393 (0.0446)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.5033000073730945, 0.5580000281333923)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.24it/s] 15%|#5        | 4/26 [00:00<00:01, 17.37it/s] 27%|##6       | 7/26 [00:00<00:00, 22.29it/s] 38%|###8      | 10/26 [00:00<00:00, 25.07it/s] 50%|#####     | 13/26 [00:00<00:00, 26.51it/s] 65%|######5   | 17/26 [00:00<00:00, 28.25it/s] 81%|########  | 21/26 [00:00<00:00, 29.24it/s] 96%|#########6| 25/26 [00:00<00:00, 29.41it/s]100%|##########| 26/26 [00:01<00:00, 24.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [12][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.44 (  0.49)	train_minacc   0.54 (  0.54)	train_majacc   0.42 (  0.48)	train_corr   0.00 (  0.00)	l1 9.0995 (9.1006)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.96it/s] 15%|#5        | 4/26 [00:00<00:01, 15.74it/s] 35%|###4      | 9/26 [00:00<00:00, 27.96it/s]                                               35%|###4      | 9/26 [00:00<00:00, 27.96it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.60it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.86it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.86it/s] 92%|#########2| 24/26 [00:00<00:00, 37.92it/s]100%|##########| 26/26 [00:00<00:00, 31.46it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.58 (  0.58)	test_minacc   0.61 (  0.61)	test_majacc   0.57 (  0.57)	Loss_d 0.690 (0.690)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.52)	test_majacc   0.50 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.52)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.07 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.50 (  0.53)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.50 (  0.53)	test_majacc_d   0.48 (  0.49)	test_corr_d  -0.04 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.44 (  0.50)	test_minacc   0.54 (  0.54)	test_majacc   0.42 (  0.49)	Loss_d 0.693 (0.692)	test_acc_d   0.44 (  0.50)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.42 (  0.49)	test_corr_d  -0.04 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.60it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.44 (  0.44)	Loss_d 0.691 (0.691)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.44 (  0.44)	Loss_d 0.691 (0.691)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 12/  1]	epoch_time 0.0443 (0.0456)	validation_time 0.0004 (0.0009)	train_time 0.0439 (0.0446)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.49540000784397126, 0.5490000247955322)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.88it/s] 19%|#9        | 5/26 [00:00<00:01, 20.18it/s] 31%|###       | 8/26 [00:00<00:00, 23.58it/s] 42%|####2     | 11/26 [00:00<00:00, 25.71it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.97it/s] 69%|######9   | 18/26 [00:00<00:00, 28.54it/s] 85%|########4 | 22/26 [00:00<00:00, 29.52it/s]100%|##########| 26/26 [00:00<00:00, 30.42it/s]100%|##########| 26/26 [00:01<00:00, 25.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [13][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.43 (  0.48)	train_minacc   0.46 (  0.50)	train_majacc   0.43 (  0.47)	train_corr   0.00 (  0.00)	l1 9.0973 (9.0982)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.18it/s] 23%|##3       | 6/26 [00:00<00:00, 29.51it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.51it/s] 42%|####2     | 11/26 [00:00<00:00, 37.84it/s] 62%|######1   | 16/26 [00:00<00:00, 41.41it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.41it/s] 81%|########  | 21/26 [00:00<00:00, 38.32it/s]100%|##########| 26/26 [00:00<00:00, 41.62it/s]100%|##########| 26/26 [00:00<00:00, 34.87it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.58 (  0.58)	test_minacc   0.62 (  0.62)	test_majacc   0.57 (  0.57)	Loss_d 0.691 (0.691)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.39 (  0.46)	test_majacc   0.50 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.39 (  0.46)	test_majacc_d   0.50 (  0.48)	test_corr_d   0.06 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.55 (  0.48)	test_majacc   0.46 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.55 (  0.48)	test_majacc_d   0.46 (  0.48)	test_corr_d  -0.05 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.48)	test_minacc   0.43 (  0.49)	test_majacc   0.43 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.48)	test_minacc_d   0.43 (  0.49)	test_majacc_d   0.43 (  0.48)	test_corr_d  -0.03 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.65it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.41 (  0.41)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.41 (  0.41)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 13/  1]	epoch_time 0.0421 (0.0454)	validation_time 0.0003 (0.0009)	train_time 0.0417 (0.0444)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.47990000423789025, 0.5260000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.89it/s] 19%|#9        | 5/26 [00:00<00:01, 18.98it/s] 35%|###4      | 9/26 [00:00<00:00, 24.19it/s] 50%|#####     | 13/26 [00:00<00:00, 26.98it/s] 65%|######5   | 17/26 [00:00<00:00, 28.74it/s] 81%|########  | 21/26 [00:00<00:00, 29.80it/s] 96%|#########6| 25/26 [00:00<00:00, 30.42it/s]100%|##########| 26/26 [00:01<00:00, 25.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [14][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.44 (  0.48)	train_minacc   0.43 (  0.48)	train_majacc   0.44 (  0.48)	train_corr   0.00 (  0.00)	l1 9.0957 (9.0964)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.72it/s] 27%|##6       | 7/26 [00:00<00:00, 34.62it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.62it/s] 46%|####6     | 12/26 [00:00<00:00, 39.89it/s] 65%|######5   | 17/26 [00:00<00:00, 38.21it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.21it/s] 85%|########4 | 22/26 [00:00<00:00, 41.52it/s]100%|##########| 26/26 [00:00<00:00, 36.50it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.57 (  0.57)	test_minacc   0.67 (  0.67)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.48)	test_minacc   0.41 (  0.45)	test_majacc   0.52 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.41 (  0.45)	test_majacc_d   0.52 (  0.48)	test_corr_d   0.06 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.48)	test_minacc   0.57 (  0.48)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.57 (  0.48)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.05 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.48)	test_minacc   0.43 (  0.48)	test_majacc   0.44 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.48)	test_minacc_d   0.43 (  0.48)	test_majacc_d   0.44 (  0.48)	test_corr_d  -0.03 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.36it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.42 (  0.42)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.42 (  0.42)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 14/  1]	epoch_time 0.0392 (0.0450)	validation_time 0.0004 (0.0008)	train_time 0.0388 (0.0440)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.4808000038564205, 0.5130000114440918)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.54it/s] 19%|#9        | 5/26 [00:00<00:01, 20.22it/s] 31%|###       | 8/26 [00:00<00:00, 23.93it/s] 42%|####2     | 11/26 [00:00<00:00, 23.88it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.01it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.37it/s] 88%|########8 | 23/26 [00:00<00:00, 28.46it/s]100%|##########| 26/26 [00:01<00:00, 24.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [15][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.45 (  0.48)	train_minacc   0.46 (  0.48)	train_majacc   0.45 (  0.48)	train_corr   0.00 (  0.00)	l1 9.0944 (9.0950)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 11.75it/s] 27%|##6       | 7/26 [00:00<00:00, 27.94it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.94it/s] 46%|####6     | 12/26 [00:00<00:00, 34.92it/s] 65%|######5   | 17/26 [00:00<00:00, 39.50it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.50it/s] 85%|########4 | 22/26 [00:00<00:00, 38.36it/s]100%|##########| 26/26 [00:00<00:00, 35.25it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.64 (  0.64)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.39 (  0.44)	test_majacc   0.51 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.39 (  0.44)	test_majacc_d   0.51 (  0.48)	test_corr_d   0.05 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.48)	test_minacc   0.59 (  0.48)	test_majacc   0.51 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.48)	test_minacc_d   0.59 (  0.48)	test_majacc_d   0.51 (  0.48)	test_corr_d  -0.06 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.48)	test_minacc   0.46 (  0.48)	test_majacc   0.45 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.48)	test_minacc_d   0.46 (  0.48)	test_majacc_d   0.45 (  0.48)	test_corr_d  -0.02 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.70it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.44 (  0.44)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.44 (  0.44)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 15/  1]	epoch_time 0.0383 (0.0445)	validation_time 0.0004 (0.0008)	train_time 0.0378 (0.0436)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.4842000060677528, 0.49800002574920654)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.19it/s] 15%|#5        | 4/26 [00:00<00:01, 19.86it/s] 27%|##6       | 7/26 [00:00<00:00, 24.10it/s] 38%|###8      | 10/26 [00:00<00:00, 26.11it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.91it/s] 65%|######5   | 17/26 [00:00<00:00, 28.41it/s] 81%|########  | 21/26 [00:00<00:00, 29.39it/s] 96%|#########6| 25/26 [00:00<00:00, 29.84it/s]100%|##########| 26/26 [00:01<00:00, 25.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.46 (  0.48)	train_minacc   0.46 (  0.48)	train_majacc   0.46 (  0.48)	train_corr   0.00 (  0.00)	l1 9.0934 (9.0939)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.27it/s] 27%|##6       | 7/26 [00:00<00:00, 30.42it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.42it/s] 46%|####6     | 12/26 [00:00<00:00, 37.26it/s] 65%|######5   | 17/26 [00:00<00:00, 40.65it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.65it/s] 85%|########4 | 22/26 [00:00<00:00, 41.46it/s]100%|##########| 26/26 [00:00<00:00, 36.41it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.62 (  0.62)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.39 (  0.44)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.39 (  0.44)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.04 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.48)	test_minacc   0.59 (  0.47)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.59 (  0.47)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.06 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.46 (  0.48)	test_majacc   0.46 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.46 (  0.48)	test_majacc_d   0.46 (  0.49)	test_corr_d  -0.02 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.49it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 16/  1]	epoch_time 0.0406 (0.0443)	validation_time 0.0006 (0.0008)	train_time 0.0400 (0.0434)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.48560000798106195, 0.503000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.23it/s] 19%|#9        | 5/26 [00:00<00:01, 17.61it/s] 35%|###4      | 9/26 [00:00<00:00, 22.84it/s] 50%|#####     | 13/26 [00:00<00:00, 25.77it/s] 65%|######5   | 17/26 [00:00<00:00, 27.28it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.01it/s] 88%|########8 | 23/26 [00:00<00:00, 28.31it/s]100%|##########| 26/26 [00:01<00:00, 24.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.47 (  0.48)	train_minacc   0.51 (  0.48)	train_majacc   0.47 (  0.48)	train_corr   0.00 (  0.00)	l1 9.0927 (9.0930)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.83it/s] 15%|#5        | 4/26 [00:00<00:01, 16.77it/s] 38%|###8      | 10/26 [00:00<00:00, 33.13it/s]                                                38%|###8      | 10/26 [00:00<00:00, 33.13it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.95it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.04it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 38.04it/s]100%|##########| 26/26 [00:00<00:00, 44.02it/s]100%|##########| 26/26 [00:00<00:00, 34.83it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.65 (  0.65)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.48)	test_minacc   0.48 (  0.45)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.48 (  0.45)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.03 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.59 (  0.48)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.59 (  0.48)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.07 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.51 (  0.48)	test_majacc   0.46 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.51 (  0.48)	test_majacc_d   0.46 (  0.49)	test_corr_d  -0.02 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.40it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 17/  1]	epoch_time 0.0431 (0.0442)	validation_time 0.0003 (0.0008)	train_time 0.0428 (0.0433)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.4884000117182732, 0.5100000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.54it/s] 12%|#1        | 3/26 [00:00<00:01, 12.94it/s] 23%|##3       | 6/26 [00:00<00:01, 19.76it/s] 35%|###4      | 9/26 [00:00<00:00, 23.28it/s] 50%|#####     | 13/26 [00:00<00:00, 25.85it/s] 65%|######5   | 17/26 [00:00<00:00, 27.56it/s] 81%|########  | 21/26 [00:00<00:00, 28.54it/s] 96%|#########6| 25/26 [00:00<00:00, 29.12it/s]100%|##########| 26/26 [00:01<00:00, 24.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.47 (  0.49)	train_minacc   0.54 (  0.48)	train_majacc   0.46 (  0.49)	train_corr   0.00 (  0.00)	l1 9.0920 (9.0923)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.77it/s] 23%|##3       | 6/26 [00:00<00:00, 30.95it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.95it/s] 42%|####2     | 11/26 [00:00<00:00, 38.75it/s] 62%|######1   | 16/26 [00:00<00:00, 41.51it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.51it/s] 81%|########  | 21/26 [00:00<00:00, 42.64it/s]100%|##########| 26/26 [00:00<00:00, 37.16it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.61 (  0.61)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.46)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.46)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.03 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.55 (  0.48)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.55 (  0.48)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.07 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.54 (  0.48)	test_majacc   0.46 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.54 (  0.48)	test_majacc_d   0.46 (  0.49)	test_corr_d  -0.02 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.49it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 18/  1]	epoch_time 0.0423 (0.0441)	validation_time 0.0004 (0.0007)	train_time 0.0419 (0.0433)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.49050000831484797, 0.5220000147819519)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.27it/s] 19%|#9        | 5/26 [00:00<00:00, 21.58it/s] 31%|###       | 8/26 [00:00<00:00, 24.89it/s] 42%|####2     | 11/26 [00:00<00:00, 24.30it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.91it/s] 65%|######5   | 17/26 [00:00<00:00, 25.19it/s] 81%|########  | 21/26 [00:00<00:00, 26.89it/s] 96%|#########6| 25/26 [00:00<00:00, 27.85it/s]100%|##########| 26/26 [00:01<00:00, 24.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.46 (  0.49)	train_minacc   0.51 (  0.48)	train_majacc   0.46 (  0.49)	train_corr   0.00 (  0.00)	l1 9.0915 (9.0917)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.54it/s] 23%|##3       | 6/26 [00:00<00:01, 18.85it/s]                                               23%|##3       | 6/26 [00:00<00:01, 18.85it/s] 42%|####2     | 11/26 [00:00<00:00, 27.88it/s] 62%|######1   | 16/26 [00:00<00:00, 34.02it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.02it/s] 81%|########  | 21/26 [00:00<00:00, 34.96it/s]100%|##########| 26/26 [00:00<00:00, 38.90it/s]100%|##########| 26/26 [00:00<00:00, 29.00it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.61 (  0.61)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.52 (  0.47)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.02 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.55 (  0.48)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.55 (  0.48)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.50)	test_minacc   0.51 (  0.49)	test_majacc   0.46 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.46 (  0.50)	test_corr_d  -0.01 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.62it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 19/  1]	epoch_time 0.0415 (0.0440)	validation_time 0.0003 (0.0007)	train_time 0.0412 (0.0432)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.49680001217126846, 0.5290000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.13it/s] 12%|#1        | 3/26 [00:00<00:02, 11.24it/s] 19%|#9        | 5/26 [00:00<00:01, 13.43it/s] 35%|###4      | 9/26 [00:00<00:00, 20.06it/s] 50%|#####     | 13/26 [00:00<00:00, 23.15it/s] 65%|######5   | 17/26 [00:00<00:00, 25.52it/s] 77%|#######6  | 20/26 [00:00<00:00, 26.50it/s] 88%|########8 | 23/26 [00:01<00:00, 26.89it/s]100%|##########| 26/26 [00:01<00:00, 21.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.47 (  0.49)	train_minacc   0.49 (  0.49)	train_majacc   0.47 (  0.49)	train_corr   0.00 (  0.00)	l1 9.0911 (9.0913)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.62it/s] 23%|##3       | 6/26 [00:00<00:00, 29.73it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.73it/s] 42%|####2     | 11/26 [00:00<00:00, 36.64it/s] 62%|######1   | 16/26 [00:00<00:00, 37.33it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.33it/s] 81%|########  | 21/26 [00:00<00:00, 39.83it/s]100%|##########| 26/26 [00:00<00:00, 42.12it/s]100%|##########| 26/26 [00:00<00:00, 35.11it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.60 (  0.60)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.54 (  0.48)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.54 (  0.48)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.01 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.57 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.57 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.06 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.50)	test_corr_d  -0.00 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 56.16it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 20/  1]	epoch_time 0.0463 (0.0441)	validation_time 0.0004 (0.0007)	train_time 0.0458 (0.0433)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.49910001128911974, 0.5380000472068787)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.90it/s] 19%|#9        | 5/26 [00:00<00:00, 21.11it/s] 35%|###4      | 9/26 [00:00<00:00, 25.21it/s] 46%|####6     | 12/26 [00:00<00:00, 26.75it/s] 62%|######1   | 16/26 [00:00<00:00, 28.37it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.45it/s] 92%|#########2| 24/26 [00:00<00:00, 29.98it/s]100%|##########| 26/26 [00:00<00:00, 26.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.48 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.48 (  0.50)	train_corr   0.00 (  0.00)	l1 9.0908 (9.0909)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.88it/s] 23%|##3       | 6/26 [00:00<00:00, 25.26it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.26it/s] 42%|####2     | 11/26 [00:00<00:00, 32.95it/s] 62%|######1   | 16/26 [00:00<00:00, 38.01it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.01it/s] 81%|########  | 21/26 [00:00<00:00, 37.50it/s]100%|##########| 26/26 [00:00<00:00, 40.59it/s]100%|##########| 26/26 [00:00<00:00, 32.39it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.58 (  0.58)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.54 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.54 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.01 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.50)	test_minacc   0.57 (  0.50)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.57 (  0.50)	test_majacc_d   0.53 (  0.51)	test_corr_d  -0.06 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.49 (  0.50)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.00 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.92it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 21/  1]	epoch_time 0.0466 (0.0442)	validation_time 0.0004 (0.0007)	train_time 0.0461 (0.0434)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.5051000075340271, 0.5460000038146973)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.03it/s] 15%|#5        | 4/26 [00:00<00:01, 17.46it/s] 27%|##6       | 7/26 [00:00<00:00, 20.94it/s] 38%|###8      | 10/26 [00:00<00:00, 24.00it/s] 50%|#####     | 13/26 [00:00<00:00, 25.69it/s] 65%|######5   | 17/26 [00:00<00:00, 27.46it/s] 81%|########  | 21/26 [00:00<00:00, 28.54it/s] 96%|#########6| 25/26 [00:00<00:00, 29.48it/s]100%|##########| 26/26 [00:01<00:00, 25.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.49 (  0.50)	train_minacc   0.51 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 9.0905 (9.0906)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.04it/s] 15%|#5        | 4/26 [00:00<00:01, 17.86it/s] 35%|###4      | 9/26 [00:00<00:00, 29.98it/s]                                               35%|###4      | 9/26 [00:00<00:00, 29.98it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.93it/s] 73%|#######3  | 19/26 [00:00<00:00, 39.71it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 39.71it/s] 92%|#########2| 24/26 [00:00<00:00, 39.10it/s]100%|##########| 26/26 [00:00<00:00, 33.35it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.58 (  0.58)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.56 (  0.51)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.01 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.57 (  0.51)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.57 (  0.51)	test_majacc_d   0.53 (  0.51)	test_corr_d  -0.05 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.01 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.47it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.55 (  0.55)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.55 (  0.55)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 22/  1]	epoch_time 0.0421 (0.0441)	validation_time 0.0004 (0.0007)	train_time 0.0417 (0.0433)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.5069000115394592, 0.5550000071525574)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.87it/s] 15%|#5        | 4/26 [00:00<00:02, 10.64it/s] 27%|##6       | 7/26 [00:00<00:01, 16.15it/s] 38%|###8      | 10/26 [00:00<00:00, 18.49it/s] 50%|#####     | 13/26 [00:00<00:00, 21.56it/s] 65%|######5   | 17/26 [00:00<00:00, 24.46it/s] 77%|#######6  | 20/26 [00:01<00:00, 24.05it/s] 88%|########8 | 23/26 [00:01<00:00, 25.56it/s]100%|##########| 26/26 [00:01<00:00, 19.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 200
penalty weights 10000.0
l1 at pgd_anneal_iters 9.090408325195312
set z to 8.99950424194336
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 200
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 200
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 200
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 200
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 200
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
rho, theta 383 tensor(-0.0125, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 200
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 200
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 200
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 200
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 200
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 200
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 200
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 200
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 200
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 200
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
rho, theta 366 tensor(-0.0239, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 200
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 200
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 200
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 200
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 200
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 200
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 200
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 200
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
final projection at end of training
dim_v 512
Epoch: [23][  26/  26]	Loss 0.000 (0.013)	train_nll   0.70 (  0.70)	train_penalty   0.00 (  0.01)	weight_norm   1.66 (  0.87)	train_acc   0.54 (  0.52)	train_minacc   0.37 (  0.48)	train_majacc   0.56 (  0.53)	train_corr   0.00 (  0.00)	l1 8.5402 (8.7029)	zero_count 0.0000 (10.6470)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.58it/s] 27%|##6       | 7/26 [00:00<00:00, 25.48it/s]                                               27%|##6       | 7/26 [00:00<00:00, 25.48it/s] 46%|####6     | 12/26 [00:00<00:00, 32.72it/s] 65%|######5   | 17/26 [00:00<00:00, 37.41it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.41it/s] 85%|########4 | 22/26 [00:00<00:00, 40.11it/s]100%|##########| 26/26 [00:00<00:00, 32.35it/s]
Test: [   0/  26]	Loss 0.699 (0.699)	test_acc   0.38 (  0.38)	test_minacc   0.57 (  0.57)	test_majacc   0.34 (  0.34)	Loss_d 0.699 (0.699)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.34 (  0.34)	test_corr_d  -0.13 ( -0.13)
Test: [  10/  26]	Loss 0.702 (0.700)	test_acc   0.35 (  0.38)	test_minacc   0.61 (  0.66)	test_majacc   0.31 (  0.33)	Loss_d 0.702 (0.700)	test_acc_d   0.35 (  0.38)	test_minacc_d   0.61 (  0.66)	test_majacc_d   0.31 (  0.33)	test_corr_d  -0.11 ( -0.13)
Test: [  20/  26]	Loss 0.698 (0.701)	test_acc   0.36 (  0.38)	test_minacc   0.70 (  0.66)	test_majacc   0.32 (  0.33)	Loss_d 0.698 (0.701)	test_acc_d   0.36 (  0.38)	test_minacc_d   0.70 (  0.66)	test_majacc_d   0.32 (  0.33)	test_corr_d  -0.08 ( -0.13)
Test: [  26/  26]	Loss 0.700 (0.700)	test_acc   0.40 (  0.38)	test_minacc   0.60 (  0.66)	test_majacc   0.36 (  0.33)	Loss_d 0.700 (0.700)	test_acc_d   0.40 (  0.38)	test_minacc_d   0.60 (  0.66)	test_majacc_d   0.36 (  0.33)	test_corr_d  -0.13 ( -0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.36it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.63 (  0.63)	test_minacc   0.67 (  0.67)	test_majacc   0.29 (  0.29)	Loss_d 0.691 (0.691)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.29 (  0.29)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.63 (  0.63)	test_minacc   0.67 (  0.67)	test_majacc   0.29 (  0.29)	Loss_d 0.691 (0.691)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.29 (  0.29)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 23/  1]	epoch_time 0.0461 (0.0442)	validation_time 0.0003 (0.0007)	train_time 0.0457 (0.0434)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.37770000782608987, 0.628000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.58it/s] 15%|#5        | 4/26 [00:00<00:01, 17.13it/s] 27%|##6       | 7/26 [00:00<00:00, 21.55it/s] 38%|###8      | 10/26 [00:00<00:00, 24.44it/s] 50%|#####     | 13/26 [00:00<00:00, 25.38it/s] 62%|######1   | 16/26 [00:00<00:00, 26.26it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.12it/s] 88%|########8 | 23/26 [00:00<00:00, 28.11it/s]100%|##########| 26/26 [00:01<00:00, 24.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 200
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 200
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 200
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 200
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 200
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 200
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 200
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 200
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 200
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 200
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 200
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 200
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 200
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 200
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 200
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 200
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 200
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 200
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 200
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 200
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 200
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 200
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 200
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 200
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 200
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 200
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
final projection at end of training
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.16 (  2.01)	train_acc   0.53 (  0.48)	train_minacc   0.57 (  0.54)	train_majacc   0.52 (  0.47)	train_corr   0.00 (  0.00)	l1 8.7843 (8.6879)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.82it/s] 19%|#9        | 5/26 [00:00<00:00, 21.59it/s] 38%|###8      | 10/26 [00:00<00:00, 32.23it/s]                                                38%|###8      | 10/26 [00:00<00:00, 32.23it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.33it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.24it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.24it/s] 96%|#########6| 25/26 [00:00<00:00, 40.02it/s]100%|##########| 26/26 [00:00<00:00, 32.88it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.49 (  0.49)	test_minacc   0.36 (  0.36)	test_majacc   0.52 (  0.52)	Loss_d 0.695 (0.695)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.691 (0.690)	test_acc   0.49 (  0.50)	test_minacc   0.41 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.690)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.41 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.20 (  0.20)
Test: [  20/  26]	Loss 0.692 (0.690)	test_acc   0.48 (  0.50)	test_minacc   0.41 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.690)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.41 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.21 (  0.21)
Test: [  26/  26]	Loss 0.688 (0.690)	test_acc   0.53 (  0.50)	test_minacc   0.57 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.688 (0.690)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.57 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.20 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.27it/s]
Test: [  0/  1]	Loss 0.703 (0.703)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.703 (0.703)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 0.703 (0.703)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.703 (0.703)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.18 (  0.18)
Overall Timing[ 24/  1]	epoch_time 0.0433 (0.0442)	validation_time 0.0004 (0.0007)	train_time 0.0429 (0.0434)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.5000000092685223, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.77it/s] 15%|#5        | 4/26 [00:00<00:01, 12.84it/s] 27%|##6       | 7/26 [00:00<00:01, 18.06it/s] 38%|###8      | 10/26 [00:00<00:00, 21.42it/s] 54%|#####3    | 14/26 [00:00<00:00, 24.87it/s] 65%|######5   | 17/26 [00:00<00:00, 26.02it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.13it/s] 88%|########8 | 23/26 [00:01<00:00, 27.59it/s]100%|##########| 26/26 [00:01<00:00, 22.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 200
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 200
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 200
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 200
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 200
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 200
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 200
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 200
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 200
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 200
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 200
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 200
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 200
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 200
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 200
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 200
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 200
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 200
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 200
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 200
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 200
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 200
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 200
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 200
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 200
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 200
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.19 (  2.18)	train_acc   0.53 (  0.50)	train_minacc   0.57 (  0.50)	train_majacc   0.52 (  0.50)	train_corr   0.00 (  0.00)	l1 8.7782 (8.7870)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.68it/s] 23%|##3       | 6/26 [00:00<00:00, 27.26it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.26it/s] 42%|####2     | 11/26 [00:00<00:00, 34.95it/s] 62%|######1   | 16/26 [00:00<00:00, 39.52it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.52it/s] 81%|########  | 21/26 [00:00<00:00, 38.01it/s]100%|##########| 26/26 [00:00<00:00, 41.22it/s]100%|##########| 26/26 [00:00<00:00, 33.51it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.49 (  0.49)	test_minacc   0.36 (  0.36)	test_majacc   0.52 (  0.52)	Loss_d 0.695 (0.695)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.693 (0.691)	test_acc   0.49 (  0.50)	test_minacc   0.41 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.691)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.41 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.19 (  0.19)
Test: [  20/  26]	Loss 0.692 (0.691)	test_acc   0.48 (  0.50)	test_minacc   0.41 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.691)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.41 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.21 (  0.19)
Test: [  26/  26]	Loss 0.690 (0.691)	test_acc   0.53 (  0.50)	test_minacc   0.57 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.690 (0.691)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.57 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.19 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.96it/s]
Test: [  0/  1]	Loss 0.699 (0.699)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.699 (0.699)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.17 (  0.17)
Test: [  1/  1]	Loss 0.699 (0.699)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.699 (0.699)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.17 (  0.17)
Overall Timing[ 25/  1]	epoch_time 0.0453 (0.0442)	validation_time 0.0006 (0.0007)	train_time 0.0447 (0.0435)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.4997000104486942, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.81it/s] 12%|#1        | 3/26 [00:00<00:01, 13.30it/s] 27%|##6       | 7/26 [00:00<00:00, 21.20it/s] 38%|###8      | 10/26 [00:00<00:00, 24.12it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.48it/s] 65%|######5   | 17/26 [00:00<00:00, 27.33it/s] 81%|########  | 21/26 [00:00<00:00, 28.27it/s] 96%|#########6| 25/26 [00:00<00:00, 29.09it/s]100%|##########| 26/26 [00:01<00:00, 24.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 200
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 200
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 200
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 200
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 200
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 200
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 200
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 200
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 200
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 200
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 200
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 200
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 200
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 200
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 200
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 200
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 200
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 200
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 200
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 200
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 200
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 200
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 200
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 200
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 200
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 200
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
final projection at end of training
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.19 (  2.19)	train_acc   0.53 (  0.50)	train_minacc   0.57 (  0.50)	train_majacc   0.52 (  0.50)	train_corr   0.00 (  0.00)	l1 8.7596 (8.7678)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.25it/s] 23%|##3       | 6/26 [00:00<00:00, 20.55it/s]                                               23%|##3       | 6/26 [00:00<00:00, 20.55it/s] 42%|####2     | 11/26 [00:00<00:00, 29.06it/s] 62%|######1   | 16/26 [00:00<00:00, 34.46it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.46it/s] 81%|########  | 21/26 [00:00<00:00, 37.79it/s]100%|##########| 26/26 [00:00<00:00, 40.26it/s]100%|##########| 26/26 [00:00<00:00, 31.17it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.48 (  0.48)	test_minacc   0.36 (  0.36)	test_majacc   0.51 (  0.51)	Loss_d 0.695 (0.695)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.694 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.41 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.694 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.41 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.14 (  0.12)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.41 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.41 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.18 (  0.13)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.53 (  0.50)	test_minacc   0.57 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.57 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.14 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.83it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.696 (0.696)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.696 (0.696)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.12 (  0.12)
Overall Timing[ 26/  1]	epoch_time 0.0427 (0.0442)	validation_time 0.0003 (0.0006)	train_time 0.0423 (0.0434)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.4958000118434429, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.62it/s] 15%|#5        | 4/26 [00:00<00:01, 21.27it/s] 27%|##6       | 7/26 [00:00<00:00, 25.20it/s] 38%|###8      | 10/26 [00:00<00:00, 26.60it/s] 50%|#####     | 13/26 [00:00<00:00, 27.70it/s] 65%|######5   | 17/26 [00:00<00:00, 29.12it/s] 81%|########  | 21/26 [00:00<00:00, 29.92it/s] 96%|#########6| 25/26 [00:00<00:00, 30.33it/s]100%|##########| 26/26 [00:00<00:00, 26.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 200
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 200
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 200
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 200
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 200
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 200
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 200
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 200
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 200
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 200
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 200
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 200
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 200
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 200
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 200
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 200
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 200
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 200
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 200
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 200
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 200
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 200
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 200
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 200
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 200
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 200
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
final projection at end of training
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.18 (  2.18)	train_acc   0.53 (  0.50)	train_minacc   0.57 (  0.50)	train_majacc   0.52 (  0.50)	train_corr   0.00 (  0.00)	l1 8.7513 (8.7550)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.52it/s] 27%|##6       | 7/26 [00:00<00:00, 34.90it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.90it/s] 46%|####6     | 12/26 [00:00<00:00, 39.12it/s] 65%|######5   | 17/26 [00:00<00:00, 41.67it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.67it/s] 85%|########4 | 22/26 [00:00<00:00, 40.58it/s]100%|##########| 26/26 [00:00<00:00, 38.06it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.38 (  0.38)	test_majacc   0.49 (  0.49)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.39 (  0.51)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.39 (  0.51)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.09 (  0.08)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.48 (  0.49)	test_minacc   0.43 (  0.51)	test_majacc   0.48 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.48 (  0.49)	test_corr_d   0.15 (  0.08)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.49)	test_minacc   0.57 (  0.51)	test_majacc   0.52 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.49)	test_minacc_d   0.57 (  0.51)	test_majacc_d   0.52 (  0.49)	test_corr_d   0.09 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.49it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.08 (  0.08)
Overall Timing[ 27/  1]	epoch_time 0.0407 (0.0440)	validation_time 0.0004 (0.0006)	train_time 0.0402 (0.0433)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.494000007301569, 0.5040000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.51it/s] 15%|#5        | 4/26 [00:00<00:01, 12.19it/s] 31%|###       | 8/26 [00:00<00:00, 19.25it/s] 46%|####6     | 12/26 [00:00<00:00, 23.41it/s] 62%|######1   | 16/26 [00:00<00:00, 26.07it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.72it/s] 92%|#########2| 24/26 [00:01<00:00, 29.03it/s]100%|##########| 26/26 [00:01<00:00, 22.57it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 200
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 200
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 200
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 200
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 200
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 200
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 200
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 200
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 200
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 200
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 200
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 200
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 200
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 200
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 200
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 200
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 200
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 200
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 200
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 200
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 200
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 200
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 200
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 200
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 200
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 200
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
final projection at end of training
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.17 (  2.18)	train_acc   0.51 (  0.49)	train_minacc   0.57 (  0.53)	train_majacc   0.50 (  0.48)	train_corr   0.00 (  0.00)	l1 8.7473 (8.7490)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.31it/s] 12%|#1        | 3/26 [00:00<00:01, 13.82it/s] 31%|###       | 8/26 [00:00<00:00, 28.27it/s]                                               31%|###       | 8/26 [00:00<00:00, 28.27it/s] 50%|#####     | 13/26 [00:00<00:00, 34.40it/s] 69%|######9   | 18/26 [00:00<00:00, 35.28it/s]                                                69%|######9   | 18/26 [00:00<00:00, 35.28it/s] 88%|########8 | 23/26 [00:00<00:00, 38.52it/s]100%|##########| 26/26 [00:00<00:00, 32.45it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.46 (  0.46)	test_minacc   0.40 (  0.40)	test_majacc   0.47 (  0.47)	Loss_d 0.695 (0.695)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.41 (  0.53)	test_majacc   0.48 (  0.47)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.41 (  0.53)	test_majacc_d   0.48 (  0.47)	test_corr_d   0.06 (  0.05)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.46 (  0.48)	test_minacc   0.48 (  0.54)	test_majacc   0.46 (  0.47)	Loss_d 0.692 (0.693)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.48 (  0.54)	test_majacc_d   0.46 (  0.47)	test_corr_d   0.13 (  0.05)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.57 (  0.53)	test_majacc   0.49 (  0.47)	Loss_d 0.692 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.57 (  0.53)	test_majacc_d   0.49 (  0.47)	test_corr_d   0.06 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.08it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.06 (  0.06)
Overall Timing[ 28/  1]	epoch_time 0.0429 (0.0440)	validation_time 0.0004 (0.0006)	train_time 0.0424 (0.0433)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.48160000595450403, 0.5170000195503235)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.31it/s] 19%|#9        | 5/26 [00:00<00:00, 22.02it/s] 35%|###4      | 9/26 [00:00<00:00, 25.94it/s] 50%|#####     | 13/26 [00:00<00:00, 27.50it/s] 62%|######1   | 16/26 [00:00<00:00, 28.24it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.14it/s] 85%|########4 | 22/26 [00:00<00:00, 28.68it/s]100%|##########| 26/26 [00:00<00:00, 29.48it/s]100%|##########| 26/26 [00:01<00:00, 25.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 200
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 200
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 200
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 200
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 200
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 200
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 200
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 200
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 200
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 200
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 200
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 200
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 200
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 200
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 200
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 200
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 200
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 200
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 200
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 200
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 200
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 200
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 200
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 200
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 200
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 200
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
final projection at end of training
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.17 (  2.17)	train_acc   0.49 (  0.48)	train_minacc   0.57 (  0.54)	train_majacc   0.47 (  0.47)	train_corr   0.00 (  0.00)	l1 8.7453 (8.7462)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.76it/s] 12%|#1        | 3/26 [00:00<00:01, 11.98it/s] 27%|##6       | 7/26 [00:00<00:00, 22.40it/s]                                               27%|##6       | 7/26 [00:00<00:00, 22.40it/s] 50%|#####     | 13/26 [00:00<00:00, 34.53it/s] 69%|######9   | 18/26 [00:00<00:00, 38.45it/s]                                                69%|######9   | 18/26 [00:00<00:00, 38.45it/s] 88%|########8 | 23/26 [00:00<00:00, 37.59it/s]100%|##########| 26/26 [00:00<00:00, 31.16it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.40 (  0.40)	test_majacc   0.46 (  0.46)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.48)	test_minacc   0.41 (  0.54)	test_majacc   0.46 (  0.46)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.41 (  0.54)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.03 (  0.03)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.48 (  0.55)	test_majacc   0.46 (  0.46)	Loss_d 0.692 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.48 (  0.55)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.12 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.47)	test_minacc   0.57 (  0.54)	test_majacc   0.47 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.47)	test_minacc_d   0.57 (  0.54)	test_majacc_d   0.47 (  0.46)	test_corr_d   0.05 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.97it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.05 (  0.05)
Overall Timing[ 29/  1]	epoch_time 0.0465 (0.0441)	validation_time 0.0004 (0.0006)	train_time 0.0461 (0.0434)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.4738000082373619, 0.5300000309944153)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.24it/s] 19%|#9        | 5/26 [00:00<00:01, 20.56it/s] 35%|###4      | 9/26 [00:00<00:00, 24.93it/s] 50%|#####     | 13/26 [00:00<00:00, 27.14it/s] 62%|######1   | 16/26 [00:00<00:00, 27.71it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.82it/s] 88%|########8 | 23/26 [00:00<00:00, 29.13it/s]100%|##########| 26/26 [00:01<00:00, 25.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 200
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 200
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 200
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 200
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 200
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 200
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 200
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 200
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 200
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 200
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 200
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 200
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 200
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 200
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 200
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 200
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 200
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 200
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 200
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 200
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 200
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 200
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 200
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 200
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 200
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 200
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.16 (  2.16)	train_acc   0.48 (  0.47)	train_minacc   0.57 (  0.55)	train_majacc   0.46 (  0.46)	train_corr   0.00 (  0.00)	l1 8.7441 (8.7447)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.37it/s] 23%|##3       | 6/26 [00:00<00:00, 30.38it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.38it/s] 42%|####2     | 11/26 [00:00<00:00, 36.74it/s] 62%|######1   | 16/26 [00:00<00:00, 40.86it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.86it/s] 81%|########  | 21/26 [00:00<00:00, 38.18it/s]100%|##########| 26/26 [00:00<00:00, 41.34it/s]100%|##########| 26/26 [00:00<00:00, 35.03it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.42 (  0.42)	test_majacc   0.46 (  0.46)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.47)	test_minacc   0.41 (  0.56)	test_majacc   0.45 (  0.46)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.47)	test_minacc_d   0.41 (  0.56)	test_majacc_d   0.45 (  0.46)	test_corr_d   0.02 (  0.02)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.48 (  0.56)	test_majacc   0.46 (  0.45)	Loss_d 0.692 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.48 (  0.56)	test_majacc_d   0.46 (  0.45)	test_corr_d   0.11 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.47)	test_minacc   0.57 (  0.55)	test_majacc   0.46 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.57 (  0.55)	test_majacc_d   0.46 (  0.45)	test_corr_d   0.04 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.25it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.04 (  0.04)
Overall Timing[ 30/  1]	epoch_time 0.0421 (0.0440)	validation_time 0.0003 (0.0006)	train_time 0.0417 (0.0433)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.4681000044643879, 0.5330000519752502)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.64it/s] 19%|#9        | 5/26 [00:00<00:00, 21.98it/s] 31%|###       | 8/26 [00:00<00:00, 25.10it/s] 42%|####2     | 11/26 [00:00<00:00, 26.89it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.39it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.92it/s] 88%|########8 | 23/26 [00:00<00:00, 29.41it/s]100%|##########| 26/26 [00:00<00:00, 26.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 200
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 200
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 200
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 200
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 200
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 200
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 200
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 200
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 200
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 200
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 200
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 200
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 200
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 200
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 200
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 200
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 200
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 200
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 200
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 200
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 200
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 200
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 200
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 200
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 200
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 200
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
final projection at end of training
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.15 (  2.16)	train_acc   0.47 (  0.47)	train_minacc   0.57 (  0.56)	train_majacc   0.45 (  0.45)	train_corr   0.00 (  0.00)	l1 8.7433 (8.7436)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.52it/s] 12%|#1        | 3/26 [00:00<00:02,  8.15it/s] 31%|###       | 8/26 [00:00<00:00, 20.39it/s]                                               31%|###       | 8/26 [00:00<00:00, 20.39it/s] 50%|#####     | 13/26 [00:00<00:00, 28.22it/s] 69%|######9   | 18/26 [00:00<00:00, 33.54it/s]                                                69%|######9   | 18/26 [00:00<00:00, 33.54it/s] 88%|########8 | 23/26 [00:00<00:00, 34.60it/s]100%|##########| 26/26 [00:00<00:00, 27.29it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.42 (  0.42)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.47)	test_minacc   0.41 (  0.56)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.47)	test_minacc_d   0.41 (  0.56)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.01 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.48 (  0.56)	test_majacc   0.46 (  0.45)	Loss_d 0.692 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.48 (  0.56)	test_majacc_d   0.46 (  0.45)	test_corr_d   0.10 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.57 (  0.56)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.04 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.88it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.03 (  0.03)
Overall Timing[ 31/  1]	epoch_time 0.0429 (0.0440)	validation_time 0.0004 (0.0006)	train_time 0.0425 (0.0433)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.46500000381469725, 0.5420000553131104)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.93it/s] 15%|#5        | 4/26 [00:00<00:01, 11.04it/s] 27%|##6       | 7/26 [00:00<00:01, 17.01it/s] 42%|####2     | 11/26 [00:00<00:00, 21.81it/s] 58%|#####7    | 15/26 [00:00<00:00, 24.59it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.72it/s] 85%|########4 | 22/26 [00:00<00:00, 27.42it/s]100%|##########| 26/26 [00:01<00:00, 28.71it/s]100%|##########| 26/26 [00:01<00:00, 22.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 200
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 200
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 200
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 200
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 200
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 200
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 200
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 200
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 200
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 200
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 200
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 200
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 200
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 200
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 200
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 200
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 200
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 200
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 200
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 200
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 200
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 200
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 200
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 200
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 200
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 200
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
final projection at end of training
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.14 (  2.15)	train_acc   0.47 (  0.46)	train_minacc   0.57 (  0.56)	train_majacc   0.45 (  0.45)	train_corr   0.00 (  0.00)	l1 8.7427 (8.7430)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.05it/s] 27%|##6       | 7/26 [00:00<00:00, 32.95it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.95it/s] 50%|#####     | 13/26 [00:00<00:00, 41.31it/s] 69%|######9   | 18/26 [00:00<00:00, 43.10it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.10it/s] 88%|########8 | 23/26 [00:00<00:00, 43.33it/s]100%|##########| 26/26 [00:00<00:00, 38.20it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.42 (  0.42)	test_majacc   0.44 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.46)	test_minacc   0.44 (  0.57)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.46)	test_minacc_d   0.44 (  0.57)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.00 (  0.00)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.45 (  0.46)	test_minacc   0.48 (  0.57)	test_majacc   0.45 (  0.44)	Loss_d 0.692 (0.693)	test_acc_d   0.45 (  0.46)	test_minacc_d   0.48 (  0.57)	test_majacc_d   0.45 (  0.44)	test_corr_d   0.10 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.46)	test_minacc   0.57 (  0.56)	test_majacc   0.45 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.46)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.45 (  0.44)	test_corr_d   0.04 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.13it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.03 (  0.03)
Overall Timing[ 32/  1]	epoch_time 0.0423 (0.0439)	validation_time 0.0004 (0.0006)	train_time 0.0420 (0.0433)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.4610000052154064, 0.5470000505447388)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.56it/s] 19%|#9        | 5/26 [00:00<00:00, 22.17it/s] 31%|###       | 8/26 [00:00<00:00, 25.15it/s] 42%|####2     | 11/26 [00:00<00:00, 26.80it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.27it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.06it/s] 88%|########8 | 23/26 [00:00<00:00, 29.98it/s]100%|##########| 26/26 [00:00<00:00, 26.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 200
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 200
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 200
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 200
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 200
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 200
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 200
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 200
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 200
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 200
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 200
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 200
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 200
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 200
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 200
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 200
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 200
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 200
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 200
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 200
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 200
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 200
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 200
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 200
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 200
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 200
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
final projection at end of training
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.14 (  2.14)	train_acc   0.47 (  0.46)	train_minacc   0.57 (  0.57)	train_majacc   0.45 (  0.44)	train_corr   0.00 (  0.00)	l1 8.7421 (8.7424)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.67it/s] 12%|#1        | 3/26 [00:00<00:01, 13.17it/s] 31%|###       | 8/26 [00:00<00:00, 28.02it/s]                                               31%|###       | 8/26 [00:00<00:00, 28.02it/s] 50%|#####     | 13/26 [00:00<00:00, 35.15it/s] 69%|######9   | 18/26 [00:00<00:00, 37.02it/s]                                                69%|######9   | 18/26 [00:00<00:00, 37.02it/s] 88%|########8 | 23/26 [00:00<00:00, 39.44it/s]100%|##########| 26/26 [00:00<00:00, 32.66it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.43 (  0.43)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.44 (  0.46)	test_minacc   0.44 (  0.57)	test_majacc   0.44 (  0.44)	Loss_d 0.694 (0.693)	test_acc_d   0.44 (  0.46)	test_minacc_d   0.44 (  0.57)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.01 (  0.00)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.45 (  0.46)	test_minacc   0.48 (  0.57)	test_majacc   0.45 (  0.44)	Loss_d 0.692 (0.693)	test_acc_d   0.45 (  0.46)	test_minacc_d   0.48 (  0.57)	test_majacc_d   0.45 (  0.44)	test_corr_d   0.09 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.46)	test_minacc   0.57 (  0.57)	test_majacc   0.45 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.46)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.45 (  0.44)	test_corr_d   0.04 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.97it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.03 (  0.03)
Overall Timing[ 33/  1]	epoch_time 0.0436 (0.0439)	validation_time 0.0004 (0.0006)	train_time 0.0431 (0.0433)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.45920000299811364, 0.550000011920929)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.01it/s] 15%|#5        | 4/26 [00:00<00:01, 16.47it/s] 27%|##6       | 7/26 [00:00<00:00, 21.64it/s] 38%|###8      | 10/26 [00:00<00:00, 24.55it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.95it/s] 69%|######9   | 18/26 [00:00<00:00, 28.47it/s] 85%|########4 | 22/26 [00:00<00:00, 29.49it/s]100%|##########| 26/26 [00:00<00:00, 30.38it/s]100%|##########| 26/26 [00:01<00:00, 24.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 200
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 200
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 200
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 200
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 200
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 200
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 200
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 200
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 200
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 200
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 200
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 200
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 200
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 200
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 200
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 200
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 200
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 200
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 200
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 200
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 200
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 200
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 200
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 200
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 200
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 200
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
final projection at end of training
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.13 (  2.13)	train_acc   0.47 (  0.46)	train_minacc   0.57 (  0.57)	train_majacc   0.45 (  0.44)	train_corr   0.00 (  0.00)	l1 8.7416 (8.7418)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.86it/s] 23%|##3       | 6/26 [00:00<00:00, 29.61it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.61it/s] 42%|####2     | 11/26 [00:00<00:00, 36.22it/s] 62%|######1   | 16/26 [00:00<00:00, 39.07it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.07it/s] 81%|########  | 21/26 [00:00<00:00, 37.94it/s]100%|##########| 26/26 [00:00<00:00, 40.99it/s]100%|##########| 26/26 [00:00<00:00, 34.26it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.44 (  0.44)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.44 (  0.46)	test_minacc   0.44 (  0.58)	test_majacc   0.44 (  0.44)	Loss_d 0.694 (0.693)	test_acc_d   0.44 (  0.46)	test_minacc_d   0.44 (  0.58)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.01 (  0.00)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.45 (  0.46)	test_minacc   0.48 (  0.57)	test_majacc   0.45 (  0.44)	Loss_d 0.692 (0.693)	test_acc_d   0.45 (  0.46)	test_minacc_d   0.48 (  0.57)	test_majacc_d   0.45 (  0.44)	test_corr_d   0.09 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.57 (  0.57)	test_majacc   0.45 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.45 (  0.44)	test_corr_d   0.04 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.70it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.02 (  0.02)
Overall Timing[ 34/  1]	epoch_time 0.0415 (0.0439)	validation_time 0.0003 (0.0006)	train_time 0.0411 (0.0432)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.45890000513195994, 0.5530000329017639)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.46it/s]  8%|7         | 2/26 [00:00<00:02,  8.66it/s] 19%|#9        | 5/26 [00:00<00:01, 17.02it/s] 31%|###       | 8/26 [00:00<00:00, 21.41it/s] 42%|####2     | 11/26 [00:00<00:00, 24.06it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.70it/s] 65%|######5   | 17/26 [00:00<00:00, 26.83it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.70it/s] 88%|########8 | 23/26 [00:00<00:00, 27.92it/s]100%|##########| 26/26 [00:01<00:00, 23.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 200
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 200
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 200
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 200
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 200
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 200
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 200
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 200
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 200
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 200
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 200
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 200
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 200
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 200
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 200
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 200
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 200
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 200
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 200
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 200
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 200
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 200
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 200
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 200
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 200
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 200
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.12 (  2.13)	train_acc   0.46 (  0.46)	train_minacc   0.57 (  0.57)	train_majacc   0.44 (  0.44)	train_corr   0.00 (  0.00)	l1 8.7412 (8.7413)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  3.10it/s] 23%|##3       | 6/26 [00:00<00:01, 17.22it/s]                                               23%|##3       | 6/26 [00:00<00:01, 17.22it/s] 42%|####2     | 11/26 [00:00<00:00, 26.04it/s] 62%|######1   | 16/26 [00:00<00:00, 32.34it/s]                                                62%|######1   | 16/26 [00:00<00:00, 32.34it/s] 81%|########  | 21/26 [00:00<00:00, 33.39it/s]100%|##########| 26/26 [00:00<00:00, 37.44it/s]100%|##########| 26/26 [00:00<00:00, 27.39it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.44 (  0.44)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.44 (  0.46)	test_minacc   0.46 (  0.58)	test_majacc   0.44 (  0.44)	Loss_d 0.694 (0.693)	test_acc_d   0.44 (  0.46)	test_minacc_d   0.46 (  0.58)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.02 (  0.00)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.45 (  0.46)	test_minacc   0.48 (  0.57)	test_majacc   0.45 (  0.44)	Loss_d 0.692 (0.693)	test_acc_d   0.45 (  0.46)	test_minacc_d   0.48 (  0.57)	test_majacc_d   0.45 (  0.44)	test_corr_d   0.09 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.57 (  0.57)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.04 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.29it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.02 (  0.02)
Overall Timing[ 35/  1]	epoch_time 0.0452 (0.0439)	validation_time 0.0004 (0.0006)	train_time 0.0448 (0.0432)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.458100003182888, 0.5530000329017639)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.66it/s] 15%|#5        | 4/26 [00:00<00:01, 20.38it/s] 27%|##6       | 7/26 [00:00<00:00, 23.84it/s] 38%|###8      | 10/26 [00:00<00:00, 25.85it/s] 50%|#####     | 13/26 [00:00<00:00, 26.89it/s] 65%|######5   | 17/26 [00:00<00:00, 28.22it/s] 81%|########  | 21/26 [00:00<00:00, 28.92it/s] 96%|#########6| 25/26 [00:00<00:00, 29.69it/s]100%|##########| 26/26 [00:01<00:00, 25.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 200
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 200
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 200
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 200
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 200
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 200
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 200
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 200
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 200
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 200
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 200
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 200
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 200
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 200
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 200
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 200
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 200
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 200
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 200
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 200
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 200
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 200
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 200
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 200
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 200
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 200
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
final projection at end of training
dim_v 512
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.11 (  2.12)	train_acc   0.46 (  0.46)	train_minacc   0.57 (  0.57)	train_majacc   0.44 (  0.44)	train_corr   0.00 (  0.00)	l1 8.7407 (8.7409)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.62it/s] 15%|#5        | 4/26 [00:00<00:01, 16.13it/s] 35%|###4      | 9/26 [00:00<00:00, 29.46it/s]                                               35%|###4      | 9/26 [00:00<00:00, 29.46it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.18it/s] 73%|#######3  | 19/26 [00:00<00:00, 39.69it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 39.69it/s] 92%|#########2| 24/26 [00:00<00:00, 39.04it/s]100%|##########| 26/26 [00:00<00:00, 33.11it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.44 (  0.44)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.44 (  0.46)	test_minacc   0.46 (  0.57)	test_majacc   0.43 (  0.44)	Loss_d 0.694 (0.693)	test_acc_d   0.44 (  0.46)	test_minacc_d   0.46 (  0.57)	test_majacc_d   0.43 (  0.44)	test_corr_d  -0.02 (  0.00)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.45 (  0.46)	test_minacc   0.48 (  0.57)	test_majacc   0.45 (  0.44)	Loss_d 0.692 (0.693)	test_acc_d   0.45 (  0.46)	test_minacc_d   0.48 (  0.57)	test_majacc_d   0.45 (  0.44)	test_corr_d   0.09 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.57 (  0.57)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.05 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.46it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.02 (  0.02)
Overall Timing[ 36/  1]	epoch_time 0.0458 (0.0439)	validation_time 0.0005 (0.0006)	train_time 0.0453 (0.0433)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.4592000031173229, 0.5540000200271606)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.22it/s] 23%|##3       | 6/26 [00:00<00:00, 21.56it/s] 35%|###4      | 9/26 [00:00<00:00, 24.42it/s] 46%|####6     | 12/26 [00:00<00:00, 25.95it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.23it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.69it/s] 88%|########8 | 23/26 [00:00<00:00, 29.58it/s]100%|##########| 26/26 [00:00<00:00, 26.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 200
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 200
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 200
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 200
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 200
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 200
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 200
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 200
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 200
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 200
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 200
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 200
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 200
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 200
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 200
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 200
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 200
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 200
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 200
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 200
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 200
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 200
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 200
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 200
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 200
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 200
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
final projection at end of training
dim_v 512
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.11 (  2.11)	train_acc   0.46 (  0.46)	train_minacc   0.57 (  0.57)	train_majacc   0.44 (  0.44)	train_corr   0.00 (  0.00)	l1 8.7403 (8.7405)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.29it/s] 19%|#9        | 5/26 [00:00<00:00, 26.69it/s] 38%|###8      | 10/26 [00:00<00:00, 32.35it/s]                                                38%|###8      | 10/26 [00:00<00:00, 32.35it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.65it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.65it/s] 92%|#########2| 24/26 [00:00<00:00, 42.02it/s]100%|##########| 26/26 [00:00<00:00, 34.93it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.42 (  0.42)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.46)	test_minacc   0.46 (  0.57)	test_majacc   0.44 (  0.44)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.46)	test_minacc_d   0.46 (  0.57)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.02 (  0.00)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.45 (  0.46)	test_minacc   0.48 (  0.56)	test_majacc   0.45 (  0.44)	Loss_d 0.692 (0.693)	test_acc_d   0.45 (  0.46)	test_minacc_d   0.48 (  0.56)	test_majacc_d   0.45 (  0.44)	test_corr_d   0.09 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.57 (  0.57)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.05 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.87it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.02 (  0.02)
Overall Timing[ 37/  1]	epoch_time 0.0444 (0.0440)	validation_time 0.0004 (0.0006)	train_time 0.0440 (0.0433)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.4594000025689602, 0.5530000329017639)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.57it/s] 15%|#5        | 4/26 [00:00<00:01, 16.24it/s] 27%|##6       | 7/26 [00:00<00:00, 19.55it/s] 38%|###8      | 10/26 [00:00<00:00, 22.70it/s] 50%|#####     | 13/26 [00:00<00:00, 24.52it/s] 62%|######1   | 16/26 [00:00<00:00, 25.54it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.18it/s] 88%|########8 | 23/26 [00:00<00:00, 27.82it/s]100%|##########| 26/26 [00:01<00:00, 23.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 200
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 200
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 200
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 200
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 200
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 200
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 200
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 200
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 200
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 200
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 200
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 200
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 200
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 200
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 200
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 200
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 200
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 200
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 200
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 200
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 200
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 200
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 200
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 200
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 200
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 200
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
final projection at end of training
dim_v 512
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.10 (  2.10)	train_acc   0.46 (  0.46)	train_minacc   0.57 (  0.56)	train_majacc   0.45 (  0.44)	train_corr   0.00 (  0.00)	l1 8.7400 (8.7401)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.05it/s] 31%|###       | 8/26 [00:00<00:00, 37.84it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.84it/s] 50%|#####     | 13/26 [00:00<00:00, 41.05it/s] 69%|######9   | 18/26 [00:00<00:00, 43.36it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.36it/s] 88%|########8 | 23/26 [00:00<00:00, 44.06it/s]100%|##########| 26/26 [00:00<00:00, 38.11it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.47)	test_minacc   0.48 (  0.56)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.47)	test_minacc_d   0.48 (  0.56)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.02 (  0.00)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.48 (  0.56)	test_majacc   0.46 (  0.45)	Loss_d 0.692 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.48 (  0.56)	test_majacc_d   0.46 (  0.45)	test_corr_d   0.09 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.57 (  0.56)	test_majacc   0.45 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.45 (  0.44)	test_corr_d   0.05 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.02it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.02 (  0.02)
Overall Timing[ 38/  1]	epoch_time 0.0414 (0.0439)	validation_time 0.0004 (0.0006)	train_time 0.0410 (0.0433)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.46210000377893445, 0.5520000457763672)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.24it/s] 12%|#1        | 3/26 [00:00<00:02,  7.95it/s] 23%|##3       | 6/26 [00:00<00:01, 14.19it/s] 35%|###4      | 9/26 [00:00<00:00, 17.02it/s] 50%|#####     | 13/26 [00:00<00:00, 21.72it/s] 65%|######5   | 17/26 [00:00<00:00, 24.53it/s] 77%|#######6  | 20/26 [00:01<00:00, 25.63it/s] 88%|########8 | 23/26 [00:01<00:00, 25.87it/s]100%|##########| 26/26 [00:01<00:00, 19.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 200
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 200
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 200
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 200
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 200
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 200
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 200
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 200
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 200
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 200
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 200
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 200
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 200
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 200
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 200
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 200
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 200
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 200
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 200
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 200
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 200
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 200
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 200
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 200
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 200
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 200
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
final projection at end of training
dim_v 512
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.09 (  2.10)	train_acc   0.47 (  0.46)	train_minacc   0.57 (  0.56)	train_majacc   0.45 (  0.45)	train_corr   0.00 (  0.00)	l1 8.7396 (8.7397)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.38it/s] 27%|##6       | 7/26 [00:00<00:00, 29.98it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.98it/s] 42%|####2     | 11/26 [00:00<00:00, 32.74it/s] 65%|######5   | 17/26 [00:00<00:00, 39.22it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.22it/s] 85%|########4 | 22/26 [00:00<00:00, 41.38it/s]100%|##########| 26/26 [00:00<00:00, 35.39it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.42 (  0.42)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.48 (  0.56)	test_majacc   0.46 (  0.45)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.48 (  0.56)	test_majacc_d   0.46 (  0.45)	test_corr_d  -0.02 (  0.00)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.47 (  0.46)	test_minacc   0.45 (  0.56)	test_majacc   0.47 (  0.45)	Loss_d 0.692 (0.693)	test_acc_d   0.47 (  0.46)	test_minacc_d   0.45 (  0.56)	test_majacc_d   0.47 (  0.45)	test_corr_d   0.09 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.46)	test_minacc   0.57 (  0.56)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.46)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.05 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.78it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.02 (  0.02)
Overall Timing[ 39/  1]	epoch_time 0.0454 (0.0439)	validation_time 0.0004 (0.0006)	train_time 0.0449 (0.0433)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.46350000390410423, 0.5480000376701355)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.28it/s] 12%|#1        | 3/26 [00:00<00:02, 10.88it/s] 23%|##3       | 6/26 [00:00<00:01, 17.46it/s] 35%|###4      | 9/26 [00:00<00:00, 21.32it/s] 46%|####6     | 12/26 [00:00<00:00, 23.98it/s] 58%|#####7    | 15/26 [00:00<00:00, 24.94it/s] 69%|######9   | 18/26 [00:00<00:00, 26.02it/s] 85%|########4 | 22/26 [00:00<00:00, 27.93it/s]100%|##########| 26/26 [00:01<00:00, 29.52it/s]100%|##########| 26/26 [00:01<00:00, 22.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 200
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 200
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 200
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 200
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 200
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 200
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 200
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 200
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 200
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 200
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 200
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 200
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 200
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 200
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 200
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 200
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 200
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 200
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 200
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 200
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 200
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 200
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 200
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 200
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 200
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 200
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.08 (  2.09)	train_acc   0.47 (  0.47)	train_minacc   0.57 (  0.56)	train_majacc   0.46 (  0.45)	train_corr   0.00 (  0.00)	l1 8.7393 (8.7394)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.77it/s] 27%|##6       | 7/26 [00:00<00:00, 34.87it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.87it/s] 46%|####6     | 12/26 [00:00<00:00, 39.12it/s] 65%|######5   | 17/26 [00:00<00:00, 41.92it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.92it/s] 85%|########4 | 22/26 [00:00<00:00, 40.51it/s]100%|##########| 26/26 [00:00<00:00, 37.42it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.46 (  0.55)	test_majacc   0.46 (  0.45)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.46 (  0.55)	test_majacc_d   0.46 (  0.45)	test_corr_d  -0.02 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.46)	test_minacc   0.45 (  0.56)	test_majacc   0.47 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.46)	test_minacc_d   0.45 (  0.56)	test_majacc_d   0.47 (  0.45)	test_corr_d   0.08 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.46)	test_minacc   0.57 (  0.56)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.46)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.05 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.47it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.01 (  0.01)
Overall Timing[ 40/  1]	epoch_time 0.0452 (0.0440)	validation_time 0.0004 (0.0006)	train_time 0.0447 (0.0433)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.46360000389814376, 0.5450000166893005)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.91it/s] 23%|##3       | 6/26 [00:00<00:00, 28.64it/s] 35%|###4      | 9/26 [00:00<00:00, 29.15it/s] 46%|####6     | 12/26 [00:00<00:00, 29.40it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.32it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.78it/s] 88%|########8 | 23/26 [00:00<00:00, 30.08it/s]100%|##########| 26/26 [00:00<00:00, 28.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 200
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 200
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 200
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 200
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 200
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 200
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 200
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 200
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 200
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 200
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 200
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 200
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 200
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 200
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 200
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 200
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 200
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 200
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 200
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 200
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 200
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 200
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 200
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 200
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 200
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 200
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
final projection at end of training
dim_v 512
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.07 (  2.08)	train_acc   0.48 (  0.47)	train_minacc   0.57 (  0.56)	train_majacc   0.47 (  0.45)	train_corr   0.00 (  0.00)	l1 8.7390 (8.7391)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.25it/s] 23%|##3       | 6/26 [00:00<00:00, 31.00it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.00it/s] 42%|####2     | 11/26 [00:00<00:00, 37.24it/s] 62%|######1   | 16/26 [00:00<00:00, 41.22it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.22it/s] 81%|########  | 21/26 [00:00<00:00, 39.06it/s]100%|##########| 26/26 [00:00<00:00, 41.85it/s]100%|##########| 26/26 [00:00<00:00, 35.70it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.48 (  0.55)	test_majacc   0.47 (  0.45)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.48 (  0.55)	test_majacc_d   0.47 (  0.45)	test_corr_d  -0.02 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.45 (  0.56)	test_majacc   0.47 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.45 (  0.56)	test_majacc_d   0.47 (  0.45)	test_corr_d   0.08 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.46)	test_minacc   0.57 (  0.56)	test_majacc   0.46 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.46)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.46 (  0.45)	test_corr_d   0.05 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.95it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.01 (  0.01)
Overall Timing[ 41/  1]	epoch_time 0.0466 (0.0440)	validation_time 0.0004 (0.0006)	train_time 0.0462 (0.0434)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.46430000352859496, 0.5450000166893005)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.35it/s] 15%|#5        | 4/26 [00:00<00:01, 15.31it/s] 27%|##6       | 7/26 [00:00<00:00, 20.44it/s] 38%|###8      | 10/26 [00:00<00:00, 23.27it/s] 50%|#####     | 13/26 [00:00<00:00, 25.30it/s] 65%|######5   | 17/26 [00:00<00:00, 27.57it/s] 81%|########  | 21/26 [00:00<00:00, 29.23it/s] 96%|#########6| 25/26 [00:00<00:00, 30.31it/s]100%|##########| 26/26 [00:01<00:00, 24.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 200
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 200
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 200
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 200
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 200
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 200
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 200
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 200
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 200
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 200
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 200
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 200
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 200
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 200
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 200
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 200
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 200
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 200
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 200
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 200
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 200
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 200
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 200
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 200
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 200
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 200
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
final projection at end of training
dim_v 512
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.07 (  2.07)	train_acc   0.48 (  0.47)	train_minacc   0.57 (  0.56)	train_majacc   0.47 (  0.45)	train_corr   0.00 (  0.00)	l1 8.7387 (8.7388)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 11.78it/s] 27%|##6       | 7/26 [00:00<00:00, 28.89it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.89it/s] 46%|####6     | 12/26 [00:00<00:00, 36.39it/s] 65%|######5   | 17/26 [00:00<00:00, 40.24it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.24it/s] 85%|########4 | 22/26 [00:00<00:00, 39.26it/s]100%|##########| 26/26 [00:00<00:00, 35.53it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.48 (  0.55)	test_majacc   0.46 (  0.45)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.48 (  0.55)	test_majacc_d   0.46 (  0.45)	test_corr_d  -0.02 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.45 (  0.56)	test_majacc   0.47 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.45 (  0.56)	test_majacc_d   0.47 (  0.45)	test_corr_d   0.08 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.47)	test_minacc   0.57 (  0.56)	test_majacc   0.47 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.47 (  0.45)	test_corr_d   0.05 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.81it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.56 (  0.56)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.56 (  0.56)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.01 (  0.01)
Overall Timing[ 42/  1]	epoch_time 0.0439 (0.0440)	validation_time 0.0003 (0.0006)	train_time 0.0435 (0.0434)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.465000003695488, 0.5440000295639038)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 10.02it/s] 19%|#9        | 5/26 [00:00<00:01, 18.05it/s] 31%|###       | 8/26 [00:00<00:00, 22.43it/s] 42%|####2     | 11/26 [00:00<00:00, 24.71it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.94it/s] 69%|######9   | 18/26 [00:00<00:00, 27.72it/s] 85%|########4 | 22/26 [00:00<00:00, 28.78it/s] 96%|#########6| 25/26 [00:00<00:00, 28.88it/s]100%|##########| 26/26 [00:01<00:00, 24.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 200
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 200
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 200
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 200
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 200
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 200
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 200
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 200
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 200
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 200
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 200
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 200
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 200
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 200
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 200
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 200
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 200
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 200
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 200
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 200
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 200
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 200
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 200
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 200
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 200
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 200
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
final projection at end of training
dim_v 512
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.06 (  2.06)	train_acc   0.49 (  0.47)	train_minacc   0.57 (  0.56)	train_majacc   0.47 (  0.45)	train_corr   0.00 (  0.00)	l1 8.7384 (8.7385)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.69it/s] 19%|#9        | 5/26 [00:00<00:01, 19.68it/s] 35%|###4      | 9/26 [00:00<00:00, 27.17it/s]                                               35%|###4      | 9/26 [00:00<00:00, 27.17it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.16it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.92it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 35.92it/s] 92%|#########2| 24/26 [00:00<00:00, 37.74it/s]100%|##########| 26/26 [00:00<00:00, 30.33it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.44 (  0.54)	test_majacc   0.46 (  0.45)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.44 (  0.54)	test_majacc_d   0.46 (  0.45)	test_corr_d  -0.02 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.45 (  0.55)	test_majacc   0.48 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.45 (  0.55)	test_majacc_d   0.48 (  0.45)	test_corr_d   0.08 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.47)	test_minacc   0.57 (  0.56)	test_majacc   0.47 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.47 (  0.45)	test_corr_d   0.05 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.24it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.01 (  0.01)
Overall Timing[ 43/  1]	epoch_time 0.0462 (0.0441)	validation_time 0.0004 (0.0005)	train_time 0.0458 (0.0435)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.46540000367164613, 0.5460000038146973)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.02it/s] 15%|#5        | 4/26 [00:00<00:01, 17.99it/s] 27%|##6       | 7/26 [00:00<00:00, 22.31it/s] 38%|###8      | 10/26 [00:00<00:00, 24.67it/s] 50%|#####     | 13/26 [00:00<00:00, 25.95it/s] 62%|######1   | 16/26 [00:00<00:00, 26.86it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.88it/s] 85%|########4 | 22/26 [00:00<00:00, 27.72it/s] 96%|#########6| 25/26 [00:00<00:00, 28.28it/s]100%|##########| 26/26 [00:01<00:00, 24.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 200
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 200
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 200
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 200
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 200
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 200
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 200
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 200
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 200
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 200
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 200
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 200
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 200
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 200
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 200
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 200
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 200
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 200
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 200
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 200
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 200
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 200
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 200
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 200
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 200
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 200
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
final projection at end of training
dim_v 512
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.05 (  2.05)	train_acc   0.49 (  0.47)	train_minacc   0.57 (  0.56)	train_majacc   0.48 (  0.45)	train_corr   0.00 (  0.00)	l1 8.7382 (8.7382)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.91it/s] 31%|###       | 8/26 [00:00<00:00, 38.39it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.39it/s] 50%|#####     | 13/26 [00:00<00:00, 39.45it/s] 69%|######9   | 18/26 [00:00<00:00, 42.56it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.56it/s] 88%|########8 | 23/26 [00:00<00:00, 41.88it/s]100%|##########| 26/26 [00:00<00:00, 37.57it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.54)	test_majacc   0.46 (  0.45)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.54)	test_majacc_d   0.46 (  0.45)	test_corr_d  -0.02 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.47)	test_minacc   0.45 (  0.55)	test_majacc   0.48 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.45 (  0.55)	test_majacc_d   0.48 (  0.45)	test_corr_d   0.08 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.46)	test_minacc   0.57 (  0.56)	test_majacc   0.47 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.46)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.47 (  0.45)	test_corr_d   0.05 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.01it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.01 (  0.01)
Overall Timing[ 44/  1]	epoch_time 0.0435 (0.0441)	validation_time 0.0003 (0.0005)	train_time 0.0431 (0.0434)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.4649000027477741, 0.5480000376701355)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.48it/s] 15%|#5        | 4/26 [00:00<00:01, 18.64it/s] 27%|##6       | 7/26 [00:00<00:00, 22.45it/s] 38%|###8      | 10/26 [00:00<00:00, 24.79it/s] 50%|#####     | 13/26 [00:00<00:00, 25.76it/s] 62%|######1   | 16/26 [00:00<00:00, 26.65it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.51it/s] 85%|########4 | 22/26 [00:00<00:00, 27.46it/s]100%|##########| 26/26 [00:01<00:00, 28.97it/s]100%|##########| 26/26 [00:01<00:00, 24.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 200
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 200
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 200
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 200
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 200
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 200
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 200
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 200
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 200
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 200
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 200
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 200
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 200
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 200
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 200
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 200
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 200
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 200
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 200
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 200
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 200
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 200
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 200
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 200
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 200
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 200
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.04 (  2.05)	train_acc   0.48 (  0.47)	train_minacc   0.57 (  0.56)	train_majacc   0.47 (  0.45)	train_corr   0.00 (  0.00)	l1 8.7379 (8.7379)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.11it/s] 19%|#9        | 5/26 [00:00<00:00, 21.62it/s] 38%|###8      | 10/26 [00:00<00:00, 31.64it/s]                                                38%|###8      | 10/26 [00:00<00:00, 31.64it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.21it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.82it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.82it/s] 96%|#########6| 25/26 [00:00<00:00, 40.48it/s]100%|##########| 26/26 [00:00<00:00, 32.55it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.42 (  0.42)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.54)	test_majacc   0.47 (  0.45)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.54)	test_majacc_d   0.47 (  0.45)	test_corr_d  -0.02 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.47)	test_minacc   0.45 (  0.55)	test_majacc   0.49 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.45 (  0.55)	test_majacc_d   0.49 (  0.45)	test_corr_d   0.08 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.47)	test_minacc   0.57 (  0.56)	test_majacc   0.47 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.47)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.47 (  0.45)	test_corr_d   0.05 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.59it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.01 (  0.01)
Overall Timing[ 45/  1]	epoch_time 0.0425 (0.0440)	validation_time 0.0004 (0.0005)	train_time 0.0421 (0.0434)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.46510000294446946, 0.550000011920929)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.63it/s]  8%|7         | 2/26 [00:00<00:02,  9.02it/s] 19%|#9        | 5/26 [00:00<00:01, 16.96it/s] 31%|###       | 8/26 [00:00<00:00, 21.15it/s] 42%|####2     | 11/26 [00:00<00:00, 23.19it/s] 54%|#####3    | 14/26 [00:00<00:00, 24.72it/s] 65%|######5   | 17/26 [00:00<00:00, 26.05it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.10it/s] 88%|########8 | 23/26 [00:00<00:00, 27.90it/s]100%|##########| 26/26 [00:01<00:00, 22.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 200
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 200
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 200
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 200
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 200
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 200
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 200
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 200
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 200
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 200
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 200
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 200
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 200
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 200
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 200
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 200
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 200
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 200
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 200
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 200
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 200
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 200
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 200
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 200
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 200
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 200
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
final projection at end of training
dim_v 512
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.03 (  2.04)	train_acc   0.48 (  0.47)	train_minacc   0.57 (  0.56)	train_majacc   0.47 (  0.45)	train_corr   0.00 (  0.00)	l1 8.7377 (8.7377)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.64it/s] 27%|##6       | 7/26 [00:00<00:00, 32.09it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.09it/s] 46%|####6     | 12/26 [00:00<00:00, 37.87it/s] 65%|######5   | 17/26 [00:00<00:00, 41.24it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.24it/s] 85%|########4 | 22/26 [00:00<00:00, 41.29it/s]100%|##########| 26/26 [00:00<00:00, 36.32it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.40 (  0.40)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.46 (  0.54)	test_majacc   0.46 (  0.45)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.46 (  0.54)	test_majacc_d   0.46 (  0.45)	test_corr_d  -0.02 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.46)	test_minacc   0.45 (  0.55)	test_majacc   0.48 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.46)	test_minacc_d   0.45 (  0.55)	test_majacc_d   0.48 (  0.45)	test_corr_d   0.08 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.46)	test_minacc   0.57 (  0.56)	test_majacc   0.47 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.46)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.47 (  0.45)	test_corr_d   0.05 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.84it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.01 (  0.01)
Overall Timing[ 46/  1]	epoch_time 0.0438 (0.0440)	validation_time 0.0004 (0.0005)	train_time 0.0434 (0.0434)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.4643000039458275, 0.5470000505447388)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.01it/s] 15%|#5        | 4/26 [00:00<00:01, 12.61it/s] 27%|##6       | 7/26 [00:00<00:01, 17.44it/s] 38%|###8      | 10/26 [00:00<00:00, 20.75it/s] 50%|#####     | 13/26 [00:00<00:00, 23.39it/s] 62%|######1   | 16/26 [00:00<00:00, 24.68it/s] 77%|#######6  | 20/26 [00:00<00:00, 26.83it/s] 88%|########8 | 23/26 [00:01<00:00, 27.36it/s]100%|##########| 26/26 [00:01<00:00, 21.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 200
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 200
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 200
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 200
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 200
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 200
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 200
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 200
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 200
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 200
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 200
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 200
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 200
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 200
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 200
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 200
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 200
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 200
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 200
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 200
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 200
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 200
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 200
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 200
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 200
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 200
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
final projection at end of training
dim_v 512
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.02 (  2.03)	train_acc   0.48 (  0.47)	train_minacc   0.57 (  0.56)	train_majacc   0.47 (  0.45)	train_corr   0.00 (  0.00)	l1 8.7374 (8.7375)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.05it/s] 12%|#1        | 3/26 [00:00<00:02,  8.92it/s] 35%|###4      | 9/26 [00:00<00:00, 24.53it/s]                                               35%|###4      | 9/26 [00:00<00:00, 24.53it/s] 58%|#####7    | 15/26 [00:00<00:00, 32.64it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 32.64it/s] 81%|########  | 21/26 [00:00<00:00, 39.03it/s]100%|##########| 26/26 [00:00<00:00, 31.05it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.40 (  0.40)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.46)	test_minacc   0.46 (  0.54)	test_majacc   0.47 (  0.45)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.46)	test_minacc_d   0.46 (  0.54)	test_majacc_d   0.47 (  0.45)	test_corr_d  -0.02 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.46)	test_minacc   0.45 (  0.56)	test_majacc   0.48 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.46)	test_minacc_d   0.45 (  0.56)	test_majacc_d   0.48 (  0.45)	test_corr_d   0.08 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.46)	test_minacc   0.57 (  0.56)	test_majacc   0.47 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.46)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.47 (  0.45)	test_corr_d   0.05 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.38it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.01 (  0.01)
Overall Timing[ 47/  1]	epoch_time 0.0435 (0.0440)	validation_time 0.0004 (0.0005)	train_time 0.0431 (0.0434)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.46420000395178795, 0.5480000376701355)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:09,  2.50it/s] 15%|#5        | 4/26 [00:00<00:02,  9.54it/s] 27%|##6       | 7/26 [00:00<00:01, 14.57it/s] 38%|###8      | 10/26 [00:00<00:00, 18.50it/s] 50%|#####     | 13/26 [00:00<00:00, 21.59it/s] 65%|######5   | 17/26 [00:00<00:00, 24.40it/s] 77%|#######6  | 20/26 [00:01<00:00, 25.54it/s] 92%|#########2| 24/26 [00:01<00:00, 27.35it/s]100%|##########| 26/26 [00:01<00:00, 19.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 200
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 200
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 200
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 200
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 200
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 200
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 200
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 200
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 200
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 200
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 200
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 200
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 200
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 200
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 200
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 200
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 200
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 200
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 200
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 200
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 200
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 200
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 200
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 200
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 200
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 200
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
final projection at end of training
dim_v 512
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.02 (  2.02)	train_acc   0.48 (  0.47)	train_minacc   0.57 (  0.56)	train_majacc   0.47 (  0.45)	train_corr   0.00 (  0.00)	l1 8.7372 (8.7373)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.22it/s] 23%|##3       | 6/26 [00:00<00:00, 30.53it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.53it/s] 42%|####2     | 11/26 [00:00<00:00, 36.94it/s] 62%|######1   | 16/26 [00:00<00:00, 40.77it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.77it/s] 81%|########  | 21/26 [00:00<00:00, 42.31it/s]100%|##########| 26/26 [00:00<00:00, 44.44it/s]100%|##########| 26/26 [00:00<00:00, 36.50it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.40 (  0.40)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.54)	test_majacc   0.47 (  0.45)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.54)	test_majacc_d   0.47 (  0.45)	test_corr_d  -0.02 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.46)	test_minacc   0.45 (  0.56)	test_majacc   0.48 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.46)	test_minacc_d   0.45 (  0.56)	test_majacc_d   0.48 (  0.45)	test_corr_d   0.07 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.46)	test_minacc   0.57 (  0.56)	test_majacc   0.47 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.46)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.47 (  0.45)	test_corr_d   0.05 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.07it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.01 (  0.01)
Overall Timing[ 48/  1]	epoch_time 0.0422 (0.0440)	validation_time 0.0004 (0.0005)	train_time 0.0417 (0.0434)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.4647000039219856, 0.5509999990463257)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.51it/s] 19%|#9        | 5/26 [00:00<00:01, 20.67it/s] 35%|###4      | 9/26 [00:00<00:00, 25.05it/s] 50%|#####     | 13/26 [00:00<00:00, 27.06it/s] 65%|######5   | 17/26 [00:00<00:00, 28.22it/s] 81%|########  | 21/26 [00:00<00:00, 29.04it/s] 96%|#########6| 25/26 [00:00<00:00, 29.44it/s]100%|##########| 26/26 [00:01<00:00, 25.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 200
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 200
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 200
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 200
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 200
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 200
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 200
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 200
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 200
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 200
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 200
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 200
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 200
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 200
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 200
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 200
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 200
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 200
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 200
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 200
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 200
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 200
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 200
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 200
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 200
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 200
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
final projection at end of training
dim_v 512
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.01 (  2.01)	train_acc   0.48 (  0.47)	train_minacc   0.57 (  0.56)	train_majacc   0.47 (  0.45)	train_corr   0.00 (  0.00)	l1 8.7370 (8.7371)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.81it/s] 19%|#9        | 5/26 [00:00<00:00, 23.80it/s] 38%|###8      | 10/26 [00:00<00:00, 34.17it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.17it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.26it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.09it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.09it/s] 96%|#########6| 25/26 [00:00<00:00, 41.33it/s]100%|##########| 26/26 [00:00<00:00, 34.70it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.40 (  0.40)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.48 (  0.55)	test_majacc   0.47 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.48 (  0.55)	test_majacc_d   0.47 (  0.45)	test_corr_d  -0.02 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.47)	test_minacc   0.45 (  0.56)	test_majacc   0.48 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.45 (  0.56)	test_majacc_d   0.48 (  0.45)	test_corr_d   0.07 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.47)	test_minacc   0.57 (  0.56)	test_majacc   0.47 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.47 (  0.45)	test_corr_d   0.05 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.51it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.01 (  0.01)
Overall Timing[ 49/  1]	epoch_time 0.0451 (0.0440)	validation_time 0.0004 (0.0005)	train_time 0.0447 (0.0434)
record: (train_acc, test_acc) (0.685200026512146, 0.6770000457763672)
last accs (train_acc, test_acc) (0.46530000483989714, 0.5509999990463257)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.161 MB of 0.161 MB uploadedwandb: \ 0.161 MB of 0.161 MB uploadedwandb: | 0.161 MB of 0.161 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmp8wop0qy8'
wandb: ERROR Internal wandb error: file data was not synced
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_215142-5hi8xkny
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/5hi8xkny
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=200, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=5, fraction_z=0.99)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1250
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5976, 3, 32, 32) (6024, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:40,  1.62s/it] 19%|#9        | 5/26 [00:01<00:05,  3.71it/s] 35%|###4      | 9/26 [00:01<00:02,  7.20it/s] 50%|#####     | 13/26 [00:02<00:01, 10.92it/s] 65%|######5   | 17/26 [00:02<00:00, 14.64it/s] 77%|#######6  | 20/26 [00:02<00:00, 17.21it/s] 92%|#########2| 24/26 [00:02<00:00, 20.61it/s]100%|##########| 26/26 [00:02<00:00,  9.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [0][  26/  26]	Loss 9.132 (12.120)	train_nll   0.42 (  0.59)	train_penalty   0.05 (  0.34)	weight_norm   8.71 ( 11.53)	train_acc   0.85 (  0.78)	train_minacc   0.00 (  0.10)	train_majacc   1.00 (  0.90)	train_corr   0.00 (  0.00)	l1 6.9533 (7.5784)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 20.37it/s] 31%|###       | 8/26 [00:00<00:00, 33.52it/s]                                               31%|###       | 8/26 [00:00<00:00, 33.52it/s] 50%|#####     | 13/26 [00:00<00:00, 38.70it/s] 69%|######9   | 18/26 [00:00<00:00, 41.38it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.38it/s] 88%|########8 | 23/26 [00:00<00:00, 39.28it/s]100%|##########| 26/26 [00:00<00:00, 35.74it/s]
Test: [   0/  26]	Loss 0.432 (0.432)	test_acc   0.84 (  0.84)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.432 (0.432)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.402 (0.424)	test_acc   0.86 (  0.84)	test_minacc   0.05 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.402 (0.424)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.05 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.392 (0.420)	test_acc   0.86 (  0.84)	test_minacc   0.06 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.392 (0.420)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.06 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.419 (0.420)	test_acc   0.85 (  0.84)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.419 (0.420)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.50it/s]100%|##########| 1/1 [00:00<00:00,  2.50it/s]
Test: [  0/  1]	Loss 1.630 (1.630)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.630 (1.630)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  1/  1]	Loss 1.630 (1.630)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.630 (1.630)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/192/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0841 (0.0841)	validation_time 0.0068 (0.0068)	train_time 0.0736 (0.0736)
record: (train_acc, test_acc) (0.8447000267505645, 0.11500000208616257)
last accs (train_acc, test_acc) (0.8447000267505645, 0.11500000208616257)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.66it/s] 15%|#5        | 4/26 [00:00<00:01, 12.48it/s] 27%|##6       | 7/26 [00:00<00:01, 17.85it/s] 38%|###8      | 10/26 [00:00<00:00, 21.33it/s] 50%|#####     | 13/26 [00:00<00:00, 23.73it/s] 65%|######5   | 17/26 [00:00<00:00, 25.84it/s] 81%|########  | 21/26 [00:00<00:00, 27.32it/s] 96%|#########6| 25/26 [00:01<00:00, 28.27it/s]100%|##########| 26/26 [00:01<00:00, 21.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [1][  26/  26]	Loss 4.529 (6.407)	train_nll   0.42 (  0.42)	train_penalty   0.06 (  0.06)	weight_norm   4.11 (  5.99)	train_acc   0.86 (  0.85)	train_minacc   0.00 (  0.02)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 6.8017 (7.0107)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.61it/s] 23%|##3       | 6/26 [00:00<00:00, 32.32it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.32it/s] 42%|####2     | 11/26 [00:00<00:00, 38.49it/s] 62%|######1   | 16/26 [00:00<00:00, 42.07it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.07it/s] 81%|########  | 21/26 [00:00<00:00, 40.12it/s]100%|##########| 26/26 [00:00<00:00, 42.54it/s]100%|##########| 26/26 [00:00<00:00, 35.42it/s]
Test: [   0/  26]	Loss 0.430 (0.430)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.430 (0.430)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.401 (0.416)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.401 (0.416)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.393 (0.413)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.393 (0.413)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.396 (0.412)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.396 (0.412)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.77it/s]
Test: [  0/  1]	Loss 1.602 (1.602)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.602 (1.602)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.602 (1.602)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.602 (1.602)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Overall Timing[  1/  1]	epoch_time 0.0447 (0.0644)	validation_time 0.0004 (0.0036)	train_time 0.0443 (0.0590)
record: (train_acc, test_acc) (0.8447000267505645, 0.11500000208616257)
last accs (train_acc, test_acc) (0.8482000267505646, 0.10100000351667404)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.76it/s] 19%|#9        | 5/26 [00:00<00:00, 23.25it/s] 31%|###       | 8/26 [00:00<00:00, 24.36it/s] 42%|####2     | 11/26 [00:00<00:00, 26.25it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.35it/s] 65%|######5   | 17/26 [00:00<00:00, 27.33it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.10it/s] 88%|########8 | 23/26 [00:00<00:00, 28.03it/s]100%|##########| 26/26 [00:01<00:00, 25.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [2][  26/  26]	Loss 2.756 (3.503)	train_nll   0.40 (  0.41)	train_penalty   0.04 (  0.06)	weight_norm   2.36 (  3.09)	train_acc   0.85 (  0.85)	train_minacc   0.00 (  0.01)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.7533 (6.2662)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.36it/s] 31%|###       | 8/26 [00:00<00:00, 33.82it/s]                                               31%|###       | 8/26 [00:00<00:00, 33.82it/s] 50%|#####     | 13/26 [00:00<00:00, 39.07it/s] 69%|######9   | 18/26 [00:00<00:00, 41.59it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.59it/s] 88%|########8 | 23/26 [00:00<00:00, 41.34it/s]100%|##########| 26/26 [00:00<00:00, 37.37it/s]
Test: [   0/  26]	Loss 0.417 (0.417)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.417 (0.417)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.386 (0.405)	test_acc   0.86 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.386 (0.405)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.379 (0.403)	test_acc   0.86 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.379 (0.403)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.381 (0.401)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.381 (0.401)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.68it/s]
Test: [  0/  1]	Loss 1.791 (1.791)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.791 (1.791)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.791 (1.791)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.791 (1.791)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Overall Timing[  2/  1]	epoch_time 0.0471 (0.0586)	validation_time 0.0004 (0.0026)	train_time 0.0466 (0.0548)
record: (train_acc, test_acc) (0.8447000267505645, 0.11500000208616257)
last accs (train_acc, test_acc) (0.8491000255346298, 0.10200000554323196)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.87it/s] 15%|#5        | 4/26 [00:00<00:01, 17.94it/s] 27%|##6       | 7/26 [00:00<00:00, 22.32it/s] 38%|###8      | 10/26 [00:00<00:00, 24.71it/s] 50%|#####     | 13/26 [00:00<00:00, 26.24it/s] 65%|######5   | 17/26 [00:00<00:00, 28.31it/s] 81%|########  | 21/26 [00:00<00:00, 29.14it/s] 96%|#########6| 25/26 [00:00<00:00, 29.36it/s]100%|##########| 26/26 [00:01<00:00, 24.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [3][  26/  26]	Loss 1.860 (2.275)	train_nll   0.35 (  0.40)	train_penalty   0.03 (  0.05)	weight_norm   1.51 (  1.88)	train_acc   0.86 (  0.85)	train_minacc   0.00 (  0.04)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.4680 (5.5415)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.78it/s] 23%|##3       | 6/26 [00:00<00:00, 23.00it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.00it/s] 42%|####2     | 11/26 [00:00<00:00, 32.37it/s] 62%|######1   | 16/26 [00:00<00:00, 37.84it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.84it/s] 81%|########  | 21/26 [00:00<00:00, 39.82it/s]100%|##########| 26/26 [00:00<00:00, 42.52it/s]100%|##########| 26/26 [00:00<00:00, 32.47it/s]
Test: [   0/  26]	Loss 0.409 (0.409)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.409 (0.409)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.380 (0.394)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.380 (0.394)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.376 (0.391)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.376 (0.391)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.343 (0.387)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.343 (0.387)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.80it/s]
Test: [  0/  1]	Loss 1.867 (1.867)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.867 (1.867)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  1/  1]	Loss 1.867 (1.867)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.867 (1.867)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Overall Timing[  3/  1]	epoch_time 0.0420 (0.0545)	validation_time 0.0003 (0.0020)	train_time 0.0417 (0.0516)
record: (train_acc, test_acc) (0.8447000267505645, 0.11500000208616257)
last accs (train_acc, test_acc) (0.849400026679039, 0.11000000685453415)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.00it/s] 15%|#5        | 4/26 [00:00<00:01, 20.19it/s] 31%|###       | 8/26 [00:00<00:00, 25.65it/s] 46%|####6     | 12/26 [00:00<00:00, 27.68it/s] 62%|######1   | 16/26 [00:00<00:00, 28.64it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.73it/s] 88%|########8 | 23/26 [00:00<00:00, 29.03it/s]100%|##########| 26/26 [00:01<00:00, 25.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [4][  26/  26]	Loss 1.339 (1.603)	train_nll   0.34 (  0.38)	train_penalty   0.02 (  0.04)	weight_norm   1.00 (  1.22)	train_acc   0.86 (  0.85)	train_minacc   0.22 (  0.08)	train_majacc   0.97 (  0.98)	train_corr   0.00 (  0.00)	l1 5.5694 (5.5231)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.94it/s] 12%|#1        | 3/26 [00:00<00:01, 15.13it/s] 31%|###       | 8/26 [00:00<00:00, 30.59it/s]                                               31%|###       | 8/26 [00:00<00:00, 30.59it/s] 50%|#####     | 13/26 [00:00<00:00, 38.07it/s] 73%|#######3  | 19/26 [00:00<00:00, 42.14it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 42.14it/s] 92%|#########2| 24/26 [00:00<00:00, 43.04it/s]100%|##########| 26/26 [00:00<00:00, 34.81it/s]
Test: [   0/  26]	Loss 0.385 (0.385)	test_acc   0.83 (  0.83)	test_minacc   0.17 (  0.17)	test_majacc   0.95 (  0.95)	Loss_d 0.385 (0.385)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.350 (0.369)	test_acc   0.84 (  0.84)	test_minacc   0.16 (  0.18)	test_majacc   0.95 (  0.96)	Loss_d 0.350 (0.369)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.16 (  0.18)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.89 (  0.90)
Test: [  20/  26]	Loss 0.352 (0.364)	test_acc   0.84 (  0.84)	test_minacc   0.26 (  0.20)	test_majacc   0.94 (  0.96)	Loss_d 0.352 (0.364)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.26 (  0.20)	test_majacc_d   0.94 (  0.96)	test_corr_d   0.88 (  0.89)
Test: [  26/  26]	Loss 0.294 (0.359)	test_acc   0.88 (  0.84)	test_minacc   0.33 (  0.21)	test_majacc   0.97 (  0.96)	Loss_d 0.294 (0.359)	test_acc_d   0.88 (  0.84)	test_minacc_d   0.33 (  0.21)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.88 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.46it/s]
Test: [  0/  1]	Loss 1.475 (1.475)	test_acc   0.29 (  0.29)	test_minacc   0.21 (  0.21)	test_majacc   0.97 (  0.97)	Loss_d 1.475 (1.475)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.70 (  0.70)
Test: [  1/  1]	Loss 1.475 (1.475)	test_acc   0.29 (  0.29)	test_minacc   0.21 (  0.21)	test_majacc   0.97 (  0.97)	Loss_d 1.475 (1.475)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.70 (  0.70)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/192/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0448 (0.0525)	validation_time 0.0004 (0.0017)	train_time 0.0443 (0.0501)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.74it/s] 19%|#9        | 5/26 [00:00<00:00, 21.64it/s] 35%|###4      | 9/26 [00:00<00:00, 25.59it/s] 46%|####6     | 12/26 [00:00<00:00, 25.76it/s] 58%|#####7    | 15/26 [00:00<00:00, 24.99it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.02it/s] 88%|########8 | 23/26 [00:00<00:00, 28.38it/s]100%|##########| 26/26 [00:01<00:00, 23.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [5][  26/  26]	Loss 0.977 (1.178)	train_nll   0.33 (  0.37)	train_penalty   0.02 (  0.04)	weight_norm   0.65 (  0.81)	train_acc   0.86 (  0.85)	train_minacc   0.17 (  0.11)	train_majacc   0.98 (  0.98)	train_corr   0.00 (  0.00)	l1 6.0973 (5.8862)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.19it/s] 23%|##3       | 6/26 [00:00<00:00, 27.24it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.24it/s] 42%|####2     | 11/26 [00:00<00:00, 34.71it/s] 62%|######1   | 16/26 [00:00<00:00, 39.66it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.66it/s] 81%|########  | 21/26 [00:00<00:00, 38.20it/s]100%|##########| 26/26 [00:00<00:00, 41.34it/s]100%|##########| 26/26 [00:00<00:00, 32.75it/s]
Test: [   0/  26]	Loss 0.383 (0.383)	test_acc   0.83 (  0.83)	test_minacc   0.10 (  0.10)	test_majacc   0.97 (  0.97)	Loss_d 0.383 (0.383)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.358 (0.368)	test_acc   0.86 (  0.85)	test_minacc   0.20 (  0.19)	test_majacc   0.97 (  0.97)	Loss_d 0.358 (0.368)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.20 (  0.19)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.84 (  0.87)
Test: [  20/  26]	Loss 0.361 (0.367)	test_acc   0.85 (  0.85)	test_minacc   0.22 (  0.20)	test_majacc   0.96 (  0.97)	Loss_d 0.361 (0.367)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.22 (  0.20)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.86 (  0.86)
Test: [  26/  26]	Loss 0.313 (0.363)	test_acc   0.88 (  0.85)	test_minacc   0.31 (  0.20)	test_majacc   0.97 (  0.97)	Loss_d 0.313 (0.363)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.31 (  0.20)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.86 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.71it/s]
Test: [  0/  1]	Loss 1.392 (1.392)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.98 (  0.98)	Loss_d 1.392 (1.392)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.60 (  0.60)
Test: [  1/  1]	Loss 1.392 (1.392)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.98 (  0.98)	Loss_d 1.392 (1.392)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.60 (  0.60)
Overall Timing[  5/  1]	epoch_time 0.0476 (0.0517)	validation_time 0.0006 (0.0015)	train_time 0.0470 (0.0496)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.8529000306725502, 0.23200000822544098)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.70it/s] 19%|#9        | 5/26 [00:00<00:00, 21.11it/s] 31%|###       | 8/26 [00:00<00:00, 24.38it/s] 46%|####6     | 12/26 [00:00<00:00, 26.88it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.53it/s] 69%|######9   | 18/26 [00:00<00:00, 27.97it/s] 81%|########  | 21/26 [00:00<00:00, 28.32it/s] 96%|#########6| 25/26 [00:00<00:00, 29.05it/s]100%|##########| 26/26 [00:01<00:00, 24.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [6][  26/  26]	Loss 0.749 (0.892)	train_nll   0.30 (  0.36)	train_penalty   0.01 (  0.03)	weight_norm   0.44 (  0.53)	train_acc   0.88 (  0.85)	train_minacc   0.33 (  0.14)	train_majacc   0.97 (  0.98)	train_corr   0.00 (  0.00)	l1 7.0904 (6.6035)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.78it/s] 23%|##3       | 6/26 [00:00<00:00, 26.25it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.25it/s] 42%|####2     | 11/26 [00:00<00:00, 34.26it/s] 62%|######1   | 16/26 [00:00<00:00, 38.05it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.05it/s] 81%|########  | 21/26 [00:00<00:00, 39.63it/s]100%|##########| 26/26 [00:00<00:00, 42.03it/s]100%|##########| 26/26 [00:00<00:00, 33.83it/s]
Test: [   0/  26]	Loss 0.360 (0.360)	test_acc   0.84 (  0.84)	test_minacc   0.07 (  0.07)	test_majacc   0.98 (  0.98)	Loss_d 0.360 (0.360)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.320 (0.345)	test_acc   0.85 (  0.85)	test_minacc   0.07 (  0.07)	test_majacc   0.98 (  0.99)	Loss_d 0.320 (0.345)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.93 (  0.92)
Test: [  20/  26]	Loss 0.334 (0.339)	test_acc   0.87 (  0.85)	test_minacc   0.13 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.334 (0.339)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.13 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.283 (0.335)	test_acc   0.87 (  0.85)	test_minacc   0.14 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.283 (0.335)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.14 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.54it/s]
Test: [  0/  1]	Loss 1.628 (1.628)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.99 (  0.99)	Loss_d 1.628 (1.628)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.76 (  0.76)
Test: [  1/  1]	Loss 1.628 (1.628)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.99 (  0.99)	Loss_d 1.628 (1.628)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.76 (  0.76)
Overall Timing[  6/  1]	epoch_time 0.0451 (0.0508)	validation_time 0.0004 (0.0014)	train_time 0.0446 (0.0489)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.8513000210523606, 0.20900000631809235)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.50it/s] 15%|#5        | 4/26 [00:00<00:01, 18.66it/s] 27%|##6       | 7/26 [00:00<00:00, 22.77it/s] 42%|####2     | 11/26 [00:00<00:00, 26.15it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.25it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.56it/s] 88%|########8 | 23/26 [00:00<00:00, 30.52it/s]100%|##########| 26/26 [00:00<00:00, 26.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [7][  26/  26]	Loss 0.001 (0.526)	train_nll   0.67 (  0.42)	train_penalty   0.00 (  0.02)	weight_norm   0.37 (  0.38)	train_acc   0.57 (  0.80)	train_minacc   0.64 (  0.27)	train_majacc   0.56 (  0.90)	train_corr   0.00 (  0.00)	l1 7.5164 (7.6246)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.39it/s] 19%|#9        | 5/26 [00:00<00:00, 22.63it/s] 38%|###8      | 10/26 [00:00<00:00, 29.40it/s]                                                38%|###8      | 10/26 [00:00<00:00, 29.40it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.31it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.12it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.12it/s] 96%|#########6| 25/26 [00:00<00:00, 41.30it/s]100%|##########| 26/26 [00:00<00:00, 33.01it/s]
Test: [   0/  26]	Loss 0.679 (0.679)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.55 (  0.55)	Loss_d 0.679 (0.679)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.675 (0.680)	test_acc   0.54 (  0.55)	test_minacc   0.54 (  0.57)	test_majacc   0.54 (  0.55)	Loss_d 0.675 (0.680)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.54 (  0.57)	test_majacc_d   0.54 (  0.55)	test_corr_d   0.12 (  0.10)
Test: [  20/  26]	Loss 0.664 (0.677)	test_acc   0.61 (  0.56)	test_minacc   0.57 (  0.59)	test_majacc   0.62 (  0.56)	Loss_d 0.664 (0.677)	test_acc_d   0.61 (  0.56)	test_minacc_d   0.57 (  0.59)	test_majacc_d   0.62 (  0.56)	test_corr_d   0.17 (  0.11)
Test: [  26/  26]	Loss 0.681 (0.678)	test_acc   0.55 (  0.56)	test_minacc   0.61 (  0.58)	test_majacc   0.54 (  0.56)	Loss_d 0.681 (0.678)	test_acc_d   0.55 (  0.56)	test_minacc_d   0.61 (  0.58)	test_majacc_d   0.54 (  0.56)	test_corr_d   0.13 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.41it/s]
Test: [  0/  1]	Loss 0.670 (0.670)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.58 (  0.58)	Loss_d 0.670 (0.670)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.670 (0.670)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.58 (  0.58)	Loss_d 0.670 (0.670)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.16 ( -0.16)
Overall Timing[  7/  1]	epoch_time 0.0506 (0.0507)	validation_time 0.0005 (0.0012)	train_time 0.0501 (0.0490)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5619000101089477, 0.5649999976158142)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.60it/s] 12%|#1        | 3/26 [00:00<00:01, 12.72it/s] 23%|##3       | 6/26 [00:00<00:01, 19.42it/s] 38%|###8      | 10/26 [00:00<00:00, 24.20it/s] 50%|#####     | 13/26 [00:00<00:00, 25.93it/s] 65%|######5   | 17/26 [00:00<00:00, 27.51it/s] 81%|########  | 21/26 [00:00<00:00, 28.43it/s] 92%|#########2| 24/26 [00:00<00:00, 28.84it/s]100%|##########| 26/26 [00:01<00:00, 24.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [8][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.45)	train_acc   0.46 (  0.53)	train_minacc   0.53 (  0.48)	train_majacc   0.45 (  0.54)	train_corr   0.00 (  0.00)	l1 7.0884 (7.2112)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 17.73it/s] 31%|###       | 8/26 [00:00<00:00, 31.62it/s]                                               31%|###       | 8/26 [00:00<00:00, 31.62it/s] 50%|#####     | 13/26 [00:00<00:00, 37.66it/s] 69%|######9   | 18/26 [00:00<00:00, 41.22it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.22it/s] 88%|########8 | 23/26 [00:00<00:00, 41.28it/s]100%|##########| 26/26 [00:00<00:00, 35.79it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.45 (  0.48)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.45 (  0.48)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.03 (  0.07)
Test: [  20/  26]	Loss 0.690 (0.693)	test_acc   0.57 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.57 (  0.51)	Loss_d 0.690 (0.693)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.57 (  0.51)	test_corr_d   0.04 (  0.07)
Test: [  26/  26]	Loss 0.696 (0.693)	test_acc   0.45 (  0.51)	test_minacc   0.56 (  0.49)	test_majacc   0.43 (  0.51)	Loss_d 0.696 (0.693)	test_acc_d   0.45 (  0.51)	test_minacc_d   0.56 (  0.49)	test_majacc_d   0.43 (  0.51)	test_corr_d   0.04 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.85it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.06 (  0.06)
Overall Timing[  8/  1]	epoch_time 0.0446 (0.0501)	validation_time 0.0003 (0.0011)	train_time 0.0443 (0.0485)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5097000161707401, 0.492000013589859)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.32it/s] 19%|#9        | 5/26 [00:00<00:01, 18.09it/s] 35%|###4      | 9/26 [00:00<00:00, 23.50it/s] 50%|#####     | 13/26 [00:00<00:00, 26.30it/s] 65%|######5   | 17/26 [00:00<00:00, 27.99it/s] 81%|########  | 21/26 [00:00<00:00, 28.90it/s] 96%|#########6| 25/26 [00:00<00:00, 29.76it/s]100%|##########| 26/26 [00:01<00:00, 24.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [9][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.44 (  0.50)	train_minacc   0.56 (  0.50)	train_majacc   0.42 (  0.50)	train_corr   0.00 (  0.00)	l1 7.0536 (7.0643)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.38it/s] 23%|##3       | 6/26 [00:00<00:00, 30.41it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.41it/s] 42%|####2     | 11/26 [00:00<00:00, 37.00it/s] 62%|######1   | 16/26 [00:00<00:00, 41.06it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.06it/s] 81%|########  | 21/26 [00:00<00:00, 39.47it/s]100%|##########| 26/26 [00:00<00:00, 41.78it/s]100%|##########| 26/26 [00:00<00:00, 34.98it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.55 (  0.55)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.45 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.03 (  0.09)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.50)	test_minacc   0.54 (  0.50)	test_majacc   0.54 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.54 (  0.50)	test_majacc_d   0.54 (  0.50)	test_corr_d   0.02 (  0.08)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.44 (  0.50)	test_minacc   0.56 (  0.50)	test_majacc   0.42 (  0.50)	Loss_d 0.695 (0.693)	test_acc_d   0.44 (  0.50)	test_minacc_d   0.56 (  0.50)	test_majacc_d   0.42 (  0.50)	test_corr_d   0.02 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.77it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.07 (  0.07)
Overall Timing[  9/  1]	epoch_time 0.0438 (0.0494)	validation_time 0.0005 (0.0011)	train_time 0.0433 (0.0480)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5022000144124031, 0.503000020980835)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.57it/s] 15%|#5        | 4/26 [00:00<00:01, 13.80it/s] 27%|##6       | 7/26 [00:00<00:00, 19.13it/s] 38%|###8      | 10/26 [00:00<00:00, 22.62it/s] 50%|#####     | 13/26 [00:00<00:00, 24.25it/s] 62%|######1   | 16/26 [00:00<00:00, 25.83it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.91it/s] 88%|########8 | 23/26 [00:00<00:00, 28.40it/s]100%|##########| 26/26 [00:01<00:00, 22.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [10][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.44 (  0.50)	train_minacc   0.58 (  0.52)	train_majacc   0.41 (  0.50)	train_corr   0.00 (  0.00)	l1 7.0494 (7.0508)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.21it/s] 23%|##3       | 6/26 [00:00<00:00, 22.98it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.98it/s] 42%|####2     | 11/26 [00:00<00:00, 31.80it/s] 62%|######1   | 16/26 [00:00<00:00, 37.56it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.56it/s] 81%|########  | 21/26 [00:00<00:00, 36.49it/s]100%|##########| 26/26 [00:00<00:00, 40.15it/s]100%|##########| 26/26 [00:00<00:00, 31.84it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.55 (  0.55)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.55 (  0.51)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.49 (  0.50)	test_corr_d  -0.01 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.50)	test_minacc   0.56 (  0.52)	test_majacc   0.53 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.56 (  0.52)	test_majacc_d   0.53 (  0.50)	test_corr_d  -0.02 (  0.04)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.42 (  0.50)	test_minacc   0.58 (  0.52)	test_majacc   0.40 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.42 (  0.50)	test_minacc_d   0.58 (  0.52)	test_majacc_d   0.40 (  0.50)	test_corr_d  -0.02 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.73it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.02 (  0.02)
Overall Timing[ 10/  1]	epoch_time 0.0483 (0.0493)	validation_time 0.0004 (0.0010)	train_time 0.0478 (0.0480)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5023000119924546, 0.5110000371932983)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.63it/s] 15%|#5        | 4/26 [00:00<00:01, 18.67it/s] 27%|##6       | 7/26 [00:00<00:00, 23.25it/s] 42%|####2     | 11/26 [00:00<00:00, 26.06it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.93it/s] 69%|######9   | 18/26 [00:00<00:00, 28.53it/s] 81%|########  | 21/26 [00:00<00:00, 28.57it/s] 92%|#########2| 24/26 [00:00<00:00, 28.97it/s]100%|##########| 26/26 [00:01<00:00, 25.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [11][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.46 (  0.51)	train_minacc   0.67 (  0.51)	train_majacc   0.43 (  0.51)	train_corr   0.00 (  0.00)	l1 7.0486 (7.0489)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.17it/s] 15%|#5        | 4/26 [00:00<00:01, 18.59it/s] 35%|###4      | 9/26 [00:00<00:00, 30.11it/s]                                               35%|###4      | 9/26 [00:00<00:00, 30.11it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.24it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.46it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 36.46it/s] 92%|#########2| 24/26 [00:00<00:00, 40.01it/s]100%|##########| 26/26 [00:00<00:00, 32.61it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.55 (  0.49)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.49 (  0.51)	test_corr_d  -0.02 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.52 (  0.50)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.52 (  0.51)	test_corr_d  -0.03 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.51)	test_minacc   0.67 (  0.51)	test_majacc   0.43 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.51)	test_minacc_d   0.67 (  0.51)	test_majacc_d   0.43 (  0.51)	test_corr_d  -0.03 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.46it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 11/  1]	epoch_time 0.0473 (0.0492)	validation_time 0.0003 (0.0010)	train_time 0.0470 (0.0479)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5116000157296657, 0.49900001287460327)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.95it/s] 15%|#5        | 4/26 [00:00<00:01, 19.96it/s] 27%|##6       | 7/26 [00:00<00:00, 22.25it/s] 38%|###8      | 10/26 [00:00<00:00, 24.68it/s] 50%|#####     | 13/26 [00:00<00:00, 25.88it/s] 62%|######1   | 16/26 [00:00<00:00, 26.84it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.70it/s] 85%|########4 | 22/26 [00:00<00:00, 27.48it/s] 96%|#########6| 25/26 [00:00<00:00, 28.08it/s]100%|##########| 26/26 [00:01<00:00, 24.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [12][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.50 (  0.51)	train_minacc   0.64 (  0.51)	train_majacc   0.47 (  0.51)	train_corr   0.00 (  0.00)	l1 7.0483 (7.0484)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.49it/s] 12%|#1        | 3/26 [00:00<00:02, 10.75it/s] 31%|###       | 8/26 [00:00<00:00, 22.64it/s]                                               31%|###       | 8/26 [00:00<00:00, 22.64it/s] 50%|#####     | 13/26 [00:00<00:00, 30.39it/s] 69%|######9   | 18/26 [00:00<00:00, 35.75it/s]                                                69%|######9   | 18/26 [00:00<00:00, 35.75it/s] 88%|########8 | 23/26 [00:00<00:00, 38.81it/s]100%|##########| 26/26 [00:00<00:00, 29.37it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.48 (  0.48)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.55 (  0.48)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.55 (  0.48)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.00 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.54 (  0.50)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.54 (  0.50)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.02 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.52)	test_minacc   0.64 (  0.50)	test_majacc   0.47 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.64 (  0.50)	test_majacc_d   0.47 (  0.52)	test_corr_d  -0.03 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.68it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 12/  1]	epoch_time 0.0424 (0.0487)	validation_time 0.0004 (0.0009)	train_time 0.0419 (0.0474)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5195000133216381, 0.4970000088214874)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.51it/s] 15%|#5        | 4/26 [00:00<00:01, 18.41it/s] 27%|##6       | 7/26 [00:00<00:00, 21.85it/s] 42%|####2     | 11/26 [00:00<00:00, 25.30it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.06it/s] 69%|######9   | 18/26 [00:00<00:00, 27.44it/s] 81%|########  | 21/26 [00:00<00:00, 27.62it/s] 92%|#########2| 24/26 [00:00<00:00, 28.19it/s]100%|##########| 26/26 [00:01<00:00, 24.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [13][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.51 (  0.52)	train_minacc   0.64 (  0.50)	train_majacc   0.49 (  0.52)	train_corr   0.00 (  0.00)	l1 7.0482 (7.0482)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.54it/s] 23%|##3       | 6/26 [00:00<00:00, 25.84it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.84it/s] 42%|####2     | 11/26 [00:00<00:00, 33.14it/s] 62%|######1   | 16/26 [00:00<00:00, 36.98it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.98it/s] 81%|########  | 21/26 [00:00<00:00, 39.37it/s]100%|##########| 26/26 [00:00<00:00, 41.87it/s]100%|##########| 26/26 [00:00<00:00, 33.25it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.43 (  0.43)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.57 (  0.48)	test_majacc   0.49 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.57 (  0.48)	test_majacc_d   0.49 (  0.52)	test_corr_d   0.01 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.57 (  0.50)	test_majacc   0.48 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.57 (  0.50)	test_majacc_d   0.48 (  0.53)	test_corr_d  -0.01 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.64 (  0.51)	test_majacc   0.49 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.64 (  0.51)	test_majacc_d   0.49 (  0.52)	test_corr_d  -0.03 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.21it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 13/  1]	epoch_time 0.0430 (0.0482)	validation_time 0.0004 (0.0009)	train_time 0.0426 (0.0471)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5209000179767609, 0.503000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.92it/s] 19%|#9        | 5/26 [00:00<00:00, 23.59it/s] 31%|###       | 8/26 [00:00<00:00, 25.68it/s] 42%|####2     | 11/26 [00:00<00:00, 26.28it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.26it/s] 65%|######5   | 17/26 [00:00<00:00, 27.57it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.28it/s] 88%|########8 | 23/26 [00:00<00:00, 28.59it/s]100%|##########| 26/26 [00:00<00:00, 28.77it/s]100%|##########| 26/26 [00:01<00:00, 25.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [14][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.52 (  0.52)	train_minacc   0.64 (  0.50)	train_majacc   0.50 (  0.52)	train_corr   0.00 (  0.00)	l1 7.0481 (7.0481)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.46it/s] 23%|##3       | 6/26 [00:00<00:00, 23.39it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.39it/s] 42%|####2     | 11/26 [00:00<00:00, 31.47it/s] 62%|######1   | 16/26 [00:00<00:00, 37.06it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.06it/s] 81%|########  | 21/26 [00:00<00:00, 39.83it/s]100%|##########| 26/26 [00:00<00:00, 42.59it/s]100%|##########| 26/26 [00:00<00:00, 32.58it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.57 (  0.48)	test_majacc   0.49 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.57 (  0.48)	test_majacc_d   0.49 (  0.52)	test_corr_d   0.01 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.56 (  0.50)	test_majacc   0.48 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.56 (  0.50)	test_majacc_d   0.48 (  0.53)	test_corr_d  -0.01 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.64 (  0.50)	test_majacc   0.50 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.64 (  0.50)	test_majacc_d   0.50 (  0.53)	test_corr_d  -0.03 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.47it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 14/  1]	epoch_time 0.0447 (0.0480)	validation_time 0.0003 (0.0008)	train_time 0.0444 (0.0469)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5226000089943409, 0.49800002574920654)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.99it/s] 19%|#9        | 5/26 [00:00<00:00, 22.75it/s] 35%|###4      | 9/26 [00:00<00:00, 26.65it/s] 46%|####6     | 12/26 [00:00<00:00, 27.60it/s] 62%|######1   | 16/26 [00:00<00:00, 28.79it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.90it/s] 88%|########8 | 23/26 [00:00<00:00, 29.93it/s]100%|##########| 26/26 [00:00<00:00, 26.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [15][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.52 (  0.52)	train_minacc   0.64 (  0.51)	train_majacc   0.50 (  0.52)	train_corr   0.00 (  0.00)	l1 7.0481 (7.0481)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.25it/s] 23%|##3       | 6/26 [00:00<00:00, 21.24it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.24it/s] 42%|####2     | 11/26 [00:00<00:00, 30.71it/s] 65%|######5   | 17/26 [00:00<00:00, 36.18it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.18it/s] 85%|########4 | 22/26 [00:00<00:00, 39.90it/s]100%|##########| 26/26 [00:00<00:00, 31.25it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.47 (  0.47)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.57 (  0.49)	test_majacc   0.51 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.57 (  0.49)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.02 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.54 (  0.50)	test_majacc   0.48 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.54 (  0.50)	test_majacc_d   0.48 (  0.53)	test_corr_d  -0.01 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.64 (  0.51)	test_majacc   0.50 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.64 (  0.51)	test_majacc_d   0.50 (  0.53)	test_corr_d  -0.03 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.63it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 15/  1]	epoch_time 0.0422 (0.0476)	validation_time 0.0004 (0.0008)	train_time 0.0417 (0.0466)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5239000184237957, 0.503000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.11it/s] 15%|#5        | 4/26 [00:00<00:01, 17.31it/s] 27%|##6       | 7/26 [00:00<00:00, 20.83it/s] 38%|###8      | 10/26 [00:00<00:00, 23.31it/s] 50%|#####     | 13/26 [00:00<00:00, 24.96it/s] 62%|######1   | 16/26 [00:00<00:00, 26.48it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.96it/s] 88%|########8 | 23/26 [00:00<00:00, 28.13it/s]100%|##########| 26/26 [00:01<00:00, 23.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.55 (  0.52)	train_minacc   0.67 (  0.51)	train_majacc   0.53 (  0.52)	train_corr   0.00 (  0.00)	l1 7.0481 (7.0480)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 11.03it/s] 27%|##6       | 7/26 [00:00<00:00, 27.02it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.02it/s] 46%|####6     | 12/26 [00:00<00:00, 34.38it/s] 65%|######5   | 17/26 [00:00<00:00, 37.97it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.97it/s] 85%|########4 | 22/26 [00:00<00:00, 37.85it/s]100%|##########| 26/26 [00:00<00:00, 33.61it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.57 (  0.50)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.57 (  0.50)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.03 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.53)	test_minacc   0.54 (  0.51)	test_majacc   0.49 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.53)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.49 (  0.53)	test_corr_d   0.01 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.53)	test_minacc   0.69 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.69 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.03 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.35it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 16/  1]	epoch_time 0.0438 (0.0474)	validation_time 0.0004 (0.0008)	train_time 0.0433 (0.0464)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5282000088393688, 0.5060000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.96it/s] 19%|#9        | 5/26 [00:00<00:00, 22.70it/s] 35%|###4      | 9/26 [00:00<00:00, 27.13it/s] 50%|#####     | 13/26 [00:00<00:00, 29.07it/s] 65%|######5   | 17/26 [00:00<00:00, 30.41it/s] 81%|########  | 21/26 [00:00<00:00, 30.84it/s] 96%|#########6| 25/26 [00:00<00:00, 31.07it/s]100%|##########| 26/26 [00:00<00:00, 27.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.55 (  0.52)	train_minacc   0.69 (  0.51)	train_majacc   0.53 (  0.52)	train_corr   0.00 (  0.00)	l1 7.0480 (7.0480)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.20it/s] 31%|###       | 8/26 [00:00<00:00, 37.16it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.16it/s] 46%|####6     | 12/26 [00:00<00:00, 38.19it/s] 65%|######5   | 17/26 [00:00<00:00, 41.84it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.84it/s] 85%|########4 | 22/26 [00:00<00:00, 43.83it/s]100%|##########| 26/26 [00:00<00:00, 37.08it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.47 (  0.47)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.55 (  0.51)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.04 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.53)	test_minacc   0.52 (  0.51)	test_majacc   0.49 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.53)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.49 (  0.53)	test_corr_d   0.00 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.53)	test_minacc   0.69 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.53)	test_minacc_d   0.69 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.03 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.24it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 17/  1]	epoch_time 0.0415 (0.0471)	validation_time 0.0003 (0.0008)	train_time 0.0412 (0.0461)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5270000149309635, 0.5010000467300415)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.97it/s] 19%|#9        | 5/26 [00:00<00:01, 12.71it/s] 35%|###4      | 9/26 [00:00<00:00, 18.82it/s] 46%|####6     | 12/26 [00:00<00:00, 21.76it/s] 58%|#####7    | 15/26 [00:00<00:00, 23.89it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.03it/s] 88%|########8 | 23/26 [00:01<00:00, 27.30it/s]100%|##########| 26/26 [00:01<00:00, 26.71it/s]100%|##########| 26/26 [00:01<00:00, 20.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.54 (  0.52)	train_minacc   0.64 (  0.52)	train_majacc   0.52 (  0.52)	train_corr   0.00 (  0.00)	l1 7.0480 (7.0480)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.07it/s] 27%|##6       | 7/26 [00:00<00:00, 33.37it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.37it/s] 46%|####6     | 12/26 [00:00<00:00, 38.17it/s] 65%|######5   | 17/26 [00:00<00:00, 42.05it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.05it/s] 85%|########4 | 22/26 [00:00<00:00, 40.66it/s]100%|##########| 26/26 [00:00<00:00, 36.81it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.52 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.04 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.53)	test_minacc   0.52 (  0.51)	test_majacc   0.49 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.53)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.49 (  0.53)	test_corr_d   0.00 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.64 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.64 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.03 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.98it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 18/  1]	epoch_time 0.0459 (0.0470)	validation_time 0.0007 (0.0008)	train_time 0.0452 (0.0460)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5274000107944011, 0.5080000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.79it/s] 12%|#1        | 3/26 [00:00<00:01, 14.88it/s] 23%|##3       | 6/26 [00:00<00:00, 21.18it/s] 35%|###4      | 9/26 [00:00<00:00, 24.10it/s] 46%|####6     | 12/26 [00:00<00:00, 26.03it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.48it/s] 69%|######9   | 18/26 [00:00<00:00, 27.58it/s] 81%|########  | 21/26 [00:00<00:00, 28.03it/s] 92%|#########2| 24/26 [00:00<00:00, 28.54it/s]100%|##########| 26/26 [00:01<00:00, 24.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.55 (  0.53)	train_minacc   0.64 (  0.52)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 7.0480 (7.0480)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.50it/s] 35%|###4      | 9/26 [00:00<00:00, 36.77it/s]                                               35%|###4      | 9/26 [00:00<00:00, 36.77it/s] 54%|#####3    | 14/26 [00:00<00:00, 41.00it/s] 73%|#######3  | 19/26 [00:00<00:00, 42.51it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 42.51it/s] 92%|#########2| 24/26 [00:00<00:00, 43.97it/s]100%|##########| 26/26 [00:00<00:00, 37.09it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.50 (  0.50)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.50 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.04 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.53)	test_minacc   0.52 (  0.51)	test_majacc   0.50 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.53)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.50 (  0.53)	test_corr_d   0.00 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.53)	test_minacc   0.64 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.64 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.03 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.69it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 19/  1]	epoch_time 0.0408 (0.0467)	validation_time 0.0004 (0.0008)	train_time 0.0403 (0.0458)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5263000145554543, 0.5120000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 19.87it/s] 23%|##3       | 6/26 [00:00<00:00, 24.05it/s] 35%|###4      | 9/26 [00:00<00:00, 25.91it/s] 46%|####6     | 12/26 [00:00<00:00, 26.70it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.26it/s] 69%|######9   | 18/26 [00:00<00:00, 27.95it/s] 85%|########4 | 22/26 [00:00<00:00, 28.84it/s]100%|##########| 26/26 [00:00<00:00, 29.55it/s]100%|##########| 26/26 [00:01<00:00, 25.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.55 (  0.53)	train_minacc   0.64 (  0.52)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 7.0480 (7.0480)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.81it/s] 27%|##6       | 7/26 [00:00<00:00, 35.87it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.87it/s] 46%|####6     | 12/26 [00:00<00:00, 40.76it/s] 65%|######5   | 17/26 [00:00<00:00, 37.34it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.34it/s] 85%|########4 | 22/26 [00:00<00:00, 40.08it/s]100%|##########| 26/26 [00:00<00:00, 35.62it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.50 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.05 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.53)	test_minacc   0.54 (  0.52)	test_majacc   0.50 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.50 (  0.53)	test_corr_d   0.01 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.53)	test_minacc   0.64 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.64 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.03 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.13it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 20/  1]	epoch_time 0.0407 (0.0464)	validation_time 0.0003 (0.0007)	train_time 0.0403 (0.0455)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5273000168204307, 0.5160000324249268)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.16it/s] 12%|#1        | 3/26 [00:00<00:01, 11.56it/s] 23%|##3       | 6/26 [00:00<00:01, 18.53it/s] 35%|###4      | 9/26 [00:00<00:00, 22.41it/s] 50%|#####     | 13/26 [00:00<00:00, 25.56it/s] 62%|######1   | 16/26 [00:00<00:00, 26.43it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.80it/s] 88%|########8 | 23/26 [00:00<00:00, 28.15it/s]100%|##########| 26/26 [00:01<00:00, 23.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.55 (  0.53)	train_minacc   0.64 (  0.53)	train_majacc   0.53 (  0.52)	train_corr   0.00 (  0.00)	l1 7.0480 (7.0480)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.71it/s] 27%|##6       | 7/26 [00:00<00:00, 31.67it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.67it/s] 46%|####6     | 12/26 [00:00<00:00, 37.71it/s] 65%|######5   | 17/26 [00:00<00:00, 40.17it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.17it/s] 85%|########4 | 22/26 [00:00<00:00, 40.17it/s]100%|##########| 26/26 [00:00<00:00, 35.99it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.46 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.46 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.05 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.53)	test_minacc   0.54 (  0.52)	test_majacc   0.51 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.01 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.53)	test_minacc   0.64 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.64 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.03 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.58it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 21/  1]	epoch_time 0.0462 (0.0464)	validation_time 0.0004 (0.0007)	train_time 0.0457 (0.0455)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5263000157177449, 0.5130000114440918)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.77it/s] 15%|#5        | 4/26 [00:00<00:01, 18.82it/s] 27%|##6       | 7/26 [00:00<00:00, 23.39it/s] 38%|###8      | 10/26 [00:00<00:00, 25.84it/s] 50%|#####     | 13/26 [00:00<00:00, 27.27it/s] 62%|######1   | 16/26 [00:00<00:00, 26.15it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.72it/s] 88%|########8 | 23/26 [00:00<00:00, 27.98it/s]100%|##########| 26/26 [00:01<00:00, 24.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.55 (  0.53)	train_minacc   0.64 (  0.53)	train_majacc   0.53 (  0.52)	train_corr   0.00 (  0.00)	l1 7.0480 (7.0480)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.28it/s] 15%|#5        | 4/26 [00:00<00:01, 11.60it/s] 35%|###4      | 9/26 [00:00<00:00, 22.68it/s]                                               35%|###4      | 9/26 [00:00<00:00, 22.68it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.42it/s] 73%|#######3  | 19/26 [00:00<00:00, 34.89it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 34.89it/s] 92%|#########2| 24/26 [00:00<00:00, 36.52it/s]100%|##########| 26/26 [00:00<00:00, 28.42it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.46 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.46 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.05 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.53)	test_minacc   0.56 (  0.53)	test_majacc   0.51 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.56 (  0.53)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.01 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.53)	test_minacc   0.64 (  0.53)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.64 (  0.53)	test_majacc_d   0.53 (  0.52)	test_corr_d  -0.03 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.84it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 22/  1]	epoch_time 0.0450 (0.0464)	validation_time 0.0004 (0.0007)	train_time 0.0446 (0.0455)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5251000146269799, 0.5170000195503235)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.02it/s] 19%|#9        | 5/26 [00:00<00:00, 23.59it/s] 31%|###       | 8/26 [00:00<00:00, 22.60it/s] 42%|####2     | 11/26 [00:00<00:00, 25.02it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.35it/s] 65%|######5   | 17/26 [00:00<00:00, 27.11it/s] 81%|########  | 21/26 [00:00<00:00, 28.21it/s] 92%|#########2| 24/26 [00:00<00:00, 28.71it/s]100%|##########| 26/26 [00:01<00:00, 25.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 200
penalty weights 10000.0
l1 at pgd_anneal_iters 7.048007965087891
set z to 6.977527885437012
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 200
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 200
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 200
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 200
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 200
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
rho, theta 380 tensor(-0.0095, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 200
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 200
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 200
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 200
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 200
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 200
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 200
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 200
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 200
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 200
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 200
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 200
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 200
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 200
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 200
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 200
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 200
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 200
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
final projection at end of training
dim_v 512
Epoch: [23][  26/  26]	Loss 0.000 (0.004)	train_nll   0.67 (  0.70)	train_penalty   0.00 (  0.00)	weight_norm   0.97 (  0.64)	train_acc   0.56 (  0.50)	train_minacc   0.44 (  0.53)	train_majacc   0.58 (  0.50)	train_corr   0.00 (  0.00)	l1 6.1401 (6.3075)	zero_count 0.0000 (5.1090)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.64it/s] 27%|##6       | 7/26 [00:00<00:00, 34.17it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.17it/s] 46%|####6     | 12/26 [00:00<00:00, 39.92it/s] 65%|######5   | 17/26 [00:00<00:00, 39.24it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.24it/s] 85%|########4 | 22/26 [00:00<00:00, 42.05it/s]100%|##########| 26/26 [00:00<00:00, 36.50it/s]
Test: [   0/  26]	Loss 0.699 (0.699)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.50 (  0.50)	Loss_d 0.699 (0.699)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.692 (0.695)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.51)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.695)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.17 (  0.18)
Test: [  20/  26]	Loss 0.703 (0.696)	test_acc   0.46 (  0.50)	test_minacc   0.46 (  0.51)	test_majacc   0.46 (  0.50)	Loss_d 0.703 (0.696)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.46 (  0.51)	test_majacc_d   0.46 (  0.50)	test_corr_d   0.26 (  0.18)
Test: [  26/  26]	Loss 0.676 (0.696)	test_acc   0.56 (  0.50)	test_minacc   0.44 (  0.50)	test_majacc   0.58 (  0.50)	Loss_d 0.676 (0.696)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.58 (  0.50)	test_corr_d   0.09 (  0.18)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.78it/s]
Test: [  0/  1]	Loss 0.705 (0.705)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.705 (0.705)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.705 (0.705)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.705 (0.705)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.06 (  0.06)
Overall Timing[ 23/  1]	epoch_time 0.0427 (0.0462)	validation_time 0.0006 (0.0007)	train_time 0.0420 (0.0453)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5000000096559525, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.53it/s] 19%|#9        | 5/26 [00:00<00:00, 22.78it/s] 35%|###4      | 9/26 [00:00<00:00, 26.25it/s] 46%|####6     | 12/26 [00:00<00:00, 27.45it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.10it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.99it/s] 88%|########8 | 23/26 [00:00<00:00, 29.44it/s]100%|##########| 26/26 [00:00<00:00, 26.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 200
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 200
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 200
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 200
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 200
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 200
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 200
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 200
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 200
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 200
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 200
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 200
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 200
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 200
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 200
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 200
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 200
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 200
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 200
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 200
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 200
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 200
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 200
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 200
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 200
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 200
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
final projection at end of training
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.18 (  1.12)	train_acc   0.56 (  0.50)	train_minacc   0.44 (  0.50)	train_majacc   0.58 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4656 (6.3885)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.74it/s] 38%|###8      | 10/26 [00:00<00:00, 42.76it/s]                                                38%|###8      | 10/26 [00:00<00:00, 42.76it/s] 62%|######1   | 16/26 [00:00<00:00, 44.48it/s]                                                62%|######1   | 16/26 [00:00<00:00, 44.48it/s] 81%|########  | 21/26 [00:00<00:00, 45.02it/s]100%|##########| 26/26 [00:00<00:00, 46.01it/s]100%|##########| 26/26 [00:00<00:00, 39.27it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.48 (  0.48)
Test: [  10/  26]	Loss 0.685 (0.687)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.51)	test_majacc   0.51 (  0.50)	Loss_d 0.685 (0.687)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.52 (  0.55)
Test: [  20/  26]	Loss 0.695 (0.688)	test_acc   0.46 (  0.50)	test_minacc   0.46 (  0.51)	test_majacc   0.46 (  0.50)	Loss_d 0.695 (0.688)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.46 (  0.51)	test_majacc_d   0.46 (  0.50)	test_corr_d   0.58 (  0.55)
Test: [  26/  26]	Loss 0.676 (0.688)	test_acc   0.56 (  0.50)	test_minacc   0.44 (  0.50)	test_majacc   0.58 (  0.50)	Loss_d 0.676 (0.688)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.58 (  0.50)	test_corr_d   0.51 (  0.55)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.27it/s]
Test: [  0/  1]	Loss 0.705 (0.705)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.705 (0.705)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.37 (  0.37)
Test: [  1/  1]	Loss 0.705 (0.705)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.705 (0.705)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.37 (  0.37)
Overall Timing[ 24/  1]	epoch_time 0.0435 (0.0461)	validation_time 0.0003 (0.0007)	train_time 0.0432 (0.0452)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5000000096559525, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.13it/s] 23%|##3       | 6/26 [00:00<00:00, 25.25it/s] 38%|###8      | 10/26 [00:00<00:00, 28.27it/s] 54%|#####3    | 14/26 [00:00<00:00, 29.58it/s] 65%|######5   | 17/26 [00:00<00:00, 29.57it/s] 81%|########  | 21/26 [00:00<00:00, 29.80it/s] 96%|#########6| 25/26 [00:00<00:00, 30.75it/s]100%|##########| 26/26 [00:00<00:00, 27.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 200
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 200
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 200
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 200
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 200
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 200
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 200
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 200
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 200
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 200
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 200
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 200
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 200
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 200
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 200
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 200
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 200
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 200
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 200
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 200
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 200
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 200
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 200
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 200
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 200
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 200
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.19 (  1.19)	train_acc   0.56 (  0.50)	train_minacc   0.44 (  0.50)	train_majacc   0.58 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4518 (6.4630)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 10.18it/s] 31%|###       | 8/26 [00:00<00:00, 26.71it/s]                                               31%|###       | 8/26 [00:00<00:00, 26.71it/s] 50%|#####     | 13/26 [00:00<00:00, 33.61it/s] 69%|######9   | 18/26 [00:00<00:00, 37.68it/s]                                                69%|######9   | 18/26 [00:00<00:00, 37.68it/s] 88%|########8 | 23/26 [00:00<00:00, 40.22it/s]100%|##########| 26/26 [00:00<00:00, 32.71it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.43 (  0.43)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.37 (  0.37)
Test: [  10/  26]	Loss 0.687 (0.689)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.51)	test_majacc   0.51 (  0.50)	Loss_d 0.687 (0.689)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.43 (  0.44)
Test: [  20/  26]	Loss 0.696 (0.690)	test_acc   0.46 (  0.50)	test_minacc   0.46 (  0.51)	test_majacc   0.46 (  0.50)	Loss_d 0.696 (0.690)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.46 (  0.51)	test_majacc_d   0.46 (  0.50)	test_corr_d   0.44 (  0.45)
Test: [  26/  26]	Loss 0.680 (0.690)	test_acc   0.56 (  0.50)	test_minacc   0.44 (  0.50)	test_majacc   0.58 (  0.50)	Loss_d 0.680 (0.690)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.58 (  0.50)	test_corr_d   0.44 (  0.44)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.57it/s]
Test: [  0/  1]	Loss 0.700 (0.700)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.700 (0.700)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 0.700 (0.700)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.700 (0.700)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.26 (  0.26)
Overall Timing[ 25/  1]	epoch_time 0.0480 (0.0462)	validation_time 0.0004 (0.0007)	train_time 0.0476 (0.0453)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5000000096559525, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.42it/s] 15%|#5        | 4/26 [00:00<00:01, 18.44it/s] 27%|##6       | 7/26 [00:00<00:00, 22.16it/s] 38%|###8      | 10/26 [00:00<00:00, 24.75it/s] 50%|#####     | 13/26 [00:00<00:00, 25.52it/s] 65%|######5   | 17/26 [00:00<00:00, 27.11it/s] 81%|########  | 21/26 [00:00<00:00, 28.01it/s] 96%|#########6| 25/26 [00:00<00:00, 28.78it/s]100%|##########| 26/26 [00:01<00:00, 24.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 200
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 200
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 200
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 200
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 200
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 200
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 200
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 200
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 200
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 200
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 200
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 200
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 200
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 200
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 200
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 200
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 200
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 200
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 200
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 200
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 200
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 200
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 200
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 200
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 200
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 200
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
final projection at end of training
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.19 (  1.19)	train_acc   0.56 (  0.50)	train_minacc   0.44 (  0.50)	train_majacc   0.58 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4343 (6.4447)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.47it/s] 23%|##3       | 6/26 [00:00<00:00, 30.61it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.61it/s] 42%|####2     | 11/26 [00:00<00:00, 37.95it/s] 62%|######1   | 16/26 [00:00<00:00, 41.65it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.65it/s] 81%|########  | 21/26 [00:00<00:00, 39.69it/s]100%|##########| 26/26 [00:00<00:00, 42.66it/s]100%|##########| 26/26 [00:00<00:00, 34.06it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.40 (  0.40)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.34 (  0.34)
Test: [  10/  26]	Loss 0.688 (0.690)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.51)	test_majacc   0.51 (  0.50)	Loss_d 0.688 (0.690)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.41 (  0.41)
Test: [  20/  26]	Loss 0.696 (0.690)	test_acc   0.46 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.46 (  0.50)	Loss_d 0.696 (0.690)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.46 (  0.50)	test_corr_d   0.40 (  0.42)
Test: [  26/  26]	Loss 0.682 (0.690)	test_acc   0.56 (  0.50)	test_minacc   0.44 (  0.50)	test_majacc   0.58 (  0.50)	Loss_d 0.682 (0.690)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.58 (  0.50)	test_corr_d   0.43 (  0.41)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.75it/s]
Test: [  0/  1]	Loss 0.699 (0.699)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.699 (0.699)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 0.699 (0.699)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.699 (0.699)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.25 (  0.25)
Overall Timing[ 26/  1]	epoch_time 0.0446 (0.0461)	validation_time 0.0004 (0.0007)	train_time 0.0442 (0.0453)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5001000108122826, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.54it/s] 15%|#5        | 4/26 [00:00<00:01, 19.88it/s] 27%|##6       | 7/26 [00:00<00:00, 21.82it/s] 38%|###8      | 10/26 [00:00<00:00, 24.53it/s] 50%|#####     | 13/26 [00:00<00:00, 25.36it/s] 62%|######1   | 16/26 [00:00<00:00, 26.48it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.20it/s] 85%|########4 | 22/26 [00:00<00:00, 27.82it/s] 96%|#########6| 25/26 [00:00<00:00, 27.93it/s]100%|##########| 26/26 [00:01<00:00, 24.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 200
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 200
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 200
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 200
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 200
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 200
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 200
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 200
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 200
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 200
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 200
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 200
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 200
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 200
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 200
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 200
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 200
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 200
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 200
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 200
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 200
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 200
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 200
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 200
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 200
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 200
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
final projection at end of training
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.18 (  1.18)	train_acc   0.56 (  0.50)	train_minacc   0.44 (  0.50)	train_majacc   0.58 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4230 (6.4307)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.15it/s] 15%|#5        | 4/26 [00:00<00:01, 16.67it/s] 35%|###4      | 9/26 [00:00<00:00, 28.40it/s]                                               35%|###4      | 9/26 [00:00<00:00, 28.40it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.13it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.74it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 35.74it/s] 96%|#########6| 25/26 [00:00<00:00, 41.33it/s]100%|##########| 26/26 [00:00<00:00, 31.91it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.40 (  0.40)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.33 (  0.33)
Test: [  10/  26]	Loss 0.688 (0.690)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.51)	test_majacc   0.51 (  0.50)	Loss_d 0.688 (0.690)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.39 (  0.40)
Test: [  20/  26]	Loss 0.696 (0.690)	test_acc   0.46 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.46 (  0.50)	Loss_d 0.696 (0.690)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.46 (  0.50)	test_corr_d   0.38 (  0.40)
Test: [  26/  26]	Loss 0.683 (0.690)	test_acc   0.56 (  0.50)	test_minacc   0.44 (  0.50)	test_majacc   0.58 (  0.50)	Loss_d 0.683 (0.690)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.58 (  0.50)	test_corr_d   0.42 (  0.40)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.60it/s]
Test: [  0/  1]	Loss 0.699 (0.699)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.699 (0.699)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 0.699 (0.699)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.699 (0.699)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.25 (  0.25)
Overall Timing[ 27/  1]	epoch_time 0.0467 (0.0461)	validation_time 0.0004 (0.0007)	train_time 0.0463 (0.0453)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5004000096321106, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.88it/s] 15%|#5        | 4/26 [00:00<00:01, 13.02it/s] 27%|##6       | 7/26 [00:00<00:01, 18.40it/s] 38%|###8      | 10/26 [00:00<00:00, 21.96it/s] 50%|#####     | 13/26 [00:00<00:00, 23.83it/s] 62%|######1   | 16/26 [00:00<00:00, 25.24it/s] 73%|#######3  | 19/26 [00:00<00:00, 25.98it/s] 85%|########4 | 22/26 [00:00<00:00, 27.08it/s] 96%|#########6| 25/26 [00:01<00:00, 27.75it/s]100%|##########| 26/26 [00:01<00:00, 21.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 200
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 200
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 200
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 200
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 200
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 200
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 200
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 200
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 200
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 200
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 200
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 200
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 200
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 200
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 200
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 200
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 200
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 200
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 200
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 200
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 200
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 200
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 200
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 200
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 200
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 200
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
final projection at end of training
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.18 (  1.18)	train_acc   0.56 (  0.50)	train_minacc   0.42 (  0.50)	train_majacc   0.58 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4152 (6.4212)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.15it/s] 23%|##3       | 6/26 [00:00<00:00, 28.26it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.26it/s] 42%|####2     | 11/26 [00:00<00:00, 34.58it/s] 62%|######1   | 16/26 [00:00<00:00, 39.21it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.21it/s] 81%|########  | 21/26 [00:00<00:00, 38.23it/s]100%|##########| 26/26 [00:00<00:00, 41.60it/s]100%|##########| 26/26 [00:00<00:00, 33.94it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.42 (  0.42)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.32 (  0.32)
Test: [  10/  26]	Loss 0.689 (0.690)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.51)	test_majacc   0.51 (  0.50)	Loss_d 0.689 (0.690)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.38 (  0.38)
Test: [  20/  26]	Loss 0.696 (0.691)	test_acc   0.46 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.46 (  0.50)	Loss_d 0.696 (0.691)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.46 (  0.50)	test_corr_d   0.37 (  0.39)
Test: [  26/  26]	Loss 0.683 (0.691)	test_acc   0.56 (  0.50)	test_minacc   0.44 (  0.50)	test_majacc   0.58 (  0.50)	Loss_d 0.683 (0.691)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.58 (  0.50)	test_corr_d   0.41 (  0.39)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.16it/s]
Test: [  0/  1]	Loss 0.698 (0.698)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.698 (0.698)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 0.698 (0.698)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.698 (0.698)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.25 (  0.25)
Overall Timing[ 28/  1]	epoch_time 0.0418 (0.0460)	validation_time 0.0003 (0.0006)	train_time 0.0414 (0.0452)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5004000107944012, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.28it/s] 19%|#9        | 5/26 [00:00<00:01, 17.73it/s] 35%|###4      | 9/26 [00:00<00:00, 23.02it/s] 50%|#####     | 13/26 [00:00<00:00, 26.00it/s] 62%|######1   | 16/26 [00:00<00:00, 27.15it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.30it/s] 88%|########8 | 23/26 [00:00<00:00, 28.63it/s]100%|##########| 26/26 [00:01<00:00, 28.97it/s]100%|##########| 26/26 [00:01<00:00, 24.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 200
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 200
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 200
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 200
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 200
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 200
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 200
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 200
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 200
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 200
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 200
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 200
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 200
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 200
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 200
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 200
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 200
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 200
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 200
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 200
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 200
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 200
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 200
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 200
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 200
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 200
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
final projection at end of training
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.18 (  1.18)	train_acc   0.56 (  0.50)	train_minacc   0.42 (  0.50)	train_majacc   0.58 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4094 (6.4144)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.17it/s] 23%|##3       | 6/26 [00:00<00:00, 26.22it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.22it/s] 42%|####2     | 11/26 [00:00<00:00, 34.99it/s] 62%|######1   | 16/26 [00:00<00:00, 40.26it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.26it/s] 81%|########  | 21/26 [00:00<00:00, 42.16it/s]100%|##########| 26/26 [00:00<00:00, 44.47it/s]100%|##########| 26/26 [00:00<00:00, 34.96it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.42 (  0.42)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.32 (  0.32)
Test: [  10/  26]	Loss 0.689 (0.691)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.51)	test_majacc   0.51 (  0.50)	Loss_d 0.689 (0.691)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.37 (  0.37)
Test: [  20/  26]	Loss 0.696 (0.691)	test_acc   0.46 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.46 (  0.50)	Loss_d 0.696 (0.691)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.46 (  0.50)	test_corr_d   0.36 (  0.38)
Test: [  26/  26]	Loss 0.684 (0.691)	test_acc   0.56 (  0.50)	test_minacc   0.44 (  0.50)	test_majacc   0.58 (  0.50)	Loss_d 0.684 (0.691)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.58 (  0.50)	test_corr_d   0.40 (  0.38)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.01it/s]
Test: [  0/  1]	Loss 0.698 (0.698)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.698 (0.698)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 0.698 (0.698)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.698 (0.698)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.25 (  0.25)
Overall Timing[ 29/  1]	epoch_time 0.0405 (0.0458)	validation_time 0.0004 (0.0006)	train_time 0.0401 (0.0450)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5005000119507312, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.30it/s] 15%|#5        | 4/26 [00:00<00:01, 21.02it/s] 27%|##6       | 7/26 [00:00<00:00, 24.51it/s] 38%|###8      | 10/26 [00:00<00:00, 26.29it/s] 54%|#####3    | 14/26 [00:00<00:00, 28.11it/s] 65%|######5   | 17/26 [00:00<00:00, 28.43it/s] 81%|########  | 21/26 [00:00<00:00, 29.50it/s] 96%|#########6| 25/26 [00:00<00:00, 29.65it/s]100%|##########| 26/26 [00:00<00:00, 26.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 200
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 200
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 200
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 200
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 200
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 200
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 200
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 200
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 200
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 200
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 200
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 200
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 200
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 200
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 200
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 200
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 200
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 200
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 200
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 200
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 200
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 200
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 200
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 200
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 200
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 200
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.17 (  1.18)	train_acc   0.56 (  0.50)	train_minacc   0.42 (  0.50)	train_majacc   0.58 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4049 (6.4092)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.32it/s] 23%|##3       | 6/26 [00:00<00:00, 29.92it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.92it/s] 42%|####2     | 11/26 [00:00<00:00, 36.70it/s] 62%|######1   | 16/26 [00:00<00:00, 38.97it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.97it/s] 81%|########  | 21/26 [00:00<00:00, 41.03it/s]100%|##########| 26/26 [00:00<00:00, 43.56it/s]100%|##########| 26/26 [00:00<00:00, 35.53it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.42 (  0.42)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.31 (  0.31)
Test: [  10/  26]	Loss 0.689 (0.691)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.51)	test_majacc   0.51 (  0.50)	Loss_d 0.689 (0.691)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.37 (  0.36)
Test: [  20/  26]	Loss 0.696 (0.691)	test_acc   0.46 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.46 (  0.50)	Loss_d 0.696 (0.691)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.46 (  0.50)	test_corr_d   0.36 (  0.37)
Test: [  26/  26]	Loss 0.684 (0.691)	test_acc   0.56 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.58 (  0.50)	Loss_d 0.684 (0.691)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.58 (  0.50)	test_corr_d   0.40 (  0.37)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.43it/s]
Test: [  0/  1]	Loss 0.698 (0.698)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.698 (0.698)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 0.698 (0.698)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.698 (0.698)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.26 (  0.26)
Overall Timing[ 30/  1]	epoch_time 0.0406 (0.0456)	validation_time 0.0003 (0.0006)	train_time 0.0403 (0.0449)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.500700009405613, 0.5010000467300415)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.33it/s] 15%|#5        | 4/26 [00:00<00:01, 16.45it/s] 27%|##6       | 7/26 [00:00<00:00, 21.43it/s] 38%|###8      | 10/26 [00:00<00:00, 24.46it/s] 50%|#####     | 13/26 [00:00<00:00, 26.00it/s] 62%|######1   | 16/26 [00:00<00:00, 26.74it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.95it/s] 88%|########8 | 23/26 [00:00<00:00, 28.15it/s]100%|##########| 26/26 [00:01<00:00, 23.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 200
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 200
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 200
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 200
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 200
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 200
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 200
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 200
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 200
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 200
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 200
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 200
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 200
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 200
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 200
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 200
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 200
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 200
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 200
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 200
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 200
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 200
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 200
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 200
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 200
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 200
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
final projection at end of training
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.17 (  1.17)	train_acc   0.56 (  0.50)	train_minacc   0.42 (  0.50)	train_majacc   0.58 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4014 (6.4052)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.18it/s] 31%|###       | 8/26 [00:00<00:00, 32.51it/s]                                               31%|###       | 8/26 [00:00<00:00, 32.51it/s] 50%|#####     | 13/26 [00:00<00:00, 38.36it/s] 69%|######9   | 18/26 [00:00<00:00, 41.95it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.95it/s] 88%|########8 | 23/26 [00:00<00:00, 42.72it/s]100%|##########| 26/26 [00:00<00:00, 37.45it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.42 (  0.42)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.31 (  0.31)
Test: [  10/  26]	Loss 0.689 (0.691)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.51)	test_majacc   0.51 (  0.50)	Loss_d 0.689 (0.691)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.36 (  0.35)
Test: [  20/  26]	Loss 0.696 (0.691)	test_acc   0.46 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.46 (  0.50)	Loss_d 0.696 (0.691)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.46 (  0.50)	test_corr_d   0.35 (  0.36)
Test: [  26/  26]	Loss 0.685 (0.691)	test_acc   0.56 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.58 (  0.50)	Loss_d 0.685 (0.691)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.58 (  0.50)	test_corr_d   0.39 (  0.36)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.08it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.697 (0.697)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.697 (0.697)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.26 (  0.26)
Overall Timing[ 31/  1]	epoch_time 0.0435 (0.0456)	validation_time 0.0004 (0.0006)	train_time 0.0430 (0.0448)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5011000105440616, 0.49900001287460327)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.93it/s] 15%|#5        | 4/26 [00:00<00:01, 19.47it/s] 27%|##6       | 7/26 [00:00<00:00, 22.72it/s] 38%|###8      | 10/26 [00:00<00:00, 25.19it/s] 50%|#####     | 13/26 [00:00<00:00, 26.11it/s] 62%|######1   | 16/26 [00:00<00:00, 27.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.68it/s] 88%|########8 | 23/26 [00:00<00:00, 28.67it/s]100%|##########| 26/26 [00:01<00:00, 24.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 200
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 200
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 200
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 200
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 200
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 200
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 200
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 200
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 200
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 200
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 200
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 200
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 200
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 200
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 200
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 200
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 200
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 200
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 200
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 200
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 200
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 200
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 200
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 200
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 200
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 200
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
final projection at end of training
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.17 (  1.17)	train_acc   0.57 (  0.50)	train_minacc   0.42 (  0.50)	train_majacc   0.59 (  0.50)	train_corr   0.00 (  0.00)	l1 6.3985 (6.4020)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.54it/s] 23%|##3       | 6/26 [00:00<00:01, 18.95it/s]                                               23%|##3       | 6/26 [00:00<00:01, 18.95it/s] 42%|####2     | 11/26 [00:00<00:00, 27.80it/s] 62%|######1   | 16/26 [00:00<00:00, 34.29it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.29it/s] 81%|########  | 21/26 [00:00<00:00, 36.36it/s]100%|##########| 26/26 [00:00<00:00, 29.27it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.42 (  0.42)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.30 (  0.30)
Test: [  10/  26]	Loss 0.689 (0.691)	test_acc   0.52 (  0.51)	test_minacc   0.55 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.689 (0.691)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.35 (  0.34)
Test: [  20/  26]	Loss 0.696 (0.691)	test_acc   0.46 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.46 (  0.50)	Loss_d 0.696 (0.691)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.46 (  0.50)	test_corr_d   0.35 (  0.35)
Test: [  26/  26]	Loss 0.685 (0.691)	test_acc   0.56 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.59 (  0.50)	Loss_d 0.685 (0.691)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.59 (  0.50)	test_corr_d   0.38 (  0.35)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.71it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.697 (0.697)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.697 (0.697)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.26 (  0.26)
Overall Timing[ 32/  1]	epoch_time 0.0433 (0.0455)	validation_time 0.0003 (0.0006)	train_time 0.0429 (0.0448)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5024000071883201, 0.49800002574920654)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.18it/s]  8%|7         | 2/26 [00:00<00:03,  7.86it/s] 19%|#9        | 5/26 [00:00<00:01, 16.40it/s] 31%|###       | 8/26 [00:00<00:00, 21.04it/s] 42%|####2     | 11/26 [00:00<00:00, 23.70it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.67it/s] 65%|######5   | 17/26 [00:00<00:00, 26.82it/s] 81%|########  | 21/26 [00:00<00:00, 28.10it/s] 92%|#########2| 24/26 [00:01<00:00, 28.57it/s]100%|##########| 26/26 [00:01<00:00, 22.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 200
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 200
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 200
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 200
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 200
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 200
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 200
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 200
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 200
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 200
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 200
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 200
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 200
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 200
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 200
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 200
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 200
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 200
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 200
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 200
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 200
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 200
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 200
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 200
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 200
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 200
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
final projection at end of training
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.16 (  1.16)	train_acc   0.57 (  0.50)	train_minacc   0.42 (  0.49)	train_majacc   0.59 (  0.50)	train_corr   0.00 (  0.00)	l1 6.3962 (6.3994)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.11it/s] 23%|##3       | 6/26 [00:00<00:00, 24.04it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.04it/s] 42%|####2     | 11/26 [00:00<00:00, 31.74it/s] 62%|######1   | 16/26 [00:00<00:00, 37.74it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.74it/s] 81%|########  | 21/26 [00:00<00:00, 40.39it/s]100%|##########| 26/26 [00:00<00:00, 43.04it/s]100%|##########| 26/26 [00:00<00:00, 33.50it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.42 (  0.42)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.30 (  0.30)
Test: [  10/  26]	Loss 0.690 (0.691)	test_acc   0.52 (  0.51)	test_minacc   0.55 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.690 (0.691)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.34 (  0.33)
Test: [  20/  26]	Loss 0.696 (0.691)	test_acc   0.46 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.46 (  0.50)	Loss_d 0.696 (0.691)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.46 (  0.50)	test_corr_d   0.34 (  0.34)
Test: [  26/  26]	Loss 0.685 (0.691)	test_acc   0.57 (  0.50)	test_minacc   0.42 (  0.49)	test_majacc   0.59 (  0.51)	Loss_d 0.685 (0.691)	test_acc_d   0.57 (  0.50)	test_minacc_d   0.42 (  0.49)	test_majacc_d   0.59 (  0.51)	test_corr_d   0.37 (  0.34)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.55it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.697 (0.697)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.697 (0.697)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.26 (  0.26)
Overall Timing[ 33/  1]	epoch_time 0.0441 (0.0455)	validation_time 0.0004 (0.0006)	train_time 0.0437 (0.0447)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5043000096082687, 0.49400001764297485)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.74it/s] 19%|#9        | 5/26 [00:00<00:01, 19.60it/s] 31%|###       | 8/26 [00:00<00:00, 23.07it/s] 42%|####2     | 11/26 [00:00<00:00, 25.28it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.54it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.15it/s] 85%|########4 | 22/26 [00:00<00:00, 29.26it/s] 96%|#########6| 25/26 [00:00<00:00, 29.36it/s]100%|##########| 26/26 [00:01<00:00, 25.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 200
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 200
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 200
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 200
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 200
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 200
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 200
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 200
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 200
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 200
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 200
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 200
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 200
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 200
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 200
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 200
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 200
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 200
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 200
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 200
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 200
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 200
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 200
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 200
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 200
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 200
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
final projection at end of training
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.16 (  1.16)	train_acc   0.57 (  0.50)	train_minacc   0.42 (  0.49)	train_majacc   0.59 (  0.50)	train_corr   0.00 (  0.00)	l1 6.3944 (6.3973)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.76it/s] 23%|##3       | 6/26 [00:00<00:00, 22.41it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.41it/s] 42%|####2     | 11/26 [00:00<00:00, 30.46it/s] 62%|######1   | 16/26 [00:00<00:00, 36.53it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.53it/s] 81%|########  | 21/26 [00:00<00:00, 39.70it/s]100%|##########| 26/26 [00:00<00:00, 32.22it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.42 (  0.42)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.29 (  0.29)
Test: [  10/  26]	Loss 0.690 (0.691)	test_acc   0.52 (  0.51)	test_minacc   0.55 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.690 (0.691)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.33 (  0.32)
Test: [  20/  26]	Loss 0.695 (0.691)	test_acc   0.45 (  0.50)	test_minacc   0.41 (  0.49)	test_majacc   0.46 (  0.51)	Loss_d 0.695 (0.691)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.41 (  0.49)	test_majacc_d   0.46 (  0.51)	test_corr_d   0.33 (  0.33)
Test: [  26/  26]	Loss 0.686 (0.691)	test_acc   0.57 (  0.51)	test_minacc   0.42 (  0.49)	test_majacc   0.59 (  0.51)	Loss_d 0.686 (0.691)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.42 (  0.49)	test_majacc_d   0.59 (  0.51)	test_corr_d   0.36 (  0.33)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.27it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.697 (0.697)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.697 (0.697)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.26 (  0.26)
Overall Timing[ 34/  1]	epoch_time 0.0413 (0.0453)	validation_time 0.0003 (0.0006)	train_time 0.0409 (0.0446)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5058000130057335, 0.49000000953674316)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.74it/s] 12%|#1        | 3/26 [00:00<00:02,  9.99it/s] 23%|##3       | 6/26 [00:00<00:01, 16.68it/s] 35%|###4      | 9/26 [00:00<00:00, 20.71it/s] 50%|#####     | 13/26 [00:00<00:00, 24.21it/s] 65%|######5   | 17/26 [00:00<00:00, 26.13it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.05it/s] 88%|########8 | 23/26 [00:00<00:00, 27.73it/s]100%|##########| 26/26 [00:01<00:00, 22.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 200
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 200
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 200
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 200
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 200
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 200
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 200
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 200
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 200
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 200
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 200
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 200
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 200
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 200
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 200
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 200
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 200
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 200
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 200
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 200
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 200
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 200
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 200
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 200
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 200
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 200
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.16 (  1.16)	train_acc   0.58 (  0.50)	train_minacc   0.42 (  0.49)	train_majacc   0.60 (  0.51)	train_corr   0.00 (  0.00)	l1 6.3931 (6.3958)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.33it/s] 27%|##6       | 7/26 [00:00<00:00, 35.29it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.29it/s] 46%|####6     | 12/26 [00:00<00:00, 40.40it/s] 65%|######5   | 17/26 [00:00<00:00, 38.72it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.72it/s] 85%|########4 | 22/26 [00:00<00:00, 41.33it/s]100%|##########| 26/26 [00:00<00:00, 35.64it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.42 (  0.42)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.28 (  0.28)
Test: [  10/  26]	Loss 0.690 (0.691)	test_acc   0.52 (  0.51)	test_minacc   0.55 (  0.50)	test_majacc   0.52 (  0.51)	Loss_d 0.690 (0.691)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.32 (  0.31)
Test: [  20/  26]	Loss 0.695 (0.691)	test_acc   0.45 (  0.51)	test_minacc   0.41 (  0.49)	test_majacc   0.46 (  0.51)	Loss_d 0.695 (0.691)	test_acc_d   0.45 (  0.51)	test_minacc_d   0.41 (  0.49)	test_majacc_d   0.46 (  0.51)	test_corr_d   0.33 (  0.32)
Test: [  26/  26]	Loss 0.686 (0.691)	test_acc   0.58 (  0.51)	test_minacc   0.42 (  0.49)	test_majacc   0.60 (  0.51)	Loss_d 0.686 (0.691)	test_acc_d   0.58 (  0.51)	test_minacc_d   0.42 (  0.49)	test_majacc_d   0.60 (  0.51)	test_corr_d   0.35 (  0.32)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.84it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.53 (  0.53)	Loss_d 0.697 (0.697)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.53 (  0.53)	Loss_d 0.697 (0.697)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.26 (  0.26)
Overall Timing[ 35/  1]	epoch_time 0.0453 (0.0453)	validation_time 0.0006 (0.0006)	train_time 0.0446 (0.0446)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5076000156402588, 0.49000000953674316)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.87it/s] 19%|#9        | 5/26 [00:00<00:00, 21.39it/s] 35%|###4      | 9/26 [00:00<00:00, 27.18it/s] 50%|#####     | 13/26 [00:00<00:00, 29.70it/s] 65%|######5   | 17/26 [00:00<00:00, 29.90it/s] 81%|########  | 21/26 [00:00<00:00, 29.78it/s] 96%|#########6| 25/26 [00:00<00:00, 30.23it/s]100%|##########| 26/26 [00:00<00:00, 26.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 200
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 200
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 200
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 200
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 200
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 200
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 200
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 200
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 200
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 200
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 200
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 200
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 200
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 200
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 200
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 200
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 200
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 200
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 200
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 200
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 200
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 200
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 200
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 200
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 200
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 200
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
final projection at end of training
dim_v 512
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.15 (  1.15)	train_acc   0.58 (  0.51)	train_minacc   0.42 (  0.49)	train_majacc   0.60 (  0.51)	train_corr   0.00 (  0.00)	l1 6.3921 (6.3945)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.69it/s] 12%|#1        | 3/26 [00:00<00:02, 11.49it/s] 31%|###       | 8/26 [00:00<00:00, 25.56it/s]                                               31%|###       | 8/26 [00:00<00:00, 25.56it/s] 50%|#####     | 13/26 [00:00<00:00, 32.74it/s] 69%|######9   | 18/26 [00:00<00:00, 34.92it/s]                                                69%|######9   | 18/26 [00:00<00:00, 34.92it/s] 92%|#########2| 24/26 [00:00<00:00, 40.81it/s]100%|##########| 26/26 [00:00<00:00, 30.99it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.40 (  0.40)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.28 (  0.28)
Test: [  10/  26]	Loss 0.690 (0.691)	test_acc   0.52 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.691)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.30 (  0.30)
Test: [  20/  26]	Loss 0.695 (0.692)	test_acc   0.46 (  0.51)	test_minacc   0.41 (  0.49)	test_majacc   0.47 (  0.51)	Loss_d 0.695 (0.692)	test_acc_d   0.46 (  0.51)	test_minacc_d   0.41 (  0.49)	test_majacc_d   0.47 (  0.51)	test_corr_d   0.32 (  0.31)
Test: [  26/  26]	Loss 0.686 (0.692)	test_acc   0.58 (  0.51)	test_minacc   0.42 (  0.49)	test_majacc   0.60 (  0.51)	Loss_d 0.686 (0.692)	test_acc_d   0.58 (  0.51)	test_minacc_d   0.42 (  0.49)	test_majacc_d   0.60 (  0.51)	test_corr_d   0.34 (  0.31)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.67it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.697 (0.697)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.697 (0.697)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.26 (  0.26)
Overall Timing[ 36/  1]	epoch_time 0.0416 (0.0452)	validation_time 0.0003 (0.0006)	train_time 0.0413 (0.0445)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.509200016707182, 0.48600003123283386)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.67it/s] 15%|#5        | 4/26 [00:00<00:01, 17.06it/s] 27%|##6       | 7/26 [00:00<00:00, 21.45it/s] 42%|####2     | 11/26 [00:00<00:00, 24.86it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.97it/s] 65%|######5   | 17/26 [00:00<00:00, 27.11it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.95it/s] 88%|########8 | 23/26 [00:00<00:00, 28.51it/s]100%|##########| 26/26 [00:01<00:00, 24.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 200
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 200
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 200
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 200
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 200
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 200
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 200
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 200
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 200
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 200
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 200
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 200
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 200
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 200
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 200
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 200
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 200
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 200
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 200
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 200
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 200
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 200
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 200
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 200
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 200
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 200
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
final projection at end of training
dim_v 512
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.15 (  1.15)	train_acc   0.58 (  0.51)	train_minacc   0.42 (  0.49)	train_majacc   0.61 (  0.51)	train_corr   0.00 (  0.00)	l1 6.3913 (6.3936)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.10it/s] 27%|##6       | 7/26 [00:00<00:00, 36.45it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.45it/s] 46%|####6     | 12/26 [00:00<00:00, 39.31it/s] 65%|######5   | 17/26 [00:00<00:00, 39.15it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.15it/s] 85%|########4 | 22/26 [00:00<00:00, 41.91it/s]100%|##########| 26/26 [00:00<00:00, 36.46it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.40 (  0.40)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.27 (  0.27)
Test: [  10/  26]	Loss 0.690 (0.691)	test_acc   0.52 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.691)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.29 (  0.29)
Test: [  20/  26]	Loss 0.695 (0.692)	test_acc   0.46 (  0.51)	test_minacc   0.41 (  0.49)	test_majacc   0.47 (  0.51)	Loss_d 0.695 (0.692)	test_acc_d   0.46 (  0.51)	test_minacc_d   0.41 (  0.49)	test_majacc_d   0.47 (  0.51)	test_corr_d   0.32 (  0.30)
Test: [  26/  26]	Loss 0.686 (0.692)	test_acc   0.58 (  0.51)	test_minacc   0.42 (  0.48)	test_majacc   0.60 (  0.52)	Loss_d 0.686 (0.692)	test_acc_d   0.58 (  0.51)	test_minacc_d   0.42 (  0.48)	test_majacc_d   0.60 (  0.52)	test_corr_d   0.33 (  0.30)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.15it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.54 (  0.54)	Loss_d 0.696 (0.696)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.54 (  0.54)	Loss_d 0.696 (0.696)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.25 (  0.25)
Overall Timing[ 37/  1]	epoch_time 0.0456 (0.0452)	validation_time 0.0004 (0.0006)	train_time 0.0451 (0.0445)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5105000177919865, 0.4870000183582306)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.63it/s] 19%|#9        | 5/26 [00:00<00:00, 23.46it/s] 35%|###4      | 9/26 [00:00<00:00, 27.66it/s] 50%|#####     | 13/26 [00:00<00:00, 30.94it/s] 65%|######5   | 17/26 [00:00<00:00, 33.05it/s] 81%|########  | 21/26 [00:00<00:00, 34.61it/s] 96%|#########6| 25/26 [00:00<00:00, 34.70it/s]100%|##########| 26/26 [00:00<00:00, 29.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 200
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 200
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 200
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 200
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 200
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 200
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 200
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 200
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 200
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 200
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 200
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 200
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 200
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 200
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 200
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 200
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 200
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 200
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 200
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 200
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 200
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 200
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 200
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 200
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 200
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 200
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
final projection at end of training
dim_v 512
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.14 (  1.15)	train_acc   0.58 (  0.51)	train_minacc   0.42 (  0.49)	train_majacc   0.61 (  0.51)	train_corr   0.00 (  0.00)	l1 6.3907 (6.3928)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.16it/s] 27%|##6       | 7/26 [00:00<00:00, 32.02it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.02it/s] 46%|####6     | 12/26 [00:00<00:00, 38.60it/s] 65%|######5   | 17/26 [00:00<00:00, 37.02it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.02it/s] 85%|########4 | 22/26 [00:00<00:00, 40.43it/s]100%|##########| 26/26 [00:00<00:00, 34.87it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.40 (  0.40)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.26 (  0.26)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.53 (  0.52)	test_minacc   0.54 (  0.49)	test_majacc   0.53 (  0.52)	Loss_d 0.690 (0.692)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.28 (  0.28)
Test: [  20/  26]	Loss 0.695 (0.692)	test_acc   0.46 (  0.51)	test_minacc   0.41 (  0.49)	test_majacc   0.47 (  0.51)	Loss_d 0.695 (0.692)	test_acc_d   0.46 (  0.51)	test_minacc_d   0.41 (  0.49)	test_majacc_d   0.47 (  0.51)	test_corr_d   0.31 (  0.29)
Test: [  26/  26]	Loss 0.686 (0.692)	test_acc   0.58 (  0.51)	test_minacc   0.42 (  0.48)	test_majacc   0.60 (  0.52)	Loss_d 0.686 (0.692)	test_acc_d   0.58 (  0.51)	test_minacc_d   0.42 (  0.48)	test_majacc_d   0.60 (  0.52)	test_corr_d   0.31 (  0.28)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.42it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.54 (  0.54)	Loss_d 0.696 (0.696)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.24 (  0.24)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.54 (  0.54)	Loss_d 0.696 (0.696)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.24 (  0.24)
Overall Timing[ 38/  1]	epoch_time 0.0438 (0.0452)	validation_time 0.0003 (0.0006)	train_time 0.0435 (0.0445)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5124000165164471, 0.4830000102519989)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.74it/s] 15%|#5        | 4/26 [00:00<00:01, 19.57it/s] 27%|##6       | 7/26 [00:00<00:00, 23.13it/s] 38%|###8      | 10/26 [00:00<00:00, 25.49it/s] 50%|#####     | 13/26 [00:00<00:00, 26.71it/s] 62%|######1   | 16/26 [00:00<00:00, 27.46it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.92it/s] 88%|########8 | 23/26 [00:00<00:00, 28.32it/s]100%|##########| 26/26 [00:01<00:00, 24.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 200
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 200
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 200
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 200
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 200
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 200
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 200
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 200
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 200
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 200
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 200
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 200
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 200
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 200
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 200
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 200
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 200
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 200
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 200
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 200
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 200
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 200
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 200
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 200
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 200
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 200
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
final projection at end of training
dim_v 512
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.14 (  1.14)	train_acc   0.58 (  0.51)	train_minacc   0.42 (  0.49)	train_majacc   0.61 (  0.52)	train_corr   0.00 (  0.00)	l1 6.3904 (6.3923)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.98it/s] 15%|#5        | 4/26 [00:00<00:01, 16.90it/s] 35%|###4      | 9/26 [00:00<00:00, 29.17it/s]                                               35%|###4      | 9/26 [00:00<00:00, 29.17it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.03it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.72it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 35.72it/s] 92%|#########2| 24/26 [00:00<00:00, 39.10it/s]100%|##########| 26/26 [00:00<00:00, 31.18it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.40 (  0.40)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.26 (  0.26)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.53 (  0.52)	test_minacc   0.52 (  0.49)	test_majacc   0.53 (  0.52)	Loss_d 0.690 (0.692)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.27 (  0.26)
Test: [  20/  26]	Loss 0.695 (0.692)	test_acc   0.46 (  0.51)	test_minacc   0.41 (  0.48)	test_majacc   0.47 (  0.52)	Loss_d 0.695 (0.692)	test_acc_d   0.46 (  0.51)	test_minacc_d   0.41 (  0.48)	test_majacc_d   0.47 (  0.52)	test_corr_d   0.31 (  0.28)
Test: [  26/  26]	Loss 0.687 (0.692)	test_acc   0.58 (  0.51)	test_minacc   0.42 (  0.48)	test_majacc   0.61 (  0.52)	Loss_d 0.687 (0.692)	test_acc_d   0.58 (  0.51)	test_minacc_d   0.42 (  0.48)	test_majacc_d   0.61 (  0.52)	test_corr_d   0.30 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.14it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.54 (  0.54)	Loss_d 0.696 (0.696)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.24 (  0.24)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.54 (  0.54)	Loss_d 0.696 (0.696)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.24 (  0.24)
Overall Timing[ 39/  1]	epoch_time 0.0443 (0.0452)	validation_time 0.0004 (0.0006)	train_time 0.0439 (0.0445)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5141000166237354, 0.48100003600120544)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.50it/s] 15%|#5        | 4/26 [00:00<00:01, 19.10it/s] 27%|##6       | 7/26 [00:00<00:00, 23.30it/s] 42%|####2     | 11/26 [00:00<00:00, 26.38it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.28it/s] 65%|######5   | 17/26 [00:00<00:00, 27.89it/s] 81%|########  | 21/26 [00:00<00:00, 28.55it/s] 92%|#########2| 24/26 [00:00<00:00, 28.89it/s]100%|##########| 26/26 [00:01<00:00, 25.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 200
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 200
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 200
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 200
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 200
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 200
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 200
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 200
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 200
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 200
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 200
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 200
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 200
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 200
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 200
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 200
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 200
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 200
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 200
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 200
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 200
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 200
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 200
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 200
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 200
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 200
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.14 (  1.14)	train_acc   0.58 (  0.51)	train_minacc   0.42 (  0.49)	train_majacc   0.61 (  0.52)	train_corr   0.00 (  0.00)	l1 6.3902 (6.3920)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.47it/s] 23%|##3       | 6/26 [00:00<00:00, 24.21it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.21it/s] 42%|####2     | 11/26 [00:00<00:00, 33.24it/s] 62%|######1   | 16/26 [00:00<00:00, 39.03it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.03it/s] 81%|########  | 21/26 [00:00<00:00, 38.93it/s]100%|##########| 26/26 [00:00<00:00, 41.49it/s]100%|##########| 26/26 [00:00<00:00, 32.62it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.40 (  0.40)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.25 (  0.25)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.53 (  0.52)	test_minacc   0.52 (  0.49)	test_majacc   0.53 (  0.52)	Loss_d 0.690 (0.692)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.26 (  0.25)
Test: [  20/  26]	Loss 0.695 (0.692)	test_acc   0.46 (  0.51)	test_minacc   0.41 (  0.48)	test_majacc   0.47 (  0.52)	Loss_d 0.695 (0.692)	test_acc_d   0.46 (  0.51)	test_minacc_d   0.41 (  0.48)	test_majacc_d   0.47 (  0.52)	test_corr_d   0.30 (  0.26)
Test: [  26/  26]	Loss 0.687 (0.692)	test_acc   0.58 (  0.52)	test_minacc   0.42 (  0.48)	test_majacc   0.61 (  0.52)	Loss_d 0.687 (0.692)	test_acc_d   0.58 (  0.52)	test_minacc_d   0.42 (  0.48)	test_majacc_d   0.61 (  0.52)	test_corr_d   0.28 (  0.26)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.60it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.54 (  0.54)	Loss_d 0.696 (0.696)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.54 (  0.54)	Loss_d 0.696 (0.696)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.23 (  0.23)
Overall Timing[ 40/  1]	epoch_time 0.0466 (0.0452)	validation_time 0.0004 (0.0006)	train_time 0.0462 (0.0445)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5154000118970871, 0.48000001907348633)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.51it/s] 15%|#5        | 4/26 [00:00<00:01, 17.54it/s] 27%|##6       | 7/26 [00:00<00:00, 21.80it/s] 42%|####2     | 11/26 [00:00<00:00, 25.36it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.63it/s] 65%|######5   | 17/26 [00:00<00:00, 27.61it/s] 81%|########  | 21/26 [00:00<00:00, 28.33it/s] 92%|#########2| 24/26 [00:00<00:00, 28.74it/s]100%|##########| 26/26 [00:01<00:00, 24.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 200
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 200
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 200
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 200
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 200
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 200
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 200
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 200
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 200
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 200
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 200
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 200
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 200
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 200
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 200
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 200
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 200
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 200
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 200
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 200
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 200
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 200
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 200
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 200
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 200
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 200
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
final projection at end of training
dim_v 512
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.13 (  1.14)	train_acc   0.58 (  0.51)	train_minacc   0.42 (  0.49)	train_majacc   0.61 (  0.52)	train_corr   0.00 (  0.00)	l1 6.3901 (6.3918)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.57it/s] 27%|##6       | 7/26 [00:00<00:00, 30.17it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.17it/s] 46%|####6     | 12/26 [00:00<00:00, 34.79it/s] 65%|######5   | 17/26 [00:00<00:00, 38.63it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.63it/s] 85%|########4 | 22/26 [00:00<00:00, 41.34it/s]100%|##########| 26/26 [00:00<00:00, 34.52it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.40 (  0.40)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.53 (  0.52)	test_minacc   0.52 (  0.49)	test_majacc   0.53 (  0.52)	Loss_d 0.691 (0.692)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.24 (  0.24)
Test: [  20/  26]	Loss 0.695 (0.692)	test_acc   0.46 (  0.51)	test_minacc   0.41 (  0.48)	test_majacc   0.47 (  0.52)	Loss_d 0.695 (0.692)	test_acc_d   0.46 (  0.51)	test_minacc_d   0.41 (  0.48)	test_majacc_d   0.47 (  0.52)	test_corr_d   0.29 (  0.25)
Test: [  26/  26]	Loss 0.687 (0.692)	test_acc   0.58 (  0.52)	test_minacc   0.42 (  0.48)	test_majacc   0.61 (  0.52)	Loss_d 0.687 (0.692)	test_acc_d   0.58 (  0.52)	test_minacc_d   0.42 (  0.48)	test_majacc_d   0.61 (  0.52)	test_corr_d   0.26 (  0.25)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 54.33it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.55 (  0.55)	Loss_d 0.696 (0.696)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.22 (  0.22)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.55 (  0.55)	Loss_d 0.696 (0.696)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.22 (  0.22)
Overall Timing[ 41/  1]	epoch_time 0.0436 (0.0452)	validation_time 0.0007 (0.0006)	train_time 0.0429 (0.0445)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5164000188112259, 0.4780000150203705)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.32it/s] 15%|#5        | 4/26 [00:00<00:01, 13.98it/s] 27%|##6       | 7/26 [00:00<00:00, 19.32it/s] 42%|####2     | 11/26 [00:00<00:00, 23.70it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.22it/s] 69%|######9   | 18/26 [00:00<00:00, 26.95it/s] 81%|########  | 21/26 [00:00<00:00, 27.50it/s] 92%|#########2| 24/26 [00:01<00:00, 27.92it/s]100%|##########| 26/26 [00:01<00:00, 22.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 200
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 200
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 200
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 200
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 200
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 200
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 200
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 200
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 200
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 200
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 200
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 200
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 200
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 200
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 200
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 200
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 200
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 200
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 200
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 200
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 200
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 200
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 200
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 200
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 200
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 200
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
final projection at end of training
dim_v 512
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.13 (  1.13)	train_acc   0.58 (  0.52)	train_minacc   0.42 (  0.48)	train_majacc   0.61 (  0.52)	train_corr   0.00 (  0.00)	l1 6.3902 (6.3917)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.55it/s] 19%|#9        | 5/26 [00:00<00:00, 25.27it/s] 38%|###8      | 10/26 [00:00<00:00, 34.38it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.38it/s] 62%|######1   | 16/26 [00:00<00:00, 36.64it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.64it/s] 81%|########  | 21/26 [00:00<00:00, 39.43it/s]100%|##########| 26/26 [00:00<00:00, 42.27it/s]100%|##########| 26/26 [00:00<00:00, 34.04it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.40 (  0.40)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.53 (  0.52)	test_minacc   0.52 (  0.49)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.692)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.22 (  0.22)
Test: [  20/  26]	Loss 0.695 (0.692)	test_acc   0.47 (  0.52)	test_minacc   0.41 (  0.48)	test_majacc   0.48 (  0.52)	Loss_d 0.695 (0.692)	test_acc_d   0.47 (  0.52)	test_minacc_d   0.41 (  0.48)	test_majacc_d   0.48 (  0.52)	test_corr_d   0.28 (  0.23)
Test: [  26/  26]	Loss 0.687 (0.692)	test_acc   0.58 (  0.52)	test_minacc   0.42 (  0.48)	test_majacc   0.61 (  0.52)	Loss_d 0.687 (0.692)	test_acc_d   0.58 (  0.52)	test_minacc_d   0.42 (  0.48)	test_majacc_d   0.61 (  0.52)	test_corr_d   0.24 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 54.05it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.55 (  0.55)	Loss_d 0.696 (0.696)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.55 (  0.55)	Loss_d 0.696 (0.696)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.21 (  0.21)
Overall Timing[ 42/  1]	epoch_time 0.0465 (0.0452)	validation_time 0.0005 (0.0006)	train_time 0.0460 (0.0445)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5179000177681446, 0.4780000150203705)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.06it/s] 15%|#5        | 4/26 [00:00<00:01, 13.87it/s] 27%|##6       | 7/26 [00:00<00:00, 19.34it/s] 42%|####2     | 11/26 [00:00<00:00, 23.62it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.94it/s] 69%|######9   | 18/26 [00:00<00:00, 26.49it/s] 81%|########  | 21/26 [00:00<00:00, 26.95it/s] 92%|#########2| 24/26 [00:01<00:00, 27.71it/s]100%|##########| 26/26 [00:01<00:00, 22.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 200
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 200
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 200
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 200
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 200
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 200
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 200
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 200
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 200
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 200
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 200
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 200
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 200
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 200
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 200
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 200
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 200
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 200
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 200
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 200
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 200
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 200
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 200
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 200
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 200
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 200
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
final projection at end of training
dim_v 512
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.13 (  1.13)	train_acc   0.58 (  0.52)	train_minacc   0.42 (  0.48)	train_majacc   0.61 (  0.52)	train_corr   0.00 (  0.00)	l1 6.3903 (6.3917)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.62it/s] 15%|#5        | 4/26 [00:00<00:01, 16.79it/s] 38%|###8      | 10/26 [00:00<00:00, 32.77it/s]                                                38%|###8      | 10/26 [00:00<00:00, 32.77it/s] 62%|######1   | 16/26 [00:00<00:00, 38.89it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.89it/s] 85%|########4 | 22/26 [00:00<00:00, 43.65it/s]100%|##########| 26/26 [00:00<00:00, 34.44it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.40 (  0.40)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.53 (  0.52)	test_minacc   0.52 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.692)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.52 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.21 (  0.21)
Test: [  20/  26]	Loss 0.695 (0.692)	test_acc   0.48 (  0.52)	test_minacc   0.41 (  0.48)	test_majacc   0.49 (  0.52)	Loss_d 0.695 (0.692)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.41 (  0.48)	test_majacc_d   0.49 (  0.52)	test_corr_d   0.27 (  0.22)
Test: [  26/  26]	Loss 0.688 (0.692)	test_acc   0.58 (  0.52)	test_minacc   0.42 (  0.48)	test_majacc   0.61 (  0.53)	Loss_d 0.688 (0.692)	test_acc_d   0.58 (  0.52)	test_minacc_d   0.42 (  0.48)	test_majacc_d   0.61 (  0.53)	test_corr_d   0.22 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.63it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.55 (  0.55)	Loss_d 0.696 (0.696)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.55 (  0.55)	Loss_d 0.696 (0.696)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.20 (  0.20)
Overall Timing[ 43/  1]	epoch_time 0.0459 (0.0452)	validation_time 0.0005 (0.0006)	train_time 0.0454 (0.0446)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5191000165343285, 0.4750000238418579)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.53it/s] 15%|#5        | 4/26 [00:00<00:01, 19.63it/s] 27%|##6       | 7/26 [00:00<00:00, 23.27it/s] 38%|###8      | 10/26 [00:00<00:00, 25.41it/s] 50%|#####     | 13/26 [00:00<00:00, 26.77it/s] 62%|######1   | 16/26 [00:00<00:00, 27.30it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.91it/s] 85%|########4 | 22/26 [00:00<00:00, 27.61it/s] 96%|#########6| 25/26 [00:00<00:00, 28.08it/s]100%|##########| 26/26 [00:01<00:00, 24.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 200
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 200
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 200
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 200
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 200
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 200
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 200
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 200
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 200
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 200
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 200
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 200
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 200
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 200
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 200
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 200
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 200
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 200
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 200
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 200
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 200
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 200
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 200
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 200
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 200
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 200
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
final projection at end of training
dim_v 512
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.12 (  1.12)	train_acc   0.58 (  0.52)	train_minacc   0.42 (  0.48)	train_majacc   0.61 (  0.53)	train_corr   0.00 (  0.00)	l1 6.3907 (6.3919)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.14it/s] 23%|##3       | 6/26 [00:00<00:00, 31.46it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.46it/s] 42%|####2     | 11/26 [00:00<00:00, 38.07it/s] 62%|######1   | 16/26 [00:00<00:00, 41.06it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.06it/s] 81%|########  | 21/26 [00:00<00:00, 42.75it/s]100%|##########| 26/26 [00:00<00:00, 43.30it/s]100%|##########| 26/26 [00:00<00:00, 35.71it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.40 (  0.40)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.53 (  0.52)	test_minacc   0.52 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.692)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.52 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.20 (  0.20)
Test: [  20/  26]	Loss 0.695 (0.692)	test_acc   0.48 (  0.52)	test_minacc   0.41 (  0.48)	test_majacc   0.49 (  0.53)	Loss_d 0.695 (0.692)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.41 (  0.48)	test_majacc_d   0.49 (  0.53)	test_corr_d   0.26 (  0.21)
Test: [  26/  26]	Loss 0.688 (0.692)	test_acc   0.58 (  0.52)	test_minacc   0.42 (  0.47)	test_majacc   0.61 (  0.53)	Loss_d 0.688 (0.692)	test_acc_d   0.58 (  0.52)	test_minacc_d   0.42 (  0.47)	test_majacc_d   0.61 (  0.53)	test_corr_d   0.20 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.72it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.19 (  0.19)
Overall Timing[ 44/  1]	epoch_time 0.0444 (0.0452)	validation_time 0.0004 (0.0006)	train_time 0.0440 (0.0445)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5201000164747238, 0.47300001978874207)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.07it/s] 19%|#9        | 5/26 [00:00<00:01, 18.66it/s] 31%|###       | 8/26 [00:00<00:00, 22.09it/s] 42%|####2     | 11/26 [00:00<00:00, 23.18it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.20it/s] 65%|######5   | 17/26 [00:00<00:00, 25.47it/s] 77%|#######6  | 20/26 [00:00<00:00, 26.72it/s] 88%|########8 | 23/26 [00:00<00:00, 27.50it/s]100%|##########| 26/26 [00:01<00:00, 23.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 200
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 200
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 200
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 200
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 200
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 200
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 200
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 200
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 200
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 200
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 200
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 200
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 200
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 200
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 200
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 200
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 200
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 200
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 200
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 200
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 200
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 200
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 200
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 200
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 200
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 200
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.12 (  1.12)	train_acc   0.58 (  0.52)	train_minacc   0.42 (  0.48)	train_majacc   0.61 (  0.53)	train_corr   0.00 (  0.00)	l1 6.3912 (6.3922)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.38it/s] 23%|##3       | 6/26 [00:00<00:00, 29.17it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.17it/s] 42%|####2     | 11/26 [00:00<00:00, 36.68it/s] 62%|######1   | 16/26 [00:00<00:00, 36.57it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.57it/s] 81%|########  | 21/26 [00:00<00:00, 39.01it/s]100%|##########| 26/26 [00:00<00:00, 42.18it/s]100%|##########| 26/26 [00:00<00:00, 34.64it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.40 (  0.40)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.53 (  0.52)	test_minacc   0.52 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.692)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.52 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.19 (  0.18)
Test: [  20/  26]	Loss 0.695 (0.692)	test_acc   0.48 (  0.52)	test_minacc   0.41 (  0.48)	test_majacc   0.49 (  0.53)	Loss_d 0.695 (0.692)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.41 (  0.48)	test_majacc_d   0.49 (  0.53)	test_corr_d   0.25 (  0.20)
Test: [  26/  26]	Loss 0.688 (0.692)	test_acc   0.58 (  0.52)	test_minacc   0.42 (  0.47)	test_majacc   0.61 (  0.53)	Loss_d 0.688 (0.692)	test_acc_d   0.58 (  0.52)	test_minacc_d   0.42 (  0.47)	test_majacc_d   0.61 (  0.53)	test_corr_d   0.18 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.03it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.18 (  0.18)
Overall Timing[ 45/  1]	epoch_time 0.0458 (0.0452)	validation_time 0.0003 (0.0006)	train_time 0.0454 (0.0446)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5222000151872634, 0.4710000157356262)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.56it/s] 12%|#1        | 3/26 [00:00<00:01, 12.67it/s] 23%|##3       | 6/26 [00:00<00:01, 19.31it/s] 35%|###4      | 9/26 [00:00<00:00, 22.79it/s] 46%|####6     | 12/26 [00:00<00:00, 24.23it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.83it/s] 69%|######9   | 18/26 [00:00<00:00, 26.32it/s] 81%|########  | 21/26 [00:00<00:00, 26.65it/s] 92%|#########2| 24/26 [00:00<00:00, 27.43it/s]100%|##########| 26/26 [00:01<00:00, 23.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 200
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 200
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 200
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 200
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 200
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 200
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 200
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 200
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 200
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 200
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 200
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 200
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 200
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 200
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 200
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 200
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 200
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 200
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 200
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 200
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 200
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 200
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 200
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 200
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 200
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 200
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
final projection at end of training
dim_v 512
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.11 (  1.12)	train_acc   0.58 (  0.52)	train_minacc   0.42 (  0.48)	train_majacc   0.61 (  0.53)	train_corr   0.00 (  0.00)	l1 6.3917 (6.3926)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.50it/s] 23%|##3       | 6/26 [00:00<00:00, 24.06it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.06it/s] 42%|####2     | 11/26 [00:00<00:00, 32.86it/s] 62%|######1   | 16/26 [00:00<00:00, 35.99it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.99it/s] 81%|########  | 21/26 [00:00<00:00, 39.72it/s]100%|##########| 26/26 [00:00<00:00, 41.69it/s]100%|##########| 26/26 [00:00<00:00, 32.60it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.40 (  0.40)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.54 (  0.53)	test_minacc   0.52 (  0.48)	test_majacc   0.54 (  0.53)	Loss_d 0.691 (0.692)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.52 (  0.48)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.18 (  0.17)
Test: [  20/  26]	Loss 0.695 (0.692)	test_acc   0.48 (  0.52)	test_minacc   0.41 (  0.48)	test_majacc   0.49 (  0.53)	Loss_d 0.695 (0.692)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.41 (  0.48)	test_majacc_d   0.49 (  0.53)	test_corr_d   0.24 (  0.19)
Test: [  26/  26]	Loss 0.688 (0.692)	test_acc   0.58 (  0.52)	test_minacc   0.42 (  0.47)	test_majacc   0.61 (  0.53)	Loss_d 0.688 (0.692)	test_acc_d   0.58 (  0.52)	test_minacc_d   0.42 (  0.47)	test_majacc_d   0.61 (  0.53)	test_corr_d   0.17 (  0.18)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.32it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.17 (  0.17)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.17 (  0.17)
Overall Timing[ 46/  1]	epoch_time 0.0494 (0.0453)	validation_time 0.0006 (0.0006)	train_time 0.0487 (0.0446)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5241000162363052, 0.46800002455711365)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.36it/s] 15%|#5        | 4/26 [00:00<00:01, 16.81it/s] 27%|##6       | 7/26 [00:00<00:00, 21.03it/s] 38%|###8      | 10/26 [00:00<00:00, 23.75it/s] 50%|#####     | 13/26 [00:00<00:00, 25.08it/s] 62%|######1   | 16/26 [00:00<00:00, 26.45it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.17it/s] 88%|########8 | 23/26 [00:00<00:00, 28.56it/s]100%|##########| 26/26 [00:01<00:00, 23.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 200
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 200
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 200
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 200
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 200
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 200
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 200
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 200
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 200
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 200
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 200
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 200
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 200
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 200
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 200
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 200
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 200
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 200
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 200
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 200
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 200
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 200
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 200
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 200
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 200
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 200
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
final projection at end of training
dim_v 512
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.11 (  1.11)	train_acc   0.58 (  0.52)	train_minacc   0.42 (  0.48)	train_majacc   0.61 (  0.53)	train_corr   0.00 (  0.00)	l1 6.3924 (6.3932)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.53it/s] 31%|###       | 8/26 [00:00<00:00, 37.12it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.12it/s] 50%|#####     | 13/26 [00:00<00:00, 41.23it/s] 69%|######9   | 18/26 [00:00<00:00, 43.64it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.64it/s] 88%|########8 | 23/26 [00:00<00:00, 43.84it/s]100%|##########| 26/26 [00:00<00:00, 37.74it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.40 (  0.40)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.54 (  0.53)	test_minacc   0.52 (  0.48)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.692)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.52 (  0.48)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.17 (  0.16)
Test: [  20/  26]	Loss 0.695 (0.692)	test_acc   0.48 (  0.52)	test_minacc   0.41 (  0.47)	test_majacc   0.49 (  0.53)	Loss_d 0.695 (0.692)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.41 (  0.47)	test_majacc_d   0.49 (  0.53)	test_corr_d   0.23 (  0.17)
Test: [  26/  26]	Loss 0.688 (0.692)	test_acc   0.58 (  0.52)	test_minacc   0.42 (  0.47)	test_majacc   0.61 (  0.53)	Loss_d 0.688 (0.692)	test_acc_d   0.58 (  0.52)	test_minacc_d   0.42 (  0.47)	test_majacc_d   0.61 (  0.53)	test_corr_d   0.15 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.38it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.16 (  0.16)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.16 (  0.16)
Overall Timing[ 47/  1]	epoch_time 0.0410 (0.0452)	validation_time 0.0004 (0.0006)	train_time 0.0406 (0.0446)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5249000103771686, 0.4650000333786011)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.29it/s] 12%|#1        | 3/26 [00:00<00:02,  9.30it/s] 23%|##3       | 6/26 [00:00<00:01, 16.01it/s] 35%|###4      | 9/26 [00:00<00:00, 20.30it/s] 46%|####6     | 12/26 [00:00<00:00, 22.33it/s] 58%|#####7    | 15/26 [00:00<00:00, 24.11it/s] 69%|######9   | 18/26 [00:00<00:00, 24.93it/s] 85%|########4 | 22/26 [00:00<00:00, 26.96it/s] 96%|#########6| 25/26 [00:01<00:00, 27.56it/s]100%|##########| 26/26 [00:01<00:00, 21.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 200
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 200
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 200
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 200
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 200
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 200
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 200
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 200
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 200
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 200
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 200
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 200
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 200
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 200
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 200
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 200
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 200
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 200
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 200
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 200
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 200
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 200
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 200
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 200
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 200
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 200
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
final projection at end of training
dim_v 512
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.11 (  1.11)	train_acc   0.58 (  0.52)	train_minacc   0.42 (  0.47)	train_majacc   0.61 (  0.53)	train_corr   0.00 (  0.00)	l1 6.3931 (6.3938)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.22it/s] 19%|#9        | 5/26 [00:00<00:00, 22.59it/s] 38%|###8      | 10/26 [00:00<00:00, 32.46it/s]                                                38%|###8      | 10/26 [00:00<00:00, 32.46it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.24it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.10it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 38.10it/s] 96%|#########6| 25/26 [00:00<00:00, 40.64it/s]100%|##########| 26/26 [00:00<00:00, 32.86it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.40 (  0.40)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.15 (  0.15)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.54 (  0.53)	test_minacc   0.50 (  0.47)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.692)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.50 (  0.47)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.16 (  0.15)
Test: [  20/  26]	Loss 0.695 (0.692)	test_acc   0.48 (  0.52)	test_minacc   0.41 (  0.47)	test_majacc   0.49 (  0.53)	Loss_d 0.695 (0.692)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.41 (  0.47)	test_majacc_d   0.49 (  0.53)	test_corr_d   0.22 (  0.16)
Test: [  26/  26]	Loss 0.689 (0.692)	test_acc   0.58 (  0.53)	test_minacc   0.42 (  0.47)	test_majacc   0.61 (  0.54)	Loss_d 0.689 (0.692)	test_acc_d   0.58 (  0.53)	test_minacc_d   0.42 (  0.47)	test_majacc_d   0.61 (  0.54)	test_corr_d   0.13 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.07it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.15 (  0.15)
Overall Timing[ 48/  1]	epoch_time 0.0449 (0.0452)	validation_time 0.0004 (0.0006)	train_time 0.0445 (0.0446)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5257000126540661, 0.4620000123977661)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.28it/s] 15%|#5        | 4/26 [00:00<00:01, 17.39it/s] 27%|##6       | 7/26 [00:00<00:00, 22.17it/s] 38%|###8      | 10/26 [00:00<00:00, 24.93it/s] 50%|#####     | 13/26 [00:00<00:00, 25.18it/s] 62%|######1   | 16/26 [00:00<00:00, 26.25it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.13it/s] 85%|########4 | 22/26 [00:00<00:00, 26.85it/s]100%|##########| 26/26 [00:01<00:00, 28.47it/s]100%|##########| 26/26 [00:01<00:00, 23.57it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 200
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 200
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 200
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 200
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 200
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 200
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 200
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 200
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 200
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 200
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 200
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 200
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 200
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 200
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 200
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 200
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 200
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 200
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 200
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 200
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 200
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 200
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 200
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 200
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 200
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 200
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
final projection at end of training
dim_v 512
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.10 (  1.10)	train_acc   0.58 (  0.53)	train_minacc   0.42 (  0.47)	train_majacc   0.61 (  0.53)	train_corr   0.00 (  0.00)	l1 6.3939 (6.3945)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.47it/s] 27%|##6       | 7/26 [00:00<00:00, 28.26it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.26it/s] 50%|#####     | 13/26 [00:00<00:00, 35.82it/s] 69%|######9   | 18/26 [00:00<00:00, 36.95it/s]                                                69%|######9   | 18/26 [00:00<00:00, 36.95it/s] 88%|########8 | 23/26 [00:00<00:00, 39.88it/s]100%|##########| 26/26 [00:00<00:00, 33.95it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.40 (  0.40)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.54 (  0.53)	test_minacc   0.50 (  0.47)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.692)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.50 (  0.47)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.15 (  0.14)
Test: [  20/  26]	Loss 0.695 (0.692)	test_acc   0.48 (  0.53)	test_minacc   0.41 (  0.47)	test_majacc   0.49 (  0.54)	Loss_d 0.695 (0.692)	test_acc_d   0.48 (  0.53)	test_minacc_d   0.41 (  0.47)	test_majacc_d   0.49 (  0.54)	test_corr_d   0.21 (  0.15)
Test: [  26/  26]	Loss 0.689 (0.692)	test_acc   0.58 (  0.53)	test_minacc   0.42 (  0.46)	test_majacc   0.61 (  0.54)	Loss_d 0.689 (0.692)	test_acc_d   0.58 (  0.53)	test_minacc_d   0.42 (  0.46)	test_majacc_d   0.61 (  0.54)	test_corr_d   0.12 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.77it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.14 (  0.14)
Overall Timing[ 49/  1]	epoch_time 0.0444 (0.0452)	validation_time 0.0004 (0.0006)	train_time 0.0440 (0.0445)
record: (train_acc, test_acc) (0.844500026524067, 0.2900000214576721)
last accs (train_acc, test_acc) (0.5267000125944614, 0.4610000252723694)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.157 MB of 0.157 MB uploadedwandb: \ 0.157 MB of 0.157 MB uploadedwandb: | 0.157 MB of 0.157 MB uploadedwandb: / 0.157 MB of 0.157 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmpivgerc5j'
wandb: ERROR Internal wandb error: file data was not synced
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_215432-sseqgice
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/sseqgice
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=200, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=5, fraction_z=0.99)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1207
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5983, 3, 32, 32) (6017, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:46,  1.84s/it] 19%|#9        | 5/26 [00:01<00:06,  3.30it/s] 35%|###4      | 9/26 [00:02<00:02,  6.50it/s] 50%|#####     | 13/26 [00:02<00:01,  9.97it/s] 65%|######5   | 17/26 [00:02<00:00, 13.55it/s] 81%|########  | 21/26 [00:02<00:00, 17.05it/s] 96%|#########6| 25/26 [00:02<00:00, 20.18it/s]100%|##########| 26/26 [00:02<00:00,  8.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [0][  26/  26]	Loss 9.425 (12.207)	train_nll   0.39 (  0.51)	train_penalty   0.08 (  0.19)	weight_norm   9.03 ( 11.70)	train_acc   0.85 (  0.81)	train_minacc   0.00 (  0.07)	train_majacc   0.99 (  0.94)	train_corr   0.00 (  0.00)	l1 6.6737 (7.6812)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.29it/s] 12%|#1        | 3/26 [00:00<00:01, 12.86it/s] 31%|###       | 8/26 [00:00<00:00, 27.18it/s]                                               31%|###       | 8/26 [00:00<00:00, 27.18it/s] 50%|#####     | 13/26 [00:00<00:00, 34.15it/s] 69%|######9   | 18/26 [00:00<00:00, 38.46it/s]                                                69%|######9   | 18/26 [00:00<00:00, 38.46it/s] 88%|########8 | 23/26 [00:00<00:00, 37.60it/s]100%|##########| 26/26 [00:00<00:00, 31.86it/s]
Test: [   0/  26]	Loss 0.461 (0.461)	test_acc   0.82 (  0.82)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.461 (0.461)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.382 (0.417)	test_acc   0.85 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.382 (0.417)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.97)
Test: [  20/  26]	Loss 0.359 (0.412)	test_acc   0.87 (  0.84)	test_minacc   0.02 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.359 (0.412)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.02 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.97)
Test: [  26/  26]	Loss 0.384 (0.411)	test_acc   0.85 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.384 (0.411)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.56it/s]100%|##########| 1/1 [00:00<00:00,  2.56it/s]
Test: [  0/  1]	Loss 1.821 (1.821)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.821 (1.821)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.821 (1.821)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.821 (1.821)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/194/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0810 (0.0810)	validation_time 0.0067 (0.0067)	train_time 0.0726 (0.0726)
record: (train_acc, test_acc) (0.8448000232577324, 0.11500000208616257)
last accs (train_acc, test_acc) (0.8448000232577324, 0.11500000208616257)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.21it/s] 15%|#5        | 4/26 [00:00<00:01, 19.26it/s] 31%|###       | 8/26 [00:00<00:00, 25.27it/s] 46%|####6     | 12/26 [00:00<00:00, 28.99it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.54it/s] 88%|########8 | 23/26 [00:00<00:00, 29.79it/s]100%|##########| 26/26 [00:00<00:00, 26.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [1][  26/  26]	Loss 4.731 (6.694)	train_nll   0.40 (  0.41)	train_penalty   0.04 (  0.05)	weight_norm   4.34 (  6.29)	train_acc   0.85 (  0.85)	train_minacc   0.00 (  0.03)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 6.0060 (6.3518)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.67it/s] 23%|##3       | 6/26 [00:00<00:00, 26.59it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.59it/s] 42%|####2     | 11/26 [00:00<00:00, 34.98it/s] 62%|######1   | 16/26 [00:00<00:00, 38.45it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.45it/s] 81%|########  | 21/26 [00:00<00:00, 37.54it/s]100%|##########| 26/26 [00:00<00:00, 40.21it/s]100%|##########| 26/26 [00:00<00:00, 33.09it/s]
Test: [   0/  26]	Loss 0.447 (0.447)	test_acc   0.82 (  0.82)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.447 (0.447)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.360 (0.396)	test_acc   0.85 (  0.84)	test_minacc   0.00 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.360 (0.396)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.00 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.95)
Test: [  20/  26]	Loss 0.343 (0.391)	test_acc   0.88 (  0.85)	test_minacc   0.06 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.343 (0.391)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.06 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  26/  26]	Loss 0.365 (0.390)	test_acc   0.86 (  0.85)	test_minacc   0.06 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.365 (0.390)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.06 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.85it/s]
Test: [  0/  1]	Loss 1.697 (1.697)	test_acc   0.12 (  0.12)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 1.697 (1.697)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  1/  1]	Loss 1.697 (1.697)	test_acc   0.12 (  0.12)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 1.697 (1.697)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/194/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0420 (0.0615)	validation_time 0.0004 (0.0035)	train_time 0.0415 (0.0571)
record: (train_acc, test_acc) (0.8473000222444534, 0.12200000882148743)
last accs (train_acc, test_acc) (0.8473000222444534, 0.12200000882148743)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.26it/s] 19%|#9        | 5/26 [00:00<00:01, 19.35it/s] 35%|###4      | 9/26 [00:00<00:00, 24.40it/s] 50%|#####     | 13/26 [00:00<00:00, 26.72it/s] 65%|######5   | 17/26 [00:00<00:00, 28.37it/s] 81%|########  | 21/26 [00:00<00:00, 29.32it/s] 92%|#########2| 24/26 [00:00<00:00, 29.45it/s]100%|##########| 26/26 [00:01<00:00, 25.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [2][  26/  26]	Loss 2.812 (3.631)	train_nll   0.36 (  0.39)	train_penalty   0.04 (  0.05)	weight_norm   2.45 (  3.24)	train_acc   0.86 (  0.85)	train_minacc   0.06 (  0.07)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 5.2150 (5.5607)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.52it/s] 19%|#9        | 5/26 [00:00<00:00, 24.73it/s] 38%|###8      | 10/26 [00:00<00:00, 33.95it/s]                                                38%|###8      | 10/26 [00:00<00:00, 33.95it/s] 58%|#####7    | 15/26 [00:00<00:00, 39.79it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.97it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.97it/s] 96%|#########6| 25/26 [00:00<00:00, 41.05it/s]100%|##########| 26/26 [00:00<00:00, 34.56it/s]
Test: [   0/  26]	Loss 0.452 (0.452)	test_acc   0.82 (  0.82)	test_minacc   0.03 (  0.03)	test_majacc   0.98 (  0.98)	Loss_d 0.452 (0.452)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.361 (0.377)	test_acc   0.85 (  0.84)	test_minacc   0.05 (  0.06)	test_majacc   0.98 (  0.98)	Loss_d 0.361 (0.377)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.05 (  0.06)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.95 (  0.95)
Test: [  20/  26]	Loss 0.328 (0.370)	test_acc   0.87 (  0.85)	test_minacc   0.08 (  0.07)	test_majacc   0.98 (  0.99)	Loss_d 0.328 (0.370)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.08 (  0.07)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.94 (  0.95)
Test: [  26/  26]	Loss 0.329 (0.368)	test_acc   0.88 (  0.85)	test_minacc   0.11 (  0.08)	test_majacc   1.00 (  0.99)	Loss_d 0.329 (0.368)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.11 (  0.08)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.52it/s]
Test: [  0/  1]	Loss 1.905 (1.905)	test_acc   0.17 (  0.17)	test_minacc   0.07 (  0.07)	test_majacc   0.98 (  0.98)	Loss_d 1.905 (1.905)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.87 (  0.87)
Test: [  1/  1]	Loss 1.905 (1.905)	test_acc   0.17 (  0.17)	test_minacc   0.07 (  0.07)	test_majacc   0.98 (  0.98)	Loss_d 1.905 (1.905)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.87 (  0.87)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/194/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0444 (0.0558)	validation_time 0.0004 (0.0025)	train_time 0.0440 (0.0527)
record: (train_acc, test_acc) (0.8500000250339508, 0.16500000655651093)
last accs (train_acc, test_acc) (0.8500000250339508, 0.16500000655651093)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.25it/s] 19%|#9        | 5/26 [00:00<00:00, 23.30it/s] 35%|###4      | 9/26 [00:00<00:00, 26.73it/s] 46%|####6     | 12/26 [00:00<00:00, 27.67it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.20it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.05it/s] 88%|########8 | 23/26 [00:00<00:00, 29.78it/s]100%|##########| 26/26 [00:00<00:00, 29.82it/s]100%|##########| 26/26 [00:00<00:00, 26.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [3][  26/  26]	Loss 1.927 (2.321)	train_nll   0.39 (  0.38)	train_penalty   0.03 (  0.04)	weight_norm   1.54 (  1.94)	train_acc   0.86 (  0.84)	train_minacc   0.11 (  0.08)	train_majacc   0.98 (  0.98)	train_corr   0.00 (  0.00)	l1 4.7181 (4.8581)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.07it/s] 31%|###       | 8/26 [00:00<00:00, 37.84it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.84it/s] 50%|#####     | 13/26 [00:00<00:00, 40.80it/s] 69%|######9   | 18/26 [00:00<00:00, 40.35it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.35it/s] 88%|########8 | 23/26 [00:00<00:00, 41.63it/s]100%|##########| 26/26 [00:00<00:00, 38.10it/s]
Test: [   0/  26]	Loss 0.437 (0.437)	test_acc   0.82 (  0.82)	test_minacc   0.03 (  0.03)	test_majacc   0.98 (  0.98)	Loss_d 0.437 (0.437)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.355 (0.381)	test_acc   0.85 (  0.84)	test_minacc   0.02 (  0.07)	test_majacc   0.99 (  0.98)	Loss_d 0.355 (0.381)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.02 (  0.07)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.95 (  0.94)
Test: [  20/  26]	Loss 0.322 (0.374)	test_acc   0.87 (  0.85)	test_minacc   0.10 (  0.07)	test_majacc   0.98 (  0.98)	Loss_d 0.322 (0.374)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.10 (  0.07)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.94)
Test: [  26/  26]	Loss 0.347 (0.371)	test_acc   0.86 (  0.85)	test_minacc   0.09 (  0.08)	test_majacc   0.99 (  0.98)	Loss_d 0.347 (0.371)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.09 (  0.08)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.95 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.98it/s]
Test: [  0/  1]	Loss 1.716 (1.716)	test_acc   0.15 (  0.15)	test_minacc   0.06 (  0.06)	test_majacc   1.00 (  1.00)	Loss_d 1.716 (1.716)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.06 (  0.06)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.90 (  0.90)
Test: [  1/  1]	Loss 1.716 (1.716)	test_acc   0.15 (  0.15)	test_minacc   0.06 (  0.06)	test_majacc   1.00 (  1.00)	Loss_d 1.716 (1.716)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.06 (  0.06)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.90 (  0.90)
Overall Timing[  3/  1]	epoch_time 0.0446 (0.0530)	validation_time 0.0004 (0.0020)	train_time 0.0442 (0.0506)
record: (train_acc, test_acc) (0.8500000250339508, 0.16500000655651093)
last accs (train_acc, test_acc) (0.8475000268816948, 0.15200001001358032)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.66it/s] 12%|#1        | 3/26 [00:00<00:03,  7.35it/s] 27%|##6       | 7/26 [00:00<00:01, 15.02it/s] 38%|###8      | 10/26 [00:00<00:00, 18.56it/s] 50%|#####     | 13/26 [00:00<00:00, 21.56it/s] 65%|######5   | 17/26 [00:00<00:00, 24.35it/s] 81%|########  | 21/26 [00:01<00:00, 26.22it/s] 96%|#########6| 25/26 [00:01<00:00, 27.68it/s]100%|##########| 26/26 [00:01<00:00, 20.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [4][  26/  26]	Loss 1.370 (1.616)	train_nll   0.36 (  0.37)	train_penalty   0.03 (  0.04)	weight_norm   1.01 (  1.25)	train_acc   0.86 (  0.85)	train_minacc   0.17 (  0.12)	train_majacc   0.98 (  0.98)	train_corr   0.00 (  0.00)	l1 5.3309 (4.9643)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.59it/s] 27%|##6       | 7/26 [00:00<00:00, 32.49it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.49it/s] 46%|####6     | 12/26 [00:00<00:00, 38.10it/s] 65%|######5   | 17/26 [00:00<00:00, 39.04it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.04it/s] 85%|########4 | 22/26 [00:00<00:00, 41.38it/s]100%|##########| 26/26 [00:00<00:00, 36.00it/s]
Test: [   0/  26]	Loss 0.420 (0.420)	test_acc   0.83 (  0.83)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.420 (0.420)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.334 (0.360)	test_acc   0.86 (  0.85)	test_minacc   0.09 (  0.12)	test_majacc   0.99 (  0.98)	Loss_d 0.334 (0.360)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.09 (  0.12)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.94 (  0.93)
Test: [  20/  26]	Loss 0.297 (0.352)	test_acc   0.87 (  0.85)	test_minacc   0.19 (  0.12)	test_majacc   0.97 (  0.98)	Loss_d 0.297 (0.352)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.19 (  0.12)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  26/  26]	Loss 0.332 (0.349)	test_acc   0.87 (  0.85)	test_minacc   0.11 (  0.13)	test_majacc   1.00 (  0.98)	Loss_d 0.332 (0.349)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.11 (  0.13)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.94 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.37it/s]
Test: [  0/  1]	Loss 1.875 (1.875)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.97 (  0.97)	Loss_d 1.875 (1.875)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.87 (  0.87)
Test: [  1/  1]	Loss 1.875 (1.875)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.97 (  0.97)	Loss_d 1.875 (1.875)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.87 (  0.87)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/194/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0424 (0.0509)	validation_time 0.0004 (0.0016)	train_time 0.0420 (0.0489)
record: (train_acc, test_acc) (0.8509000247716904, 0.17900000512599945)
last accs (train_acc, test_acc) (0.8509000247716904, 0.17900000512599945)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.26it/s] 19%|#9        | 5/26 [00:00<00:00, 22.49it/s] 35%|###4      | 9/26 [00:00<00:00, 26.45it/s] 46%|####6     | 12/26 [00:00<00:00, 27.59it/s] 62%|######1   | 16/26 [00:00<00:00, 28.79it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.56it/s] 92%|#########2| 24/26 [00:00<00:00, 30.69it/s]100%|##########| 26/26 [00:00<00:00, 26.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [5][  26/  26]	Loss 1.064 (1.187)	train_nll   0.36 (  0.36)	train_penalty   0.03 (  0.03)	weight_norm   0.70 (  0.82)	train_acc   0.87 (  0.85)	train_minacc   0.11 (  0.09)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 6.4569 (5.6640)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.64it/s] 23%|##3       | 6/26 [00:00<00:00, 22.67it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.67it/s] 42%|####2     | 11/26 [00:00<00:00, 31.59it/s] 62%|######1   | 16/26 [00:00<00:00, 36.49it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.49it/s] 81%|########  | 21/26 [00:00<00:00, 36.77it/s]100%|##########| 26/26 [00:00<00:00, 40.41it/s]100%|##########| 26/26 [00:00<00:00, 31.06it/s]
Test: [   0/  26]	Loss 0.438 (0.438)	test_acc   0.81 (  0.81)	test_minacc   0.29 (  0.29)	test_majacc   0.92 (  0.92)	Loss_d 0.438 (0.438)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.357 (0.386)	test_acc   0.85 (  0.83)	test_minacc   0.23 (  0.27)	test_majacc   0.95 (  0.93)	Loss_d 0.357 (0.386)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.23 (  0.27)	test_majacc_d   0.95 (  0.93)	test_corr_d   0.91 (  0.90)
Test: [  20/  26]	Loss 0.324 (0.376)	test_acc   0.86 (  0.83)	test_minacc   0.38 (  0.28)	test_majacc   0.93 (  0.93)	Loss_d 0.324 (0.376)	test_acc_d   0.86 (  0.83)	test_minacc_d   0.38 (  0.28)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.91 (  0.90)
Test: [  26/  26]	Loss 0.337 (0.372)	test_acc   0.89 (  0.83)	test_minacc   0.31 (  0.29)	test_majacc   0.98 (  0.93)	Loss_d 0.337 (0.372)	test_acc_d   0.89 (  0.83)	test_minacc_d   0.31 (  0.29)	test_majacc_d   0.98 (  0.93)	test_corr_d   0.91 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.04it/s]
Test: [  0/  1]	Loss 1.909 (1.909)	test_acc   0.26 (  0.26)	test_minacc   0.18 (  0.18)	test_majacc   0.97 (  0.97)	Loss_d 1.909 (1.909)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.84 (  0.84)
Test: [  1/  1]	Loss 1.909 (1.909)	test_acc   0.26 (  0.26)	test_minacc   0.18 (  0.18)	test_majacc   0.97 (  0.97)	Loss_d 1.909 (1.909)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.84 (  0.84)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/194/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0420 (0.0494)	validation_time 0.0004 (0.0014)	train_time 0.0415 (0.0476)
record: (train_acc, test_acc) (0.833400023162365, 0.2550000250339508)
last accs (train_acc, test_acc) (0.833400023162365, 0.2550000250339508)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.81it/s] 19%|#9        | 5/26 [00:00<00:00, 22.77it/s] 31%|###       | 8/26 [00:00<00:00, 25.76it/s] 42%|####2     | 11/26 [00:00<00:00, 26.83it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.55it/s] 65%|######5   | 17/26 [00:00<00:00, 28.31it/s] 81%|########  | 21/26 [00:00<00:00, 29.10it/s] 96%|#########6| 25/26 [00:00<00:00, 29.14it/s]100%|##########| 26/26 [00:01<00:00, 25.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [6][  26/  26]	Loss 0.807 (0.927)	train_nll   0.35 (  0.36)	train_penalty   0.02 (  0.03)	weight_norm   0.46 (  0.57)	train_acc   0.85 (  0.85)	train_minacc   0.31 (  0.14)	train_majacc   0.93 (  0.97)	train_corr   0.00 (  0.00)	l1 7.9439 (6.9830)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.60it/s] 19%|#9        | 5/26 [00:00<00:00, 24.45it/s] 38%|###8      | 10/26 [00:00<00:00, 34.16it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.16it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.69it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.18it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 38.18it/s] 96%|#########6| 25/26 [00:00<00:00, 40.39it/s]100%|##########| 26/26 [00:00<00:00, 34.08it/s]
Test: [   0/  26]	Loss 0.432 (0.432)	test_acc   0.81 (  0.81)	test_minacc   0.25 (  0.25)	test_majacc   0.93 (  0.93)	Loss_d 0.432 (0.432)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.319 (0.380)	test_acc   0.85 (  0.82)	test_minacc   0.20 (  0.23)	test_majacc   0.96 (  0.93)	Loss_d 0.319 (0.380)	test_acc_d   0.85 (  0.82)	test_minacc_d   0.20 (  0.23)	test_majacc_d   0.96 (  0.93)	test_corr_d   0.89 (  0.87)
Test: [  20/  26]	Loss 0.317 (0.371)	test_acc   0.86 (  0.83)	test_minacc   0.29 (  0.23)	test_majacc   0.94 (  0.93)	Loss_d 0.317 (0.371)	test_acc_d   0.86 (  0.83)	test_minacc_d   0.29 (  0.23)	test_majacc_d   0.94 (  0.93)	test_corr_d   0.88 (  0.88)
Test: [  26/  26]	Loss 0.332 (0.365)	test_acc   0.86 (  0.83)	test_minacc   0.20 (  0.24)	test_majacc   0.96 (  0.93)	Loss_d 0.332 (0.365)	test_acc_d   0.86 (  0.83)	test_minacc_d   0.20 (  0.24)	test_majacc_d   0.96 (  0.93)	test_corr_d   0.88 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.42it/s]
Test: [  0/  1]	Loss 1.735 (1.735)	test_acc   0.26 (  0.26)	test_minacc   0.19 (  0.19)	test_majacc   0.95 (  0.95)	Loss_d 1.735 (1.735)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.71 (  0.71)
Test: [  1/  1]	Loss 1.735 (1.735)	test_acc   0.26 (  0.26)	test_minacc   0.19 (  0.19)	test_majacc   0.95 (  0.95)	Loss_d 1.735 (1.735)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.71 (  0.71)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/194/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0471 (0.0491)	validation_time 0.0005 (0.0013)	train_time 0.0466 (0.0475)
record: (train_acc, test_acc) (0.829900026679039, 0.2630000114440918)
last accs (train_acc, test_acc) (0.829900026679039, 0.2630000114440918)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.15it/s] 15%|#5        | 4/26 [00:00<00:01, 19.57it/s] 27%|##6       | 7/26 [00:00<00:00, 23.58it/s] 38%|###8      | 10/26 [00:00<00:00, 25.75it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.70it/s] 65%|######5   | 17/26 [00:00<00:00, 28.01it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.61it/s] 88%|########8 | 23/26 [00:00<00:00, 28.84it/s]100%|##########| 26/26 [00:01<00:00, 25.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [7][  26/  26]	Loss 0.002 (0.538)	train_nll   0.58 (  0.39)	train_penalty   0.00 (  0.02)	weight_norm   0.39 (  0.39)	train_acc   0.60 (  0.81)	train_minacc   0.74 (  0.24)	train_majacc   0.58 (  0.91)	train_corr   0.00 (  0.00)	l1 8.9227 (8.4941)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.62it/s] 19%|#9        | 5/26 [00:00<00:00, 25.17it/s] 38%|###8      | 10/26 [00:00<00:00, 35.00it/s]                                                38%|###8      | 10/26 [00:00<00:00, 35.00it/s] 58%|#####7    | 15/26 [00:00<00:00, 39.27it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.76it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 38.76it/s] 96%|#########6| 25/26 [00:00<00:00, 41.23it/s]100%|##########| 26/26 [00:00<00:00, 35.10it/s]
Test: [   0/  26]	Loss 0.748 (0.748)	test_acc   0.46 (  0.46)	test_minacc   0.87 (  0.87)	test_majacc   0.37 (  0.37)	Loss_d 0.748 (0.748)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.21 ( -0.21)
Test: [  10/  26]	Loss 0.713 (0.749)	test_acc   0.47 (  0.43)	test_minacc   0.73 (  0.84)	test_majacc   0.43 (  0.35)	Loss_d 0.713 (0.749)	test_acc_d   0.47 (  0.43)	test_minacc_d   0.73 (  0.84)	test_majacc_d   0.43 (  0.35)	test_corr_d  -0.08 ( -0.22)
Test: [  20/  26]	Loss 0.748 (0.747)	test_acc   0.42 (  0.43)	test_minacc   0.83 (  0.83)	test_majacc   0.36 (  0.36)	Loss_d 0.748 (0.747)	test_acc_d   0.42 (  0.43)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.36 (  0.36)	test_corr_d  -0.21 ( -0.21)
Test: [  26/  26]	Loss 0.687 (0.745)	test_acc   0.49 (  0.43)	test_minacc   0.80 (  0.83)	test_majacc   0.44 (  0.36)	Loss_d 0.687 (0.745)	test_acc_d   0.49 (  0.43)	test_minacc_d   0.80 (  0.83)	test_majacc_d   0.44 (  0.36)	test_corr_d  -0.04 ( -0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.90it/s]
Test: [  0/  1]	Loss 0.523 (0.523)	test_acc   0.78 (  0.78)	test_minacc   0.82 (  0.82)	test_majacc   0.39 (  0.39)	Loss_d 0.523 (0.523)	test_acc_d   0.78 (  0.78)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.62 ( -0.62)
Test: [  1/  1]	Loss 0.523 (0.523)	test_acc   0.78 (  0.78)	test_minacc   0.82 (  0.82)	test_majacc   0.39 (  0.39)	Loss_d 0.523 (0.523)	test_acc_d   0.78 (  0.78)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.62 ( -0.62)
Overall Timing[  7/  1]	epoch_time 0.0416 (0.0481)	validation_time 0.0003 (0.0012)	train_time 0.0412 (0.0467)
record: (train_acc, test_acc) (0.829900026679039, 0.2630000114440918)
last accs (train_acc, test_acc) (0.42990000450611116, 0.7800000309944153)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.07it/s] 15%|#5        | 4/26 [00:00<00:01, 18.06it/s] 27%|##6       | 7/26 [00:00<00:00, 22.55it/s] 38%|###8      | 10/26 [00:00<00:00, 24.92it/s] 50%|#####     | 13/26 [00:00<00:00, 26.64it/s] 62%|######1   | 16/26 [00:00<00:00, 27.59it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.74it/s] 88%|########8 | 23/26 [00:00<00:00, 28.22it/s]100%|##########| 26/26 [00:00<00:00, 28.65it/s]100%|##########| 26/26 [00:01<00:00, 24.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [8][  26/  26]	Loss 0.001 (0.003)	train_nll   0.67 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm   0.81 (  0.63)	train_acc   0.62 (  0.54)	train_minacc   0.43 (  0.54)	train_majacc   0.65 (  0.54)	train_corr   0.00 (  0.00)	l1 8.6605 (8.8071)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.79it/s] 15%|#5        | 4/26 [00:00<00:01, 17.70it/s] 35%|###4      | 9/26 [00:00<00:00, 29.74it/s]                                               35%|###4      | 9/26 [00:00<00:00, 29.74it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.14it/s] 73%|#######3  | 19/26 [00:00<00:00, 39.51it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 39.51it/s] 92%|#########2| 24/26 [00:00<00:00, 38.79it/s]100%|##########| 26/26 [00:00<00:00, 32.38it/s]
Test: [   0/  26]	Loss 0.680 (0.680)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.58 (  0.58)	Loss_d 0.680 (0.680)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.32 (  0.32)
Test: [  10/  26]	Loss 0.681 (0.686)	test_acc   0.57 (  0.54)	test_minacc   0.39 (  0.48)	test_majacc   0.60 (  0.55)	Loss_d 0.681 (0.686)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.39 (  0.48)	test_majacc_d   0.60 (  0.55)	test_corr_d   0.25 (  0.27)
Test: [  20/  26]	Loss 0.684 (0.685)	test_acc   0.54 (  0.54)	test_minacc   0.42 (  0.47)	test_majacc   0.56 (  0.56)	Loss_d 0.684 (0.685)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.42 (  0.47)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.31 (  0.28)
Test: [  26/  26]	Loss 0.672 (0.685)	test_acc   0.62 (  0.55)	test_minacc   0.43 (  0.47)	test_majacc   0.65 (  0.56)	Loss_d 0.672 (0.685)	test_acc_d   0.62 (  0.55)	test_minacc_d   0.43 (  0.47)	test_majacc_d   0.65 (  0.56)	test_corr_d   0.24 (  0.28)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.60it/s]
Test: [  0/  1]	Loss 0.708 (0.708)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.708 (0.708)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 0.708 (0.708)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.708 (0.708)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.15 (  0.15)
Overall Timing[  8/  1]	epoch_time 0.0450 (0.0478)	validation_time 0.0004 (0.0011)	train_time 0.0446 (0.0465)
record: (train_acc, test_acc) (0.829900026679039, 0.2630000114440918)
last accs (train_acc, test_acc) (0.5469000127315521, 0.5)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.83it/s] 12%|#1        | 3/26 [00:00<00:02, 10.61it/s] 23%|##3       | 6/26 [00:00<00:01, 17.55it/s] 35%|###4      | 9/26 [00:00<00:00, 21.47it/s] 50%|#####     | 13/26 [00:00<00:00, 24.99it/s] 65%|######5   | 17/26 [00:00<00:00, 26.99it/s] 81%|########  | 21/26 [00:00<00:00, 28.40it/s] 96%|#########6| 25/26 [00:01<00:00, 29.29it/s]100%|##########| 26/26 [00:01<00:00, 23.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [9][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.88 (  0.86)	train_acc   0.62 (  0.54)	train_minacc   0.49 (  0.51)	train_majacc   0.64 (  0.55)	train_corr   0.00 (  0.00)	l1 8.5050 (8.5619)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.59it/s] 27%|##6       | 7/26 [00:00<00:00, 37.12it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.12it/s] 46%|####6     | 12/26 [00:00<00:00, 40.60it/s] 65%|######5   | 17/26 [00:00<00:00, 42.39it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.39it/s] 85%|########4 | 22/26 [00:00<00:00, 43.79it/s]100%|##########| 26/26 [00:00<00:00, 37.52it/s]
Test: [   0/  26]	Loss 0.680 (0.680)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.57 (  0.57)	Loss_d 0.680 (0.680)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.682 (0.686)	test_acc   0.57 (  0.54)	test_minacc   0.41 (  0.51)	test_majacc   0.60 (  0.54)	Loss_d 0.682 (0.686)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.41 (  0.51)	test_majacc_d   0.60 (  0.54)	test_corr_d   0.18 (  0.18)
Test: [  20/  26]	Loss 0.684 (0.685)	test_acc   0.54 (  0.54)	test_minacc   0.48 (  0.51)	test_majacc   0.55 (  0.54)	Loss_d 0.684 (0.685)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.48 (  0.51)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.21 (  0.19)
Test: [  26/  26]	Loss 0.675 (0.685)	test_acc   0.62 (  0.54)	test_minacc   0.49 (  0.51)	test_majacc   0.64 (  0.55)	Loss_d 0.675 (0.685)	test_acc_d   0.62 (  0.54)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.64 (  0.55)	test_corr_d   0.20 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.57it/s]
Test: [  0/  1]	Loss 0.701 (0.701)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.701 (0.701)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.701 (0.701)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.701 (0.701)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.06 (  0.06)
Overall Timing[  9/  1]	epoch_time 0.0481 (0.0478)	validation_time 0.0004 (0.0010)	train_time 0.0477 (0.0466)
record: (train_acc, test_acc) (0.829900026679039, 0.2630000114440918)
last accs (train_acc, test_acc) (0.5419000176787376, 0.5139999985694885)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.09it/s] 15%|#5        | 4/26 [00:00<00:01, 18.15it/s] 27%|##6       | 7/26 [00:00<00:00, 22.97it/s] 38%|###8      | 10/26 [00:00<00:00, 25.32it/s] 50%|#####     | 13/26 [00:00<00:00, 26.74it/s] 65%|######5   | 17/26 [00:00<00:00, 27.95it/s] 81%|########  | 21/26 [00:00<00:00, 28.70it/s] 96%|#########6| 25/26 [00:00<00:00, 29.39it/s]100%|##########| 26/26 [00:01<00:00, 24.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [10][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.88 (  0.88)	train_acc   0.62 (  0.55)	train_minacc   0.46 (  0.49)	train_majacc   0.64 (  0.56)	train_corr   0.00 (  0.00)	l1 8.4610 (8.4811)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.47it/s] 27%|##6       | 7/26 [00:00<00:00, 32.93it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.93it/s] 46%|####6     | 12/26 [00:00<00:00, 38.93it/s] 65%|######5   | 17/26 [00:00<00:00, 41.93it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.93it/s] 85%|########4 | 22/26 [00:00<00:00, 40.10it/s]100%|##########| 26/26 [00:00<00:00, 37.40it/s]
Test: [   0/  26]	Loss 0.686 (0.686)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.58 (  0.58)	Loss_d 0.686 (0.686)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.13 (  0.13)
Test: [  10/  26]	Loss 0.688 (0.691)	test_acc   0.58 (  0.54)	test_minacc   0.39 (  0.49)	test_majacc   0.61 (  0.55)	Loss_d 0.688 (0.691)	test_acc_d   0.58 (  0.54)	test_minacc_d   0.39 (  0.49)	test_majacc_d   0.61 (  0.55)	test_corr_d   0.06 (  0.09)
Test: [  20/  26]	Loss 0.690 (0.691)	test_acc   0.55 (  0.55)	test_minacc   0.44 (  0.48)	test_majacc   0.57 (  0.56)	Loss_d 0.690 (0.691)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.44 (  0.48)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.11 (  0.10)
Test: [  26/  26]	Loss 0.683 (0.690)	test_acc   0.62 (  0.55)	test_minacc   0.46 (  0.49)	test_majacc   0.64 (  0.56)	Loss_d 0.683 (0.690)	test_acc_d   0.62 (  0.55)	test_minacc_d   0.46 (  0.49)	test_majacc_d   0.64 (  0.56)	test_corr_d   0.07 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.50it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.49)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.49)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 10/  1]	epoch_time 0.0479 (0.0478)	validation_time 0.0005 (0.0010)	train_time 0.0474 (0.0467)
record: (train_acc, test_acc) (0.829900026679039, 0.2630000114440918)
last accs (train_acc, test_acc) (0.5510000159740448, 0.5049999952316284)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:09,  2.68it/s] 19%|#9        | 5/26 [00:00<00:01, 12.01it/s] 35%|###4      | 9/26 [00:00<00:00, 17.87it/s] 46%|####6     | 12/26 [00:00<00:00, 20.92it/s] 58%|#####7    | 15/26 [00:00<00:00, 22.92it/s] 69%|######9   | 18/26 [00:00<00:00, 24.85it/s] 81%|########  | 21/26 [00:01<00:00, 26.07it/s] 96%|#########6| 25/26 [00:01<00:00, 27.91it/s]100%|##########| 26/26 [00:01<00:00, 20.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [11][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.88 (  0.88)	train_acc   0.62 (  0.55)	train_minacc   0.46 (  0.48)	train_majacc   0.64 (  0.57)	train_corr   0.00 (  0.00)	l1 8.4370 (8.4483)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.99it/s] 23%|##3       | 6/26 [00:00<00:00, 29.93it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.93it/s] 42%|####2     | 11/26 [00:00<00:00, 37.28it/s] 62%|######1   | 16/26 [00:00<00:00, 41.00it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.00it/s] 81%|########  | 21/26 [00:00<00:00, 38.35it/s]100%|##########| 26/26 [00:00<00:00, 35.32it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.57 (  0.57)	test_minacc   0.51 (  0.51)	test_majacc   0.58 (  0.58)	Loss_d 0.687 (0.687)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.689 (0.691)	test_acc   0.58 (  0.55)	test_minacc   0.39 (  0.48)	test_majacc   0.61 (  0.56)	Loss_d 0.689 (0.691)	test_acc_d   0.58 (  0.55)	test_minacc_d   0.39 (  0.48)	test_majacc_d   0.61 (  0.56)	test_corr_d   0.02 (  0.08)
Test: [  20/  26]	Loss 0.691 (0.691)	test_acc   0.55 (  0.55)	test_minacc   0.44 (  0.48)	test_majacc   0.57 (  0.56)	Loss_d 0.691 (0.691)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.44 (  0.48)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.10 (  0.08)
Test: [  26/  26]	Loss 0.686 (0.691)	test_acc   0.62 (  0.55)	test_minacc   0.46 (  0.48)	test_majacc   0.64 (  0.57)	Loss_d 0.686 (0.691)	test_acc_d   0.62 (  0.55)	test_minacc_d   0.46 (  0.48)	test_majacc_d   0.64 (  0.57)	test_corr_d   0.01 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.32it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 11/  1]	epoch_time 0.0450 (0.0476)	validation_time 0.0005 (0.0009)	train_time 0.0445 (0.0465)
record: (train_acc, test_acc) (0.829900026679039, 0.2630000114440918)
last accs (train_acc, test_acc) (0.5534000111818314, 0.503000020980835)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.91it/s] 19%|#9        | 5/26 [00:00<00:00, 21.64it/s] 31%|###       | 8/26 [00:00<00:00, 24.76it/s] 42%|####2     | 11/26 [00:00<00:00, 26.22it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.08it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.03it/s] 88%|########8 | 23/26 [00:00<00:00, 29.10it/s]100%|##########| 26/26 [00:00<00:00, 26.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [12][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.88 (  0.88)	train_acc   0.62 (  0.55)	train_minacc   0.46 (  0.47)	train_majacc   0.64 (  0.57)	train_corr   0.00 (  0.00)	l1 8.4217 (8.4297)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.69it/s] 27%|##6       | 7/26 [00:00<00:00, 35.13it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.13it/s] 46%|####6     | 12/26 [00:00<00:00, 40.06it/s] 65%|######5   | 17/26 [00:00<00:00, 42.49it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.49it/s] 85%|########4 | 22/26 [00:00<00:00, 40.66it/s]100%|##########| 26/26 [00:00<00:00, 37.65it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.57 (  0.57)	test_minacc   0.51 (  0.51)	test_majacc   0.59 (  0.59)	Loss_d 0.688 (0.688)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.690 (0.691)	test_acc   0.58 (  0.55)	test_minacc   0.39 (  0.47)	test_majacc   0.62 (  0.56)	Loss_d 0.690 (0.691)	test_acc_d   0.58 (  0.55)	test_minacc_d   0.39 (  0.47)	test_majacc_d   0.62 (  0.56)	test_corr_d  -0.01 (  0.08)
Test: [  20/  26]	Loss 0.692 (0.691)	test_acc   0.56 (  0.55)	test_minacc   0.42 (  0.47)	test_majacc   0.58 (  0.57)	Loss_d 0.692 (0.691)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.42 (  0.47)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.09 (  0.08)
Test: [  26/  26]	Loss 0.688 (0.691)	test_acc   0.62 (  0.56)	test_minacc   0.46 (  0.47)	test_majacc   0.64 (  0.57)	Loss_d 0.688 (0.691)	test_acc_d   0.62 (  0.56)	test_minacc_d   0.46 (  0.47)	test_majacc_d   0.64 (  0.57)	test_corr_d  -0.05 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 56.57it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.695 (0.695)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.695 (0.695)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.02 (  0.02)
Overall Timing[ 12/  1]	epoch_time 0.0413 (0.0471)	validation_time 0.0007 (0.0009)	train_time 0.0406 (0.0460)
record: (train_acc, test_acc) (0.829900026679039, 0.2630000114440918)
last accs (train_acc, test_acc) (0.5550000110864639, 0.49400001764297485)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.35it/s] 15%|#5        | 4/26 [00:00<00:01, 19.95it/s] 27%|##6       | 7/26 [00:00<00:00, 24.19it/s] 42%|####2     | 11/26 [00:00<00:00, 27.18it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.86it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.83it/s] 88%|########8 | 23/26 [00:00<00:00, 30.84it/s]100%|##########| 26/26 [00:00<00:00, 26.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [13][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.88 (  0.88)	train_acc   0.62 (  0.55)	train_minacc   0.46 (  0.46)	train_majacc   0.64 (  0.57)	train_corr   0.00 (  0.00)	l1 8.4099 (8.4163)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.58it/s] 23%|##3       | 6/26 [00:00<00:00, 29.29it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.29it/s] 46%|####6     | 12/26 [00:00<00:00, 39.73it/s] 65%|######5   | 17/26 [00:00<00:00, 41.77it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.77it/s] 85%|########4 | 22/26 [00:00<00:00, 42.18it/s]100%|##########| 26/26 [00:00<00:00, 36.02it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.57 (  0.57)	test_minacc   0.51 (  0.51)	test_majacc   0.59 (  0.59)	Loss_d 0.689 (0.689)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.691 (0.691)	test_acc   0.58 (  0.55)	test_minacc   0.39 (  0.47)	test_majacc   0.62 (  0.56)	Loss_d 0.691 (0.691)	test_acc_d   0.58 (  0.55)	test_minacc_d   0.39 (  0.47)	test_majacc_d   0.62 (  0.56)	test_corr_d  -0.06 (  0.07)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.55)	test_minacc   0.42 (  0.46)	test_majacc   0.58 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.42 (  0.46)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.07 (  0.07)
Test: [  26/  26]	Loss 0.689 (0.691)	test_acc   0.62 (  0.55)	test_minacc   0.46 (  0.47)	test_majacc   0.64 (  0.57)	Loss_d 0.689 (0.691)	test_acc_d   0.62 (  0.55)	test_minacc_d   0.46 (  0.47)	test_majacc_d   0.64 (  0.57)	test_corr_d  -0.12 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.78it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.695 (0.695)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.695 (0.695)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.03 (  0.03)
Overall Timing[ 13/  1]	epoch_time 0.0392 (0.0465)	validation_time 0.0004 (0.0009)	train_time 0.0387 (0.0455)
record: (train_acc, test_acc) (0.829900026679039, 0.2630000114440918)
last accs (train_acc, test_acc) (0.5546000180840492, 0.4910000264644623)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.91it/s] 15%|#5        | 4/26 [00:00<00:01, 16.27it/s] 27%|##6       | 7/26 [00:00<00:00, 21.28it/s] 38%|###8      | 10/26 [00:00<00:00, 24.23it/s] 50%|#####     | 13/26 [00:00<00:00, 25.70it/s] 65%|######5   | 17/26 [00:00<00:00, 27.22it/s] 81%|########  | 21/26 [00:00<00:00, 28.50it/s] 96%|#########6| 25/26 [00:00<00:00, 29.12it/s]100%|##########| 26/26 [00:01<00:00, 24.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [14][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.88 (  0.88)	train_acc   0.60 (  0.55)	train_minacc   0.46 (  0.46)	train_majacc   0.63 (  0.57)	train_corr   0.00 (  0.00)	l1 8.4016 (8.4061)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 17.98it/s] 31%|###       | 8/26 [00:00<00:00, 31.69it/s]                                               31%|###       | 8/26 [00:00<00:00, 31.69it/s] 50%|#####     | 13/26 [00:00<00:00, 37.14it/s] 69%|######9   | 18/26 [00:00<00:00, 40.39it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.39it/s] 88%|########8 | 23/26 [00:00<00:00, 39.03it/s]100%|##########| 26/26 [00:00<00:00, 35.01it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.57 (  0.57)	test_minacc   0.51 (  0.51)	test_majacc   0.58 (  0.58)	Loss_d 0.690 (0.690)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.58 (  0.55)	test_minacc   0.39 (  0.47)	test_majacc   0.61 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.58 (  0.55)	test_minacc_d   0.39 (  0.47)	test_majacc_d   0.61 (  0.56)	test_corr_d  -0.10 (  0.05)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.42 (  0.46)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.42 (  0.46)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.06 (  0.06)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.60 (  0.55)	test_minacc   0.46 (  0.47)	test_majacc   0.63 (  0.57)	Loss_d 0.691 (0.692)	test_acc_d   0.60 (  0.55)	test_minacc_d   0.46 (  0.47)	test_majacc_d   0.63 (  0.57)	test_corr_d  -0.18 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.81it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.695 (0.695)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.695 (0.695)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.04 (  0.04)
Overall Timing[ 14/  1]	epoch_time 0.0445 (0.0464)	validation_time 0.0004 (0.0008)	train_time 0.0440 (0.0454)
record: (train_acc, test_acc) (0.829900026679039, 0.2630000114440918)
last accs (train_acc, test_acc) (0.5525000152587891, 0.48900002241134644)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.18it/s] 19%|#9        | 5/26 [00:00<00:01, 15.65it/s] 35%|###4      | 9/26 [00:00<00:00, 21.35it/s] 50%|#####     | 13/26 [00:00<00:00, 24.48it/s] 62%|######1   | 16/26 [00:00<00:00, 25.96it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.92it/s] 88%|########8 | 23/26 [00:00<00:00, 28.08it/s]100%|##########| 26/26 [00:01<00:00, 23.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [15][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.87 (  0.87)	train_acc   0.59 (  0.55)	train_minacc   0.49 (  0.47)	train_majacc   0.61 (  0.56)	train_corr   0.00 (  0.00)	l1 8.3952 (8.3988)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.08it/s] 15%|#5        | 4/26 [00:00<00:01, 16.63it/s] 35%|###4      | 9/26 [00:00<00:00, 28.71it/s]                                               35%|###4      | 9/26 [00:00<00:00, 28.71it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.68it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.57it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 37.57it/s] 92%|#########2| 24/26 [00:00<00:00, 40.23it/s]100%|##########| 26/26 [00:00<00:00, 31.96it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.56 (  0.56)	test_minacc   0.51 (  0.51)	test_majacc   0.57 (  0.57)	Loss_d 0.690 (0.690)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.54)	test_minacc   0.39 (  0.47)	test_majacc   0.59 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.39 (  0.47)	test_majacc_d   0.59 (  0.56)	test_corr_d  -0.14 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.42 (  0.47)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.42 (  0.47)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.04 (  0.04)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.59 (  0.55)	test_minacc   0.49 (  0.47)	test_majacc   0.61 (  0.56)	Loss_d 0.691 (0.692)	test_acc_d   0.59 (  0.55)	test_minacc_d   0.49 (  0.47)	test_majacc_d   0.61 (  0.56)	test_corr_d  -0.23 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.53it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.49 (  0.49)	Loss_d 0.695 (0.695)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.49 (  0.49)	Loss_d 0.695 (0.695)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.05 (  0.05)
Overall Timing[ 15/  1]	epoch_time 0.0438 (0.0462)	validation_time 0.0003 (0.0008)	train_time 0.0434 (0.0453)
record: (train_acc, test_acc) (0.829900026679039, 0.2630000114440918)
last accs (train_acc, test_acc) (0.5486000102162362, 0.48500001430511475)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.23it/s] 19%|#9        | 5/26 [00:00<00:01, 20.99it/s] 31%|###       | 8/26 [00:00<00:00, 24.07it/s] 42%|####2     | 11/26 [00:00<00:00, 25.89it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.87it/s] 65%|######5   | 17/26 [00:00<00:00, 27.57it/s] 81%|########  | 21/26 [00:00<00:00, 28.57it/s] 96%|#########6| 25/26 [00:00<00:00, 29.19it/s]100%|##########| 26/26 [00:01<00:00, 25.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.87 (  0.87)	train_acc   0.58 (  0.54)	train_minacc   0.51 (  0.48)	train_majacc   0.59 (  0.56)	train_corr   0.00 (  0.00)	l1 8.3900 (8.3929)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.29it/s] 23%|##3       | 6/26 [00:00<00:00, 25.95it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.95it/s] 42%|####2     | 11/26 [00:00<00:00, 34.77it/s] 62%|######1   | 16/26 [00:00<00:00, 39.45it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.45it/s] 81%|########  | 21/26 [00:00<00:00, 38.41it/s]100%|##########| 26/26 [00:00<00:00, 41.52it/s]100%|##########| 26/26 [00:00<00:00, 33.56it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.56 (  0.56)	Loss_d 0.691 (0.691)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.55 (  0.54)	test_minacc   0.39 (  0.47)	test_majacc   0.57 (  0.55)	Loss_d 0.693 (0.692)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.39 (  0.47)	test_majacc_d   0.57 (  0.55)	test_corr_d  -0.17 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.55 (  0.54)	test_minacc   0.42 (  0.47)	test_majacc   0.57 (  0.55)	Loss_d 0.693 (0.692)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.42 (  0.47)	test_majacc_d   0.57 (  0.55)	test_corr_d   0.03 (  0.03)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.58 (  0.54)	test_minacc   0.51 (  0.48)	test_majacc   0.59 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.58 (  0.54)	test_minacc_d   0.51 (  0.48)	test_majacc_d   0.59 (  0.55)	test_corr_d  -0.27 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.52it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.49 (  0.49)	Loss_d 0.695 (0.695)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.49 (  0.49)	Loss_d 0.695 (0.695)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.05 (  0.05)
Overall Timing[ 16/  1]	epoch_time 0.0443 (0.0461)	validation_time 0.0005 (0.0008)	train_time 0.0438 (0.0452)
record: (train_acc, test_acc) (0.829900026679039, 0.2630000114440918)
last accs (train_acc, test_acc) (0.5415000161528587, 0.484000027179718)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.69it/s] 15%|#5        | 4/26 [00:00<00:01, 16.41it/s] 27%|##6       | 7/26 [00:00<00:00, 21.12it/s] 38%|###8      | 10/26 [00:00<00:00, 24.10it/s] 50%|#####     | 13/26 [00:00<00:00, 25.75it/s] 62%|######1   | 16/26 [00:00<00:00, 26.94it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.12it/s] 88%|########8 | 23/26 [00:00<00:00, 28.34it/s]100%|##########| 26/26 [00:01<00:00, 24.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.87 (  0.87)	train_acc   0.56 (  0.54)	train_minacc   0.51 (  0.48)	train_majacc   0.57 (  0.55)	train_corr   0.00 (  0.00)	l1 8.3859 (8.3881)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.91it/s] 27%|##6       | 7/26 [00:00<00:00, 35.88it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.88it/s] 46%|####6     | 12/26 [00:00<00:00, 40.55it/s] 65%|######5   | 17/26 [00:00<00:00, 39.77it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.77it/s] 85%|########4 | 22/26 [00:00<00:00, 41.39it/s]100%|##########| 26/26 [00:00<00:00, 37.08it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.54 (  0.53)	test_minacc   0.41 (  0.47)	test_majacc   0.56 (  0.54)	Loss_d 0.693 (0.692)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.41 (  0.47)	test_majacc_d   0.56 (  0.54)	test_corr_d  -0.19 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.55 (  0.53)	test_minacc   0.42 (  0.47)	test_majacc   0.57 (  0.54)	Loss_d 0.693 (0.692)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.42 (  0.47)	test_majacc_d   0.57 (  0.54)	test_corr_d   0.02 (  0.02)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.54)	test_minacc   0.51 (  0.48)	test_majacc   0.57 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.51 (  0.48)	test_majacc_d   0.57 (  0.54)	test_corr_d  -0.29 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.64it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.49 (  0.49)	Loss_d 0.695 (0.695)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.49 (  0.49)	Loss_d 0.695 (0.695)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.06 (  0.06)
Overall Timing[ 17/  1]	epoch_time 0.0459 (0.0461)	validation_time 0.0004 (0.0008)	train_time 0.0455 (0.0452)
record: (train_acc, test_acc) (0.829900026679039, 0.2630000114440918)
last accs (train_acc, test_acc) (0.5350000087320804, 0.484000027179718)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.41it/s] 15%|#5        | 4/26 [00:00<00:01, 19.78it/s] 27%|##6       | 7/26 [00:00<00:00, 23.73it/s] 38%|###8      | 10/26 [00:00<00:00, 26.08it/s] 50%|#####     | 13/26 [00:00<00:00, 27.15it/s] 65%|######5   | 17/26 [00:00<00:00, 28.65it/s] 81%|########  | 21/26 [00:00<00:00, 29.42it/s] 96%|#########6| 25/26 [00:00<00:00, 30.30it/s]100%|##########| 26/26 [00:01<00:00, 25.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.87 (  0.87)	train_acc   0.56 (  0.53)	train_minacc   0.51 (  0.48)	train_majacc   0.56 (  0.54)	train_corr   0.00 (  0.00)	l1 8.3824 (8.3842)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.87it/s] 23%|##3       | 6/26 [00:00<00:00, 30.73it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.73it/s] 42%|####2     | 11/26 [00:00<00:00, 38.46it/s] 62%|######1   | 16/26 [00:00<00:00, 41.80it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.80it/s] 81%|########  | 21/26 [00:00<00:00, 38.83it/s]100%|##########| 26/26 [00:00<00:00, 41.14it/s]100%|##########| 26/26 [00:00<00:00, 34.96it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.54 (  0.53)	test_minacc   0.43 (  0.48)	test_majacc   0.56 (  0.54)	Loss_d 0.693 (0.692)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.43 (  0.48)	test_majacc_d   0.56 (  0.54)	test_corr_d  -0.21 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.42 (  0.48)	test_majacc   0.56 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.42 (  0.48)	test_majacc_d   0.56 (  0.54)	test_corr_d   0.01 (  0.01)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.53)	test_minacc   0.51 (  0.49)	test_majacc   0.57 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.53)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.57 (  0.54)	test_corr_d  -0.31 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.07it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.49 (  0.49)	Loss_d 0.695 (0.695)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.49 (  0.49)	Loss_d 0.695 (0.695)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.06 (  0.06)
Overall Timing[ 18/  1]	epoch_time 0.0437 (0.0460)	validation_time 0.0004 (0.0008)	train_time 0.0433 (0.0451)
record: (train_acc, test_acc) (0.829900026679039, 0.2630000114440918)
last accs (train_acc, test_acc) (0.5310000157356263, 0.484000027179718)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.04it/s] 12%|#1        | 3/26 [00:00<00:01, 15.02it/s] 23%|##3       | 6/26 [00:00<00:00, 20.77it/s] 35%|###4      | 9/26 [00:00<00:00, 23.27it/s] 46%|####6     | 12/26 [00:00<00:00, 25.42it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.47it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.12it/s] 88%|########8 | 23/26 [00:00<00:00, 29.39it/s]100%|##########| 26/26 [00:01<00:00, 24.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.87 (  0.87)	train_acc   0.55 (  0.53)	train_minacc   0.51 (  0.49)	train_majacc   0.55 (  0.53)	train_corr   0.00 (  0.00)	l1 8.3795 (8.3810)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.55it/s] 23%|##3       | 6/26 [00:00<00:00, 30.16it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.16it/s] 42%|####2     | 11/26 [00:00<00:00, 37.06it/s] 62%|######1   | 16/26 [00:00<00:00, 40.86it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.86it/s] 81%|########  | 21/26 [00:00<00:00, 39.10it/s]100%|##########| 26/26 [00:00<00:00, 41.87it/s]100%|##########| 26/26 [00:00<00:00, 34.95it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.53 (  0.52)	test_minacc   0.43 (  0.48)	test_majacc   0.55 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.43 (  0.48)	test_majacc_d   0.55 (  0.53)	test_corr_d  -0.22 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.42 (  0.48)	test_majacc   0.55 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.42 (  0.48)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.00 (  0.01)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.53)	test_minacc   0.51 (  0.49)	test_majacc   0.56 (  0.53)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.56 (  0.53)	test_corr_d  -0.32 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.02it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.695 (0.695)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.695 (0.695)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.07 (  0.07)
Overall Timing[ 19/  1]	epoch_time 0.0423 (0.0458)	validation_time 0.0003 (0.0007)	train_time 0.0419 (0.0450)
record: (train_acc, test_acc) (0.829900026679039, 0.2630000114440918)
last accs (train_acc, test_acc) (0.5263000159263611, 0.4870000183582306)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.95it/s] 19%|#9        | 5/26 [00:00<00:00, 22.10it/s] 35%|###4      | 9/26 [00:00<00:00, 26.11it/s] 50%|#####     | 13/26 [00:00<00:00, 27.78it/s] 65%|######5   | 17/26 [00:00<00:00, 28.72it/s] 81%|########  | 21/26 [00:00<00:00, 29.24it/s] 96%|#########6| 25/26 [00:00<00:00, 29.58it/s]100%|##########| 26/26 [00:00<00:00, 26.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.87 (  0.87)	train_acc   0.54 (  0.52)	train_minacc   0.51 (  0.49)	train_majacc   0.55 (  0.53)	train_corr   0.00 (  0.00)	l1 8.3773 (8.3785)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.24it/s] 27%|##6       | 7/26 [00:00<00:00, 30.70it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.70it/s] 46%|####6     | 12/26 [00:00<00:00, 37.45it/s] 65%|######5   | 17/26 [00:00<00:00, 37.00it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.00it/s] 85%|########4 | 22/26 [00:00<00:00, 40.17it/s]100%|##########| 26/26 [00:00<00:00, 34.25it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.43 (  0.48)	test_majacc   0.55 (  0.53)	Loss_d 0.694 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.43 (  0.48)	test_majacc_d   0.55 (  0.53)	test_corr_d  -0.23 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.42 (  0.48)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.42 (  0.48)	test_majacc_d   0.54 (  0.53)	test_corr_d  -0.00 (  0.00)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.51 (  0.49)	test_majacc   0.55 (  0.53)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.55 (  0.53)	test_corr_d  -0.32 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.52it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.695 (0.695)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.695 (0.695)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.07 (  0.07)
Overall Timing[ 20/  1]	epoch_time 0.0450 (0.0458)	validation_time 0.0004 (0.0007)	train_time 0.0445 (0.0449)
record: (train_acc, test_acc) (0.829900026679039, 0.2630000114440918)
last accs (train_acc, test_acc) (0.5227000136077404, 0.4870000183582306)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.35it/s] 15%|#5        | 4/26 [00:00<00:01, 18.62it/s] 27%|##6       | 7/26 [00:00<00:00, 22.45it/s] 38%|###8      | 10/26 [00:00<00:00, 24.81it/s] 50%|#####     | 13/26 [00:00<00:00, 26.12it/s] 62%|######1   | 16/26 [00:00<00:00, 27.29it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.77it/s] 88%|########8 | 23/26 [00:00<00:00, 28.65it/s]100%|##########| 26/26 [00:01<00:00, 24.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.87 (  0.87)	train_acc   0.54 (  0.52)	train_minacc   0.51 (  0.49)	train_majacc   0.55 (  0.53)	train_corr   0.00 (  0.00)	l1 8.3754 (8.3764)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.37it/s] 27%|##6       | 7/26 [00:00<00:00, 34.87it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.87it/s] 46%|####6     | 12/26 [00:00<00:00, 40.44it/s] 65%|######5   | 17/26 [00:00<00:00, 42.41it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.41it/s] 85%|########4 | 22/26 [00:00<00:00, 43.73it/s]100%|##########| 26/26 [00:00<00:00, 37.97it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.43 (  0.48)	test_majacc   0.55 (  0.52)	Loss_d 0.694 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.43 (  0.48)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.24 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.42 (  0.49)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.42 (  0.49)	test_majacc_d   0.53 (  0.52)	test_corr_d  -0.00 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.51 (  0.49)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.33 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.26it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.07 (  0.07)
Overall Timing[ 21/  1]	epoch_time 0.0423 (0.0456)	validation_time 0.0004 (0.0007)	train_time 0.0418 (0.0448)
record: (train_acc, test_acc) (0.829900026679039, 0.2630000114440918)
last accs (train_acc, test_acc) (0.5189000113010407, 0.4930000305175781)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.11it/s] 19%|#9        | 5/26 [00:00<00:01, 20.21it/s] 35%|###4      | 9/26 [00:00<00:00, 24.75it/s] 50%|#####     | 13/26 [00:00<00:00, 27.20it/s] 65%|######5   | 17/26 [00:00<00:00, 29.07it/s] 81%|########  | 21/26 [00:00<00:00, 29.73it/s] 92%|#########2| 24/26 [00:00<00:00, 29.59it/s]100%|##########| 26/26 [00:01<00:00, 25.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.86 (  0.86)	train_acc   0.54 (  0.52)	train_minacc   0.51 (  0.49)	train_majacc   0.55 (  0.52)	train_corr   0.00 (  0.00)	l1 8.3738 (8.3747)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.92it/s] 23%|##3       | 6/26 [00:00<00:00, 25.66it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.66it/s] 42%|####2     | 11/26 [00:00<00:00, 33.51it/s] 62%|######1   | 16/26 [00:00<00:00, 38.68it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.68it/s] 81%|########  | 21/26 [00:00<00:00, 41.02it/s]100%|##########| 26/26 [00:00<00:00, 43.37it/s]100%|##########| 26/26 [00:00<00:00, 34.10it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.43 (  0.49)	test_majacc   0.54 (  0.52)	Loss_d 0.694 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.43 (  0.49)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.24 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.42 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.42 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.51 (  0.50)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.51 (  0.50)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.33 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.07it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.07 (  0.07)
Overall Timing[ 22/  1]	epoch_time 0.0426 (0.0455)	validation_time 0.0004 (0.0007)	train_time 0.0421 (0.0447)
record: (train_acc, test_acc) (0.829900026679039, 0.2630000114440918)
last accs (train_acc, test_acc) (0.5167000184059143, 0.4960000216960907)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.67it/s] 19%|#9        | 5/26 [00:00<00:00, 22.27it/s] 31%|###       | 8/26 [00:00<00:00, 22.87it/s] 46%|####6     | 12/26 [00:00<00:00, 26.28it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.12it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.28it/s] 88%|########8 | 23/26 [00:00<00:00, 28.99it/s]100%|##########| 26/26 [00:01<00:00, 25.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 200
penalty weights 10000.0
l1 at pgd_anneal_iters 8.37363052368164
set z to 8.289894218444823
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 200
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 200
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 200
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 200
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 200
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
rho, theta 389 tensor(-0.0100, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 200
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 200
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 200
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 200
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 200
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 200
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 200
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 200
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 200
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 200
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 200
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 200
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 200
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 200
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 200
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 200
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 200
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 200
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
final projection at end of training
dim_v 512
Epoch: [23][  26/  26]	Loss 0.000 (0.005)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.01)	weight_norm   1.06 (  0.93)	train_acc   0.60 (  0.45)	train_minacc   0.37 (  0.59)	train_majacc   0.63 (  0.43)	train_corr   0.00 (  0.00)	l1 6.6940 (7.4512)	zero_count 0.0000 (4.7580)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.90it/s] 23%|##3       | 6/26 [00:00<00:00, 30.14it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.14it/s] 42%|####2     | 11/26 [00:00<00:00, 37.76it/s] 62%|######1   | 16/26 [00:00<00:00, 38.08it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.08it/s] 81%|########  | 21/26 [00:00<00:00, 41.28it/s]100%|##########| 26/26 [00:00<00:00, 42.95it/s]100%|##########| 26/26 [00:00<00:00, 36.35it/s]
Test: [   0/  26]	Loss 0.680 (0.680)	test_acc   0.64 (  0.64)	test_minacc   0.40 (  0.40)	test_majacc   0.69 (  0.69)	Loss_d 0.680 (0.680)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.41 (  0.41)
Test: [  10/  26]	Loss 0.683 (0.682)	test_acc   0.63 (  0.64)	test_minacc   0.54 (  0.42)	test_majacc   0.65 (  0.68)	Loss_d 0.683 (0.682)	test_acc_d   0.63 (  0.64)	test_minacc_d   0.54 (  0.42)	test_majacc_d   0.65 (  0.68)	test_corr_d   0.34 (  0.39)
Test: [  20/  26]	Loss 0.676 (0.681)	test_acc   0.66 (  0.64)	test_minacc   0.46 (  0.42)	test_majacc   0.69 (  0.68)	Loss_d 0.676 (0.681)	test_acc_d   0.66 (  0.64)	test_minacc_d   0.46 (  0.42)	test_majacc_d   0.69 (  0.68)	test_corr_d   0.41 (  0.39)
Test: [  26/  26]	Loss 0.687 (0.681)	test_acc   0.58 (  0.64)	test_minacc   0.40 (  0.41)	test_majacc   0.61 (  0.68)	Loss_d 0.687 (0.681)	test_acc_d   0.58 (  0.64)	test_minacc_d   0.40 (  0.41)	test_majacc_d   0.61 (  0.68)	test_corr_d   0.35 (  0.39)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.04it/s]
Test: [  0/  1]	Loss 0.712 (0.712)	test_acc   0.38 (  0.38)	test_minacc   0.34 (  0.34)	test_majacc   0.72 (  0.72)	Loss_d 0.712 (0.712)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.41 (  0.41)
Test: [  1/  1]	Loss 0.712 (0.712)	test_acc   0.38 (  0.38)	test_minacc   0.34 (  0.34)	test_majacc   0.72 (  0.72)	Loss_d 0.712 (0.712)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.41 (  0.41)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/194/checkpoints/model_best.pth
Overall Timing[ 23/  1]	epoch_time 0.0404 (0.0453)	validation_time 0.0004 (0.0007)	train_time 0.0400 (0.0445)
record: (train_acc, test_acc) (0.6380000115633011, 0.38100001215934753)
last accs (train_acc, test_acc) (0.6380000115633011, 0.38100001215934753)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.76it/s] 15%|#5        | 4/26 [00:00<00:01, 16.69it/s] 31%|###       | 8/26 [00:00<00:00, 23.10it/s] 42%|####2     | 11/26 [00:00<00:00, 25.33it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.57it/s] 69%|######9   | 18/26 [00:00<00:00, 28.17it/s] 85%|########4 | 22/26 [00:00<00:00, 29.06it/s] 96%|#########6| 25/26 [00:00<00:00, 29.14it/s]100%|##########| 26/26 [00:01<00:00, 24.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 200
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 200
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 200
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 200
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 200
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 200
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 200
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 200
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 200
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 200
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 200
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 200
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 200
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 200
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 200
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 200
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 200
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 200
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 200
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 200
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 200
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 200
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 200
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 200
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 200
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 200
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
final projection at end of training
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.15 (  1.12)	train_acc   0.45 (  0.54)	train_minacc   0.49 (  0.48)	train_majacc   0.44 (  0.56)	train_corr   0.00 (  0.00)	l1 6.7399 (6.7322)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.72it/s] 23%|##3       | 6/26 [00:00<00:00, 26.82it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.82it/s] 42%|####2     | 11/26 [00:00<00:00, 34.95it/s] 62%|######1   | 16/26 [00:00<00:00, 39.38it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.38it/s] 81%|########  | 21/26 [00:00<00:00, 41.85it/s]100%|##########| 26/26 [00:00<00:00, 44.07it/s]100%|##########| 26/26 [00:00<00:00, 35.85it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.46 (  0.46)	test_majacc   0.53 (  0.53)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.696 (0.694)	test_acc   0.51 (  0.53)	test_minacc   0.59 (  0.50)	test_majacc   0.50 (  0.53)	Loss_d 0.696 (0.694)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.59 (  0.50)	test_majacc_d   0.50 (  0.53)	test_corr_d  -0.08 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.694)	test_acc   0.54 (  0.53)	test_minacc   0.50 (  0.50)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.694)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.08 ( -0.04)
Test: [  26/  26]	Loss 0.699 (0.694)	test_acc   0.45 (  0.52)	test_minacc   0.46 (  0.49)	test_majacc   0.45 (  0.53)	Loss_d 0.699 (0.694)	test_acc_d   0.45 (  0.52)	test_minacc_d   0.46 (  0.49)	test_majacc_d   0.45 (  0.53)	test_corr_d  -0.02 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.93it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.54 (  0.54)	Loss_d 0.696 (0.696)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.54 (  0.54)	Loss_d 0.696 (0.696)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.14 (  0.14)
Overall Timing[ 24/  1]	epoch_time 0.0401 (0.0451)	validation_time 0.0003 (0.0007)	train_time 0.0397 (0.0443)
record: (train_acc, test_acc) (0.6380000115633011, 0.38100001215934753)
last accs (train_acc, test_acc) (0.5231000165343285, 0.46800002455711365)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.58it/s] 15%|#5        | 4/26 [00:00<00:01, 14.39it/s] 27%|##6       | 7/26 [00:00<00:00, 19.36it/s] 38%|###8      | 10/26 [00:00<00:00, 21.62it/s] 50%|#####     | 13/26 [00:00<00:00, 23.55it/s] 62%|######1   | 16/26 [00:00<00:00, 24.11it/s] 77%|#######6  | 20/26 [00:00<00:00, 26.38it/s] 92%|#########2| 24/26 [00:01<00:00, 28.09it/s]100%|##########| 26/26 [00:01<00:00, 22.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 200
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 200
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 200
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 200
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 200
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 200
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 200
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 200
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 200
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 200
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 200
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 200
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 200
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 200
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 200
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 200
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 200
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 200
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 200
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 200
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 200
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 200
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 200
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 200
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 200
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 200
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.15 (  1.15)	train_acc   0.48 (  0.54)	train_minacc   0.43 (  0.47)	train_majacc   0.49 (  0.55)	train_corr   0.00 (  0.00)	l1 6.7165 (6.7250)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.26it/s] 23%|##3       | 6/26 [00:00<00:00, 28.87it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.87it/s] 42%|####2     | 11/26 [00:00<00:00, 32.55it/s] 62%|######1   | 16/26 [00:00<00:00, 38.05it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.05it/s] 81%|########  | 21/26 [00:00<00:00, 40.68it/s]100%|##########| 26/26 [00:00<00:00, 43.18it/s]100%|##########| 26/26 [00:00<00:00, 35.56it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.46 (  0.46)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.55 (  0.55)	test_minacc   0.59 (  0.48)	test_majacc   0.54 (  0.57)	Loss_d 0.692 (0.691)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.59 (  0.48)	test_majacc_d   0.54 (  0.57)	test_corr_d   0.16 (  0.14)
Test: [  20/  26]	Loss 0.691 (0.691)	test_acc   0.56 (  0.55)	test_minacc   0.48 (  0.48)	test_majacc   0.57 (  0.57)	Loss_d 0.691 (0.691)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.18 (  0.14)
Test: [  26/  26]	Loss 0.694 (0.691)	test_acc   0.48 (  0.55)	test_minacc   0.43 (  0.47)	test_majacc   0.49 (  0.57)	Loss_d 0.694 (0.691)	test_acc_d   0.48 (  0.55)	test_minacc_d   0.43 (  0.47)	test_majacc_d   0.49 (  0.57)	test_corr_d   0.21 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.04it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.44 (  0.44)	test_minacc   0.42 (  0.42)	test_majacc   0.56 (  0.56)	Loss_d 0.696 (0.696)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.44 (  0.44)	test_minacc   0.42 (  0.42)	test_majacc   0.56 (  0.56)	Loss_d 0.696 (0.696)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.15 (  0.15)
Overall Timing[ 25/  1]	epoch_time 0.0452 (0.0451)	validation_time 0.0004 (0.0007)	train_time 0.0448 (0.0443)
record: (train_acc, test_acc) (0.6380000115633011, 0.38100001215934753)
last accs (train_acc, test_acc) (0.5511000080704689, 0.43700000643730164)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.01it/s] 12%|#1        | 3/26 [00:00<00:02, 10.27it/s] 23%|##3       | 6/26 [00:00<00:01, 17.16it/s] 35%|###4      | 9/26 [00:00<00:00, 20.71it/s] 46%|####6     | 12/26 [00:00<00:00, 23.34it/s] 58%|#####7    | 15/26 [00:00<00:00, 24.96it/s] 69%|######9   | 18/26 [00:00<00:00, 26.41it/s] 81%|########  | 21/26 [00:00<00:00, 27.24it/s] 96%|#########6| 25/26 [00:01<00:00, 28.14it/s]100%|##########| 26/26 [00:01<00:00, 22.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 200
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 200
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 200
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 200
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 200
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 200
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 200
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 200
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 200
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 200
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 200
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 200
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 200
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 200
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 200
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 200
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 200
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 200
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 200
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 200
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 200
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 200
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 200
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 200
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 200
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 200
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
final projection at end of training
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.15 (  1.15)	train_acc   0.47 (  0.54)	train_minacc   0.43 (  0.47)	train_majacc   0.48 (  0.55)	train_corr   0.00 (  0.00)	l1 6.7086 (6.7126)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.42it/s] 23%|##3       | 6/26 [00:00<00:00, 26.09it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.09it/s] 42%|####2     | 11/26 [00:00<00:00, 34.48it/s] 62%|######1   | 16/26 [00:00<00:00, 39.45it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.45it/s] 81%|########  | 21/26 [00:00<00:00, 38.66it/s]100%|##########| 26/26 [00:00<00:00, 41.88it/s]100%|##########| 26/26 [00:00<00:00, 33.90it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.46 (  0.46)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.55)	test_minacc   0.59 (  0.48)	test_majacc   0.54 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.59 (  0.48)	test_majacc_d   0.54 (  0.56)	test_corr_d   0.11 (  0.05)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.10 (  0.05)
Test: [  26/  26]	Loss 0.694 (0.692)	test_acc   0.47 (  0.55)	test_minacc   0.43 (  0.47)	test_majacc   0.48 (  0.56)	Loss_d 0.694 (0.692)	test_acc_d   0.47 (  0.55)	test_minacc_d   0.43 (  0.47)	test_majacc_d   0.48 (  0.56)	test_corr_d   0.16 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.36it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.04 (  0.04)
Overall Timing[ 26/  1]	epoch_time 0.0406 (0.0449)	validation_time 0.0004 (0.0007)	train_time 0.0401 (0.0442)
record: (train_acc, test_acc) (0.6380000115633011, 0.38100001215934753)
last accs (train_acc, test_acc) (0.5459000166356563, 0.4410000145435333)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.90it/s] 15%|#5        | 4/26 [00:00<00:01, 16.01it/s] 27%|##6       | 7/26 [00:00<00:00, 20.57it/s] 42%|####2     | 11/26 [00:00<00:00, 24.80it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.09it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.37it/s] 88%|########8 | 23/26 [00:00<00:00, 29.31it/s]100%|##########| 26/26 [00:01<00:00, 25.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 200
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 200
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 200
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 200
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 200
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 200
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 200
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 200
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 200
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 200
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 200
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 200
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 200
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 200
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 200
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 200
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 200
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 200
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 200
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 200
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 200
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 200
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 200
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 200
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 200
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 200
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
final projection at end of training
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.14 (  1.15)	train_acc   0.48 (  0.54)	train_minacc   0.43 (  0.47)	train_majacc   0.48 (  0.55)	train_corr   0.00 (  0.00)	l1 6.7027 (6.7055)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.43it/s] 23%|##3       | 6/26 [00:00<00:00, 24.38it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.38it/s] 42%|####2     | 11/26 [00:00<00:00, 33.18it/s] 62%|######1   | 16/26 [00:00<00:00, 38.22it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.22it/s] 81%|########  | 21/26 [00:00<00:00, 37.49it/s]100%|##########| 26/26 [00:00<00:00, 40.86it/s]100%|##########| 26/26 [00:00<00:00, 32.68it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.46 (  0.46)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.59 (  0.50)	test_majacc   0.55 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.59 (  0.50)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.11 (  0.03)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.55)	test_minacc   0.48 (  0.49)	test_majacc   0.55 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.07 (  0.03)
Test: [  26/  26]	Loss 0.694 (0.692)	test_acc   0.48 (  0.55)	test_minacc   0.43 (  0.48)	test_majacc   0.49 (  0.56)	Loss_d 0.694 (0.692)	test_acc_d   0.48 (  0.55)	test_minacc_d   0.43 (  0.48)	test_majacc_d   0.49 (  0.56)	test_corr_d   0.17 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.65it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.60 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.60 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.00 (  0.00)
Overall Timing[ 27/  1]	epoch_time 0.0414 (0.0448)	validation_time 0.0004 (0.0006)	train_time 0.0410 (0.0440)
record: (train_acc, test_acc) (0.6380000115633011, 0.38100001215934753)
last accs (train_acc, test_acc) (0.547000012755394, 0.46300002932548523)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.82it/s] 15%|#5        | 4/26 [00:00<00:01, 20.75it/s] 27%|##6       | 7/26 [00:00<00:00, 23.33it/s] 38%|###8      | 10/26 [00:00<00:00, 25.22it/s] 50%|#####     | 13/26 [00:00<00:00, 26.59it/s] 65%|######5   | 17/26 [00:00<00:00, 28.38it/s] 81%|########  | 21/26 [00:00<00:00, 29.27it/s] 96%|#########6| 25/26 [00:00<00:00, 29.21it/s]100%|##########| 26/26 [00:01<00:00, 25.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 200
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 200
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 200
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 200
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 200
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 200
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 200
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 200
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 200
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 200
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 200
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 200
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 200
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 200
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 200
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 200
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 200
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 200
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 200
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 200
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 200
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 200
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 200
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 200
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 200
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 200
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
final projection at end of training
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.14 (  1.14)	train_acc   0.48 (  0.55)	train_minacc   0.46 (  0.49)	train_majacc   0.48 (  0.56)	train_corr   0.00 (  0.00)	l1 6.6980 (6.7002)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.39it/s]  8%|7         | 2/26 [00:00<00:03,  6.62it/s] 27%|##6       | 7/26 [00:00<00:00, 21.44it/s]                                               27%|##6       | 7/26 [00:00<00:00, 21.44it/s] 46%|####6     | 12/26 [00:00<00:00, 30.16it/s] 65%|######5   | 17/26 [00:00<00:00, 35.55it/s]                                                65%|######5   | 17/26 [00:00<00:00, 35.55it/s] 85%|########4 | 22/26 [00:00<00:00, 35.99it/s]100%|##########| 26/26 [00:00<00:00, 29.77it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.49 (  0.49)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.61 (  0.53)	test_majacc   0.54 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.61 (  0.53)	test_majacc_d   0.54 (  0.55)	test_corr_d   0.11 (  0.02)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.55)	test_minacc   0.48 (  0.51)	test_majacc   0.55 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.48 (  0.51)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.06 (  0.02)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.55)	test_minacc   0.46 (  0.50)	test_majacc   0.49 (  0.56)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.55)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.49 (  0.56)	test_corr_d   0.18 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.11it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 28/  1]	epoch_time 0.0443 (0.0448)	validation_time 0.0003 (0.0006)	train_time 0.0440 (0.0440)
record: (train_acc, test_acc) (0.6380000115633011, 0.38100001215934753)
last accs (train_acc, test_acc) (0.5472000141143799, 0.48600003123283386)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.78it/s] 19%|#9        | 5/26 [00:00<00:00, 21.26it/s] 31%|###       | 8/26 [00:00<00:00, 24.53it/s] 42%|####2     | 11/26 [00:00<00:00, 26.26it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.51it/s] 65%|######5   | 17/26 [00:00<00:00, 27.88it/s] 81%|########  | 21/26 [00:00<00:00, 28.52it/s] 96%|#########6| 25/26 [00:00<00:00, 28.93it/s]100%|##########| 26/26 [00:01<00:00, 25.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 200
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 200
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 200
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 200
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 200
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 200
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 200
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 200
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 200
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 200
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 200
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 200
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 200
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 200
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 200
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 200
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 200
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 200
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 200
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 200
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 200
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 200
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 200
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 200
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 200
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 200
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
final projection at end of training
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.14 (  1.14)	train_acc   0.48 (  0.54)	train_minacc   0.46 (  0.51)	train_majacc   0.48 (  0.55)	train_corr   0.00 (  0.00)	l1 6.6941 (6.6960)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02,  8.91it/s] 27%|##6       | 7/26 [00:00<00:00, 23.67it/s]                                               27%|##6       | 7/26 [00:00<00:00, 23.67it/s] 46%|####6     | 12/26 [00:00<00:00, 31.73it/s] 65%|######5   | 17/26 [00:00<00:00, 36.45it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.45it/s] 85%|########4 | 22/26 [00:00<00:00, 37.14it/s]100%|##########| 26/26 [00:00<00:00, 32.38it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.47 (  0.47)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.59 (  0.53)	test_majacc   0.54 (  0.55)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.54 (  0.55)	test_corr_d   0.11 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.55)	test_minacc   0.50 (  0.52)	test_majacc   0.55 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.05 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.55)	test_minacc   0.46 (  0.52)	test_majacc   0.49 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.55)	test_minacc_d   0.46 (  0.52)	test_majacc_d   0.49 (  0.55)	test_corr_d   0.18 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.05it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 29/  1]	epoch_time 0.0455 (0.0448)	validation_time 0.0004 (0.0006)	train_time 0.0450 (0.0441)
record: (train_acc, test_acc) (0.6380000115633011, 0.38100001215934753)
last accs (train_acc, test_acc) (0.5485000151991845, 0.503000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.32it/s] 15%|#5        | 4/26 [00:00<00:01, 18.51it/s] 27%|##6       | 7/26 [00:00<00:00, 23.02it/s] 38%|###8      | 10/26 [00:00<00:00, 25.35it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.55it/s] 65%|######5   | 17/26 [00:00<00:00, 27.85it/s] 81%|########  | 21/26 [00:00<00:00, 29.08it/s] 96%|#########6| 25/26 [00:00<00:00, 29.38it/s]100%|##########| 26/26 [00:01<00:00, 25.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 200
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 200
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 200
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 200
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 200
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 200
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 200
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 200
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 200
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 200
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 200
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 200
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 200
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 200
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 200
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 200
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 200
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 200
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 200
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 200
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 200
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 200
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 200
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 200
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 200
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 200
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.14 (  1.14)	train_acc   0.49 (  0.55)	train_minacc   0.46 (  0.52)	train_majacc   0.50 (  0.55)	train_corr   0.00 (  0.00)	l1 6.6908 (6.6924)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.04it/s] 23%|##3       | 6/26 [00:00<00:00, 29.56it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.56it/s] 42%|####2     | 11/26 [00:00<00:00, 34.38it/s] 62%|######1   | 16/26 [00:00<00:00, 39.07it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.07it/s] 81%|########  | 21/26 [00:00<00:00, 39.43it/s]100%|##########| 26/26 [00:00<00:00, 42.07it/s]100%|##########| 26/26 [00:00<00:00, 34.56it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.47 (  0.47)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.59 (  0.54)	test_majacc   0.53 (  0.54)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.59 (  0.54)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.11 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.55)	test_minacc   0.48 (  0.53)	test_majacc   0.54 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.55)	test_minacc_d   0.48 (  0.53)	test_majacc_d   0.54 (  0.55)	test_corr_d   0.04 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.55)	test_minacc   0.46 (  0.52)	test_majacc   0.50 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.55)	test_minacc_d   0.46 (  0.52)	test_majacc_d   0.50 (  0.55)	test_corr_d   0.19 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.82it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 30/  1]	epoch_time 0.0433 (0.0447)	validation_time 0.0004 (0.0006)	train_time 0.0428 (0.0440)
record: (train_acc, test_acc) (0.6380000115633011, 0.38100001215934753)
last accs (train_acc, test_acc) (0.5455000127255917, 0.51500004529953)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.97it/s] 15%|#5        | 4/26 [00:00<00:01, 11.02it/s] 31%|###       | 8/26 [00:00<00:00, 18.03it/s] 42%|####2     | 11/26 [00:00<00:00, 21.37it/s] 58%|#####7    | 15/26 [00:00<00:00, 24.13it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.06it/s] 88%|########8 | 23/26 [00:01<00:00, 27.06it/s]100%|##########| 26/26 [00:01<00:00, 21.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 200
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 200
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 200
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 200
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 200
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 200
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 200
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 200
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 200
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 200
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 200
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 200
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 200
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 200
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 200
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 200
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 200
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 200
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 200
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 200
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 200
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 200
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 200
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 200
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 200
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 200
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
final projection at end of training
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.13 (  1.13)	train_acc   0.50 (  0.55)	train_minacc   0.46 (  0.52)	train_majacc   0.50 (  0.55)	train_corr   0.00 (  0.00)	l1 6.6880 (6.6894)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.93it/s] 27%|##6       | 7/26 [00:00<00:00, 30.89it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.89it/s] 46%|####6     | 12/26 [00:00<00:00, 36.90it/s] 65%|######5   | 17/26 [00:00<00:00, 36.93it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.93it/s] 85%|########4 | 22/26 [00:00<00:00, 40.02it/s]100%|##########| 26/26 [00:00<00:00, 34.59it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.59 (  0.54)	test_majacc   0.54 (  0.55)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.59 (  0.54)	test_majacc_d   0.54 (  0.55)	test_corr_d   0.10 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.55)	test_minacc   0.46 (  0.53)	test_majacc   0.54 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.55)	test_minacc_d   0.46 (  0.53)	test_majacc_d   0.54 (  0.55)	test_corr_d   0.04 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.55)	test_minacc   0.46 (  0.53)	test_majacc   0.51 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.55)	test_minacc_d   0.46 (  0.53)	test_majacc_d   0.51 (  0.55)	test_corr_d   0.19 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.05it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 31/  1]	epoch_time 0.0424 (0.0447)	validation_time 0.0003 (0.0006)	train_time 0.0421 (0.0440)
record: (train_acc, test_acc) (0.6380000115633011, 0.38100001215934753)
last accs (train_acc, test_acc) (0.5462000079154968, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:11,  2.19it/s] 19%|#9        | 5/26 [00:00<00:02, 10.41it/s] 35%|###4      | 9/26 [00:00<00:01, 16.31it/s] 46%|####6     | 12/26 [00:00<00:00, 19.36it/s] 58%|#####7    | 15/26 [00:00<00:00, 21.98it/s] 69%|######9   | 18/26 [00:01<00:00, 23.62it/s] 85%|########4 | 22/26 [00:01<00:00, 26.03it/s] 96%|#########6| 25/26 [00:01<00:00, 26.89it/s]100%|##########| 26/26 [00:01<00:00, 19.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 200
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 200
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 200
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 200
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 200
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 200
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 200
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 200
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 200
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 200
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 200
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 200
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 200
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 200
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 200
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 200
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 200
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 200
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 200
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 200
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 200
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 200
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 200
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 200
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 200
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 200
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
final projection at end of training
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.13 (  1.13)	train_acc   0.51 (  0.55)	train_minacc   0.49 (  0.53)	train_majacc   0.52 (  0.55)	train_corr   0.00 (  0.00)	l1 6.6855 (6.6867)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.95it/s] 19%|#9        | 5/26 [00:00<00:00, 26.09it/s]                                               19%|#9        | 5/26 [00:00<00:00, 26.09it/s] 42%|####2     | 11/26 [00:00<00:00, 36.89it/s] 65%|######5   | 17/26 [00:00<00:00, 40.38it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.38it/s] 85%|########4 | 22/26 [00:00<00:00, 42.82it/s]100%|##########| 26/26 [00:00<00:00, 36.75it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.50 (  0.50)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.55)	test_minacc   0.59 (  0.54)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.59 (  0.54)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.10 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.55)	test_minacc   0.50 (  0.54)	test_majacc   0.54 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.55)	test_minacc_d   0.50 (  0.54)	test_majacc_d   0.54 (  0.55)	test_corr_d   0.03 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.55)	test_minacc   0.49 (  0.53)	test_majacc   0.52 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.55)	test_minacc_d   0.49 (  0.53)	test_majacc_d   0.52 (  0.55)	test_corr_d   0.19 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.41it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 32/  1]	epoch_time 0.0481 (0.0448)	validation_time 0.0004 (0.0006)	train_time 0.0476 (0.0441)
record: (train_acc, test_acc) (0.6380000115633011, 0.38100001215934753)
last accs (train_acc, test_acc) (0.5455000165104866, 0.5240000486373901)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.27it/s] 15%|#5        | 4/26 [00:00<00:01, 17.41it/s] 27%|##6       | 7/26 [00:00<00:00, 22.38it/s] 38%|###8      | 10/26 [00:00<00:00, 24.90it/s] 54%|#####3    | 14/26 [00:00<00:00, 28.23it/s] 69%|######9   | 18/26 [00:00<00:00, 30.54it/s] 85%|########4 | 22/26 [00:00<00:00, 30.73it/s]100%|##########| 26/26 [00:00<00:00, 30.72it/s]100%|##########| 26/26 [00:01<00:00, 25.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 200
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 200
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 200
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 200
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 200
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 200
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 200
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 200
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 200
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 200
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 200
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 200
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 200
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 200
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 200
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 200
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 200
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 200
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 200
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 200
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 200
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 200
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 200
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 200
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 200
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 200
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
final projection at end of training
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.13 (  1.13)	train_acc   0.52 (  0.55)	train_minacc   0.49 (  0.53)	train_majacc   0.53 (  0.55)	train_corr   0.00 (  0.00)	l1 6.6832 (6.6843)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.88it/s] 31%|###       | 8/26 [00:00<00:00, 37.59it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.59it/s] 50%|#####     | 13/26 [00:00<00:00, 40.89it/s] 69%|######9   | 18/26 [00:00<00:00, 41.53it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.53it/s] 88%|########8 | 23/26 [00:00<00:00, 40.08it/s]100%|##########| 26/26 [00:00<00:00, 37.95it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.55)	test_minacc   0.59 (  0.55)	test_majacc   0.56 (  0.55)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.59 (  0.55)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.09 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.55)	test_minacc   0.46 (  0.54)	test_majacc   0.54 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.55)	test_minacc_d   0.46 (  0.54)	test_majacc_d   0.54 (  0.55)	test_corr_d   0.03 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.55)	test_minacc   0.49 (  0.54)	test_majacc   0.53 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.55)	test_minacc_d   0.49 (  0.54)	test_majacc_d   0.53 (  0.55)	test_corr_d   0.19 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.90it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 33/  1]	epoch_time 0.0440 (0.0447)	validation_time 0.0004 (0.0006)	train_time 0.0436 (0.0441)
record: (train_acc, test_acc) (0.6380000115633011, 0.38100001215934753)
last accs (train_acc, test_acc) (0.5471000158786774, 0.5240000486373901)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 21.57it/s] 23%|##3       | 6/26 [00:00<00:00, 25.57it/s] 35%|###4      | 9/26 [00:00<00:00, 26.86it/s] 50%|#####     | 13/26 [00:00<00:00, 28.45it/s] 65%|######5   | 17/26 [00:00<00:00, 29.34it/s] 81%|########  | 21/26 [00:00<00:00, 29.88it/s] 96%|#########6| 25/26 [00:00<00:00, 30.33it/s]100%|##########| 26/26 [00:00<00:00, 27.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 200
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 200
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 200
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 200
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 200
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 200
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 200
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 200
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 200
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 200
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 200
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 200
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 200
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 200
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 200
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 200
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 200
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 200
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 200
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 200
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 200
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 200
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 200
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 200
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 200
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 200
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
final projection at end of training
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.12 (  1.12)	train_acc   0.54 (  0.55)	train_minacc   0.49 (  0.54)	train_majacc   0.55 (  0.55)	train_corr   0.00 (  0.00)	l1 6.6812 (6.6821)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  3.08it/s] 23%|##3       | 6/26 [00:00<00:01, 16.88it/s]                                               23%|##3       | 6/26 [00:00<00:01, 16.88it/s] 42%|####2     | 11/26 [00:00<00:00, 25.79it/s] 62%|######1   | 16/26 [00:00<00:00, 32.06it/s]                                                62%|######1   | 16/26 [00:00<00:00, 32.06it/s] 81%|########  | 21/26 [00:00<00:00, 33.27it/s]100%|##########| 26/26 [00:00<00:00, 37.09it/s]100%|##########| 26/26 [00:00<00:00, 26.99it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.57 (  0.55)	test_minacc   0.59 (  0.55)	test_majacc   0.57 (  0.55)	Loss_d 0.692 (0.693)	test_acc_d   0.57 (  0.55)	test_minacc_d   0.59 (  0.55)	test_majacc_d   0.57 (  0.55)	test_corr_d   0.09 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.55)	test_minacc   0.46 (  0.54)	test_majacc   0.54 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.55)	test_minacc_d   0.46 (  0.54)	test_majacc_d   0.54 (  0.55)	test_corr_d   0.03 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.55)	test_minacc   0.49 (  0.54)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.49 (  0.54)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.19 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.63it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 34/  1]	epoch_time 0.0420 (0.0447)	validation_time 0.0004 (0.0006)	train_time 0.0415 (0.0440)
record: (train_acc, test_acc) (0.6380000115633011, 0.38100001215934753)
last accs (train_acc, test_acc) (0.5475000151991845, 0.5270000100135803)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.27it/s] 15%|#5        | 4/26 [00:00<00:01, 19.59it/s] 27%|##6       | 7/26 [00:00<00:00, 24.07it/s] 38%|###8      | 10/26 [00:00<00:00, 25.75it/s] 50%|#####     | 13/26 [00:00<00:00, 26.82it/s] 62%|######1   | 16/26 [00:00<00:00, 27.73it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.89it/s] 88%|########8 | 23/26 [00:00<00:00, 29.01it/s]100%|##########| 26/26 [00:01<00:00, 25.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 200
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 200
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 200
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 200
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 200
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 200
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 200
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 200
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 200
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 200
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 200
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 200
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 200
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 200
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 200
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 200
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 200
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 200
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 200
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 200
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 200
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 200
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 200
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 200
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 200
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 200
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.12 (  1.12)	train_acc   0.55 (  0.55)	train_minacc   0.49 (  0.54)	train_majacc   0.56 (  0.55)	train_corr   0.00 (  0.00)	l1 6.6793 (6.6802)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.98it/s]  8%|7         | 2/26 [00:00<00:03,  7.91it/s] 27%|##6       | 7/26 [00:00<00:00, 23.73it/s]                                               27%|##6       | 7/26 [00:00<00:00, 23.73it/s] 46%|####6     | 12/26 [00:00<00:00, 32.51it/s] 65%|######5   | 17/26 [00:00<00:00, 37.46it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.46it/s] 85%|########4 | 22/26 [00:00<00:00, 36.40it/s]100%|##########| 26/26 [00:00<00:00, 31.07it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.57 (  0.55)	test_minacc   0.61 (  0.56)	test_majacc   0.57 (  0.55)	Loss_d 0.692 (0.693)	test_acc_d   0.57 (  0.55)	test_minacc_d   0.61 (  0.56)	test_majacc_d   0.57 (  0.55)	test_corr_d   0.08 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.55)	test_minacc   0.46 (  0.54)	test_majacc   0.54 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.55)	test_minacc_d   0.46 (  0.54)	test_majacc_d   0.54 (  0.55)	test_corr_d   0.03 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.49 (  0.54)	test_majacc   0.56 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.49 (  0.54)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.19 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.41it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 35/  1]	epoch_time 0.0449 (0.0447)	validation_time 0.0004 (0.0006)	train_time 0.0444 (0.0440)
record: (train_acc, test_acc) (0.6380000115633011, 0.38100001215934753)
last accs (train_acc, test_acc) (0.5483000062704086, 0.5300000309944153)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.12it/s] 15%|#5        | 4/26 [00:00<00:01, 20.50it/s] 27%|##6       | 7/26 [00:00<00:00, 24.17it/s] 38%|###8      | 10/26 [00:00<00:00, 26.38it/s] 50%|#####     | 13/26 [00:00<00:00, 26.84it/s] 65%|######5   | 17/26 [00:00<00:00, 28.28it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.67it/s] 92%|#########2| 24/26 [00:00<00:00, 29.54it/s]100%|##########| 26/26 [00:01<00:00, 25.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 200
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 200
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 200
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 200
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 200
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 200
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 200
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 200
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 200
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 200
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 200
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 200
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 200
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 200
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 200
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 200
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 200
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 200
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 200
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 200
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 200
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 200
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 200
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 200
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 200
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 200
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
final projection at end of training
dim_v 512
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.12 (  1.12)	train_acc   0.55 (  0.55)	train_minacc   0.49 (  0.54)	train_majacc   0.56 (  0.55)	train_corr   0.00 (  0.00)	l1 6.6776 (6.6784)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.76it/s] 23%|##3       | 6/26 [00:00<00:00, 24.61it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.61it/s] 42%|####2     | 11/26 [00:00<00:00, 34.41it/s] 62%|######1   | 16/26 [00:00<00:00, 34.00it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.00it/s] 81%|########  | 21/26 [00:00<00:00, 37.66it/s]100%|##########| 26/26 [00:00<00:00, 40.80it/s]100%|##########| 26/26 [00:00<00:00, 33.51it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.57 (  0.55)	test_minacc   0.57 (  0.55)	test_majacc   0.57 (  0.55)	Loss_d 0.692 (0.693)	test_acc_d   0.57 (  0.55)	test_minacc_d   0.57 (  0.55)	test_majacc_d   0.57 (  0.55)	test_corr_d   0.08 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.55)	test_minacc   0.46 (  0.54)	test_majacc   0.54 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.55)	test_minacc_d   0.46 (  0.54)	test_majacc_d   0.54 (  0.55)	test_corr_d   0.03 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.49 (  0.54)	test_majacc   0.56 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.49 (  0.54)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.19 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.37it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 36/  1]	epoch_time 0.0490 (0.0448)	validation_time 0.0003 (0.0006)	train_time 0.0486 (0.0441)
record: (train_acc, test_acc) (0.6380000115633011, 0.38100001215934753)
last accs (train_acc, test_acc) (0.5489000132083893, 0.5320000052452087)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.41it/s] 15%|#5        | 4/26 [00:00<00:01, 15.23it/s] 27%|##6       | 7/26 [00:00<00:00, 20.42it/s] 38%|###8      | 10/26 [00:00<00:00, 23.04it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.21it/s] 69%|######9   | 18/26 [00:00<00:00, 27.93it/s] 85%|########4 | 22/26 [00:00<00:00, 29.15it/s]100%|##########| 26/26 [00:00<00:00, 30.05it/s]100%|##########| 26/26 [00:01<00:00, 23.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 200
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 200
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 200
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 200
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 200
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 200
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 200
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 200
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 200
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 200
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 200
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 200
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 200
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 200
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 200
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 200
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 200
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 200
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 200
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 200
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 200
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 200
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 200
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 200
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 200
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 200
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
final projection at end of training
dim_v 512
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.11 (  1.11)	train_acc   0.55 (  0.55)	train_minacc   0.49 (  0.54)	train_majacc   0.56 (  0.55)	train_corr   0.00 (  0.00)	l1 6.6761 (6.6767)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.24it/s] 23%|##3       | 6/26 [00:00<00:00, 28.40it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.40it/s] 42%|####2     | 11/26 [00:00<00:00, 35.98it/s] 62%|######1   | 16/26 [00:00<00:00, 41.07it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.07it/s] 81%|########  | 21/26 [00:00<00:00, 38.15it/s]100%|##########| 26/26 [00:00<00:00, 41.30it/s]100%|##########| 26/26 [00:00<00:00, 34.57it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.55)	test_minacc   0.57 (  0.56)	test_majacc   0.57 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.55)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.57 (  0.55)	test_corr_d   0.07 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.55)	test_minacc   0.46 (  0.55)	test_majacc   0.53 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.55)	test_minacc_d   0.46 (  0.55)	test_majacc_d   0.53 (  0.55)	test_corr_d   0.03 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.55)	test_minacc   0.49 (  0.54)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.49 (  0.54)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.19 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.43it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 37/  1]	epoch_time 0.0431 (0.0447)	validation_time 0.0004 (0.0006)	train_time 0.0426 (0.0441)
record: (train_acc, test_acc) (0.6380000115633011, 0.38100001215934753)
last accs (train_acc, test_acc) (0.5503000140786171, 0.5320000052452087)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02, 10.00it/s] 15%|#5        | 4/26 [00:00<00:01, 21.21it/s] 27%|##6       | 7/26 [00:00<00:00, 24.71it/s] 42%|####2     | 11/26 [00:00<00:00, 27.81it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.37it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.93it/s] 88%|########8 | 23/26 [00:00<00:00, 30.35it/s]100%|##########| 26/26 [00:00<00:00, 26.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 200
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 200
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 200
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 200
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 200
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 200
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 200
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 200
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 200
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 200
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 200
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 200
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 200
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 200
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 200
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 200
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 200
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 200
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 200
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 200
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 200
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 200
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 200
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 200
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 200
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 200
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
final projection at end of training
dim_v 512
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.11 (  1.11)	train_acc   0.55 (  0.55)	train_minacc   0.46 (  0.54)	train_majacc   0.56 (  0.56)	train_corr   0.00 (  0.00)	l1 6.6746 (6.6752)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 22.59it/s] 27%|##6       | 7/26 [00:00<00:00, 29.60it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.60it/s] 46%|####6     | 12/26 [00:00<00:00, 33.36it/s] 65%|######5   | 17/26 [00:00<00:00, 37.57it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.57it/s] 81%|########  | 21/26 [00:00<00:00, 36.99it/s]100%|##########| 26/26 [00:00<00:00, 34.65it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.55)	test_minacc   0.57 (  0.56)	test_majacc   0.57 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.55)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.57 (  0.55)	test_corr_d   0.07 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.55)	test_minacc   0.46 (  0.55)	test_majacc   0.53 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.55)	test_minacc_d   0.46 (  0.55)	test_majacc_d   0.53 (  0.55)	test_corr_d   0.03 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.55)	test_minacc   0.46 (  0.54)	test_majacc   0.56 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.46 (  0.54)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.18 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.16it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 38/  1]	epoch_time 0.0453 (0.0448)	validation_time 0.0003 (0.0006)	train_time 0.0450 (0.0441)
record: (train_acc, test_acc) (0.6380000115633011, 0.38100001215934753)
last accs (train_acc, test_acc) (0.5517000163197517, 0.527999997138977)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.80it/s] 15%|#5        | 4/26 [00:00<00:01, 16.94it/s] 27%|##6       | 7/26 [00:00<00:00, 21.12it/s] 38%|###8      | 10/26 [00:00<00:00, 24.21it/s] 50%|#####     | 13/26 [00:00<00:00, 25.97it/s] 62%|######1   | 16/26 [00:00<00:00, 27.25it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.34it/s] 88%|########8 | 23/26 [00:00<00:00, 28.62it/s]100%|##########| 26/26 [00:01<00:00, 24.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 200
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 200
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 200
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 200
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 200
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 200
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 200
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 200
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 200
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 200
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 200
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 200
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 200
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 200
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 200
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 200
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 200
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 200
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 200
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 200
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 200
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 200
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 200
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 200
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 200
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 200
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
final projection at end of training
dim_v 512
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.11 (  1.11)	train_acc   0.55 (  0.56)	train_minacc   0.46 (  0.54)	train_majacc   0.57 (  0.56)	train_corr   0.00 (  0.00)	l1 6.6732 (6.6738)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.29it/s] 27%|##6       | 7/26 [00:00<00:00, 30.12it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.12it/s] 46%|####6     | 12/26 [00:00<00:00, 36.67it/s] 65%|######5   | 17/26 [00:00<00:00, 40.19it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.19it/s] 85%|########4 | 22/26 [00:00<00:00, 38.60it/s]100%|##########| 26/26 [00:00<00:00, 35.65it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.55)	test_minacc   0.57 (  0.55)	test_majacc   0.57 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.55)	test_minacc_d   0.57 (  0.55)	test_majacc_d   0.57 (  0.55)	test_corr_d   0.07 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.55)	test_minacc   0.44 (  0.54)	test_majacc   0.54 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.55)	test_minacc_d   0.44 (  0.54)	test_majacc_d   0.54 (  0.55)	test_corr_d   0.03 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.46 (  0.54)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.46 (  0.54)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.18 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.34it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 39/  1]	epoch_time 0.0464 (0.0448)	validation_time 0.0004 (0.0006)	train_time 0.0459 (0.0442)
record: (train_acc, test_acc) (0.6380000115633011, 0.38100001215934753)
last accs (train_acc, test_acc) (0.5522000132203102, 0.5210000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.69it/s] 19%|#9        | 5/26 [00:00<00:01, 19.74it/s] 31%|###       | 8/26 [00:00<00:00, 23.57it/s] 46%|####6     | 12/26 [00:00<00:00, 26.93it/s] 62%|######1   | 16/26 [00:00<00:00, 28.62it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.25it/s] 88%|########8 | 23/26 [00:00<00:00, 29.25it/s]100%|##########| 26/26 [00:01<00:00, 25.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 200
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 200
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 200
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 200
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 200
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 200
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 200
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 200
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 200
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 200
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 200
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 200
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 200
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 200
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 200
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 200
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 200
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 200
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 200
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 200
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 200
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 200
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 200
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 200
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 200
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 200
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.10 (  1.10)	train_acc   0.56 (  0.56)	train_minacc   0.46 (  0.54)	train_majacc   0.58 (  0.56)	train_corr   0.00 (  0.00)	l1 6.6719 (6.6724)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.82it/s] 15%|#5        | 4/26 [00:00<00:01, 18.07it/s] 35%|###4      | 9/26 [00:00<00:00, 29.91it/s]                                               35%|###4      | 9/26 [00:00<00:00, 29.91it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.38it/s] 73%|#######3  | 19/26 [00:00<00:00, 39.81it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 39.81it/s] 92%|#########2| 24/26 [00:00<00:00, 39.55it/s]100%|##########| 26/26 [00:00<00:00, 32.89it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.55)	test_minacc   0.57 (  0.55)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.55)	test_minacc_d   0.57 (  0.55)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.06 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.55)	test_minacc   0.44 (  0.54)	test_majacc   0.54 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.55)	test_minacc_d   0.44 (  0.54)	test_majacc_d   0.54 (  0.56)	test_corr_d   0.04 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.55)	test_minacc   0.46 (  0.54)	test_majacc   0.58 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.46 (  0.54)	test_majacc_d   0.58 (  0.56)	test_corr_d   0.18 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.33it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 40/  1]	epoch_time 0.0418 (0.0447)	validation_time 0.0003 (0.0006)	train_time 0.0414 (0.0441)
record: (train_acc, test_acc) (0.6380000115633011, 0.38100001215934753)
last accs (train_acc, test_acc) (0.554100008547306, 0.5220000147819519)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.69it/s] 19%|#9        | 5/26 [00:00<00:00, 24.50it/s] 35%|###4      | 9/26 [00:00<00:00, 27.09it/s] 46%|####6     | 12/26 [00:00<00:00, 27.96it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.56it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.25it/s] 88%|########8 | 23/26 [00:00<00:00, 29.73it/s]100%|##########| 26/26 [00:00<00:00, 26.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 200
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 200
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 200
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 200
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 200
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 200
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 200
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 200
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 200
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 200
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 200
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 200
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 200
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 200
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 200
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 200
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 200
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 200
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 200
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 200
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 200
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 200
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 200
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 200
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 200
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 200
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
final projection at end of training
dim_v 512
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.10 (  1.10)	train_acc   0.56 (  0.56)	train_minacc   0.46 (  0.53)	train_majacc   0.58 (  0.56)	train_corr   0.00 (  0.00)	l1 6.6706 (6.6711)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.56it/s] 27%|##6       | 7/26 [00:00<00:00, 35.28it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.28it/s] 46%|####6     | 12/26 [00:00<00:00, 39.77it/s] 65%|######5   | 17/26 [00:00<00:00, 42.04it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.04it/s] 85%|########4 | 22/26 [00:00<00:00, 40.07it/s]100%|##########| 26/26 [00:00<00:00, 37.10it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.55)	test_minacc   0.59 (  0.56)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.55)	test_minacc_d   0.59 (  0.56)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.06 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.55)	test_minacc   0.42 (  0.54)	test_majacc   0.55 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.55)	test_minacc_d   0.42 (  0.54)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.04 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.46 (  0.54)	test_majacc   0.58 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.46 (  0.54)	test_majacc_d   0.58 (  0.56)	test_corr_d   0.18 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.94it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 41/  1]	epoch_time 0.0455 (0.0447)	validation_time 0.0004 (0.0006)	train_time 0.0450 (0.0441)
record: (train_acc, test_acc) (0.6380000115633011, 0.38100001215934753)
last accs (train_acc, test_acc) (0.5551000145077706, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.13it/s] 19%|#9        | 5/26 [00:00<00:00, 21.63it/s] 35%|###4      | 9/26 [00:00<00:00, 25.93it/s] 50%|#####     | 13/26 [00:00<00:00, 28.12it/s] 65%|######5   | 17/26 [00:00<00:00, 29.11it/s] 81%|########  | 21/26 [00:00<00:00, 29.31it/s] 92%|#########2| 24/26 [00:00<00:00, 29.30it/s]100%|##########| 26/26 [00:01<00:00, 25.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 200
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 200
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 200
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 200
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 200
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 200
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 200
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 200
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 200
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 200
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 200
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 200
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 200
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 200
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 200
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 200
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 200
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 200
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 200
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 200
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 200
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 200
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 200
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 200
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 200
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 200
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
final projection at end of training
dim_v 512
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.09 (  1.10)	train_acc   0.56 (  0.56)	train_minacc   0.46 (  0.53)	train_majacc   0.58 (  0.56)	train_corr   0.00 (  0.00)	l1 6.6695 (6.6699)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 18.62it/s] 31%|###       | 8/26 [00:00<00:00, 33.13it/s]                                               31%|###       | 8/26 [00:00<00:00, 33.13it/s] 54%|#####3    | 14/26 [00:00<00:00, 42.02it/s] 73%|#######3  | 19/26 [00:00<00:00, 42.50it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 42.50it/s] 92%|#########2| 24/26 [00:00<00:00, 44.04it/s]100%|##########| 26/26 [00:00<00:00, 36.11it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.58 (  0.55)	test_minacc   0.61 (  0.55)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.55)	test_minacc_d   0.61 (  0.55)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.06 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.55)	test_minacc   0.42 (  0.54)	test_majacc   0.55 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.55)	test_minacc_d   0.42 (  0.54)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.04 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.46 (  0.53)	test_majacc   0.58 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.46 (  0.53)	test_majacc_d   0.58 (  0.56)	test_corr_d   0.18 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.68it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 42/  1]	epoch_time 0.0453 (0.0448)	validation_time 0.0004 (0.0006)	train_time 0.0449 (0.0441)
record: (train_acc, test_acc) (0.6380000115633011, 0.38100001215934753)
last accs (train_acc, test_acc) (0.5551000098586083, 0.5160000324249268)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.85it/s] 15%|#5        | 4/26 [00:00<00:01, 14.62it/s] 27%|##6       | 7/26 [00:00<00:00, 19.70it/s] 38%|###8      | 10/26 [00:00<00:00, 22.68it/s] 50%|#####     | 13/26 [00:00<00:00, 24.82it/s] 62%|######1   | 16/26 [00:00<00:00, 26.40it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.12it/s] 88%|########8 | 23/26 [00:00<00:00, 28.15it/s]100%|##########| 26/26 [00:01<00:00, 23.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 200
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 200
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 200
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 200
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 200
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 200
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 200
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 200
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 200
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 200
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 200
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 200
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 200
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 200
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 200
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 200
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 200
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 200
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 200
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 200
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 200
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 200
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 200
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 200
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 200
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 200
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
final projection at end of training
dim_v 512
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.09 (  1.09)	train_acc   0.56 (  0.56)	train_minacc   0.46 (  0.53)	train_majacc   0.58 (  0.56)	train_corr   0.00 (  0.00)	l1 6.6684 (6.6688)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.55it/s] 19%|#9        | 5/26 [00:00<00:00, 24.76it/s] 38%|###8      | 10/26 [00:00<00:00, 33.65it/s]                                                38%|###8      | 10/26 [00:00<00:00, 33.65it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.75it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.75it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 38.75it/s] 96%|#########6| 25/26 [00:00<00:00, 41.01it/s]100%|##########| 26/26 [00:00<00:00, 33.86it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.58 (  0.55)	test_minacc   0.61 (  0.55)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.55)	test_minacc_d   0.61 (  0.55)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.05 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.56)	test_minacc   0.42 (  0.54)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.56)	test_minacc_d   0.42 (  0.54)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.04 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.46 (  0.53)	test_majacc   0.58 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.46 (  0.53)	test_majacc_d   0.58 (  0.56)	test_corr_d   0.18 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.17it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 43/  1]	epoch_time 0.0445 (0.0447)	validation_time 0.0003 (0.0006)	train_time 0.0441 (0.0441)
record: (train_acc, test_acc) (0.6380000115633011, 0.38100001215934753)
last accs (train_acc, test_acc) (0.5555000121593475, 0.5160000324249268)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.92it/s] 19%|#9        | 5/26 [00:00<00:01, 14.97it/s] 35%|###4      | 9/26 [00:00<00:00, 20.70it/s] 46%|####6     | 12/26 [00:00<00:00, 23.36it/s] 58%|#####7    | 15/26 [00:00<00:00, 24.73it/s] 69%|######9   | 18/26 [00:00<00:00, 25.95it/s] 81%|########  | 21/26 [00:00<00:00, 26.84it/s] 92%|#########2| 24/26 [00:01<00:00, 27.51it/s]100%|##########| 26/26 [00:01<00:00, 22.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 200
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 200
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 200
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 200
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 200
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 200
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 200
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 200
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 200
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 200
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 200
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 200
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 200
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 200
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 200
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 200
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 200
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 200
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 200
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 200
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 200
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 200
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 200
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 200
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 200
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 200
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
final projection at end of training
dim_v 512
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.09 (  1.09)	train_acc   0.56 (  0.56)	train_minacc   0.46 (  0.53)	train_majacc   0.58 (  0.57)	train_corr   0.00 (  0.00)	l1 6.6673 (6.6677)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.28it/s] 15%|#5        | 4/26 [00:00<00:01, 17.53it/s] 35%|###4      | 9/26 [00:00<00:00, 29.82it/s]                                               35%|###4      | 9/26 [00:00<00:00, 29.82it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.87it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.61it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 36.61it/s] 92%|#########2| 24/26 [00:00<00:00, 39.49it/s]100%|##########| 26/26 [00:00<00:00, 32.21it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.58 (  0.56)	test_minacc   0.61 (  0.55)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.56)	test_minacc_d   0.61 (  0.55)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.05 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.56)	test_minacc   0.42 (  0.53)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.56)	test_minacc_d   0.42 (  0.53)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.04 ( -0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.46 (  0.53)	test_majacc   0.58 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.46 (  0.53)	test_majacc_d   0.58 (  0.56)	test_corr_d   0.18 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.13it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 44/  1]	epoch_time 0.0428 (0.0447)	validation_time 0.0004 (0.0006)	train_time 0.0424 (0.0441)
record: (train_acc, test_acc) (0.6380000115633011, 0.38100001215934753)
last accs (train_acc, test_acc) (0.5561000107526779, 0.5160000324249268)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.52it/s] 15%|#5        | 4/26 [00:00<00:01, 19.88it/s] 27%|##6       | 7/26 [00:00<00:00, 23.68it/s] 38%|###8      | 10/26 [00:00<00:00, 25.93it/s] 50%|#####     | 13/26 [00:00<00:00, 27.08it/s] 62%|######1   | 16/26 [00:00<00:00, 27.64it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.15it/s] 88%|########8 | 23/26 [00:00<00:00, 28.80it/s]100%|##########| 26/26 [00:00<00:00, 28.77it/s]100%|##########| 26/26 [00:01<00:00, 25.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 200
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 200
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 200
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 200
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 200
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 200
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 200
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 200
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 200
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 200
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 200
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 200
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 200
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 200
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 200
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 200
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 200
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 200
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 200
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 200
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 200
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 200
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 200
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 200
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 200
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 200
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.08 (  1.09)	train_acc   0.56 (  0.56)	train_minacc   0.46 (  0.53)	train_majacc   0.58 (  0.57)	train_corr   0.00 (  0.00)	l1 6.6663 (6.6667)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02,  8.89it/s] 27%|##6       | 7/26 [00:00<00:00, 23.93it/s]                                               27%|##6       | 7/26 [00:00<00:00, 23.93it/s] 46%|####6     | 12/26 [00:00<00:00, 31.92it/s] 65%|######5   | 17/26 [00:00<00:00, 36.62it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.62it/s] 85%|########4 | 22/26 [00:00<00:00, 36.24it/s]100%|##########| 26/26 [00:00<00:00, 32.07it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.58 (  0.56)	test_minacc   0.59 (  0.55)	test_majacc   0.58 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.56)	test_minacc_d   0.59 (  0.55)	test_majacc_d   0.58 (  0.56)	test_corr_d   0.05 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.56)	test_minacc   0.40 (  0.54)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.56)	test_minacc_d   0.40 (  0.54)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.04 ( -0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.46 (  0.53)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.46 (  0.53)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.18 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.05it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 45/  1]	epoch_time 0.0444 (0.0447)	validation_time 0.0004 (0.0005)	train_time 0.0439 (0.0441)
record: (train_acc, test_acc) (0.6380000115633011, 0.38100001215934753)
last accs (train_acc, test_acc) (0.5573000108003616, 0.5139999985694885)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.31it/s] 12%|#1        | 3/26 [00:00<00:02,  8.07it/s] 23%|##3       | 6/26 [00:00<00:01, 14.47it/s] 35%|###4      | 9/26 [00:00<00:00, 18.89it/s] 46%|####6     | 12/26 [00:00<00:00, 21.65it/s] 58%|#####7    | 15/26 [00:00<00:00, 23.86it/s] 69%|######9   | 18/26 [00:00<00:00, 25.51it/s] 81%|########  | 21/26 [00:01<00:00, 26.30it/s] 92%|#########2| 24/26 [00:01<00:00, 27.38it/s]100%|##########| 26/26 [00:01<00:00, 20.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 200
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 200
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 200
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 200
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 200
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 200
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 200
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 200
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 200
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 200
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 200
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 200
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 200
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 200
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 200
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 200
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 200
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 200
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 200
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 200
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 200
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 200
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 200
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 200
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 200
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 200
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
final projection at end of training
dim_v 512
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.08 (  1.08)	train_acc   0.56 (  0.56)	train_minacc   0.46 (  0.53)	train_majacc   0.57 (  0.57)	train_corr   0.00 (  0.00)	l1 6.6654 (6.6657)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.29it/s] 31%|###       | 8/26 [00:00<00:00, 36.83it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.83it/s] 50%|#####     | 13/26 [00:00<00:00, 36.41it/s] 69%|######9   | 18/26 [00:00<00:00, 39.61it/s]                                                69%|######9   | 18/26 [00:00<00:00, 39.61it/s] 88%|########8 | 23/26 [00:00<00:00, 40.89it/s]100%|##########| 26/26 [00:00<00:00, 35.74it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.58 (  0.56)	test_minacc   0.59 (  0.55)	test_majacc   0.58 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.56)	test_minacc_d   0.59 (  0.55)	test_majacc_d   0.58 (  0.56)	test_corr_d   0.05 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.56)	test_minacc   0.40 (  0.54)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.56)	test_minacc_d   0.40 (  0.54)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.04 ( -0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.46 (  0.53)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.46 (  0.53)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.18 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.11it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 46/  1]	epoch_time 0.0457 (0.0447)	validation_time 0.0005 (0.0005)	train_time 0.0452 (0.0441)
record: (train_acc, test_acc) (0.6380000115633011, 0.38100001215934753)
last accs (train_acc, test_acc) (0.5582000165581703, 0.51500004529953)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.93it/s] 19%|#9        | 5/26 [00:00<00:00, 23.40it/s] 35%|###4      | 9/26 [00:00<00:00, 26.96it/s] 50%|#####     | 13/26 [00:00<00:00, 28.54it/s] 62%|######1   | 16/26 [00:00<00:00, 28.75it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.49it/s] 88%|########8 | 23/26 [00:00<00:00, 29.36it/s]100%|##########| 26/26 [00:00<00:00, 26.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 200
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 200
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 200
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 200
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 200
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 200
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 200
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 200
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 200
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 200
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 200
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 200
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 200
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 200
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 200
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 200
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 200
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 200
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 200
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 200
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 200
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 200
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 200
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 200
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 200
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 200
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
final projection at end of training
dim_v 512
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.08 (  1.08)	train_acc   0.56 (  0.56)	train_minacc   0.49 (  0.53)	train_majacc   0.57 (  0.57)	train_corr   0.00 (  0.00)	l1 6.6645 (6.6648)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.56it/s] 27%|##6       | 7/26 [00:00<00:00, 36.33it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.33it/s] 46%|####6     | 12/26 [00:00<00:00, 41.39it/s] 65%|######5   | 17/26 [00:00<00:00, 41.93it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.93it/s] 85%|########4 | 22/26 [00:00<00:00, 44.65it/s]100%|##########| 26/26 [00:00<00:00, 37.63it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.58 (  0.56)	test_minacc   0.59 (  0.55)	test_majacc   0.58 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.56)	test_minacc_d   0.59 (  0.55)	test_majacc_d   0.58 (  0.56)	test_corr_d   0.04 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.56)	test_minacc   0.42 (  0.54)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.56)	test_minacc_d   0.42 (  0.54)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.04 ( -0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.49 (  0.53)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.49 (  0.53)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.18 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.91it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 47/  1]	epoch_time 0.0424 (0.0447)	validation_time 0.0003 (0.0005)	train_time 0.0420 (0.0441)
record: (train_acc, test_acc) (0.6380000115633011, 0.38100001215934753)
last accs (train_acc, test_acc) (0.5599000151753426, 0.5160000324249268)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.44it/s] 15%|#5        | 4/26 [00:00<00:01, 12.75it/s] 31%|###       | 8/26 [00:00<00:00, 19.62it/s] 46%|####6     | 12/26 [00:00<00:00, 23.54it/s] 62%|######1   | 16/26 [00:00<00:00, 25.92it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.64it/s] 88%|########8 | 23/26 [00:00<00:00, 28.12it/s]100%|##########| 26/26 [00:01<00:00, 22.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 200
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 200
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 200
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 200
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 200
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 200
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 200
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 200
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 200
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 200
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 200
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 200
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 200
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 200
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 200
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 200
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 200
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 200
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 200
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 200
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 200
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 200
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 200
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 200
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 200
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 200
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
final projection at end of training
dim_v 512
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.07 (  1.07)	train_acc   0.57 (  0.57)	train_minacc   0.49 (  0.53)	train_majacc   0.58 (  0.57)	train_corr   0.00 (  0.00)	l1 6.6636 (6.6639)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.92it/s] 19%|#9        | 5/26 [00:00<00:00, 26.15it/s] 38%|###8      | 10/26 [00:00<00:00, 33.50it/s]                                                38%|###8      | 10/26 [00:00<00:00, 33.50it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.01it/s] 77%|#######6  | 20/26 [00:00<00:00, 40.97it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 40.97it/s] 96%|#########6| 25/26 [00:00<00:00, 41.90it/s]100%|##########| 26/26 [00:00<00:00, 35.13it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.51 (  0.51)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.58 (  0.56)	test_minacc   0.59 (  0.55)	test_majacc   0.58 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.56)	test_minacc_d   0.59 (  0.55)	test_majacc_d   0.58 (  0.56)	test_corr_d   0.04 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.56)	test_minacc   0.42 (  0.53)	test_majacc   0.56 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.56)	test_minacc_d   0.42 (  0.53)	test_majacc_d   0.56 (  0.57)	test_corr_d   0.05 ( -0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.56)	test_minacc   0.49 (  0.53)	test_majacc   0.58 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.56)	test_minacc_d   0.49 (  0.53)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.18 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.58it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 48/  1]	epoch_time 0.0407 (0.0446)	validation_time 0.0004 (0.0005)	train_time 0.0403 (0.0440)
record: (train_acc, test_acc) (0.6380000115633011, 0.38100001215934753)
last accs (train_acc, test_acc) (0.5610000120401383, 0.5170000195503235)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  3.04it/s] 15%|#5        | 4/26 [00:00<00:01, 11.18it/s] 27%|##6       | 7/26 [00:00<00:01, 16.73it/s] 42%|####2     | 11/26 [00:00<00:00, 21.68it/s] 54%|#####3    | 14/26 [00:00<00:00, 23.80it/s] 65%|######5   | 17/26 [00:00<00:00, 24.78it/s] 81%|########  | 21/26 [00:01<00:00, 26.41it/s] 92%|#########2| 24/26 [00:01<00:00, 27.26it/s]100%|##########| 26/26 [00:01<00:00, 21.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 200
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 200
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 200
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 200
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 200
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 200
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 200
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 200
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 200
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 200
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 200
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 200
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 200
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 200
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 200
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 200
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 200
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 200
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 200
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 200
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 200
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 200
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 200
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 200
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 200
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 200
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
final projection at end of training
dim_v 512
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.07 (  1.07)	train_acc   0.57 (  0.57)	train_minacc   0.49 (  0.53)	train_majacc   0.59 (  0.57)	train_corr   0.00 (  0.00)	l1 6.6628 (6.6631)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.33it/s] 27%|##6       | 7/26 [00:00<00:00, 30.52it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.52it/s] 50%|#####     | 13/26 [00:00<00:00, 38.51it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.07it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.07it/s] 92%|#########2| 24/26 [00:00<00:00, 42.09it/s]100%|##########| 26/26 [00:00<00:00, 36.04it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.51 (  0.51)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.58 (  0.56)	test_minacc   0.59 (  0.54)	test_majacc   0.58 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.56)	test_minacc_d   0.59 (  0.54)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.04 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.56)	test_minacc   0.40 (  0.53)	test_majacc   0.56 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.56)	test_minacc_d   0.40 (  0.53)	test_majacc_d   0.56 (  0.57)	test_corr_d   0.05 ( -0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.56)	test_minacc   0.49 (  0.53)	test_majacc   0.58 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.56)	test_minacc_d   0.49 (  0.53)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.18 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.65it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 49/  1]	epoch_time 0.0426 (0.0445)	validation_time 0.0004 (0.0005)	train_time 0.0421 (0.0440)
record: (train_acc, test_acc) (0.6380000115633011, 0.38100001215934753)
last accs (train_acc, test_acc) (0.5615000108480454, 0.5160000324249268)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.160 MB of 0.160 MB uploadedwandb: \ 0.160 MB of 0.160 MB uploadedwandb: | 0.160 MB of 0.160 MB uploadedwandb: / 0.160 MB of 0.160 MB uploadedwandb: - 0.160 MB of 0.160 MB uploadedwandb: \ 0.160 MB of 0.160 MB uploadedwandb: | 0.160 MB of 0.160 MB uploadedwandb: / 0.160 MB of 0.160 MB uploadedwandb: - 0.160 MB of 0.160 MB uploadedwandb: \ 0.160 MB of 0.160 MB uploadedwandb: | 0.160 MB of 0.160 MB uploadedwandb: / 0.160 MB of 0.160 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmp1kw2l2v3'
wandb: ERROR Internal wandb error: file data was not synced
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_215729-23epjf0j
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/23epjf0j
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=200, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=5, fraction_z=0.99)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1210
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6018, 3, 32, 32) (5982, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:44,  1.79s/it] 19%|#9        | 5/26 [00:01<00:06,  3.40it/s] 31%|###       | 8/26 [00:02<00:03,  5.89it/s] 42%|####2     | 11/26 [00:02<00:01,  8.66it/s] 54%|#####3    | 14/26 [00:02<00:01, 11.64it/s] 65%|######5   | 17/26 [00:02<00:00, 14.54it/s] 81%|########  | 21/26 [00:02<00:00, 18.58it/s] 96%|#########6| 25/26 [00:02<00:00, 21.85it/s]100%|##########| 26/26 [00:02<00:00,  8.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [0][  26/  26]	Loss 10.386 (12.754)	train_nll   0.39 (  0.56)	train_penalty   0.04 (  0.23)	weight_norm  10.00 ( 12.20)	train_acc   0.86 (  0.78)	train_minacc   0.00 (  0.12)	train_majacc   0.99 (  0.90)	train_corr   0.00 (  0.00)	l1 7.4052 (7.7578)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.29it/s] 23%|##3       | 6/26 [00:00<00:00, 28.24it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.24it/s] 42%|####2     | 11/26 [00:00<00:00, 35.73it/s] 62%|######1   | 16/26 [00:00<00:00, 36.18it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.18it/s] 81%|########  | 21/26 [00:00<00:00, 39.15it/s]100%|##########| 26/26 [00:00<00:00, 42.03it/s]100%|##########| 26/26 [00:00<00:00, 33.99it/s]
Test: [   0/  26]	Loss 0.435 (0.435)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.435 (0.435)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.404 (0.429)	test_acc   0.86 (  0.84)	test_minacc   0.05 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.404 (0.429)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.05 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.446 (0.417)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.446 (0.417)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.384 (0.416)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.384 (0.416)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.54it/s]100%|##########| 1/1 [00:00<00:00,  2.54it/s]
Test: [  0/  1]	Loss 1.709 (1.709)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.709 (1.709)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.709 (1.709)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.709 (1.709)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/196/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0807 (0.0807)	validation_time 0.0067 (0.0067)	train_time 0.0720 (0.0720)
record: (train_acc, test_acc) (0.8460000211596489, 0.11600000411272049)
last accs (train_acc, test_acc) (0.8460000211596489, 0.11600000411272049)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.70it/s] 19%|#9        | 5/26 [00:00<00:01, 16.89it/s] 35%|###4      | 9/26 [00:00<00:00, 22.80it/s] 50%|#####     | 13/26 [00:00<00:00, 25.77it/s] 65%|######5   | 17/26 [00:00<00:00, 27.44it/s] 81%|########  | 21/26 [00:00<00:00, 28.51it/s] 96%|#########6| 25/26 [00:00<00:00, 29.20it/s]100%|##########| 26/26 [00:01<00:00, 24.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [1][  26/  26]	Loss 5.554 (7.663)	train_nll   0.38 (  0.42)	train_penalty   0.04 (  0.06)	weight_norm   5.18 (  7.25)	train_acc   0.87 (  0.85)	train_minacc   0.00 (  0.01)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 7.1058 (7.4493)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 10.99it/s] 27%|##6       | 7/26 [00:00<00:00, 27.01it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.01it/s] 46%|####6     | 12/26 [00:00<00:00, 34.90it/s] 65%|######5   | 17/26 [00:00<00:00, 39.20it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.20it/s] 85%|########4 | 22/26 [00:00<00:00, 39.52it/s]100%|##########| 26/26 [00:00<00:00, 34.43it/s]
Test: [   0/  26]	Loss 0.422 (0.422)	test_acc   0.84 (  0.84)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.422 (0.422)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.387 (0.411)	test_acc   0.86 (  0.84)	test_minacc   0.04 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.387 (0.411)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.04 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.96)
Test: [  20/  26]	Loss 0.426 (0.401)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.426 (0.401)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.96)
Test: [  26/  26]	Loss 0.363 (0.400)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.363 (0.400)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.10it/s]
Test: [  0/  1]	Loss 1.611 (1.611)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.611 (1.611)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  1/  1]	Loss 1.611 (1.611)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.611 (1.611)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Overall Timing[  1/  1]	epoch_time 0.0428 (0.0617)	validation_time 0.0004 (0.0035)	train_time 0.0424 (0.0572)
record: (train_acc, test_acc) (0.8460000211596489, 0.11600000411272049)
last accs (train_acc, test_acc) (0.8467000259757042, 0.1120000034570694)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.75it/s] 19%|#9        | 5/26 [00:00<00:01, 20.95it/s] 35%|###4      | 9/26 [00:00<00:00, 25.21it/s] 50%|#####     | 13/26 [00:00<00:00, 27.46it/s] 65%|######5   | 17/26 [00:00<00:00, 28.65it/s] 81%|########  | 21/26 [00:00<00:00, 29.31it/s] 96%|#########6| 25/26 [00:00<00:00, 29.66it/s]100%|##########| 26/26 [00:01<00:00, 25.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [2][  26/  26]	Loss 3.339 (4.309)	train_nll   0.36 (  0.40)	train_penalty   0.03 (  0.05)	weight_norm   2.98 (  3.91)	train_acc   0.87 (  0.85)	train_minacc   0.00 (  0.04)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.9746 (6.5863)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.67it/s] 27%|##6       | 7/26 [00:00<00:00, 28.96it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.96it/s] 46%|####6     | 12/26 [00:00<00:00, 36.47it/s] 65%|######5   | 17/26 [00:00<00:00, 40.54it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.54it/s] 85%|########4 | 22/26 [00:00<00:00, 39.73it/s]100%|##########| 26/26 [00:00<00:00, 35.79it/s]
Test: [   0/  26]	Loss 0.429 (0.429)	test_acc   0.84 (  0.84)	test_minacc   0.03 (  0.03)	test_majacc   0.98 (  0.98)	Loss_d 0.429 (0.429)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.392 (0.414)	test_acc   0.86 (  0.84)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.392 (0.414)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.95)
Test: [  20/  26]	Loss 0.430 (0.402)	test_acc   0.83 (  0.84)	test_minacc   0.03 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.430 (0.402)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.03 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.95)
Test: [  26/  26]	Loss 0.348 (0.401)	test_acc   0.87 (  0.84)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.348 (0.401)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.74it/s]
Test: [  0/  1]	Loss 1.811 (1.811)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.811 (1.811)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Test: [  1/  1]	Loss 1.811 (1.811)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.811 (1.811)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Overall Timing[  2/  1]	epoch_time 0.0439 (0.0558)	validation_time 0.0005 (0.0025)	train_time 0.0434 (0.0526)
record: (train_acc, test_acc) (0.8460000211596489, 0.11600000411272049)
last accs (train_acc, test_acc) (0.8445000251531601, 0.11600000411272049)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.55it/s] 15%|#5        | 4/26 [00:00<00:01, 14.08it/s] 27%|##6       | 7/26 [00:00<00:00, 19.73it/s] 42%|####2     | 11/26 [00:00<00:00, 23.91it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.03it/s] 69%|######9   | 18/26 [00:00<00:00, 26.96it/s] 85%|########4 | 22/26 [00:00<00:00, 28.32it/s]100%|##########| 26/26 [00:01<00:00, 29.26it/s]100%|##########| 26/26 [00:01<00:00, 24.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [3][  26/  26]	Loss 2.235 (2.754)	train_nll   0.36 (  0.40)	train_penalty   0.03 (  0.05)	weight_norm   1.87 (  2.36)	train_acc   0.87 (  0.84)	train_minacc   0.00 (  0.04)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.1413 (5.5018)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 36.30it/s] 31%|###       | 8/26 [00:00<00:00, 37.78it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.78it/s] 50%|#####     | 13/26 [00:00<00:00, 42.38it/s] 69%|######9   | 18/26 [00:00<00:00, 43.39it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.39it/s] 88%|########8 | 23/26 [00:00<00:00, 40.16it/s]100%|##########| 26/26 [00:00<00:00, 38.63it/s]
Test: [   0/  26]	Loss 0.411 (0.411)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.411 (0.411)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.393 (0.407)	test_acc   0.85 (  0.84)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.393 (0.407)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.414 (0.397)	test_acc   0.83 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.414 (0.397)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.350 (0.395)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.350 (0.395)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.00it/s]
Test: [  0/  1]	Loss 1.708 (1.708)	test_acc   0.11 (  0.11)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.708 (1.708)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Test: [  1/  1]	Loss 1.708 (1.708)	test_acc   0.11 (  0.11)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.708 (1.708)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Overall Timing[  3/  1]	epoch_time 0.0441 (0.0529)	validation_time 0.0004 (0.0020)	train_time 0.0436 (0.0504)
record: (train_acc, test_acc) (0.8460000211596489, 0.11600000411272049)
last accs (train_acc, test_acc) (0.8480000237822533, 0.11400000751018524)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.96it/s] 19%|#9        | 5/26 [00:00<00:00, 22.22it/s] 35%|###4      | 9/26 [00:00<00:00, 26.24it/s] 50%|#####     | 13/26 [00:00<00:00, 28.05it/s] 65%|######5   | 17/26 [00:00<00:00, 29.21it/s] 81%|########  | 21/26 [00:00<00:00, 30.27it/s] 96%|#########6| 25/26 [00:00<00:00, 30.90it/s]100%|##########| 26/26 [00:00<00:00, 27.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [4][  26/  26]	Loss 1.544 (1.892)	train_nll   0.33 (  0.38)	train_penalty   0.03 (  0.04)	weight_norm   1.21 (  1.51)	train_acc   0.87 (  0.85)	train_minacc   0.03 (  0.06)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 5.0421 (5.0876)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.37it/s] 23%|##3       | 6/26 [00:00<00:00, 21.56it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.56it/s] 42%|####2     | 11/26 [00:00<00:00, 30.35it/s] 62%|######1   | 16/26 [00:00<00:00, 36.00it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.00it/s] 81%|########  | 21/26 [00:00<00:00, 34.69it/s]100%|##########| 26/26 [00:00<00:00, 30.70it/s]
Test: [   0/  26]	Loss 0.387 (0.387)	test_acc   0.85 (  0.85)	test_minacc   0.17 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 0.387 (0.387)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.368 (0.375)	test_acc   0.85 (  0.84)	test_minacc   0.09 (  0.09)	test_majacc   0.98 (  0.98)	Loss_d 0.368 (0.375)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.93)
Test: [  20/  26]	Loss 0.393 (0.369)	test_acc   0.84 (  0.85)	test_minacc   0.08 (  0.09)	test_majacc   0.99 (  0.98)	Loss_d 0.393 (0.369)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.08 (  0.09)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  26/  26]	Loss 0.311 (0.367)	test_acc   0.88 (  0.85)	test_minacc   0.12 (  0.09)	test_majacc   0.99 (  0.98)	Loss_d 0.311 (0.367)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.12 (  0.09)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.94 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.32it/s]
Test: [  0/  1]	Loss 1.642 (1.642)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 1.642 (1.642)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.85 (  0.85)
Test: [  1/  1]	Loss 1.642 (1.642)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 1.642 (1.642)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.85 (  0.85)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/196/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0461 (0.0515)	validation_time 0.0004 (0.0017)	train_time 0.0457 (0.0494)
record: (train_acc, test_acc) (0.8493000252842903, 0.17100000381469727)
last accs (train_acc, test_acc) (0.8493000252842903, 0.17100000381469727)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.69it/s] 19%|#9        | 5/26 [00:00<00:01, 19.74it/s] 35%|###4      | 9/26 [00:00<00:00, 24.30it/s] 50%|#####     | 13/26 [00:00<00:00, 26.30it/s] 65%|######5   | 17/26 [00:00<00:00, 27.95it/s] 81%|########  | 21/26 [00:00<00:00, 28.88it/s] 96%|#########6| 25/26 [00:00<00:00, 29.72it/s]100%|##########| 26/26 [00:01<00:00, 25.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [5][  26/  26]	Loss 1.122 (1.349)	train_nll   0.32 (  0.36)	train_penalty   0.02 (  0.03)	weight_norm   0.81 (  0.99)	train_acc   0.87 (  0.85)	train_minacc   0.00 (  0.08)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 6.2001 (5.4152)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.85it/s] 19%|#9        | 5/26 [00:00<00:00, 24.88it/s] 38%|###8      | 10/26 [00:00<00:00, 34.90it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.90it/s] 58%|#####7    | 15/26 [00:00<00:00, 39.52it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.43it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 38.43it/s] 96%|#########6| 25/26 [00:00<00:00, 40.78it/s]100%|##########| 26/26 [00:00<00:00, 34.97it/s]
Test: [   0/  26]	Loss 0.391 (0.391)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.391 (0.391)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.360 (0.375)	test_acc   0.85 (  0.84)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.360 (0.375)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.93)
Test: [  20/  26]	Loss 0.384 (0.369)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   0.99 (  1.00)	Loss_d 0.384 (0.369)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.93 (  0.93)
Test: [  26/  26]	Loss 0.303 (0.367)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.303 (0.367)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.29it/s]
Test: [  0/  1]	Loss 1.651 (1.651)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 1.651 (1.651)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.84 (  0.84)
Test: [  1/  1]	Loss 1.651 (1.651)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 1.651 (1.651)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.84 (  0.84)
Overall Timing[  5/  1]	epoch_time 0.0448 (0.0504)	validation_time 0.0004 (0.0015)	train_time 0.0443 (0.0486)
record: (train_acc, test_acc) (0.8493000252842903, 0.17100000381469727)
last accs (train_acc, test_acc) (0.8493000248670578, 0.14000000059604645)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.55it/s] 19%|#9        | 5/26 [00:00<00:01, 21.00it/s] 35%|###4      | 9/26 [00:00<00:00, 25.32it/s] 50%|#####     | 13/26 [00:00<00:00, 27.60it/s] 65%|######5   | 17/26 [00:00<00:00, 28.56it/s] 81%|########  | 21/26 [00:00<00:00, 29.45it/s] 96%|#########6| 25/26 [00:00<00:00, 30.28it/s]100%|##########| 26/26 [00:00<00:00, 26.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 200
penalty weights 0.0
final projection at end of training
dim_v 512
Epoch: [6][  26/  26]	Loss 0.860 (1.012)	train_nll   0.32 (  0.35)	train_penalty   0.03 (  0.03)	weight_norm   0.54 (  0.66)	train_acc   0.87 (  0.85)	train_minacc   0.00 (  0.12)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 7.3123 (6.8167)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.28it/s] 27%|##6       | 7/26 [00:00<00:00, 35.53it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.53it/s] 46%|####6     | 12/26 [00:00<00:00, 40.65it/s] 65%|######5   | 17/26 [00:00<00:00, 39.24it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.24it/s] 85%|########4 | 22/26 [00:00<00:00, 41.90it/s]100%|##########| 26/26 [00:00<00:00, 36.74it/s]
Test: [   0/  26]	Loss 0.374 (0.374)	test_acc   0.85 (  0.85)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.374 (0.374)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.359 (0.367)	test_acc   0.85 (  0.84)	test_minacc   0.04 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.359 (0.367)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.04 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.93)
Test: [  20/  26]	Loss 0.369 (0.359)	test_acc   0.83 (  0.85)	test_minacc   0.03 (  0.08)	test_majacc   0.99 (  0.98)	Loss_d 0.369 (0.359)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.03 (  0.08)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.94 (  0.93)
Test: [  26/  26]	Loss 0.311 (0.357)	test_acc   0.88 (  0.85)	test_minacc   0.06 (  0.09)	test_majacc   1.00 (  0.98)	Loss_d 0.311 (0.357)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.06 (  0.09)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.95 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.19it/s]
Test: [  0/  1]	Loss 1.660 (1.660)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.97 (  0.97)	Loss_d 1.660 (1.660)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.87 (  0.87)
Test: [  1/  1]	Loss 1.660 (1.660)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.97 (  0.97)	Loss_d 1.660 (1.660)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.87 (  0.87)
Overall Timing[  6/  1]	epoch_time 0.0438 (0.0494)	validation_time 0.0003 (0.0013)	train_time 0.0434 (0.0478)
record: (train_acc, test_acc) (0.8493000252842903, 0.17100000381469727)
last accs (train_acc, test_acc) (0.8496000273823738, 0.15700000524520874)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.70it/s] 19%|#9        | 5/26 [00:00<00:00, 22.19it/s] 35%|###4      | 9/26 [00:00<00:00, 26.09it/s] 50%|#####     | 13/26 [00:00<00:00, 27.93it/s] 65%|######5   | 17/26 [00:00<00:00, 28.84it/s] 81%|########  | 21/26 [00:00<00:00, 29.53it/s] 96%|#########6| 25/26 [00:00<00:00, 30.05it/s]100%|##########| 26/26 [00:00<00:00, 26.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [7][  26/  26]	Loss 0.005 (0.577)	train_nll   0.45 (  0.37)	train_penalty   0.00 (  0.02)	weight_norm   0.41 (  0.46)	train_acc   0.78 (  0.83)	train_minacc   0.69 (  0.27)	train_majacc   0.80 (  0.93)	train_corr   0.00 (  0.00)	l1 8.8072 (8.2413)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.77it/s] 19%|#9        | 5/26 [00:00<00:00, 21.57it/s] 38%|###8      | 10/26 [00:00<00:00, 31.63it/s]                                                38%|###8      | 10/26 [00:00<00:00, 31.63it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.67it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.29it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 36.29it/s] 96%|#########6| 25/26 [00:00<00:00, 39.48it/s]100%|##########| 26/26 [00:00<00:00, 32.81it/s]
Test: [   0/  26]	Loss 0.610 (0.610)	test_acc   0.67 (  0.67)	test_minacc   0.63 (  0.63)	test_majacc   0.67 (  0.67)	Loss_d 0.610 (0.610)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.37 (  0.37)
Test: [  10/  26]	Loss 0.597 (0.571)	test_acc   0.65 (  0.68)	test_minacc   0.68 (  0.73)	test_majacc   0.64 (  0.68)	Loss_d 0.597 (0.571)	test_acc_d   0.65 (  0.68)	test_minacc_d   0.68 (  0.73)	test_majacc_d   0.64 (  0.68)	test_corr_d   0.38 (  0.37)
Test: [  20/  26]	Loss 0.587 (0.567)	test_acc   0.66 (  0.69)	test_minacc   0.83 (  0.75)	test_majacc   0.62 (  0.67)	Loss_d 0.587 (0.567)	test_acc_d   0.66 (  0.69)	test_minacc_d   0.83 (  0.75)	test_majacc_d   0.62 (  0.67)	test_corr_d   0.26 (  0.37)
Test: [  26/  26]	Loss 0.529 (0.567)	test_acc   0.72 (  0.69)	test_minacc   0.72 (  0.75)	test_majacc   0.72 (  0.68)	Loss_d 0.529 (0.567)	test_acc_d   0.72 (  0.69)	test_minacc_d   0.72 (  0.75)	test_majacc_d   0.72 (  0.68)	test_corr_d   0.47 (  0.37)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.79it/s]
Test: [  0/  1]	Loss 0.706 (0.706)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.70 (  0.70)	Loss_d 0.706 (0.706)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.70 (  0.70)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.706 (0.706)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.70 (  0.70)	Loss_d 0.706 (0.706)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.70 (  0.70)	test_corr_d  -0.17 ( -0.17)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/196/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0434 (0.0487)	validation_time 0.0004 (0.0012)	train_time 0.0430 (0.0472)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.25it/s]  8%|7         | 2/26 [00:00<00:02,  9.66it/s] 19%|#9        | 5/26 [00:00<00:01, 18.74it/s] 35%|###4      | 9/26 [00:00<00:00, 24.00it/s] 50%|#####     | 13/26 [00:00<00:00, 26.45it/s] 65%|######5   | 17/26 [00:00<00:00, 27.63it/s] 81%|########  | 21/26 [00:00<00:00, 28.60it/s] 96%|#########6| 25/26 [00:00<00:00, 29.65it/s]100%|##########| 26/26 [00:01<00:00, 24.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [8][  26/  26]	Loss 0.000 (0.001)	train_nll   0.69 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.43)	train_acc   0.51 (  0.59)	train_minacc   0.72 (  0.76)	train_majacc   0.48 (  0.55)	train_corr   0.00 (  0.00)	l1 8.0498 (8.3208)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.78it/s] 15%|#5        | 4/26 [00:00<00:01, 18.57it/s] 35%|###4      | 9/26 [00:00<00:00, 32.00it/s]                                               35%|###4      | 9/26 [00:00<00:00, 32.00it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.53it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 38.53it/s] 81%|########  | 21/26 [00:00<00:00, 42.20it/s]100%|##########| 26/26 [00:00<00:00, 43.93it/s]100%|##########| 26/26 [00:00<00:00, 35.80it/s]
Test: [   0/  26]	Loss 0.698 (0.698)	test_acc   0.51 (  0.51)	test_minacc   0.66 (  0.66)	test_majacc   0.48 (  0.48)	Loss_d 0.698 (0.698)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.07 ( -0.07)
Test: [  10/  26]	Loss 0.699 (0.694)	test_acc   0.50 (  0.52)	test_minacc   0.72 (  0.71)	test_majacc   0.47 (  0.48)	Loss_d 0.699 (0.694)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.72 (  0.71)	test_majacc_d   0.47 (  0.48)	test_corr_d  -0.06 ( -0.06)
Test: [  20/  26]	Loss 0.693 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.75 (  0.71)	test_majacc   0.47 (  0.48)	Loss_d 0.693 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.75 (  0.71)	test_majacc_d   0.47 (  0.48)	test_corr_d  -0.09 ( -0.06)
Test: [  26/  26]	Loss 0.695 (0.694)	test_acc   0.48 (  0.52)	test_minacc   0.72 (  0.71)	test_majacc   0.44 (  0.48)	Loss_d 0.695 (0.694)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.72 (  0.71)	test_majacc_d   0.44 (  0.48)	test_corr_d  -0.04 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.45it/s]
Test: [  0/  1]	Loss 0.678 (0.678)	test_acc   0.65 (  0.65)	test_minacc   0.67 (  0.67)	test_majacc   0.50 (  0.50)	Loss_d 0.678 (0.678)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.678 (0.678)	test_acc   0.65 (  0.65)	test_minacc   0.67 (  0.67)	test_majacc   0.50 (  0.50)	Loss_d 0.678 (0.678)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.25 ( -0.25)
Overall Timing[  8/  1]	epoch_time 0.0437 (0.0481)	validation_time 0.0004 (0.0011)	train_time 0.0433 (0.0468)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.515700009971857, 0.6510000228881836)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.84it/s] 19%|#9        | 5/26 [00:00<00:01, 12.37it/s] 35%|###4      | 9/26 [00:00<00:00, 18.61it/s] 50%|#####     | 13/26 [00:00<00:00, 22.53it/s] 65%|######5   | 17/26 [00:00<00:00, 25.13it/s] 81%|########  | 21/26 [00:00<00:00, 27.11it/s] 96%|#########6| 25/26 [00:01<00:00, 28.34it/s]100%|##########| 26/26 [00:01<00:00, 21.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [9][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.48 (  0.50)	train_minacc   0.69 (  0.60)	train_majacc   0.45 (  0.48)	train_corr   0.00 (  0.00)	l1 7.9326 (7.9707)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.82it/s] 12%|#1        | 3/26 [00:00<00:02,  9.74it/s] 31%|###       | 8/26 [00:00<00:00, 23.28it/s]                                               31%|###       | 8/26 [00:00<00:00, 23.28it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.85it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.03it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.03it/s] 92%|#########2| 24/26 [00:00<00:00, 39.40it/s]100%|##########| 26/26 [00:00<00:00, 30.43it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.50 (  0.50)	test_minacc   0.58 (  0.58)	test_majacc   0.49 (  0.49)	Loss_d 0.687 (0.687)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.13 (  0.13)
Test: [  10/  26]	Loss 0.686 (0.685)	test_acc   0.51 (  0.50)	test_minacc   0.63 (  0.63)	test_majacc   0.49 (  0.48)	Loss_d 0.686 (0.685)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.49 (  0.48)	test_corr_d   0.17 (  0.13)
Test: [  20/  26]	Loss 0.682 (0.683)	test_acc   0.50 (  0.51)	test_minacc   0.66 (  0.64)	test_majacc   0.47 (  0.49)	Loss_d 0.682 (0.683)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.66 (  0.64)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.11 (  0.13)
Test: [  26/  26]	Loss 0.683 (0.683)	test_acc   0.47 (  0.51)	test_minacc   0.69 (  0.64)	test_majacc   0.44 (  0.48)	Loss_d 0.683 (0.683)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.69 (  0.64)	test_majacc_d   0.44 (  0.48)	test_corr_d   0.16 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.21it/s]
Test: [  0/  1]	Loss 0.700 (0.700)	test_acc   0.61 (  0.61)	test_minacc   0.62 (  0.62)	test_majacc   0.48 (  0.48)	Loss_d 0.700 (0.700)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.700 (0.700)	test_acc   0.61 (  0.61)	test_minacc   0.62 (  0.62)	test_majacc   0.48 (  0.48)	Loss_d 0.700 (0.700)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.04 (  0.04)
Overall Timing[  9/  1]	epoch_time 0.0454 (0.0479)	validation_time 0.0004 (0.0010)	train_time 0.0450 (0.0466)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5061000155210496, 0.6070000529289246)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.99it/s] 19%|#9        | 5/26 [00:00<00:00, 22.82it/s] 35%|###4      | 9/26 [00:00<00:00, 26.55it/s] 46%|####6     | 12/26 [00:00<00:00, 27.26it/s] 62%|######1   | 16/26 [00:00<00:00, 28.70it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.96it/s] 88%|########8 | 23/26 [00:00<00:00, 30.15it/s]100%|##########| 26/26 [00:00<00:00, 27.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [10][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.43 (  0.48)	train_minacc   0.75 (  0.64)	train_majacc   0.38 (  0.45)	train_corr   0.00 (  0.00)	l1 7.9184 (7.9238)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.87it/s] 23%|##3       | 6/26 [00:00<00:00, 28.28it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.28it/s] 42%|####2     | 11/26 [00:00<00:00, 36.06it/s] 65%|######5   | 17/26 [00:00<00:00, 40.22it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.22it/s] 85%|########4 | 22/26 [00:00<00:00, 43.28it/s]100%|##########| 26/26 [00:00<00:00, 36.22it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.46 (  0.46)	test_minacc   0.64 (  0.64)	test_majacc   0.43 (  0.43)	Loss_d 0.689 (0.689)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.689 (0.688)	test_acc   0.47 (  0.47)	test_minacc   0.63 (  0.64)	test_majacc   0.44 (  0.44)	Loss_d 0.689 (0.688)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.63 (  0.64)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.12 (  0.08)
Test: [  20/  26]	Loss 0.685 (0.687)	test_acc   0.48 (  0.48)	test_minacc   0.69 (  0.64)	test_majacc   0.44 (  0.45)	Loss_d 0.685 (0.687)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.69 (  0.64)	test_majacc_d   0.44 (  0.45)	test_corr_d   0.07 (  0.08)
Test: [  26/  26]	Loss 0.687 (0.687)	test_acc   0.45 (  0.48)	test_minacc   0.75 (  0.64)	test_majacc   0.40 (  0.45)	Loss_d 0.687 (0.687)	test_acc_d   0.45 (  0.48)	test_minacc_d   0.75 (  0.64)	test_majacc_d   0.40 (  0.45)	test_corr_d   0.11 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.91it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.45 (  0.45)	Loss_d 0.696 (0.696)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.45 (  0.45)	Loss_d 0.696 (0.696)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 10/  1]	epoch_time 0.0410 (0.0472)	validation_time 0.0004 (0.0010)	train_time 0.0405 (0.0461)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.47610000750422476, 0.6030000448226929)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.72it/s] 19%|#9        | 5/26 [00:00<00:01, 18.59it/s] 35%|###4      | 9/26 [00:00<00:00, 23.52it/s] 50%|#####     | 13/26 [00:00<00:00, 26.04it/s] 65%|######5   | 17/26 [00:00<00:00, 27.42it/s] 81%|########  | 21/26 [00:00<00:00, 28.49it/s] 96%|#########6| 25/26 [00:00<00:00, 29.11it/s]100%|##########| 26/26 [00:01<00:00, 24.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [11][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.42 (  0.46)	train_minacc   0.69 (  0.62)	train_majacc   0.39 (  0.43)	train_corr   0.00 (  0.00)	l1 7.9138 (7.9159)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.79it/s]  8%|7         | 2/26 [00:00<00:02,  8.00it/s] 27%|##6       | 7/26 [00:00<00:00, 23.93it/s]                                               27%|##6       | 7/26 [00:00<00:00, 23.93it/s] 46%|####6     | 12/26 [00:00<00:00, 32.24it/s] 65%|######5   | 17/26 [00:00<00:00, 36.69it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.69it/s] 85%|########4 | 22/26 [00:00<00:00, 38.44it/s]100%|##########| 26/26 [00:00<00:00, 30.90it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.45 (  0.45)	test_minacc   0.59 (  0.59)	test_majacc   0.42 (  0.42)	Loss_d 0.689 (0.689)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.689 (0.688)	test_acc   0.46 (  0.46)	test_minacc   0.58 (  0.60)	test_majacc   0.44 (  0.43)	Loss_d 0.689 (0.688)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.58 (  0.60)	test_majacc_d   0.44 (  0.43)	test_corr_d   0.13 (  0.09)
Test: [  20/  26]	Loss 0.685 (0.687)	test_acc   0.46 (  0.46)	test_minacc   0.68 (  0.62)	test_majacc   0.42 (  0.43)	Loss_d 0.685 (0.687)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.68 (  0.62)	test_majacc_d   0.42 (  0.43)	test_corr_d   0.09 (  0.09)
Test: [  26/  26]	Loss 0.687 (0.687)	test_acc   0.43 (  0.46)	test_minacc   0.69 (  0.62)	test_majacc   0.39 (  0.43)	Loss_d 0.687 (0.687)	test_acc_d   0.43 (  0.46)	test_minacc_d   0.69 (  0.62)	test_majacc_d   0.39 (  0.43)	test_corr_d   0.13 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.29it/s]
Test: [  0/  1]	Loss 0.698 (0.698)	test_acc   0.59 (  0.59)	test_minacc   0.61 (  0.61)	test_majacc   0.43 (  0.43)	Loss_d 0.698 (0.698)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.698 (0.698)	test_acc   0.59 (  0.59)	test_minacc   0.61 (  0.61)	test_majacc   0.43 (  0.43)	Loss_d 0.698 (0.698)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.04 (  0.04)
Overall Timing[ 11/  1]	epoch_time 0.0414 (0.0467)	validation_time 0.0004 (0.0009)	train_time 0.0410 (0.0456)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.4591000031530857, 0.5879999995231628)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.60it/s] 19%|#9        | 5/26 [00:00<00:01, 18.34it/s] 35%|###4      | 9/26 [00:00<00:00, 23.71it/s] 50%|#####     | 13/26 [00:00<00:00, 26.54it/s] 65%|######5   | 17/26 [00:00<00:00, 28.28it/s] 81%|########  | 21/26 [00:00<00:00, 29.24it/s] 96%|#########6| 25/26 [00:00<00:00, 30.02it/s]100%|##########| 26/26 [00:01<00:00, 25.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [12][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.44 (  0.45)	train_minacc   0.72 (  0.62)	train_majacc   0.40 (  0.42)	train_corr   0.00 (  0.00)	l1 7.9103 (7.9121)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.87it/s] 31%|###       | 8/26 [00:00<00:00, 38.85it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.85it/s] 50%|#####     | 13/26 [00:00<00:00, 38.82it/s] 69%|######9   | 18/26 [00:00<00:00, 41.92it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.92it/s] 88%|########8 | 23/26 [00:00<00:00, 43.37it/s]100%|##########| 26/26 [00:00<00:00, 37.97it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.44 (  0.44)	test_minacc   0.58 (  0.58)	test_majacc   0.42 (  0.42)	Loss_d 0.689 (0.689)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.689 (0.689)	test_acc   0.46 (  0.45)	test_minacc   0.58 (  0.61)	test_majacc   0.44 (  0.42)	Loss_d 0.689 (0.689)	test_acc_d   0.46 (  0.45)	test_minacc_d   0.58 (  0.61)	test_majacc_d   0.44 (  0.42)	test_corr_d   0.12 (  0.09)
Test: [  20/  26]	Loss 0.685 (0.687)	test_acc   0.46 (  0.46)	test_minacc   0.69 (  0.62)	test_majacc   0.42 (  0.43)	Loss_d 0.685 (0.687)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.69 (  0.62)	test_majacc_d   0.42 (  0.43)	test_corr_d   0.08 (  0.09)
Test: [  26/  26]	Loss 0.687 (0.687)	test_acc   0.44 (  0.46)	test_minacc   0.69 (  0.62)	test_majacc   0.40 (  0.43)	Loss_d 0.687 (0.687)	test_acc_d   0.44 (  0.46)	test_minacc_d   0.69 (  0.62)	test_majacc_d   0.40 (  0.43)	test_corr_d   0.12 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.18it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.44 (  0.44)	Loss_d 0.697 (0.697)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.44 (  0.44)	Loss_d 0.697 (0.697)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.02 (  0.02)
Overall Timing[ 12/  1]	epoch_time 0.0435 (0.0465)	validation_time 0.0004 (0.0009)	train_time 0.0431 (0.0454)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.45510000306367876, 0.5980000495910645)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 10.39it/s] 19%|#9        | 5/26 [00:00<00:01, 18.59it/s] 31%|###       | 8/26 [00:00<00:00, 22.86it/s] 46%|####6     | 12/26 [00:00<00:00, 26.21it/s] 62%|######1   | 16/26 [00:00<00:00, 27.84it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.00it/s] 92%|#########2| 24/26 [00:00<00:00, 29.81it/s]100%|##########| 26/26 [00:01<00:00, 25.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [13][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.43 (  0.44)	train_minacc   0.72 (  0.62)	train_majacc   0.39 (  0.41)	train_corr   0.00 (  0.00)	l1 7.9077 (7.9092)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.35it/s] 15%|#5        | 4/26 [00:00<00:01, 19.49it/s] 35%|###4      | 9/26 [00:00<00:00, 31.57it/s]                                               35%|###4      | 9/26 [00:00<00:00, 31.57it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.67it/s] 73%|#######3  | 19/26 [00:00<00:00, 39.43it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 39.43it/s] 92%|#########2| 24/26 [00:00<00:00, 39.54it/s]100%|##########| 26/26 [00:00<00:00, 33.42it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.43 (  0.43)	test_minacc   0.53 (  0.53)	test_majacc   0.41 (  0.41)	Loss_d 0.690 (0.690)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.689 (0.689)	test_acc   0.46 (  0.45)	test_minacc   0.58 (  0.60)	test_majacc   0.44 (  0.42)	Loss_d 0.689 (0.689)	test_acc_d   0.46 (  0.45)	test_minacc_d   0.58 (  0.60)	test_majacc_d   0.44 (  0.42)	test_corr_d   0.12 (  0.08)
Test: [  20/  26]	Loss 0.685 (0.688)	test_acc   0.45 (  0.45)	test_minacc   0.69 (  0.61)	test_majacc   0.41 (  0.42)	Loss_d 0.685 (0.688)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.69 (  0.61)	test_majacc_d   0.41 (  0.42)	test_corr_d   0.08 (  0.08)
Test: [  26/  26]	Loss 0.688 (0.688)	test_acc   0.44 (  0.45)	test_minacc   0.72 (  0.62)	test_majacc   0.39 (  0.42)	Loss_d 0.688 (0.688)	test_acc_d   0.44 (  0.45)	test_minacc_d   0.72 (  0.62)	test_majacc_d   0.39 (  0.42)	test_corr_d   0.12 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.26it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.42 (  0.42)	Loss_d 0.697 (0.697)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.42 (  0.42)	Loss_d 0.697 (0.697)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.03 (  0.03)
Overall Timing[ 13/  1]	epoch_time 0.0406 (0.0461)	validation_time 0.0003 (0.0009)	train_time 0.0402 (0.0451)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.450100003361702, 0.6000000238418579)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 11.87it/s] 19%|#9        | 5/26 [00:00<00:01, 19.55it/s] 35%|###4      | 9/26 [00:00<00:00, 24.35it/s] 50%|#####     | 13/26 [00:00<00:00, 27.04it/s] 65%|######5   | 17/26 [00:00<00:00, 28.94it/s] 81%|########  | 21/26 [00:00<00:00, 29.88it/s] 96%|#########6| 25/26 [00:00<00:00, 29.07it/s]100%|##########| 26/26 [00:01<00:00, 25.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [14][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.42 (  0.44)	train_minacc   0.72 (  0.61)	train_majacc   0.37 (  0.41)	train_corr   0.00 (  0.00)	l1 7.9053 (7.9066)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.36it/s] 23%|##3       | 6/26 [00:00<00:00, 30.49it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.49it/s] 42%|####2     | 11/26 [00:00<00:00, 36.65it/s] 62%|######1   | 16/26 [00:00<00:00, 40.96it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.96it/s] 81%|########  | 21/26 [00:00<00:00, 38.97it/s]100%|##########| 26/26 [00:00<00:00, 41.80it/s]100%|##########| 26/26 [00:00<00:00, 34.61it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.43 (  0.43)	test_minacc   0.54 (  0.54)	test_majacc   0.41 (  0.41)	Loss_d 0.690 (0.690)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.690 (0.690)	test_acc   0.45 (  0.44)	test_minacc   0.58 (  0.60)	test_majacc   0.43 (  0.41)	Loss_d 0.690 (0.690)	test_acc_d   0.45 (  0.44)	test_minacc_d   0.58 (  0.60)	test_majacc_d   0.43 (  0.41)	test_corr_d   0.12 (  0.08)
Test: [  20/  26]	Loss 0.686 (0.688)	test_acc   0.45 (  0.45)	test_minacc   0.69 (  0.61)	test_majacc   0.41 (  0.42)	Loss_d 0.686 (0.688)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.69 (  0.61)	test_majacc_d   0.41 (  0.42)	test_corr_d   0.07 (  0.08)
Test: [  26/  26]	Loss 0.688 (0.688)	test_acc   0.42 (  0.45)	test_minacc   0.72 (  0.62)	test_majacc   0.38 (  0.42)	Loss_d 0.688 (0.688)	test_acc_d   0.42 (  0.45)	test_minacc_d   0.72 (  0.62)	test_majacc_d   0.38 (  0.42)	test_corr_d   0.12 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.12it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.41 (  0.41)	Loss_d 0.696 (0.696)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.41 (  0.41)	Loss_d 0.696 (0.696)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.02 (  0.02)
Overall Timing[ 14/  1]	epoch_time 0.0430 (0.0459)	validation_time 0.0004 (0.0008)	train_time 0.0425 (0.0449)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.4469000036716461, 0.6020000576972961)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.48it/s] 15%|#5        | 4/26 [00:00<00:01, 15.91it/s] 27%|##6       | 7/26 [00:00<00:00, 20.72it/s] 38%|###8      | 10/26 [00:00<00:00, 23.86it/s] 50%|#####     | 13/26 [00:00<00:00, 25.14it/s] 65%|######5   | 17/26 [00:00<00:00, 27.01it/s] 81%|########  | 21/26 [00:00<00:00, 28.25it/s] 96%|#########6| 25/26 [00:00<00:00, 29.09it/s]100%|##########| 26/26 [00:01<00:00, 23.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [15][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.42 (  0.44)	train_minacc   0.72 (  0.61)	train_majacc   0.37 (  0.41)	train_corr   0.00 (  0.00)	l1 7.9033 (7.9044)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.92it/s] 15%|#5        | 4/26 [00:00<00:01, 14.03it/s] 35%|###4      | 9/26 [00:00<00:00, 25.91it/s]                                               35%|###4      | 9/26 [00:00<00:00, 25.91it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.94it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.28it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 37.28it/s] 92%|#########2| 24/26 [00:00<00:00, 37.60it/s]100%|##########| 26/26 [00:00<00:00, 30.28it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.42 (  0.42)	test_minacc   0.54 (  0.54)	test_majacc   0.40 (  0.40)	Loss_d 0.690 (0.690)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.690 (0.690)	test_acc   0.46 (  0.44)	test_minacc   0.58 (  0.59)	test_majacc   0.44 (  0.41)	Loss_d 0.690 (0.690)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.58 (  0.59)	test_majacc_d   0.44 (  0.41)	test_corr_d   0.11 (  0.07)
Test: [  20/  26]	Loss 0.686 (0.689)	test_acc   0.44 (  0.45)	test_minacc   0.65 (  0.60)	test_majacc   0.40 (  0.42)	Loss_d 0.686 (0.689)	test_acc_d   0.44 (  0.45)	test_minacc_d   0.65 (  0.60)	test_majacc_d   0.40 (  0.42)	test_corr_d   0.07 (  0.08)
Test: [  26/  26]	Loss 0.689 (0.689)	test_acc   0.42 (  0.44)	test_minacc   0.72 (  0.61)	test_majacc   0.38 (  0.42)	Loss_d 0.689 (0.689)	test_acc_d   0.42 (  0.44)	test_minacc_d   0.72 (  0.61)	test_majacc_d   0.38 (  0.42)	test_corr_d   0.11 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.50it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.59 (  0.59)	test_minacc   0.61 (  0.61)	test_majacc   0.40 (  0.40)	Loss_d 0.696 (0.696)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.59 (  0.59)	test_minacc   0.61 (  0.61)	test_majacc   0.40 (  0.40)	Loss_d 0.696 (0.696)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.02 (  0.02)
Overall Timing[ 15/  1]	epoch_time 0.0445 (0.0458)	validation_time 0.0004 (0.0008)	train_time 0.0440 (0.0448)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.4442000036239624, 0.5920000076293945)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:10,  2.43it/s] 15%|#5        | 4/26 [00:00<00:02,  9.50it/s] 27%|##6       | 7/26 [00:00<00:01, 14.83it/s] 38%|###8      | 10/26 [00:00<00:00, 18.71it/s] 50%|#####     | 13/26 [00:00<00:00, 21.71it/s] 62%|######1   | 16/26 [00:00<00:00, 23.83it/s] 73%|#######3  | 19/26 [00:01<00:00, 25.57it/s] 88%|########8 | 23/26 [00:01<00:00, 27.22it/s]100%|##########| 26/26 [00:01<00:00, 19.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.42 (  0.44)	train_minacc   0.72 (  0.61)	train_majacc   0.38 (  0.41)	train_corr   0.00 (  0.00)	l1 7.9016 (7.9025)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.66it/s] 23%|##3       | 6/26 [00:00<00:00, 24.96it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.96it/s] 42%|####2     | 11/26 [00:00<00:00, 32.66it/s] 62%|######1   | 16/26 [00:00<00:00, 38.18it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.18it/s] 81%|########  | 21/26 [00:00<00:00, 37.45it/s]100%|##########| 26/26 [00:00<00:00, 40.76it/s]100%|##########| 26/26 [00:00<00:00, 32.54it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.42 (  0.42)	test_minacc   0.56 (  0.56)	test_majacc   0.40 (  0.40)	Loss_d 0.691 (0.691)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.690 (0.690)	test_acc   0.46 (  0.44)	test_minacc   0.58 (  0.59)	test_majacc   0.44 (  0.41)	Loss_d 0.690 (0.690)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.58 (  0.59)	test_majacc_d   0.44 (  0.41)	test_corr_d   0.11 (  0.07)
Test: [  20/  26]	Loss 0.687 (0.689)	test_acc   0.44 (  0.44)	test_minacc   0.63 (  0.60)	test_majacc   0.40 (  0.42)	Loss_d 0.687 (0.689)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.63 (  0.60)	test_majacc_d   0.40 (  0.42)	test_corr_d   0.07 (  0.07)
Test: [  26/  26]	Loss 0.689 (0.689)	test_acc   0.42 (  0.44)	test_minacc   0.72 (  0.60)	test_majacc   0.38 (  0.41)	Loss_d 0.689 (0.689)	test_acc_d   0.42 (  0.44)	test_minacc_d   0.72 (  0.60)	test_majacc_d   0.38 (  0.41)	test_corr_d   0.11 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.58it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.40 (  0.40)	Loss_d 0.695 (0.695)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.40 (  0.40)	Loss_d 0.695 (0.695)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.02 (  0.02)
Overall Timing[ 16/  1]	epoch_time 0.0438 (0.0457)	validation_time 0.0003 (0.0008)	train_time 0.0434 (0.0448)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.4427000039219856, 0.5830000042915344)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.50it/s] 15%|#5        | 4/26 [00:00<00:01, 15.58it/s] 27%|##6       | 7/26 [00:00<00:00, 20.82it/s] 42%|####2     | 11/26 [00:00<00:00, 25.09it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.39it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.77it/s] 88%|########8 | 23/26 [00:00<00:00, 29.29it/s]100%|##########| 26/26 [00:01<00:00, 24.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.44 (  0.44)	train_minacc   0.72 (  0.61)	train_majacc   0.39 (  0.41)	train_corr   0.00 (  0.00)	l1 7.9000 (7.9009)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.98it/s] 23%|##3       | 6/26 [00:00<00:00, 23.10it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.10it/s] 42%|####2     | 11/26 [00:00<00:00, 31.93it/s] 62%|######1   | 16/26 [00:00<00:00, 36.90it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.90it/s] 81%|########  | 21/26 [00:00<00:00, 36.30it/s]100%|##########| 26/26 [00:00<00:00, 39.81it/s]100%|##########| 26/26 [00:00<00:00, 30.74it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.43 (  0.43)	test_minacc   0.59 (  0.59)	test_majacc   0.40 (  0.40)	Loss_d 0.691 (0.691)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.691 (0.690)	test_acc   0.46 (  0.44)	test_minacc   0.56 (  0.59)	test_majacc   0.44 (  0.41)	Loss_d 0.691 (0.690)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.56 (  0.59)	test_majacc_d   0.44 (  0.41)	test_corr_d   0.11 (  0.07)
Test: [  20/  26]	Loss 0.687 (0.689)	test_acc   0.44 (  0.44)	test_minacc   0.63 (  0.60)	test_majacc   0.40 (  0.42)	Loss_d 0.687 (0.689)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.63 (  0.60)	test_majacc_d   0.40 (  0.42)	test_corr_d   0.07 (  0.07)
Test: [  26/  26]	Loss 0.690 (0.689)	test_acc   0.44 (  0.44)	test_minacc   0.72 (  0.60)	test_majacc   0.40 (  0.42)	Loss_d 0.690 (0.689)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.72 (  0.60)	test_majacc_d   0.40 (  0.42)	test_corr_d   0.11 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.56it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.40 (  0.40)	Loss_d 0.695 (0.695)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.40 (  0.40)	Loss_d 0.695 (0.695)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.02 (  0.02)
Overall Timing[ 17/  1]	epoch_time 0.0416 (0.0454)	validation_time 0.0004 (0.0007)	train_time 0.0412 (0.0446)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.4436000041663647, 0.5820000171661377)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.35it/s] 19%|#9        | 5/26 [00:00<00:01, 19.54it/s] 35%|###4      | 9/26 [00:00<00:00, 24.51it/s] 50%|#####     | 13/26 [00:00<00:00, 27.29it/s] 65%|######5   | 17/26 [00:00<00:00, 28.56it/s] 81%|########  | 21/26 [00:00<00:00, 29.45it/s] 96%|#########6| 25/26 [00:00<00:00, 29.78it/s]100%|##########| 26/26 [00:01<00:00, 25.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.44 (  0.44)	train_minacc   0.72 (  0.60)	train_majacc   0.40 (  0.41)	train_corr   0.00 (  0.00)	l1 7.8986 (7.8994)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.98it/s] 19%|#9        | 5/26 [00:00<00:01, 16.92it/s] 38%|###8      | 10/26 [00:00<00:00, 27.66it/s]                                                38%|###8      | 10/26 [00:00<00:00, 27.66it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.17it/s] 77%|#######6  | 20/26 [00:00<00:00, 35.41it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 35.41it/s] 96%|#########6| 25/26 [00:00<00:00, 38.61it/s]100%|##########| 26/26 [00:00<00:00, 29.09it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.43 (  0.43)	test_minacc   0.58 (  0.58)	test_majacc   0.40 (  0.40)	Loss_d 0.691 (0.691)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.691 (0.691)	test_acc   0.46 (  0.44)	test_minacc   0.56 (  0.58)	test_majacc   0.44 (  0.41)	Loss_d 0.691 (0.691)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.56 (  0.58)	test_majacc_d   0.44 (  0.41)	test_corr_d   0.11 (  0.06)
Test: [  20/  26]	Loss 0.687 (0.690)	test_acc   0.44 (  0.44)	test_minacc   0.62 (  0.59)	test_majacc   0.40 (  0.42)	Loss_d 0.687 (0.690)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.62 (  0.59)	test_majacc_d   0.40 (  0.42)	test_corr_d   0.06 (  0.07)
Test: [  26/  26]	Loss 0.690 (0.690)	test_acc   0.44 (  0.44)	test_minacc   0.72 (  0.60)	test_majacc   0.40 (  0.42)	Loss_d 0.690 (0.690)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.72 (  0.60)	test_majacc_d   0.40 (  0.42)	test_corr_d   0.11 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.90it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.41 (  0.41)	Loss_d 0.695 (0.695)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.41 (  0.41)	Loss_d 0.695 (0.695)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.02 (  0.02)
Overall Timing[ 18/  1]	epoch_time 0.0480 (0.0456)	validation_time 0.0004 (0.0007)	train_time 0.0475 (0.0447)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.4442000041306019, 0.5820000171661377)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.17it/s] 15%|#5        | 4/26 [00:00<00:01, 17.59it/s] 31%|###       | 8/26 [00:00<00:00, 23.67it/s] 42%|####2     | 11/26 [00:00<00:00, 25.69it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.51it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.70it/s] 88%|########8 | 23/26 [00:00<00:00, 29.56it/s]100%|##########| 26/26 [00:01<00:00, 25.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.45 (  0.44)	train_minacc   0.72 (  0.60)	train_majacc   0.41 (  0.41)	train_corr   0.00 (  0.00)	l1 7.8974 (7.8980)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.69it/s] 27%|##6       | 7/26 [00:00<00:00, 34.61it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.61it/s] 46%|####6     | 12/26 [00:00<00:00, 39.27it/s] 65%|######5   | 17/26 [00:00<00:00, 38.39it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.39it/s] 85%|########4 | 22/26 [00:00<00:00, 40.57it/s]100%|##########| 26/26 [00:00<00:00, 35.80it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.43 (  0.43)	test_minacc   0.58 (  0.58)	test_majacc   0.40 (  0.40)	Loss_d 0.691 (0.691)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.691 (0.691)	test_acc   0.46 (  0.44)	test_minacc   0.54 (  0.58)	test_majacc   0.45 (  0.41)	Loss_d 0.691 (0.691)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.54 (  0.58)	test_majacc_d   0.45 (  0.41)	test_corr_d   0.10 (  0.06)
Test: [  20/  26]	Loss 0.688 (0.690)	test_acc   0.43 (  0.44)	test_minacc   0.60 (  0.59)	test_majacc   0.40 (  0.42)	Loss_d 0.688 (0.690)	test_acc_d   0.43 (  0.44)	test_minacc_d   0.60 (  0.59)	test_majacc_d   0.40 (  0.42)	test_corr_d   0.06 (  0.06)
Test: [  26/  26]	Loss 0.690 (0.690)	test_acc   0.45 (  0.44)	test_minacc   0.72 (  0.60)	test_majacc   0.41 (  0.42)	Loss_d 0.690 (0.690)	test_acc_d   0.45 (  0.44)	test_minacc_d   0.72 (  0.60)	test_majacc_d   0.41 (  0.42)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.40it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.40 (  0.40)	Loss_d 0.695 (0.695)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.40 (  0.40)	Loss_d 0.695 (0.695)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.01 (  0.01)
Overall Timing[ 19/  1]	epoch_time 0.0450 (0.0455)	validation_time 0.0004 (0.0007)	train_time 0.0445 (0.0447)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.444000003606081, 0.5820000171661377)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.53it/s] 15%|#5        | 4/26 [00:00<00:01, 16.83it/s] 31%|###       | 8/26 [00:00<00:00, 23.81it/s] 46%|####6     | 12/26 [00:00<00:00, 26.93it/s] 62%|######1   | 16/26 [00:00<00:00, 28.33it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.72it/s] 88%|########8 | 23/26 [00:00<00:00, 29.64it/s]100%|##########| 26/26 [00:00<00:00, 26.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.45 (  0.44)	train_minacc   0.72 (  0.60)	train_majacc   0.41 (  0.41)	train_corr   0.00 (  0.00)	l1 7.8963 (7.8969)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.45it/s] 27%|##6       | 7/26 [00:00<00:00, 28.98it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.98it/s] 46%|####6     | 12/26 [00:00<00:00, 35.96it/s] 65%|######5   | 17/26 [00:00<00:00, 39.31it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.31it/s] 85%|########4 | 22/26 [00:00<00:00, 41.70it/s]100%|##########| 26/26 [00:00<00:00, 35.37it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.43 (  0.43)	test_minacc   0.58 (  0.58)	test_majacc   0.40 (  0.40)	Loss_d 0.691 (0.691)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.691 (0.691)	test_acc   0.46 (  0.44)	test_minacc   0.54 (  0.58)	test_majacc   0.45 (  0.41)	Loss_d 0.691 (0.691)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.54 (  0.58)	test_majacc_d   0.45 (  0.41)	test_corr_d   0.10 (  0.06)
Test: [  20/  26]	Loss 0.688 (0.690)	test_acc   0.44 (  0.45)	test_minacc   0.60 (  0.59)	test_majacc   0.40 (  0.42)	Loss_d 0.688 (0.690)	test_acc_d   0.44 (  0.45)	test_minacc_d   0.60 (  0.59)	test_majacc_d   0.40 (  0.42)	test_corr_d   0.06 (  0.06)
Test: [  26/  26]	Loss 0.690 (0.690)	test_acc   0.45 (  0.45)	test_minacc   0.72 (  0.59)	test_majacc   0.41 (  0.42)	Loss_d 0.690 (0.690)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.72 (  0.59)	test_majacc_d   0.41 (  0.42)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.15it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.40 (  0.40)	Loss_d 0.694 (0.694)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.40 (  0.40)	Loss_d 0.694 (0.694)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.01 (  0.01)
Overall Timing[ 20/  1]	epoch_time 0.0412 (0.0453)	validation_time 0.0003 (0.0007)	train_time 0.0409 (0.0445)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.44530000352859495, 0.5760000348091125)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.95it/s] 19%|#9        | 5/26 [00:00<00:01, 17.49it/s] 35%|###4      | 9/26 [00:00<00:00, 22.79it/s] 50%|#####     | 13/26 [00:00<00:00, 25.72it/s] 65%|######5   | 17/26 [00:00<00:00, 27.49it/s] 81%|########  | 21/26 [00:00<00:00, 28.84it/s] 96%|#########6| 25/26 [00:00<00:00, 29.54it/s]100%|##########| 26/26 [00:01<00:00, 24.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.45 (  0.44)	train_minacc   0.72 (  0.59)	train_majacc   0.41 (  0.42)	train_corr   0.00 (  0.00)	l1 7.8954 (7.8959)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.03it/s] 19%|#9        | 5/26 [00:00<00:00, 23.46it/s] 38%|###8      | 10/26 [00:00<00:00, 34.13it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.13it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.75it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.55it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 38.55it/s] 96%|#########6| 25/26 [00:00<00:00, 40.75it/s]100%|##########| 26/26 [00:00<00:00, 33.10it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.43 (  0.43)	test_minacc   0.58 (  0.58)	test_majacc   0.41 (  0.41)	Loss_d 0.691 (0.691)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.691 (0.691)	test_acc   0.46 (  0.44)	test_minacc   0.53 (  0.57)	test_majacc   0.45 (  0.42)	Loss_d 0.691 (0.691)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.53 (  0.57)	test_majacc_d   0.45 (  0.42)	test_corr_d   0.10 (  0.06)
Test: [  20/  26]	Loss 0.688 (0.690)	test_acc   0.43 (  0.45)	test_minacc   0.58 (  0.58)	test_majacc   0.40 (  0.42)	Loss_d 0.688 (0.690)	test_acc_d   0.43 (  0.45)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.40 (  0.42)	test_corr_d   0.05 (  0.06)
Test: [  26/  26]	Loss 0.691 (0.690)	test_acc   0.45 (  0.45)	test_minacc   0.69 (  0.59)	test_majacc   0.41 (  0.42)	Loss_d 0.691 (0.690)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.69 (  0.59)	test_majacc_d   0.41 (  0.42)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.05it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.40 (  0.40)	Loss_d 0.694 (0.694)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.40 (  0.40)	Loss_d 0.694 (0.694)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.01 (  0.01)
Overall Timing[ 21/  1]	epoch_time 0.0406 (0.0451)	validation_time 0.0004 (0.0007)	train_time 0.0401 (0.0443)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.4464000034630299, 0.5760000348091125)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.48it/s] 19%|#9        | 5/26 [00:00<00:00, 23.41it/s] 35%|###4      | 9/26 [00:00<00:00, 27.57it/s] 50%|#####     | 13/26 [00:00<00:00, 29.67it/s] 65%|######5   | 17/26 [00:00<00:00, 31.27it/s] 81%|########  | 21/26 [00:00<00:00, 32.13it/s] 96%|#########6| 25/26 [00:00<00:00, 32.24it/s]100%|##########| 26/26 [00:00<00:00, 28.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 200
penalty weights 10000.0
final projection at end of training
dim_v 512
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.45 (  0.44)	train_minacc   0.72 (  0.59)	train_majacc   0.41 (  0.42)	train_corr   0.00 (  0.00)	l1 7.8947 (7.8951)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.81it/s] 27%|##6       | 7/26 [00:00<00:00, 24.09it/s]                                               27%|##6       | 7/26 [00:00<00:00, 24.09it/s] 46%|####6     | 12/26 [00:00<00:00, 32.07it/s] 65%|######5   | 17/26 [00:00<00:00, 36.76it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.76it/s] 85%|########4 | 22/26 [00:00<00:00, 39.90it/s]100%|##########| 26/26 [00:00<00:00, 31.55it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.44 (  0.44)	test_minacc   0.56 (  0.56)	test_majacc   0.41 (  0.41)	Loss_d 0.692 (0.692)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.691 (0.691)	test_acc   0.46 (  0.44)	test_minacc   0.53 (  0.57)	test_majacc   0.45 (  0.42)	Loss_d 0.691 (0.691)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.53 (  0.57)	test_majacc_d   0.45 (  0.42)	test_corr_d   0.10 (  0.05)
Test: [  20/  26]	Loss 0.688 (0.690)	test_acc   0.43 (  0.45)	test_minacc   0.58 (  0.58)	test_majacc   0.40 (  0.42)	Loss_d 0.688 (0.690)	test_acc_d   0.43 (  0.45)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.40 (  0.42)	test_corr_d   0.05 (  0.06)
Test: [  26/  26]	Loss 0.691 (0.690)	test_acc   0.45 (  0.45)	test_minacc   0.69 (  0.59)	test_majacc   0.42 (  0.42)	Loss_d 0.691 (0.690)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.69 (  0.59)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.15it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.40 (  0.40)	Loss_d 0.694 (0.694)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.40 (  0.40)	Loss_d 0.694 (0.694)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.01 (  0.01)
Overall Timing[ 22/  1]	epoch_time 0.0391 (0.0449)	validation_time 0.0004 (0.0007)	train_time 0.0387 (0.0441)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.4489000035226345, 0.5770000219345093)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.89it/s] 19%|#9        | 5/26 [00:00<00:01, 15.23it/s] 31%|###       | 8/26 [00:00<00:01, 17.83it/s] 42%|####2     | 11/26 [00:00<00:00, 21.01it/s] 58%|#####7    | 15/26 [00:00<00:00, 24.57it/s] 69%|######9   | 18/26 [00:00<00:00, 24.51it/s] 85%|########4 | 22/26 [00:01<00:00, 26.45it/s] 96%|#########6| 25/26 [00:01<00:00, 27.37it/s]100%|##########| 26/26 [00:01<00:00, 21.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 200
penalty weights 10000.0
l1 at pgd_anneal_iters 7.894183158874512
set z to 7.815241327285767
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 200
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 200
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 200
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 200
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 200
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
rho, theta 401 tensor(-0.0112, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 200
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 200
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 200
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 200
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 200
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 200
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 200
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 200
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 200
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 200
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
rho, theta 401 tensor(-0.0220, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 200
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 200
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 200
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 200
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 200
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 200
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 200
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 200
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
final projection at end of training
dim_v 512
Epoch: [23][  26/  26]	Loss 0.001 (0.013)	train_nll   0.68 (  0.70)	train_penalty   0.00 (  0.01)	weight_norm   1.60 (  0.83)	train_acc   0.71 (  0.51)	train_minacc   0.28 (  0.49)	train_majacc   0.77 (  0.51)	train_corr   0.00 (  0.00)	l1 7.0681 (7.2978)	zero_count 0.0000 (8.5800)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.25it/s] 27%|##6       | 7/26 [00:00<00:00, 33.62it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.62it/s] 46%|####6     | 12/26 [00:00<00:00, 40.61it/s] 65%|######5   | 17/26 [00:00<00:00, 42.97it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.97it/s] 85%|########4 | 22/26 [00:00<00:00, 43.39it/s]100%|##########| 26/26 [00:00<00:00, 38.51it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.55 (  0.55)	test_minacc   0.49 (  0.49)	test_majacc   0.56 (  0.56)	Loss_d 0.694 (0.694)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.687 (0.686)	test_acc   0.58 (  0.58)	test_minacc   0.58 (  0.56)	test_majacc   0.59 (  0.59)	Loss_d 0.687 (0.686)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.58 (  0.56)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.10 (  0.05)
Test: [  20/  26]	Loss 0.684 (0.686)	test_acc   0.62 (  0.59)	test_minacc   0.57 (  0.56)	test_majacc   0.63 (  0.59)	Loss_d 0.684 (0.686)	test_acc_d   0.62 (  0.59)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.63 (  0.59)	test_corr_d   0.08 (  0.05)
Test: [  26/  26]	Loss 0.686 (0.687)	test_acc   0.59 (  0.59)	test_minacc   0.44 (  0.55)	test_majacc   0.61 (  0.59)	Loss_d 0.686 (0.687)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.44 (  0.55)	test_majacc_d   0.61 (  0.59)	test_corr_d   0.15 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.62it/s]
Test: [  0/  1]	Loss 0.685 (0.685)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.685 (0.685)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.685 (0.685)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.685 (0.685)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 23/  1]	epoch_time 0.0462 (0.0449)	validation_time 0.0004 (0.0007)	train_time 0.0458 (0.0442)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5862000066041947, 0.5160000324249268)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.38it/s] 15%|#5        | 4/26 [00:00<00:01, 17.64it/s] 27%|##6       | 7/26 [00:00<00:00, 21.48it/s] 42%|####2     | 11/26 [00:00<00:00, 24.18it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.91it/s] 65%|######5   | 17/26 [00:00<00:00, 26.99it/s] 81%|########  | 21/26 [00:00<00:00, 27.97it/s] 96%|#########6| 25/26 [00:00<00:00, 28.91it/s]100%|##########| 26/26 [00:01<00:00, 24.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 200
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 200
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 200
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 200
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 200
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 200
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 200
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 200
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 200
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 200
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 200
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 200
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 200
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 200
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 200
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 200
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 200
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 200
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 200
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 200
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 200
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 200
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 200
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 200
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 200
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 200
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
final projection at end of training
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.09 (  1.95)	train_acc   0.50 (  0.52)	train_minacc   0.56 (  0.58)	train_majacc   0.49 (  0.51)	train_corr   0.00 (  0.00)	l1 7.0146 (7.0100)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.79it/s] 19%|#9        | 5/26 [00:00<00:00, 24.05it/s]                                               19%|#9        | 5/26 [00:00<00:00, 24.05it/s] 42%|####2     | 11/26 [00:00<00:00, 37.35it/s] 62%|######1   | 16/26 [00:00<00:00, 38.66it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.66it/s] 81%|########  | 21/26 [00:00<00:00, 41.01it/s]100%|##########| 26/26 [00:00<00:00, 43.37it/s]100%|##########| 26/26 [00:00<00:00, 36.04it/s]
Test: [   0/  26]	Loss 0.698 (0.698)	test_acc   0.49 (  0.49)	test_minacc   0.54 (  0.54)	test_majacc   0.48 (  0.48)	Loss_d 0.698 (0.698)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.51)	test_minacc   0.54 (  0.54)	test_majacc   0.48 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.48 (  0.51)	test_corr_d   0.14 (  0.07)
Test: [  20/  26]	Loss 0.690 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.690 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.12 (  0.07)
Test: [  26/  26]	Loss 0.695 (0.692)	test_acc   0.50 (  0.51)	test_minacc   0.56 (  0.54)	test_majacc   0.49 (  0.51)	Loss_d 0.695 (0.692)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.56 (  0.54)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.16 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.06it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 24/  1]	epoch_time 0.0435 (0.0449)	validation_time 0.0004 (0.0007)	train_time 0.0431 (0.0441)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5125000097155571, 0.534000039100647)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.88it/s] 12%|#1        | 3/26 [00:00<00:01, 14.65it/s] 27%|##6       | 7/26 [00:00<00:00, 22.99it/s] 42%|####2     | 11/26 [00:00<00:00, 26.72it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.38it/s] 69%|######9   | 18/26 [00:00<00:00, 28.79it/s] 81%|########  | 21/26 [00:00<00:00, 29.10it/s] 96%|#########6| 25/26 [00:00<00:00, 29.94it/s]100%|##########| 26/26 [00:01<00:00, 25.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 200
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 200
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 200
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 200
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 200
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 200
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 200
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 200
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 200
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 200
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 200
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 200
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 200
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 200
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 200
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 200
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 200
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 200
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 200
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 200
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 200
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 200
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 200
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 200
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 200
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 200
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.12 (  2.12)	train_acc   0.50 (  0.51)	train_minacc   0.59 (  0.54)	train_majacc   0.49 (  0.51)	train_corr   0.00 (  0.00)	l1 7.0046 (7.0085)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.85it/s] 23%|##3       | 6/26 [00:00<00:00, 27.31it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.31it/s] 42%|####2     | 11/26 [00:00<00:00, 34.98it/s] 62%|######1   | 16/26 [00:00<00:00, 39.61it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.61it/s] 81%|########  | 21/26 [00:00<00:00, 38.51it/s]100%|##########| 26/26 [00:00<00:00, 41.59it/s]100%|##########| 26/26 [00:00<00:00, 33.95it/s]
Test: [   0/  26]	Loss 0.696 (0.696)	test_acc   0.48 (  0.48)	test_minacc   0.54 (  0.54)	test_majacc   0.47 (  0.47)	Loss_d 0.696 (0.696)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.51)	test_minacc   0.56 (  0.54)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.56 (  0.54)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.17 (  0.09)
Test: [  20/  26]	Loss 0.691 (0.691)	test_acc   0.50 (  0.51)	test_minacc   0.52 (  0.53)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.52 (  0.53)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.13 (  0.10)
Test: [  26/  26]	Loss 0.694 (0.691)	test_acc   0.50 (  0.51)	test_minacc   0.59 (  0.54)	test_majacc   0.49 (  0.50)	Loss_d 0.694 (0.691)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.59 (  0.54)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.20 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.82it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 25/  1]	epoch_time 0.0426 (0.0448)	validation_time 0.0006 (0.0007)	train_time 0.0419 (0.0440)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.507500009059906, 0.5270000100135803)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.93it/s] 15%|#5        | 4/26 [00:00<00:01, 14.73it/s] 27%|##6       | 7/26 [00:00<00:00, 19.88it/s] 38%|###8      | 10/26 [00:00<00:00, 22.83it/s] 50%|#####     | 13/26 [00:00<00:00, 25.12it/s] 65%|######5   | 17/26 [00:00<00:00, 27.75it/s] 81%|########  | 21/26 [00:00<00:00, 29.15it/s] 96%|#########6| 25/26 [00:01<00:00, 29.74it/s]100%|##########| 26/26 [00:01<00:00, 24.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 200
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 200
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 200
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 200
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 200
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 200
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 200
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 200
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 200
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 200
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 200
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 200
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 200
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 200
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 200
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 200
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 200
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 200
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 200
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 200
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 200
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 200
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 200
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 200
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 200
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 200
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
final projection at end of training
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.12 (  2.12)	train_acc   0.50 (  0.51)	train_minacc   0.59 (  0.54)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 6.9999 (7.0016)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.93it/s] 12%|#1        | 3/26 [00:00<00:01, 15.09it/s] 31%|###       | 8/26 [00:00<00:00, 29.84it/s]                                               31%|###       | 8/26 [00:00<00:00, 29.84it/s] 50%|#####     | 13/26 [00:00<00:00, 35.93it/s] 69%|######9   | 18/26 [00:00<00:00, 38.59it/s]                                                69%|######9   | 18/26 [00:00<00:00, 38.59it/s] 88%|########8 | 23/26 [00:00<00:00, 38.92it/s]100%|##########| 26/26 [00:00<00:00, 33.61it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.48 (  0.48)	test_minacc   0.54 (  0.54)	test_majacc   0.47 (  0.47)	Loss_d 0.695 (0.695)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.50)	test_minacc   0.56 (  0.54)	test_majacc   0.47 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.56 (  0.54)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.12 (  0.05)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.52 (  0.54)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.52 (  0.54)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.07 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.56 (  0.54)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.56 (  0.54)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.16 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.57it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 26/  1]	epoch_time 0.0468 (0.0448)	validation_time 0.0003 (0.0006)	train_time 0.0465 (0.0441)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5034000125825405, 0.527999997138977)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.64it/s] 19%|#9        | 5/26 [00:00<00:01, 16.67it/s] 35%|###4      | 9/26 [00:00<00:00, 22.35it/s] 50%|#####     | 13/26 [00:00<00:00, 25.59it/s] 65%|######5   | 17/26 [00:00<00:00, 27.82it/s] 81%|########  | 21/26 [00:00<00:00, 29.22it/s] 96%|#########6| 25/26 [00:00<00:00, 29.69it/s]100%|##########| 26/26 [00:01<00:00, 24.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 200
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 200
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 200
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 200
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 200
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 200
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 200
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 200
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 200
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 200
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 200
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 200
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 200
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 200
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 200
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 200
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 200
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 200
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 200
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 200
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 200
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 200
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 200
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 200
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 200
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 200
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
final projection at end of training
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.11 (  2.12)	train_acc   0.49 (  0.50)	train_minacc   0.56 (  0.55)	train_majacc   0.48 (  0.49)	train_corr   0.00 (  0.00)	l1 7.0004 (6.9999)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.29it/s] 23%|##3       | 6/26 [00:00<00:00, 21.10it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.10it/s] 42%|####2     | 11/26 [00:00<00:00, 29.88it/s] 62%|######1   | 16/26 [00:00<00:00, 35.72it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.72it/s] 81%|########  | 21/26 [00:00<00:00, 36.64it/s]100%|##########| 26/26 [00:00<00:00, 40.25it/s]100%|##########| 26/26 [00:00<00:00, 30.96it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.48 (  0.48)	test_minacc   0.54 (  0.54)	test_majacc   0.47 (  0.47)	Loss_d 0.695 (0.695)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.56 (  0.55)	test_majacc   0.47 (  0.49)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.56 (  0.55)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.08 (  0.02)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.50)	test_minacc   0.52 (  0.54)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.52 (  0.54)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.03 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.50)	test_minacc   0.56 (  0.55)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.56 (  0.55)	test_majacc_d   0.48 (  0.49)	test_corr_d   0.14 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.94it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 27/  1]	epoch_time 0.0411 (0.0447)	validation_time 0.0004 (0.0006)	train_time 0.0407 (0.0440)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.500200015425682, 0.5350000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:10,  2.35it/s] 15%|#5        | 4/26 [00:00<00:02,  9.27it/s] 27%|##6       | 7/26 [00:00<00:01, 14.61it/s] 42%|####2     | 11/26 [00:00<00:00, 20.01it/s] 58%|#####7    | 15/26 [00:00<00:00, 23.45it/s] 73%|#######3  | 19/26 [00:01<00:00, 25.84it/s] 88%|########8 | 23/26 [00:01<00:00, 27.98it/s]100%|##########| 26/26 [00:01<00:00, 20.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 200
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 200
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 200
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 200
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 200
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 200
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 200
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 200
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 200
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 200
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 200
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 200
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 200
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 200
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 200
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 200
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 200
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 200
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 200
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 200
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 200
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 200
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 200
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 200
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 200
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 200
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
final projection at end of training
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.11 (  2.11)	train_acc   0.49 (  0.50)	train_minacc   0.56 (  0.55)	train_majacc   0.48 (  0.49)	train_corr   0.00 (  0.00)	l1 7.0032 (7.0020)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.58it/s] 27%|##6       | 7/26 [00:00<00:00, 33.60it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.60it/s] 46%|####6     | 12/26 [00:00<00:00, 39.73it/s] 65%|######5   | 17/26 [00:00<00:00, 41.59it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.59it/s] 85%|########4 | 22/26 [00:00<00:00, 39.09it/s]100%|##########| 26/26 [00:00<00:00, 36.81it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.54 (  0.54)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.58 (  0.54)	test_majacc   0.47 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.58 (  0.54)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.07 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.54 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.54 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.01 (  0.03)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.56 (  0.55)	test_majacc   0.48 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.56 (  0.55)	test_majacc_d   0.48 (  0.49)	test_corr_d   0.13 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.15it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 28/  1]	epoch_time 0.0441 (0.0447)	validation_time 0.0004 (0.0006)	train_time 0.0437 (0.0440)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5011000072360039, 0.5300000309944153)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.24it/s] 15%|#5        | 4/26 [00:00<00:01, 19.57it/s] 27%|##6       | 7/26 [00:00<00:00, 24.05it/s] 42%|####2     | 11/26 [00:00<00:00, 27.27it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.55it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.05it/s] 88%|########8 | 23/26 [00:00<00:00, 29.27it/s]100%|##########| 26/26 [00:01<00:00, 25.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 200
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 200
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 200
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 200
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 200
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 200
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 200
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 200
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 200
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 200
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 200
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 200
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 200
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 200
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 200
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 200
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 200
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 200
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 200
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 200
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 200
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 200
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 200
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 200
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 200
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 200
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
final projection at end of training
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.10 (  2.10)	train_acc   0.50 (  0.50)	train_minacc   0.56 (  0.55)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 7.0057 (7.0048)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.32it/s] 23%|##3       | 6/26 [00:00<00:00, 32.04it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.04it/s] 42%|####2     | 11/26 [00:00<00:00, 38.54it/s] 62%|######1   | 16/26 [00:00<00:00, 42.03it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.03it/s] 81%|########  | 21/26 [00:00<00:00, 39.17it/s]100%|##########| 26/26 [00:00<00:00, 42.11it/s]100%|##########| 26/26 [00:00<00:00, 35.97it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.51 (  0.51)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.58 (  0.54)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.58 (  0.54)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.07 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.52 (  0.54)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.52 (  0.54)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.01 (  0.03)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.56 (  0.54)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.56 (  0.54)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.13 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.72it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.00 (  0.00)
Overall Timing[ 29/  1]	epoch_time 0.0432 (0.0446)	validation_time 0.0004 (0.0006)	train_time 0.0428 (0.0439)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5063000147342682, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.43it/s] 19%|#9        | 5/26 [00:00<00:00, 21.14it/s] 35%|###4      | 9/26 [00:00<00:00, 25.75it/s] 50%|#####     | 13/26 [00:00<00:00, 28.18it/s] 65%|######5   | 17/26 [00:00<00:00, 29.26it/s] 81%|########  | 21/26 [00:00<00:00, 30.13it/s] 96%|#########6| 25/26 [00:00<00:00, 30.22it/s]100%|##########| 26/26 [00:00<00:00, 26.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 200
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 200
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 200
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 200
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 200
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 200
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 200
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 200
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 200
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 200
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 200
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 200
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 200
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 200
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 200
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 200
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 200
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 200
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 200
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 200
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 200
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 200
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 200
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 200
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 200
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 200
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.09 (  2.10)	train_acc   0.51 (  0.51)	train_minacc   0.56 (  0.54)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 7.0075 (7.0069)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.16it/s] 23%|##3       | 6/26 [00:00<00:00, 23.70it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.70it/s] 42%|####2     | 11/26 [00:00<00:00, 32.43it/s] 62%|######1   | 16/26 [00:00<00:00, 38.23it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.23it/s] 81%|########  | 21/26 [00:00<00:00, 37.42it/s]100%|##########| 26/26 [00:00<00:00, 40.63it/s]100%|##########| 26/26 [00:00<00:00, 32.03it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.58 (  0.54)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.58 (  0.54)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.07 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.54 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.54 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.01 (  0.03)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.56 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.56 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.13 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.59it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.02 (  0.02)
Overall Timing[ 30/  1]	epoch_time 0.0414 (0.0445)	validation_time 0.0003 (0.0006)	train_time 0.0410 (0.0439)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5111000094711781, 0.5139999985694885)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.01it/s] 19%|#9        | 5/26 [00:00<00:01, 17.35it/s] 35%|###4      | 9/26 [00:00<00:00, 22.77it/s] 46%|####6     | 12/26 [00:00<00:00, 24.90it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.01it/s] 69%|######9   | 18/26 [00:00<00:00, 27.14it/s] 81%|########  | 21/26 [00:00<00:00, 27.87it/s] 96%|#########6| 25/26 [00:01<00:00, 28.70it/s]100%|##########| 26/26 [00:01<00:00, 23.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 200
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 200
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 200
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 200
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 200
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 200
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 200
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 200
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 200
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 200
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 200
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 200
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 200
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 200
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 200
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 200
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 200
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 200
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 200
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 200
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 200
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 200
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 200
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 200
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 200
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 200
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
final projection at end of training
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.09 (  2.09)	train_acc   0.52 (  0.51)	train_minacc   0.56 (  0.54)	train_majacc   0.52 (  0.51)	train_corr   0.00 (  0.00)	l1 7.0086 (7.0083)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.65it/s] 23%|##3       | 6/26 [00:00<00:01, 17.42it/s]                                               23%|##3       | 6/26 [00:00<00:01, 17.42it/s] 42%|####2     | 11/26 [00:00<00:00, 26.54it/s] 62%|######1   | 16/26 [00:00<00:00, 32.82it/s]                                                62%|######1   | 16/26 [00:00<00:00, 32.82it/s] 81%|########  | 21/26 [00:00<00:00, 36.75it/s]100%|##########| 26/26 [00:00<00:00, 40.19it/s]100%|##########| 26/26 [00:00<00:00, 29.13it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.51 (  0.51)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.60 (  0.53)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.60 (  0.53)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.07 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.55 (  0.53)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.55 (  0.53)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.01 (  0.04)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.56 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.56 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.13 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.63it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.03 (  0.03)
Overall Timing[ 31/  1]	epoch_time 0.0446 (0.0445)	validation_time 0.0006 (0.0006)	train_time 0.0439 (0.0439)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5172000162899494, 0.5010000467300415)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.10it/s] 15%|#5        | 4/26 [00:00<00:01, 15.27it/s] 27%|##6       | 7/26 [00:00<00:00, 20.28it/s] 38%|###8      | 10/26 [00:00<00:00, 23.05it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.19it/s] 69%|######9   | 18/26 [00:00<00:00, 27.93it/s] 85%|########4 | 22/26 [00:00<00:00, 29.24it/s]100%|##########| 26/26 [00:01<00:00, 30.04it/s]100%|##########| 26/26 [00:01<00:00, 24.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 200
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 200
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 200
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 200
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 200
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 200
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 200
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 200
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 200
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 200
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 200
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 200
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 200
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 200
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 200
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 200
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 200
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 200
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 200
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 200
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 200
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 200
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 200
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 200
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 200
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 200
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
final projection at end of training
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.08 (  2.08)	train_acc   0.54 (  0.52)	train_minacc   0.53 (  0.52)	train_majacc   0.54 (  0.52)	train_corr   0.00 (  0.00)	l1 7.0092 (7.0091)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.58it/s] 23%|##3       | 6/26 [00:00<00:00, 30.15it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.15it/s] 42%|####2     | 11/26 [00:00<00:00, 37.34it/s] 62%|######1   | 16/26 [00:00<00:00, 40.85it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.85it/s] 81%|########  | 21/26 [00:00<00:00, 39.19it/s]100%|##########| 26/26 [00:00<00:00, 41.66it/s]100%|##########| 26/26 [00:00<00:00, 35.40it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.54 (  0.54)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.58 (  0.52)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.58 (  0.52)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.08 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.54 (  0.52)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.01 (  0.04)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.53 (  0.52)	test_majacc   0.54 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.12 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.08it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.04 (  0.04)
Overall Timing[ 32/  1]	epoch_time 0.0455 (0.0446)	validation_time 0.0004 (0.0006)	train_time 0.0451 (0.0439)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5218000118732452, 0.4830000102519989)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.95it/s] 15%|#5        | 4/26 [00:00<00:01, 20.89it/s] 27%|##6       | 7/26 [00:00<00:00, 24.51it/s] 38%|###8      | 10/26 [00:00<00:00, 26.17it/s] 50%|#####     | 13/26 [00:00<00:00, 27.48it/s] 62%|######1   | 16/26 [00:00<00:00, 27.80it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.60it/s] 88%|########8 | 23/26 [00:00<00:00, 28.70it/s]100%|##########| 26/26 [00:01<00:00, 25.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 200
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 200
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 200
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 200
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 200
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 200
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 200
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 200
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 200
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 200
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 200
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 200
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 200
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 200
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 200
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 200
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 200
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 200
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 200
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 200
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 200
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 200
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 200
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 200
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 200
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 200
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
final projection at end of training
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.07 (  2.08)	train_acc   0.54 (  0.52)	train_minacc   0.53 (  0.51)	train_majacc   0.55 (  0.52)	train_corr   0.00 (  0.00)	l1 7.0094 (7.0095)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.98it/s] 31%|###       | 8/26 [00:00<00:00, 37.30it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.30it/s] 50%|#####     | 13/26 [00:00<00:00, 40.05it/s] 69%|######9   | 18/26 [00:00<00:00, 41.45it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.45it/s] 88%|########8 | 23/26 [00:00<00:00, 41.53it/s]100%|##########| 26/26 [00:00<00:00, 37.70it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.53 (  0.53)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.58 (  0.49)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.58 (  0.49)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.08 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.53)	test_minacc   0.52 (  0.50)	test_majacc   0.51 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.01 (  0.04)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.53 (  0.50)	test_majacc   0.55 (  0.53)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.12 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.64it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.47 (  0.47)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.47 (  0.47)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.05 (  0.05)
Overall Timing[ 33/  1]	epoch_time 0.0450 (0.0446)	validation_time 0.0004 (0.0006)	train_time 0.0446 (0.0439)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5265000108480453, 0.4710000157356262)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:12,  2.04it/s] 15%|#5        | 4/26 [00:00<00:02,  8.19it/s] 27%|##6       | 7/26 [00:00<00:01, 13.28it/s] 38%|###8      | 10/26 [00:00<00:00, 17.35it/s] 50%|#####     | 13/26 [00:00<00:00, 20.01it/s] 65%|######5   | 17/26 [00:01<00:00, 23.30it/s] 77%|#######6  | 20/26 [00:01<00:00, 24.96it/s] 92%|#########2| 24/26 [00:01<00:00, 26.91it/s]100%|##########| 26/26 [00:01<00:00, 18.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 200
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 200
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 200
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 200
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 200
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 200
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 200
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 200
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 200
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 200
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 200
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 200
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 200
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 200
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 200
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 200
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 200
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 200
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 200
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 200
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 200
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 200
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 200
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 200
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 200
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 200
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
final projection at end of training
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.07 (  2.07)	train_acc   0.55 (  0.52)	train_minacc   0.50 (  0.49)	train_majacc   0.56 (  0.53)	train_corr   0.00 (  0.00)	l1 7.0094 (7.0095)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.11it/s] 23%|##3       | 6/26 [00:00<00:00, 26.19it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.19it/s] 42%|####2     | 11/26 [00:00<00:00, 35.50it/s] 65%|######5   | 17/26 [00:00<00:00, 42.70it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.70it/s] 85%|########4 | 22/26 [00:00<00:00, 44.28it/s]100%|##########| 26/26 [00:00<00:00, 36.42it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.56 (  0.48)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.56 (  0.48)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.09 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.49)	test_majacc   0.53 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.01 (  0.04)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.53)	test_minacc   0.50 (  0.48)	test_majacc   0.56 (  0.54)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.50 (  0.48)	test_majacc_d   0.56 (  0.54)	test_corr_d   0.12 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.56it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.47 (  0.47)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.47 (  0.47)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.06 (  0.06)
Overall Timing[ 34/  1]	epoch_time 0.0463 (0.0446)	validation_time 0.0004 (0.0006)	train_time 0.0459 (0.0440)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5293000157475471, 0.4690000116825104)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.81it/s] 15%|#5        | 4/26 [00:00<00:01, 19.30it/s] 27%|##6       | 7/26 [00:00<00:00, 23.75it/s] 42%|####2     | 11/26 [00:00<00:00, 27.06it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.95it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.45it/s] 88%|########8 | 23/26 [00:00<00:00, 30.22it/s]100%|##########| 26/26 [00:00<00:00, 26.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 200
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 200
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 200
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 200
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 200
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 200
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 200
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 200
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 200
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 200
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 200
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 200
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 200
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 200
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 200
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 200
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 200
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 200
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 200
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 200
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 200
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 200
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 200
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 200
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 200
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 200
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.06 (  2.06)	train_acc   0.56 (  0.53)	train_minacc   0.50 (  0.48)	train_majacc   0.57 (  0.53)	train_corr   0.00 (  0.00)	l1 7.0093 (7.0095)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.48it/s] 19%|#9        | 5/26 [00:00<00:01, 15.00it/s] 38%|###8      | 10/26 [00:00<00:00, 25.78it/s]                                                38%|###8      | 10/26 [00:00<00:00, 25.78it/s] 58%|#####7    | 15/26 [00:00<00:00, 32.60it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.32it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 36.32it/s]100%|##########| 26/26 [00:00<00:00, 42.48it/s]100%|##########| 26/26 [00:00<00:00, 29.45it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.53)	test_minacc   0.54 (  0.47)	test_majacc   0.55 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.54 (  0.47)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.10 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.49 (  0.47)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.49 (  0.47)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.01 (  0.04)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.53)	test_minacc   0.50 (  0.47)	test_majacc   0.57 (  0.54)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.53)	test_minacc_d   0.50 (  0.47)	test_majacc_d   0.57 (  0.54)	test_corr_d   0.12 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.28it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.46 (  0.46)	test_majacc   0.46 (  0.46)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.46 (  0.46)	test_majacc   0.46 (  0.46)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.06 (  0.06)
Overall Timing[ 35/  1]	epoch_time 0.0436 (0.0446)	validation_time 0.0004 (0.0006)	train_time 0.0431 (0.0439)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5310000134110451, 0.46300002932548523)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.63it/s] 19%|#9        | 5/26 [00:00<00:00, 21.83it/s] 31%|###       | 8/26 [00:00<00:00, 24.93it/s] 42%|####2     | 11/26 [00:00<00:00, 26.80it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.13it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.88it/s] 85%|########4 | 22/26 [00:00<00:00, 29.09it/s] 96%|#########6| 25/26 [00:00<00:00, 28.73it/s]100%|##########| 26/26 [00:01<00:00, 25.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 200
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 200
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 200
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 200
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 200
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 200
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 200
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 200
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 200
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 200
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 200
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 200
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 200
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 200
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 200
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 200
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 200
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 200
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 200
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 200
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 200
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 200
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 200
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 200
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 200
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 200
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
final projection at end of training
dim_v 512
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.05 (  2.06)	train_acc   0.55 (  0.53)	train_minacc   0.47 (  0.48)	train_majacc   0.56 (  0.54)	train_corr   0.00 (  0.00)	l1 7.0091 (7.0093)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.30it/s] 15%|#5        | 4/26 [00:00<00:01, 14.40it/s] 35%|###4      | 9/26 [00:00<00:00, 25.39it/s]                                               35%|###4      | 9/26 [00:00<00:00, 25.39it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.21it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.66it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.66it/s]100%|##########| 26/26 [00:00<00:00, 43.51it/s]100%|##########| 26/26 [00:00<00:00, 32.56it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.47 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.53)	test_minacc   0.54 (  0.46)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.54 (  0.46)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.10 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.48)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.48)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.02 (  0.04)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.53)	test_minacc   0.47 (  0.47)	test_majacc   0.56 (  0.54)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.56 (  0.54)	test_corr_d   0.12 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.44it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.46 (  0.46)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.46 (  0.46)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.07 (  0.07)
Overall Timing[ 36/  1]	epoch_time 0.0445 (0.0446)	validation_time 0.0003 (0.0006)	train_time 0.0442 (0.0440)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5329000106751919, 0.4580000340938568)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.23it/s] 19%|#9        | 5/26 [00:00<00:00, 21.02it/s] 35%|###4      | 9/26 [00:00<00:00, 25.43it/s] 50%|#####     | 13/26 [00:00<00:00, 27.85it/s] 65%|######5   | 17/26 [00:00<00:00, 29.14it/s] 81%|########  | 21/26 [00:00<00:00, 30.03it/s] 96%|#########6| 25/26 [00:00<00:00, 30.65it/s]100%|##########| 26/26 [00:00<00:00, 26.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 200
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 200
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 200
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 200
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 200
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 200
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 200
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 200
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 200
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 200
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 200
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 200
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 200
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 200
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 200
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 200
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 200
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 200
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 200
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 200
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 200
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 200
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 200
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 200
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 200
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 200
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
final projection at end of training
dim_v 512
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.05 (  2.05)	train_acc   0.55 (  0.53)	train_minacc   0.47 (  0.48)	train_majacc   0.56 (  0.54)	train_corr   0.00 (  0.00)	l1 7.0089 (7.0091)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.49it/s] 27%|##6       | 7/26 [00:00<00:00, 32.17it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.17it/s] 46%|####6     | 12/26 [00:00<00:00, 37.72it/s] 65%|######5   | 17/26 [00:00<00:00, 38.52it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.52it/s] 85%|########4 | 22/26 [00:00<00:00, 42.07it/s]100%|##########| 26/26 [00:00<00:00, 35.36it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.54)	test_minacc   0.53 (  0.46)	test_majacc   0.56 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.53 (  0.46)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.11 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.54)	test_minacc   0.54 (  0.47)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.54 (  0.47)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.02 (  0.05)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.54)	test_minacc   0.47 (  0.47)	test_majacc   0.56 (  0.55)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.12 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.42it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.46 (  0.46)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.46 (  0.46)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.07 (  0.07)
Overall Timing[ 37/  1]	epoch_time 0.0443 (0.0446)	validation_time 0.0004 (0.0006)	train_time 0.0439 (0.0439)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5366000141501427, 0.45900002121925354)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.96it/s] 19%|#9        | 5/26 [00:00<00:01, 20.08it/s] 31%|###       | 8/26 [00:00<00:00, 23.62it/s] 42%|####2     | 11/26 [00:00<00:00, 25.47it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.63it/s] 65%|######5   | 17/26 [00:00<00:00, 27.07it/s] 81%|########  | 21/26 [00:00<00:00, 28.21it/s] 96%|#########6| 25/26 [00:00<00:00, 29.01it/s]100%|##########| 26/26 [00:01<00:00, 24.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 200
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 200
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 200
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 200
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 200
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 200
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 200
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 200
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 200
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 200
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 200
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 200
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 200
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 200
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 200
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 200
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 200
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 200
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 200
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 200
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 200
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 200
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 200
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 200
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 200
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 200
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
final projection at end of training
dim_v 512
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.04 (  2.04)	train_acc   0.56 (  0.53)	train_minacc   0.47 (  0.48)	train_majacc   0.57 (  0.54)	train_corr   0.00 (  0.00)	l1 7.0087 (7.0089)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.88it/s] 19%|#9        | 5/26 [00:00<00:01, 18.20it/s] 38%|###8      | 10/26 [00:00<00:00, 28.88it/s]                                                38%|###8      | 10/26 [00:00<00:00, 28.88it/s] 58%|#####7    | 15/26 [00:00<00:00, 31.51it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.04it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 36.04it/s] 96%|#########6| 25/26 [00:00<00:00, 39.35it/s]100%|##########| 26/26 [00:00<00:00, 30.41it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.49 (  0.49)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.54)	test_minacc   0.56 (  0.46)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.56 (  0.46)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.12 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.54)	test_minacc   0.55 (  0.47)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.55 (  0.47)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.02 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.54)	test_minacc   0.47 (  0.47)	test_majacc   0.57 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.57 (  0.55)	test_corr_d   0.12 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.28it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.45 (  0.45)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.45 (  0.45)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.07 (  0.07)
Overall Timing[ 38/  1]	epoch_time 0.0432 (0.0446)	validation_time 0.0004 (0.0006)	train_time 0.0428 (0.0439)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5407000094652176, 0.45000001788139343)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.25it/s] 15%|#5        | 4/26 [00:00<00:01, 17.13it/s] 27%|##6       | 7/26 [00:00<00:00, 22.01it/s] 38%|###8      | 10/26 [00:00<00:00, 24.75it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.09it/s] 65%|######5   | 17/26 [00:00<00:00, 27.97it/s] 81%|########  | 21/26 [00:00<00:00, 28.99it/s] 96%|#########6| 25/26 [00:00<00:00, 29.73it/s]100%|##########| 26/26 [00:01<00:00, 24.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 200
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 200
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 200
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 200
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 200
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 200
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 200
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 200
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 200
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 200
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 200
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 200
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 200
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 200
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 200
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 200
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 200
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 200
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 200
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 200
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 200
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 200
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 200
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 200
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 200
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 200
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
final projection at end of training
dim_v 512
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.03 (  2.04)	train_acc   0.56 (  0.53)	train_minacc   0.47 (  0.47)	train_majacc   0.57 (  0.54)	train_corr   0.00 (  0.00)	l1 7.0085 (7.0087)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.71it/s] 15%|#5        | 4/26 [00:00<00:01, 21.07it/s] 35%|###4      | 9/26 [00:00<00:00, 32.71it/s]                                               35%|###4      | 9/26 [00:00<00:00, 32.71it/s] 54%|#####3    | 14/26 [00:00<00:00, 37.48it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.38it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 37.38it/s] 92%|#########2| 24/26 [00:00<00:00, 40.12it/s]100%|##########| 26/26 [00:00<00:00, 34.22it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.49 (  0.49)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.54)	test_minacc   0.58 (  0.46)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.58 (  0.46)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.12 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.54)	test_minacc   0.54 (  0.47)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.54 (  0.47)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.02 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.54)	test_minacc   0.47 (  0.46)	test_majacc   0.57 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.47 (  0.46)	test_majacc_d   0.57 (  0.55)	test_corr_d   0.11 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.81it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.08 (  0.08)
Overall Timing[ 39/  1]	epoch_time 0.0459 (0.0446)	validation_time 0.0004 (0.0006)	train_time 0.0455 (0.0440)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5395000118613243, 0.44600000977516174)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.25it/s]  8%|7         | 2/26 [00:00<00:03,  6.15it/s] 23%|##3       | 6/26 [00:00<00:01, 16.10it/s] 35%|###4      | 9/26 [00:00<00:00, 20.28it/s] 46%|####6     | 12/26 [00:00<00:00, 23.18it/s] 58%|#####7    | 15/26 [00:00<00:00, 23.93it/s] 73%|#######3  | 19/26 [00:00<00:00, 25.90it/s] 88%|########8 | 23/26 [00:01<00:00, 27.21it/s]100%|##########| 26/26 [00:01<00:00, 21.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 200
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 200
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 200
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 200
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 200
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 200
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 200
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 200
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 200
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 200
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 200
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 200
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 200
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 200
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 200
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 200
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 200
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 200
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 200
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 200
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 200
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 200
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 200
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 200
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 200
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 200
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.02 (  2.03)	train_acc   0.56 (  0.53)	train_minacc   0.47 (  0.47)	train_majacc   0.58 (  0.54)	train_corr   0.00 (  0.00)	l1 7.0083 (7.0085)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.91it/s] 27%|##6       | 7/26 [00:00<00:01, 18.86it/s]                                               27%|##6       | 7/26 [00:00<00:01, 18.86it/s] 46%|####6     | 12/26 [00:00<00:00, 27.65it/s] 65%|######5   | 17/26 [00:00<00:00, 31.67it/s]                                                65%|######5   | 17/26 [00:00<00:00, 31.67it/s] 85%|########4 | 22/26 [00:00<00:00, 35.15it/s]100%|##########| 26/26 [00:00<00:00, 27.81it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.47 (  0.47)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.55)	test_minacc   0.56 (  0.45)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.55)	test_minacc_d   0.56 (  0.45)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.13 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.54)	test_minacc   0.52 (  0.46)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.52 (  0.46)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.03 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.54)	test_minacc   0.47 (  0.46)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.47 (  0.46)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.11 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.69it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.08 (  0.08)
Overall Timing[ 40/  1]	epoch_time 0.0441 (0.0446)	validation_time 0.0003 (0.0006)	train_time 0.0438 (0.0440)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5400000128746033, 0.445000022649765)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.28it/s]  8%|7         | 2/26 [00:00<00:02,  8.93it/s] 19%|#9        | 5/26 [00:00<00:01, 17.53it/s] 31%|###       | 8/26 [00:00<00:00, 21.87it/s] 42%|####2     | 11/26 [00:00<00:00, 24.61it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.18it/s] 65%|######5   | 17/26 [00:00<00:00, 27.03it/s] 81%|########  | 21/26 [00:00<00:00, 28.32it/s] 96%|#########6| 25/26 [00:01<00:00, 29.24it/s]100%|##########| 26/26 [00:01<00:00, 24.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 200
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 200
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 200
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 200
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 200
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 200
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 200
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 200
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 200
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 200
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 200
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 200
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 200
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 200
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 200
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 200
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 200
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 200
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 200
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 200
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 200
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 200
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 200
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 200
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 200
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 200
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
final projection at end of training
dim_v 512
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.02 (  2.02)	train_acc   0.56 (  0.53)	train_minacc   0.47 (  0.47)	train_majacc   0.58 (  0.54)	train_corr   0.00 (  0.00)	l1 7.0081 (7.0083)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.64it/s] 23%|##3       | 6/26 [00:00<00:00, 30.01it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.01it/s] 42%|####2     | 11/26 [00:00<00:00, 38.15it/s] 62%|######1   | 16/26 [00:00<00:00, 41.95it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.95it/s] 81%|########  | 21/26 [00:00<00:00, 39.05it/s]100%|##########| 26/26 [00:00<00:00, 41.95it/s]100%|##########| 26/26 [00:00<00:00, 35.83it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.49 (  0.49)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.58 (  0.55)	test_minacc   0.56 (  0.45)	test_majacc   0.58 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.55)	test_minacc_d   0.56 (  0.45)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.13 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.54)	test_minacc   0.51 (  0.45)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.51 (  0.45)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.03 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.54)	test_minacc   0.47 (  0.45)	test_majacc   0.58 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.47 (  0.45)	test_majacc_d   0.58 (  0.56)	test_corr_d   0.11 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 55.80it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.08 (  0.08)
Overall Timing[ 41/  1]	epoch_time 0.0465 (0.0446)	validation_time 0.0004 (0.0006)	train_time 0.0460 (0.0440)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5419000096917153, 0.44200003147125244)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.97it/s] 15%|#5        | 4/26 [00:00<00:01, 16.70it/s] 27%|##6       | 7/26 [00:00<00:00, 21.27it/s] 38%|###8      | 10/26 [00:00<00:00, 23.30it/s] 50%|#####     | 13/26 [00:00<00:00, 25.25it/s] 62%|######1   | 16/26 [00:00<00:00, 26.32it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.02it/s] 88%|########8 | 23/26 [00:00<00:00, 28.04it/s]100%|##########| 26/26 [00:01<00:00, 23.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 200
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 200
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 200
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 200
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 200
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 200
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 200
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 200
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 200
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 200
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 200
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 200
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 200
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 200
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 200
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 200
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 200
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 200
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 200
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 200
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 200
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 200
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 200
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 200
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 200
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 200
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
final projection at end of training
dim_v 512
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.01 (  2.01)	train_acc   0.56 (  0.53)	train_minacc   0.44 (  0.46)	train_majacc   0.58 (  0.54)	train_corr   0.00 (  0.00)	l1 7.0079 (7.0081)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.83it/s] 27%|##6       | 7/26 [00:00<00:00, 28.87it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.87it/s] 46%|####6     | 12/26 [00:00<00:00, 36.17it/s] 65%|######5   | 17/26 [00:00<00:00, 39.65it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.65it/s] 85%|########4 | 22/26 [00:00<00:00, 40.22it/s]100%|##########| 26/26 [00:00<00:00, 35.28it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.47 (  0.47)	test_majacc   0.58 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.58 (  0.55)	test_minacc   0.56 (  0.45)	test_majacc   0.59 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.55)	test_minacc_d   0.56 (  0.45)	test_majacc_d   0.59 (  0.57)	test_corr_d   0.14 (  0.06)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.55)	test_minacc   0.51 (  0.45)	test_majacc   0.58 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.51 (  0.45)	test_majacc_d   0.58 (  0.56)	test_corr_d   0.03 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.54)	test_minacc   0.44 (  0.45)	test_majacc   0.58 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.44 (  0.45)	test_majacc_d   0.58 (  0.56)	test_corr_d   0.11 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 54.89it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.08 (  0.08)
Overall Timing[ 42/  1]	epoch_time 0.0433 (0.0446)	validation_time 0.0004 (0.0006)	train_time 0.0428 (0.0440)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5437000138163567, 0.4440000355243683)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.66it/s] 15%|#5        | 4/26 [00:00<00:01, 20.83it/s] 27%|##6       | 7/26 [00:00<00:00, 24.25it/s] 42%|####2     | 11/26 [00:00<00:00, 26.91it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.64it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.28it/s] 88%|########8 | 23/26 [00:00<00:00, 30.11it/s]100%|##########| 26/26 [00:00<00:00, 26.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 200
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 200
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 200
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 200
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 200
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 200
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 200
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 200
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 200
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 200
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 200
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 200
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 200
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 200
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 200
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 200
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 200
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 200
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 200
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 200
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 200
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 200
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 200
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 200
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 200
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 200
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
final projection at end of training
dim_v 512
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   2.00 (  2.01)	train_acc   0.56 (  0.53)	train_minacc   0.44 (  0.46)	train_majacc   0.58 (  0.54)	train_corr   0.00 (  0.00)	l1 7.0078 (7.0080)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.64it/s] 23%|##3       | 6/26 [00:00<00:00, 27.63it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.63it/s] 42%|####2     | 11/26 [00:00<00:00, 35.86it/s] 65%|######5   | 17/26 [00:00<00:00, 40.31it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.31it/s] 85%|########4 | 22/26 [00:00<00:00, 42.49it/s]100%|##########| 26/26 [00:00<00:00, 36.09it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.47 (  0.47)	test_majacc   0.58 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.59 (  0.56)	test_minacc   0.58 (  0.45)	test_majacc   0.59 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.59 (  0.56)	test_minacc_d   0.58 (  0.45)	test_majacc_d   0.59 (  0.57)	test_corr_d   0.14 (  0.06)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.55)	test_minacc   0.48 (  0.45)	test_majacc   0.58 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.48 (  0.45)	test_majacc_d   0.58 (  0.56)	test_corr_d   0.03 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.54)	test_minacc   0.44 (  0.45)	test_majacc   0.58 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.44 (  0.45)	test_majacc_d   0.58 (  0.56)	test_corr_d   0.11 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 54.46it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.43 (  0.43)	test_majacc   0.54 (  0.54)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.43 (  0.43)	test_majacc   0.54 (  0.54)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.08 (  0.08)
Overall Timing[ 43/  1]	epoch_time 0.0411 (0.0445)	validation_time 0.0004 (0.0006)	train_time 0.0406 (0.0439)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5440000163316727, 0.445000022649765)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.59it/s] 12%|#1        | 3/26 [00:00<00:01, 12.59it/s] 23%|##3       | 6/26 [00:00<00:01, 19.36it/s] 35%|###4      | 9/26 [00:00<00:00, 22.85it/s] 50%|#####     | 13/26 [00:00<00:00, 25.83it/s] 65%|######5   | 17/26 [00:00<00:00, 27.44it/s] 81%|########  | 21/26 [00:00<00:00, 28.51it/s] 96%|#########6| 25/26 [00:00<00:00, 29.21it/s]100%|##########| 26/26 [00:01<00:00, 23.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 200
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 200
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 200
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 200
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 200
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 200
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 200
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 200
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 200
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 200
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 200
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 200
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 200
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 200
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 200
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 200
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 200
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 200
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 200
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 200
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 200
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 200
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 200
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 200
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 200
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 200
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
final projection at end of training
dim_v 512
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.99 (  2.00)	train_acc   0.56 (  0.53)	train_minacc   0.44 (  0.46)	train_majacc   0.58 (  0.54)	train_corr   0.00 (  0.00)	l1 7.0076 (7.0078)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 22.63it/s] 31%|###       | 8/26 [00:00<00:00, 35.34it/s]                                               31%|###       | 8/26 [00:00<00:00, 35.34it/s] 50%|#####     | 13/26 [00:00<00:00, 40.27it/s] 69%|######9   | 18/26 [00:00<00:00, 42.96it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.96it/s] 88%|########8 | 23/26 [00:00<00:00, 40.24it/s]100%|##########| 26/26 [00:00<00:00, 37.82it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.47 (  0.47)	test_majacc   0.58 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.59 (  0.56)	test_minacc   0.58 (  0.45)	test_majacc   0.60 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.59 (  0.56)	test_minacc_d   0.58 (  0.45)	test_majacc_d   0.60 (  0.58)	test_corr_d   0.15 (  0.06)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.46 (  0.45)	test_majacc   0.56 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.46 (  0.45)	test_majacc_d   0.56 (  0.57)	test_corr_d   0.04 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.54)	test_minacc   0.44 (  0.44)	test_majacc   0.58 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.58 (  0.56)	test_corr_d   0.11 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.53it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.09 (  0.09)
Overall Timing[ 44/  1]	epoch_time 0.0417 (0.0445)	validation_time 0.0003 (0.0005)	train_time 0.0414 (0.0438)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5449000090956688, 0.4390000104904175)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.49it/s] 15%|#5        | 4/26 [00:00<00:01, 14.31it/s] 27%|##6       | 7/26 [00:00<00:00, 19.81it/s] 42%|####2     | 11/26 [00:00<00:00, 24.25it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.85it/s] 65%|######5   | 17/26 [00:00<00:00, 26.92it/s] 81%|########  | 21/26 [00:00<00:00, 28.01it/s] 96%|#########6| 25/26 [00:01<00:00, 28.76it/s]100%|##########| 26/26 [00:01<00:00, 23.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 200
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 200
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 200
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 200
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 200
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 200
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 200
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 200
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 200
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 200
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 200
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 200
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 200
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 200
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 200
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 200
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 200
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 200
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 200
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 200
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 200
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 200
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 200
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 200
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 200
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 200
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
final projection at end of training
dim_v 512
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.99 (  1.99)	train_acc   0.55 (  0.53)	train_minacc   0.41 (  0.46)	train_majacc   0.57 (  0.54)	train_corr   0.00 (  0.00)	l1 7.0074 (7.0076)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.11it/s] 23%|##3       | 6/26 [00:00<00:00, 22.77it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.77it/s] 42%|####2     | 11/26 [00:00<00:00, 31.74it/s] 62%|######1   | 16/26 [00:00<00:00, 37.75it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.75it/s] 81%|########  | 21/26 [00:00<00:00, 39.47it/s]100%|##########| 26/26 [00:00<00:00, 33.21it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.47 (  0.47)	test_majacc   0.58 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.60 (  0.56)	test_minacc   0.58 (  0.45)	test_majacc   0.60 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.60 (  0.56)	test_minacc_d   0.58 (  0.45)	test_majacc_d   0.60 (  0.58)	test_corr_d   0.15 (  0.06)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.46 (  0.45)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.46 (  0.45)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.04 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.41 (  0.44)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.41 (  0.44)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.11 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.58it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.42 (  0.42)	test_majacc   0.54 (  0.54)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.42 (  0.42)	test_majacc   0.54 (  0.54)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.09 (  0.09)
Overall Timing[ 45/  1]	epoch_time 0.0421 (0.0444)	validation_time 0.0004 (0.0005)	train_time 0.0417 (0.0438)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5455000124573708, 0.4350000321865082)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.89it/s] 19%|#9        | 5/26 [00:00<00:01, 12.51it/s] 31%|###       | 8/26 [00:00<00:01, 17.10it/s] 42%|####2     | 11/26 [00:00<00:00, 20.35it/s] 54%|#####3    | 14/26 [00:00<00:00, 22.92it/s] 69%|######9   | 18/26 [00:00<00:00, 25.61it/s] 85%|########4 | 22/26 [00:01<00:00, 27.59it/s] 96%|#########6| 25/26 [00:01<00:00, 28.21it/s]100%|##########| 26/26 [00:01<00:00, 21.08it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 200
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 200
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 200
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 200
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 200
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 200
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 200
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 200
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 200
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 200
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 200
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 200
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 200
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 200
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 200
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 200
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 200
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 200
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 200
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 200
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 200
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 200
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 200
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 200
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 200
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 200
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
final projection at end of training
dim_v 512
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.98 (  1.98)	train_acc   0.56 (  0.53)	train_minacc   0.44 (  0.46)	train_majacc   0.58 (  0.54)	train_corr   0.00 (  0.00)	l1 7.0072 (7.0074)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.80it/s] 23%|##3       | 6/26 [00:00<00:01, 16.17it/s]                                               23%|##3       | 6/26 [00:00<00:01, 16.17it/s] 42%|####2     | 11/26 [00:00<00:00, 25.14it/s] 62%|######1   | 16/26 [00:00<00:00, 31.99it/s]                                                62%|######1   | 16/26 [00:00<00:00, 31.99it/s] 81%|########  | 21/26 [00:00<00:00, 34.51it/s]100%|##########| 26/26 [00:00<00:00, 38.21it/s]100%|##########| 26/26 [00:00<00:00, 26.95it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.46 (  0.46)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.60 (  0.56)	test_minacc   0.56 (  0.44)	test_majacc   0.61 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.60 (  0.56)	test_minacc_d   0.56 (  0.44)	test_majacc_d   0.61 (  0.58)	test_corr_d   0.16 (  0.07)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.55)	test_minacc   0.46 (  0.44)	test_majacc   0.58 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.46 (  0.44)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.04 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.55)	test_minacc   0.44 (  0.45)	test_majacc   0.58 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.44 (  0.45)	test_majacc_d   0.58 (  0.56)	test_corr_d   0.11 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 23.80it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.09 (  0.09)
Overall Timing[ 46/  1]	epoch_time 0.0457 (0.0444)	validation_time 0.0008 (0.0006)	train_time 0.0449 (0.0438)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5465000090003014, 0.43800002336502075)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.65it/s] 19%|#9        | 5/26 [00:00<00:00, 23.67it/s] 31%|###       | 8/26 [00:00<00:00, 26.12it/s] 42%|####2     | 11/26 [00:00<00:00, 26.39it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.56it/s] 65%|######5   | 17/26 [00:00<00:00, 27.44it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.10it/s] 88%|########8 | 23/26 [00:00<00:00, 28.56it/s]100%|##########| 26/26 [00:00<00:00, 28.94it/s]100%|##########| 26/26 [00:01<00:00, 25.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 200
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 200
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 200
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 200
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 200
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 200
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 200
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 200
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 200
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 200
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 200
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 200
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 200
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 200
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 200
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 200
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 200
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 200
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 200
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 200
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 200
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 200
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 200
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 200
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 200
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 200
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
final projection at end of training
dim_v 512
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.97 (  1.97)	train_acc   0.57 (  0.53)	train_minacc   0.44 (  0.46)	train_majacc   0.59 (  0.54)	train_corr   0.00 (  0.00)	l1 7.0071 (7.0073)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.17it/s] 31%|###       | 8/26 [00:00<00:00, 37.36it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.36it/s] 50%|#####     | 13/26 [00:00<00:00, 40.88it/s] 69%|######9   | 18/26 [00:00<00:00, 41.82it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.82it/s] 88%|########8 | 23/26 [00:00<00:00, 42.69it/s]100%|##########| 26/26 [00:00<00:00, 38.37it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.46 (  0.46)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.59 (  0.56)	test_minacc   0.54 (  0.45)	test_majacc   0.60 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.59 (  0.56)	test_minacc_d   0.54 (  0.45)	test_majacc_d   0.60 (  0.58)	test_corr_d   0.16 (  0.07)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.55)	test_minacc   0.48 (  0.44)	test_majacc   0.58 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.48 (  0.44)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.04 (  0.07)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.55)	test_minacc   0.44 (  0.45)	test_majacc   0.58 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.44 (  0.45)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.08it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.56 (  0.56)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.56 (  0.56)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.09 (  0.09)
Overall Timing[ 47/  1]	epoch_time 0.0420 (0.0444)	validation_time 0.0004 (0.0005)	train_time 0.0415 (0.0438)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5476000137925148, 0.4410000145435333)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:03,  7.59it/s] 19%|#9        | 5/26 [00:00<00:01, 14.93it/s] 31%|###       | 8/26 [00:00<00:00, 19.80it/s] 42%|####2     | 11/26 [00:00<00:00, 22.81it/s] 54%|#####3    | 14/26 [00:00<00:00, 24.93it/s] 65%|######5   | 17/26 [00:00<00:00, 25.78it/s] 77%|#######6  | 20/26 [00:00<00:00, 26.66it/s] 88%|########8 | 23/26 [00:01<00:00, 26.69it/s]100%|##########| 26/26 [00:01<00:00, 27.62it/s]100%|##########| 26/26 [00:01<00:00, 22.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 200
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 200
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 200
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 200
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 200
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 200
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 200
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 200
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 200
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 200
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 200
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 200
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 200
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 200
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 200
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 200
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 200
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 200
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 200
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 200
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 200
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 200
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 200
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 200
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 200
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 200
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
final projection at end of training
dim_v 512
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.96 (  1.97)	train_acc   0.56 (  0.53)	train_minacc   0.38 (  0.45)	train_majacc   0.59 (  0.54)	train_corr   0.00 (  0.00)	l1 7.0069 (7.0071)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.99it/s] 23%|##3       | 6/26 [00:00<00:00, 30.23it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.23it/s] 42%|####2     | 11/26 [00:00<00:00, 36.86it/s] 62%|######1   | 16/26 [00:00<00:00, 39.44it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.44it/s] 81%|########  | 21/26 [00:00<00:00, 41.06it/s]100%|##########| 26/26 [00:00<00:00, 43.45it/s]100%|##########| 26/26 [00:00<00:00, 35.95it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.44 (  0.44)	test_majacc   0.58 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.59 (  0.56)	test_minacc   0.51 (  0.44)	test_majacc   0.60 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.59 (  0.56)	test_minacc_d   0.51 (  0.44)	test_majacc_d   0.60 (  0.58)	test_corr_d   0.17 (  0.07)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.55)	test_minacc   0.48 (  0.44)	test_majacc   0.59 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.55)	test_minacc_d   0.48 (  0.44)	test_majacc_d   0.59 (  0.57)	test_corr_d   0.05 (  0.07)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.55)	test_minacc   0.41 (  0.44)	test_majacc   0.59 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.41 (  0.44)	test_majacc_d   0.59 (  0.57)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.61it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.09 (  0.09)
Overall Timing[ 48/  1]	epoch_time 0.0453 (0.0444)	validation_time 0.0004 (0.0005)	train_time 0.0449 (0.0438)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5488000137209892, 0.4390000104904175)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.23it/s] 19%|#9        | 5/26 [00:00<00:00, 21.92it/s] 31%|###       | 8/26 [00:00<00:00, 24.80it/s] 42%|####2     | 11/26 [00:00<00:00, 26.47it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.66it/s] 69%|######9   | 18/26 [00:00<00:00, 27.84it/s] 81%|########  | 21/26 [00:00<00:00, 28.16it/s] 96%|#########6| 25/26 [00:00<00:00, 28.92it/s]100%|##########| 26/26 [00:01<00:00, 25.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 200
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 200
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 200
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 200
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 200
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 200
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 200
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 200
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 200
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 200
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 200
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 200
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 200
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 200
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 200
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 200
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 200
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 200
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 200
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 200
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 200
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 200
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 200
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 200
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 200
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 200
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
final projection at end of training
dim_v 512
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   1.95 (  1.96)	train_acc   0.56 (  0.53)	train_minacc   0.38 (  0.46)	train_majacc   0.59 (  0.54)	train_corr   0.00 (  0.00)	l1 7.0067 (7.0069)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.30it/s] 27%|##6       | 7/26 [00:00<00:00, 33.90it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.90it/s] 46%|####6     | 12/26 [00:00<00:00, 39.71it/s] 65%|######5   | 17/26 [00:00<00:00, 38.28it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.28it/s] 85%|########4 | 22/26 [00:00<00:00, 40.69it/s]100%|##########| 26/26 [00:00<00:00, 35.32it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.42 (  0.42)	test_majacc   0.58 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.59 (  0.56)	test_minacc   0.51 (  0.44)	test_majacc   0.60 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.59 (  0.56)	test_minacc_d   0.51 (  0.44)	test_majacc_d   0.60 (  0.58)	test_corr_d   0.17 (  0.07)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.55)	test_minacc   0.48 (  0.44)	test_majacc   0.58 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.48 (  0.44)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.05 (  0.07)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.55)	test_minacc   0.38 (  0.44)	test_majacc   0.59 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.38 (  0.44)	test_majacc_d   0.59 (  0.57)	test_corr_d   0.10 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.77it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.42 (  0.42)	test_majacc   0.56 (  0.56)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.42 (  0.42)	test_majacc   0.56 (  0.56)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.09 (  0.09)
Overall Timing[ 49/  1]	epoch_time 0.0447 (0.0444)	validation_time 0.0004 (0.0005)	train_time 0.0442 (0.0438)
record: (train_acc, test_acc) (0.6873000293970108, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5497000125050545, 0.43800002336502075)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.160 MB of 0.160 MB uploadedwandb: \ 0.160 MB of 0.160 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmpgactypyp'
wandb: ERROR Internal wandb error: file data was not synced
