hello
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_115301-bd3d4cz7
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/bd3d4cz7
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=15.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1207
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6087, 3, 32, 32) (5913, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:39,  1.58s/it] 19%|#9        | 5/26 [00:01<00:05,  3.81it/s] 35%|###4      | 9/26 [00:01<00:02,  7.45it/s] 50%|#####     | 13/26 [00:01<00:01, 11.36it/s] 65%|######5   | 17/26 [00:02<00:00, 15.30it/s] 81%|########  | 21/26 [00:02<00:00, 18.99it/s] 96%|#########6| 25/26 [00:02<00:00, 22.33it/s]100%|##########| 26/26 [00:02<00:00,  9.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 10.206 (12.632)	train_nll   0.47 (  0.53)	train_penalty   0.10 (  0.18)	weight_norm   9.74 ( 12.10)	train_acc   0.82 (  0.80)	train_minacc   0.02 (  0.08)	train_majacc   1.00 (  0.93)	train_corr   0.00 (  0.00)	l1 7.5044 (7.7334)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.45it/s] 35%|###4      | 9/26 [00:00<00:00, 38.66it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.66it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.86it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.86it/s] 81%|########  | 21/26 [00:00<00:00, 47.15it/s]100%|##########| 26/26 [00:00<00:00, 42.12it/s]
Test: [   0/  26]	Loss 0.405 (0.405)	test_acc   0.86 (  0.86)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.405 (0.405)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.413 (0.420)	test_acc   0.86 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.413 (0.420)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.97)
Test: [  20/  26]	Loss 0.400 (0.422)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.02)	test_majacc   0.98 (  0.99)	Loss_d 0.400 (0.422)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.02)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.450 (0.416)	test_acc   0.83 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.450 (0.416)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.57it/s]100%|##########| 1/1 [00:00<00:00,  2.57it/s]
Test: [  0/  1]	Loss 1.677 (1.677)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.98 (  0.98)	Loss_d 1.677 (1.677)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.677 (1.677)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.98 (  0.98)	Loss_d 1.677 (1.677)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/53/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0762 (0.0762)	validation_time 0.0067 (0.0067)	train_time 0.0644 (0.0644)
record: (train_acc, test_acc) (0.8451000269651413, 0.10900000482797623)
last accs (train_acc, test_acc) (0.8451000269651413, 0.10900000482797623)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.23it/s] 15%|#5        | 4/26 [00:00<00:01, 17.07it/s] 31%|###       | 8/26 [00:00<00:00, 23.61it/s] 46%|####6     | 12/26 [00:00<00:00, 27.47it/s] 62%|######1   | 16/26 [00:00<00:00, 29.34it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.76it/s] 92%|#########2| 24/26 [00:00<00:00, 31.63it/s]100%|##########| 26/26 [00:00<00:00, 26.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 5.387 (7.402)	train_nll   0.43 (  0.41)	train_penalty   0.08 (  0.06)	weight_norm   4.95 (  6.99)	train_acc   0.82 (  0.85)	train_minacc   0.02 (  0.03)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 6.8460 (7.2894)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.09it/s] 35%|###4      | 9/26 [00:00<00:00, 37.10it/s]                                               35%|###4      | 9/26 [00:00<00:00, 37.10it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.57it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.57it/s] 81%|########  | 21/26 [00:00<00:00, 46.34it/s]100%|##########| 26/26 [00:00<00:00, 41.45it/s]
Test: [   0/  26]	Loss 0.418 (0.418)	test_acc   0.81 (  0.81)	test_minacc   0.27 (  0.27)	test_majacc   0.90 (  0.90)	Loss_d 0.418 (0.418)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.414 (0.411)	test_acc   0.81 (  0.82)	test_minacc   0.17 (  0.26)	test_majacc   0.91 (  0.92)	Loss_d 0.414 (0.411)	test_acc_d   0.81 (  0.82)	test_minacc_d   0.17 (  0.26)	test_majacc_d   0.91 (  0.92)	test_corr_d   0.87 (  0.86)
Test: [  20/  26]	Loss 0.387 (0.418)	test_acc   0.81 (  0.82)	test_minacc   0.28 (  0.25)	test_majacc   0.91 (  0.92)	Loss_d 0.387 (0.418)	test_acc_d   0.81 (  0.82)	test_minacc_d   0.28 (  0.25)	test_majacc_d   0.91 (  0.92)	test_corr_d   0.84 (  0.86)
Test: [  26/  26]	Loss 0.410 (0.412)	test_acc   0.84 (  0.82)	test_minacc   0.30 (  0.25)	test_majacc   0.96 (  0.92)	Loss_d 0.410 (0.412)	test_acc_d   0.84 (  0.82)	test_minacc_d   0.30 (  0.25)	test_majacc_d   0.96 (  0.92)	test_corr_d   0.87 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.71it/s]
Test: [  0/  1]	Loss 1.521 (1.521)	test_acc   0.31 (  0.31)	test_minacc   0.24 (  0.24)	test_majacc   0.96 (  0.96)	Loss_d 1.521 (1.521)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.69 (  0.69)
Test: [  1/  1]	Loss 1.521 (1.521)	test_acc   0.31 (  0.31)	test_minacc   0.24 (  0.24)	test_majacc   0.96 (  0.96)	Loss_d 1.521 (1.521)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.69 (  0.69)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/53/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0382 (0.0572)	validation_time 0.0004 (0.0036)	train_time 0.0378 (0.0511)
record: (train_acc, test_acc) (0.8213000263571739, 0.3100000023841858)
last accs (train_acc, test_acc) (0.8213000263571739, 0.3100000023841858)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.08it/s] 23%|##3       | 6/26 [00:00<00:00, 26.11it/s] 38%|###8      | 10/26 [00:00<00:00, 29.67it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.64it/s] 69%|######9   | 18/26 [00:00<00:00, 32.66it/s] 85%|########4 | 22/26 [00:00<00:00, 33.13it/s]100%|##########| 26/26 [00:00<00:00, 33.60it/s]100%|##########| 26/26 [00:00<00:00, 29.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 3.286 (4.131)	train_nll   0.45 (  0.40)	train_penalty   0.08 (  0.05)	weight_norm   2.84 (  3.73)	train_acc   0.80 (  0.84)	train_minacc   0.00 (  0.05)	train_majacc   0.97 (  0.98)	train_corr   0.00 (  0.00)	l1 5.7420 (6.2373)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.13it/s] 23%|##3       | 6/26 [00:00<00:00, 31.53it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.53it/s] 46%|####6     | 12/26 [00:00<00:00, 40.19it/s] 69%|######9   | 18/26 [00:00<00:00, 45.58it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.58it/s] 92%|#########2| 24/26 [00:00<00:00, 45.77it/s]100%|##########| 26/26 [00:00<00:00, 39.65it/s]
Test: [   0/  26]	Loss 0.347 (0.347)	test_acc   0.86 (  0.86)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.347 (0.347)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.369 (0.380)	test_acc   0.86 (  0.85)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.369 (0.380)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.345 (0.386)	test_acc   0.84 (  0.85)	test_minacc   0.07 (  0.06)	test_majacc   0.98 (  0.99)	Loss_d 0.345 (0.386)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.07 (  0.06)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.93 (  0.94)
Test: [  26/  26]	Loss 0.391 (0.380)	test_acc   0.83 (  0.85)	test_minacc   0.07 (  0.06)	test_majacc   1.00 (  0.99)	Loss_d 0.391 (0.380)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.07 (  0.06)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.20it/s]
Test: [  0/  1]	Loss 1.773 (1.773)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.98 (  0.98)	Loss_d 1.773 (1.773)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.86 (  0.86)
Test: [  1/  1]	Loss 1.773 (1.773)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.98 (  0.98)	Loss_d 1.773 (1.773)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.86 (  0.86)
Overall Timing[  2/  1]	epoch_time 0.0373 (0.0506)	validation_time 0.0003 (0.0025)	train_time 0.0370 (0.0464)
record: (train_acc, test_acc) (0.8213000263571739, 0.3100000023841858)
last accs (train_acc, test_acc) (0.8480000278353691, 0.16300000250339508)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.62it/s] 19%|#9        | 5/26 [00:00<00:01, 20.77it/s] 35%|###4      | 9/26 [00:00<00:00, 26.90it/s] 50%|#####     | 13/26 [00:00<00:00, 29.68it/s] 65%|######5   | 17/26 [00:00<00:00, 31.55it/s] 81%|########  | 21/26 [00:00<00:00, 33.09it/s] 96%|#########6| 25/26 [00:00<00:00, 34.13it/s]100%|##########| 26/26 [00:00<00:00, 28.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 2.183 (2.620)	train_nll   0.41 (  0.38)	train_penalty   0.07 (  0.04)	weight_norm   1.77 (  2.24)	train_acc   0.81 (  0.85)	train_minacc   0.00 (  0.09)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 5.2288 (5.3360)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.32it/s] 23%|##3       | 6/26 [00:00<00:00, 32.52it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.52it/s] 46%|####6     | 12/26 [00:00<00:00, 39.73it/s] 65%|######5   | 17/26 [00:00<00:00, 42.91it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.91it/s] 88%|########8 | 23/26 [00:00<00:00, 46.75it/s]100%|##########| 26/26 [00:00<00:00, 39.16it/s]
Test: [   0/  26]	Loss 0.332 (0.332)	test_acc   0.86 (  0.86)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.332 (0.332)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.324 (0.341)	test_acc   0.86 (  0.85)	test_minacc   0.02 (  0.07)	test_majacc   1.00 (  0.99)	Loss_d 0.324 (0.341)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.02 (  0.07)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.328 (0.349)	test_acc   0.85 (  0.85)	test_minacc   0.09 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.328 (0.349)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.09 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  26/  26]	Loss 0.364 (0.345)	test_acc   0.82 (  0.85)	test_minacc   0.05 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.364 (0.345)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.05 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.84it/s]
Test: [  0/  1]	Loss 1.679 (1.679)	test_acc   0.18 (  0.18)	test_minacc   0.08 (  0.08)	test_majacc   1.00 (  1.00)	Loss_d 1.679 (1.679)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.08 (  0.08)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.84 (  0.84)
Test: [  1/  1]	Loss 1.679 (1.679)	test_acc   0.18 (  0.18)	test_minacc   0.08 (  0.08)	test_majacc   1.00 (  1.00)	Loss_d 1.679 (1.679)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.08 (  0.08)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.84 (  0.84)
Overall Timing[  3/  1]	epoch_time 0.0358 (0.0469)	validation_time 0.0004 (0.0020)	train_time 0.0354 (0.0436)
record: (train_acc, test_acc) (0.8213000263571739, 0.3100000023841858)
last accs (train_acc, test_acc) (0.8532000225782395, 0.17600001394748688)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.57it/s] 15%|#5        | 4/26 [00:00<00:01, 16.19it/s] 31%|###       | 8/26 [00:00<00:00, 23.68it/s] 42%|####2     | 11/26 [00:00<00:00, 25.70it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.83it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.50it/s] 88%|########8 | 23/26 [00:00<00:00, 31.78it/s]100%|##########| 26/26 [00:00<00:00, 26.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.554 (1.795)	train_nll   0.40 (  0.37)	train_penalty   0.05 (  0.03)	weight_norm   1.15 (  1.43)	train_acc   0.83 (  0.85)	train_minacc   0.11 (  0.12)	train_majacc   0.98 (  0.98)	train_corr   0.00 (  0.00)	l1 5.3949 (5.1276)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.58it/s] 27%|##6       | 7/26 [00:00<00:00, 34.52it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.52it/s] 46%|####6     | 12/26 [00:00<00:00, 40.99it/s] 69%|######9   | 18/26 [00:00<00:00, 43.38it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.38it/s] 92%|#########2| 24/26 [00:00<00:00, 48.05it/s]100%|##########| 26/26 [00:00<00:00, 40.11it/s]
Test: [   0/  26]	Loss 0.328 (0.328)	test_acc   0.86 (  0.86)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.328 (0.328)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.330 (0.347)	test_acc   0.85 (  0.85)	test_minacc   0.07 (  0.09)	test_majacc   0.98 (  0.98)	Loss_d 0.330 (0.347)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.07 (  0.09)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.324 (0.354)	test_acc   0.85 (  0.85)	test_minacc   0.12 (  0.08)	test_majacc   0.98 (  0.98)	Loss_d 0.324 (0.354)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.12 (  0.08)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.94)
Test: [  26/  26]	Loss 0.364 (0.348)	test_acc   0.84 (  0.85)	test_minacc   0.14 (  0.09)	test_majacc   0.99 (  0.98)	Loss_d 0.364 (0.348)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.14 (  0.09)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.93 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.46it/s]
Test: [  0/  1]	Loss 1.879 (1.879)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 1.879 (1.879)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.82 (  0.82)
Test: [  1/  1]	Loss 1.879 (1.879)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 1.879 (1.879)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.82 (  0.82)
Overall Timing[  4/  1]	epoch_time 0.0375 (0.0450)	validation_time 0.0005 (0.0017)	train_time 0.0371 (0.0423)
record: (train_acc, test_acc) (0.8213000263571739, 0.3100000023841858)
last accs (train_acc, test_acc) (0.8504000244140625, 0.19700001180171967)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.33it/s] 15%|#5        | 4/26 [00:00<00:01, 17.53it/s] 31%|###       | 8/26 [00:00<00:00, 24.04it/s] 46%|####6     | 12/26 [00:00<00:00, 27.78it/s] 62%|######1   | 16/26 [00:00<00:00, 30.00it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.46it/s] 92%|#########2| 24/26 [00:00<00:00, 32.58it/s]100%|##########| 26/26 [00:00<00:00, 27.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.129 (1.284)	train_nll   0.38 (  0.36)	train_penalty   0.04 (  0.03)	weight_norm   0.75 (  0.93)	train_acc   0.84 (  0.85)	train_minacc   0.14 (  0.14)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 6.0287 (5.7604)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.88it/s] 35%|###4      | 9/26 [00:00<00:00, 39.57it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.57it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.85it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.85it/s] 81%|########  | 21/26 [00:00<00:00, 46.80it/s]100%|##########| 26/26 [00:00<00:00, 42.24it/s]
Test: [   0/  26]	Loss 0.351 (0.351)	test_acc   0.84 (  0.84)	test_minacc   0.20 (  0.20)	test_majacc   0.94 (  0.94)	Loss_d 0.351 (0.351)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.354 (0.351)	test_acc   0.85 (  0.84)	test_minacc   0.28 (  0.24)	test_majacc   0.94 (  0.95)	Loss_d 0.354 (0.351)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.28 (  0.24)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.89 (  0.89)
Test: [  20/  26]	Loss 0.319 (0.359)	test_acc   0.84 (  0.84)	test_minacc   0.22 (  0.23)	test_majacc   0.95 (  0.95)	Loss_d 0.319 (0.359)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.22 (  0.23)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.90 (  0.89)
Test: [  26/  26]	Loss 0.348 (0.356)	test_acc   0.84 (  0.84)	test_minacc   0.36 (  0.23)	test_majacc   0.94 (  0.95)	Loss_d 0.348 (0.356)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.36 (  0.23)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.87 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.99it/s]
Test: [  0/  1]	Loss 1.707 (1.707)	test_acc   0.29 (  0.29)	test_minacc   0.22 (  0.22)	test_majacc   0.97 (  0.97)	Loss_d 1.707 (1.707)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.70 (  0.70)
Test: [  1/  1]	Loss 1.707 (1.707)	test_acc   0.29 (  0.29)	test_minacc   0.22 (  0.22)	test_majacc   0.97 (  0.97)	Loss_d 1.707 (1.707)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.70 (  0.70)
Overall Timing[  5/  1]	epoch_time 0.0363 (0.0436)	validation_time 0.0004 (0.0015)	train_time 0.0359 (0.0412)
record: (train_acc, test_acc) (0.8213000263571739, 0.3100000023841858)
last accs (train_acc, test_acc) (0.8412000193595887, 0.29200002551078796)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.83it/s] 19%|#9        | 5/26 [00:00<00:00, 21.65it/s] 35%|###4      | 9/26 [00:00<00:00, 26.12it/s] 50%|#####     | 13/26 [00:00<00:00, 28.30it/s] 65%|######5   | 17/26 [00:00<00:00, 30.10it/s] 81%|########  | 21/26 [00:00<00:00, 31.83it/s] 96%|#########6| 25/26 [00:00<00:00, 32.35it/s]100%|##########| 26/26 [00:00<00:00, 27.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.935 (0.995)	train_nll   0.42 (  0.37)	train_penalty   0.09 (  0.04)	weight_norm   0.51 (  0.62)	train_acc   0.82 (  0.85)	train_minacc   0.02 (  0.12)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 7.2123 (6.3862)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.26it/s] 27%|##6       | 7/26 [00:00<00:00, 35.72it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.72it/s] 50%|#####     | 13/26 [00:00<00:00, 42.43it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.13it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.13it/s] 96%|#########6| 25/26 [00:00<00:00, 48.41it/s]100%|##########| 26/26 [00:00<00:00, 40.69it/s]
Test: [   0/  26]	Loss 0.342 (0.342)	test_acc   0.86 (  0.86)	test_minacc   0.12 (  0.12)	test_majacc   0.99 (  0.99)	Loss_d 0.342 (0.342)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.347 (0.349)	test_acc   0.86 (  0.85)	test_minacc   0.06 (  0.12)	test_majacc   0.99 (  0.98)	Loss_d 0.347 (0.349)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.06 (  0.12)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.95 (  0.94)
Test: [  20/  26]	Loss 0.322 (0.357)	test_acc   0.86 (  0.85)	test_minacc   0.16 (  0.10)	test_majacc   0.98 (  0.98)	Loss_d 0.322 (0.357)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.16 (  0.10)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.94)
Test: [  26/  26]	Loss 0.361 (0.351)	test_acc   0.84 (  0.85)	test_minacc   0.09 (  0.11)	test_majacc   1.00 (  0.99)	Loss_d 0.361 (0.351)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.09 (  0.11)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.93it/s]
Test: [  0/  1]	Loss 1.901 (1.901)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   1.00 (  1.00)	Loss_d 1.901 (1.901)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.84 (  0.84)
Test: [  1/  1]	Loss 1.901 (1.901)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   1.00 (  1.00)	Loss_d 1.901 (1.901)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.84 (  0.84)
Overall Timing[  6/  1]	epoch_time 0.0363 (0.0425)	validation_time 0.0003 (0.0013)	train_time 0.0359 (0.0405)
record: (train_acc, test_acc) (0.8213000263571739, 0.3100000023841858)
last accs (train_acc, test_acc) (0.8533000244498253, 0.19700001180171967)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.32it/s] 19%|#9        | 5/26 [00:00<00:01, 19.82it/s] 35%|###4      | 9/26 [00:00<00:00, 26.22it/s] 50%|#####     | 13/26 [00:00<00:00, 29.87it/s] 65%|######5   | 17/26 [00:00<00:00, 31.99it/s] 81%|########  | 21/26 [00:00<00:00, 33.50it/s] 96%|#########6| 25/26 [00:00<00:00, 33.95it/s]100%|##########| 26/26 [00:00<00:00, 28.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.747 (0.774)	train_nll   0.40 (  0.35)	train_penalty   0.04 (  0.03)	weight_norm   0.35 (  0.42)	train_acc   0.83 (  0.85)	train_minacc   0.14 (  0.18)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 8.4722 (7.7815)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.88it/s] 27%|##6       | 7/26 [00:00<00:00, 35.05it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.05it/s] 50%|#####     | 13/26 [00:00<00:00, 40.51it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.08it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.08it/s] 96%|#########6| 25/26 [00:00<00:00, 46.42it/s]100%|##########| 26/26 [00:00<00:00, 39.61it/s]
Test: [   0/  26]	Loss 0.316 (0.316)	test_acc   0.86 (  0.86)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.316 (0.316)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.327 (0.332)	test_acc   0.86 (  0.85)	test_minacc   0.02 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 0.327 (0.332)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.02 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.95)
Test: [  20/  26]	Loss 0.329 (0.341)	test_acc   0.85 (  0.85)	test_minacc   0.05 (  0.04)	test_majacc   0.99 (  1.00)	Loss_d 0.329 (0.341)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.05 (  0.04)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  26/  26]	Loss 0.368 (0.336)	test_acc   0.84 (  0.85)	test_minacc   0.09 (  0.05)	test_majacc   1.00 (  1.00)	Loss_d 0.368 (0.336)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.09 (  0.05)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.46it/s]
Test: [  0/  1]	Loss 1.859 (1.859)	test_acc   0.18 (  0.18)	test_minacc   0.08 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 1.859 (1.859)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.85 (  0.85)
Test: [  1/  1]	Loss 1.859 (1.859)	test_acc   0.18 (  0.18)	test_minacc   0.08 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 1.859 (1.859)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.85 (  0.85)
Overall Timing[  7/  1]	epoch_time 0.0350 (0.0416)	validation_time 0.0004 (0.0012)	train_time 0.0346 (0.0397)
record: (train_acc, test_acc) (0.8213000263571739, 0.3100000023841858)
last accs (train_acc, test_acc) (0.8522000243067741, 0.17500001192092896)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.85it/s] 23%|##3       | 6/26 [00:00<00:00, 26.17it/s] 38%|###8      | 10/26 [00:00<00:00, 29.79it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.79it/s] 69%|######9   | 18/26 [00:00<00:00, 33.11it/s] 85%|########4 | 22/26 [00:00<00:00, 33.80it/s]100%|##########| 26/26 [00:00<00:00, 33.60it/s]100%|##########| 26/26 [00:00<00:00, 29.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.618 (0.629)	train_nll   0.37 (  0.35)	train_penalty   0.04 (  0.03)	weight_norm   0.24 (  0.28)	train_acc   0.83 (  0.86)	train_minacc   0.07 (  0.20)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 10.9025 (9.9516)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.02it/s] 27%|##6       | 7/26 [00:00<00:00, 31.66it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.66it/s] 50%|#####     | 13/26 [00:00<00:00, 41.10it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.70it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.70it/s] 96%|#########6| 25/26 [00:00<00:00, 47.58it/s]100%|##########| 26/26 [00:00<00:00, 37.94it/s]
Test: [   0/  26]	Loss 0.318 (0.318)	test_acc   0.86 (  0.86)	test_minacc   0.12 (  0.12)	test_majacc   0.99 (  0.99)	Loss_d 0.318 (0.318)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.325 (0.331)	test_acc   0.86 (  0.86)	test_minacc   0.07 (  0.13)	test_majacc   0.99 (  0.99)	Loss_d 0.325 (0.331)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.07 (  0.13)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.93)
Test: [  20/  26]	Loss 0.327 (0.340)	test_acc   0.87 (  0.85)	test_minacc   0.17 (  0.12)	test_majacc   0.99 (  0.99)	Loss_d 0.327 (0.340)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.17 (  0.12)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  26/  26]	Loss 0.321 (0.334)	test_acc   0.86 (  0.86)	test_minacc   0.23 (  0.13)	test_majacc   1.00 (  0.99)	Loss_d 0.321 (0.334)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.23 (  0.13)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.92 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.99it/s]
Test: [  0/  1]	Loss 1.773 (1.773)	test_acc   0.24 (  0.24)	test_minacc   0.15 (  0.15)	test_majacc   0.98 (  0.98)	Loss_d 1.773 (1.773)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.76 (  0.76)
Test: [  1/  1]	Loss 1.773 (1.773)	test_acc   0.24 (  0.24)	test_minacc   0.15 (  0.15)	test_majacc   0.98 (  0.98)	Loss_d 1.773 (1.773)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.76 (  0.76)
Overall Timing[  8/  1]	epoch_time 0.0365 (0.0410)	validation_time 0.0005 (0.0011)	train_time 0.0360 (0.0393)
record: (train_acc, test_acc) (0.8213000263571739, 0.3100000023841858)
last accs (train_acc, test_acc) (0.8576000214219094, 0.23600001633167267)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.99it/s] 19%|#9        | 5/26 [00:00<00:01, 20.08it/s] 35%|###4      | 9/26 [00:00<00:00, 26.18it/s] 50%|#####     | 13/26 [00:00<00:00, 29.85it/s] 65%|######5   | 17/26 [00:00<00:00, 32.01it/s] 81%|########  | 21/26 [00:00<00:00, 33.42it/s] 96%|#########6| 25/26 [00:00<00:00, 34.42it/s]100%|##########| 26/26 [00:00<00:00, 28.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.579 (0.548)	train_nll   0.40 (  0.34)	train_penalty   0.04 (  0.02)	weight_norm   0.18 (  0.21)	train_acc   0.83 (  0.86)	train_minacc   0.23 (  0.25)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 13.4132 (12.4438)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.37it/s] 31%|###       | 8/26 [00:00<00:00, 34.50it/s]                                               31%|###       | 8/26 [00:00<00:00, 34.50it/s] 54%|#####3    | 14/26 [00:00<00:00, 41.68it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.12it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.12it/s]100%|##########| 26/26 [00:00<00:00, 50.41it/s]100%|##########| 26/26 [00:00<00:00, 40.35it/s]
Test: [   0/  26]	Loss 0.305 (0.305)	test_acc   0.86 (  0.86)	test_minacc   0.16 (  0.16)	test_majacc   0.98 (  0.98)	Loss_d 0.305 (0.305)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.312 (0.321)	test_acc   0.86 (  0.86)	test_minacc   0.19 (  0.18)	test_majacc   0.97 (  0.98)	Loss_d 0.312 (0.321)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.19 (  0.18)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.92 (  0.91)
Test: [  20/  26]	Loss 0.303 (0.327)	test_acc   0.87 (  0.86)	test_minacc   0.21 (  0.17)	test_majacc   0.98 (  0.98)	Loss_d 0.303 (0.327)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.21 (  0.17)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  26/  26]	Loss 0.341 (0.321)	test_acc   0.84 (  0.86)	test_minacc   0.23 (  0.17)	test_majacc   0.97 (  0.98)	Loss_d 0.341 (0.321)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.23 (  0.17)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.90 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.31it/s]
Test: [  0/  1]	Loss 1.667 (1.667)	test_acc   0.26 (  0.26)	test_minacc   0.18 (  0.18)	test_majacc   0.96 (  0.96)	Loss_d 1.667 (1.667)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.72 (  0.72)
Test: [  1/  1]	Loss 1.667 (1.667)	test_acc   0.26 (  0.26)	test_minacc   0.18 (  0.18)	test_majacc   0.96 (  0.96)	Loss_d 1.667 (1.667)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.72 (  0.72)
Overall Timing[  9/  1]	epoch_time 0.0355 (0.0405)	validation_time 0.0003 (0.0010)	train_time 0.0352 (0.0389)
record: (train_acc, test_acc) (0.8213000263571739, 0.3100000023841858)
last accs (train_acc, test_acc) (0.8606000228524208, 0.25600001215934753)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.88it/s] 19%|#9        | 5/26 [00:00<00:00, 22.25it/s] 35%|###4      | 9/26 [00:00<00:00, 26.79it/s] 50%|#####     | 13/26 [00:00<00:00, 28.91it/s] 65%|######5   | 17/26 [00:00<00:00, 30.28it/s] 81%|########  | 21/26 [00:00<00:00, 31.83it/s] 96%|#########6| 25/26 [00:00<00:00, 32.61it/s]100%|##########| 26/26 [00:00<00:00, 27.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.542 (0.504)	train_nll   0.39 (  0.34)	train_penalty   0.06 (  0.03)	weight_norm   0.15 (  0.16)	train_acc   0.83 (  0.86)	train_minacc   0.09 (  0.23)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 15.2058 (14.3785)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.77it/s] 27%|##6       | 7/26 [00:00<00:00, 36.48it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.48it/s] 46%|####6     | 12/26 [00:00<00:00, 38.78it/s] 69%|######9   | 18/26 [00:00<00:00, 45.90it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.90it/s] 92%|#########2| 24/26 [00:00<00:00, 45.57it/s]100%|##########| 26/26 [00:00<00:00, 39.49it/s]
Test: [   0/  26]	Loss 0.303 (0.303)	test_acc   0.86 (  0.86)	test_minacc   0.27 (  0.27)	test_majacc   0.96 (  0.96)	Loss_d 0.303 (0.303)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.327 (0.318)	test_acc   0.85 (  0.86)	test_minacc   0.13 (  0.24)	test_majacc   0.97 (  0.98)	Loss_d 0.327 (0.318)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.13 (  0.24)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.92 (  0.91)
Test: [  20/  26]	Loss 0.297 (0.327)	test_acc   0.85 (  0.86)	test_minacc   0.22 (  0.21)	test_majacc   0.96 (  0.97)	Loss_d 0.297 (0.327)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.22 (  0.21)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.90 (  0.91)
Test: [  26/  26]	Loss 0.326 (0.321)	test_acc   0.86 (  0.86)	test_minacc   0.30 (  0.22)	test_majacc   0.98 (  0.98)	Loss_d 0.326 (0.321)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.30 (  0.22)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.71it/s]
Test: [  0/  1]	Loss 1.688 (1.688)	test_acc   0.29 (  0.29)	test_minacc   0.21 (  0.21)	test_majacc   0.97 (  0.97)	Loss_d 1.688 (1.688)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.68 (  0.68)
Test: [  1/  1]	Loss 1.688 (1.688)	test_acc   0.29 (  0.29)	test_minacc   0.21 (  0.21)	test_majacc   0.97 (  0.97)	Loss_d 1.688 (1.688)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.68 (  0.68)
Overall Timing[ 10/  1]	epoch_time 0.0373 (0.0402)	validation_time 0.0004 (0.0010)	train_time 0.0369 (0.0387)
record: (train_acc, test_acc) (0.8213000263571739, 0.3100000023841858)
last accs (train_acc, test_acc) (0.8611000247001648, 0.2880000174045563)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.95it/s] 19%|#9        | 5/26 [00:00<00:01, 20.90it/s] 35%|###4      | 9/26 [00:00<00:00, 26.91it/s] 50%|#####     | 13/26 [00:00<00:00, 30.32it/s] 65%|######5   | 17/26 [00:00<00:00, 32.32it/s] 81%|########  | 21/26 [00:00<00:00, 33.31it/s] 96%|#########6| 25/26 [00:00<00:00, 33.69it/s]100%|##########| 26/26 [00:00<00:00, 28.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.505 (0.475)	train_nll   0.38 (  0.34)	train_penalty   0.05 (  0.02)	weight_norm   0.12 (  0.14)	train_acc   0.84 (  0.86)	train_minacc   0.09 (  0.25)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 16.8052 (16.1417)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 29.48it/s] 31%|###       | 8/26 [00:00<00:00, 35.70it/s]                                               31%|###       | 8/26 [00:00<00:00, 35.70it/s] 54%|#####3    | 14/26 [00:00<00:00, 45.60it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.13it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.13it/s]100%|##########| 26/26 [00:00<00:00, 42.59it/s]
Test: [   0/  26]	Loss 0.320 (0.320)	test_acc   0.86 (  0.86)	test_minacc   0.07 (  0.07)	test_majacc   1.00 (  1.00)	Loss_d 0.320 (0.320)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.07 (  0.07)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.329 (0.341)	test_acc   0.86 (  0.85)	test_minacc   0.06 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.329 (0.341)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.06 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.309 (0.346)	test_acc   0.86 (  0.85)	test_minacc   0.12 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.309 (0.346)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.12 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.356 (0.340)	test_acc   0.84 (  0.86)	test_minacc   0.09 (  0.08)	test_majacc   1.00 (  0.99)	Loss_d 0.356 (0.340)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.09 (  0.08)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.21it/s]
Test: [  0/  1]	Loss 1.912 (1.912)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   1.00 (  1.00)	Loss_d 1.912 (1.912)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.86 (  0.86)
Test: [  1/  1]	Loss 1.912 (1.912)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   1.00 (  1.00)	Loss_d 1.912 (1.912)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.86 (  0.86)
Overall Timing[ 11/  1]	epoch_time 0.0352 (0.0398)	validation_time 0.0004 (0.0009)	train_time 0.0348 (0.0384)
record: (train_acc, test_acc) (0.8213000263571739, 0.3100000023841858)
last accs (train_acc, test_acc) (0.8553000229597092, 0.1810000091791153)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.33it/s] 19%|#9        | 5/26 [00:00<00:00, 23.98it/s] 35%|###4      | 9/26 [00:00<00:00, 28.59it/s] 50%|#####     | 13/26 [00:00<00:00, 30.24it/s] 65%|######5   | 17/26 [00:00<00:00, 31.48it/s] 81%|########  | 21/26 [00:00<00:00, 32.84it/s] 96%|#########6| 25/26 [00:00<00:00, 33.72it/s]100%|##########| 26/26 [00:00<00:00, 29.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.521 (0.452)	train_nll   0.41 (  0.34)	train_penalty   0.06 (  0.02)	weight_norm   0.12 (  0.12)	train_acc   0.82 (  0.86)	train_minacc   0.16 (  0.26)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 18.3449 (17.6012)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 29.76it/s] 31%|###       | 8/26 [00:00<00:00, 38.82it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.82it/s] 54%|#####3    | 14/26 [00:00<00:00, 47.50it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.49it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.49it/s] 96%|#########6| 25/26 [00:00<00:00, 50.03it/s]100%|##########| 26/26 [00:00<00:00, 43.39it/s]
Test: [   0/  26]	Loss 0.322 (0.322)	test_acc   0.85 (  0.85)	test_minacc   0.14 (  0.14)	test_majacc   0.97 (  0.97)	Loss_d 0.322 (0.322)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.339 (0.344)	test_acc   0.85 (  0.85)	test_minacc   0.06 (  0.15)	test_majacc   0.98 (  0.98)	Loss_d 0.339 (0.344)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.06 (  0.15)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.95 (  0.94)
Test: [  20/  26]	Loss 0.330 (0.354)	test_acc   0.85 (  0.85)	test_minacc   0.19 (  0.13)	test_majacc   0.96 (  0.98)	Loss_d 0.330 (0.354)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.19 (  0.13)	test_majacc_d   0.96 (  0.98)	test_corr_d   0.92 (  0.94)
Test: [  26/  26]	Loss 0.363 (0.348)	test_acc   0.85 (  0.85)	test_minacc   0.20 (  0.14)	test_majacc   0.99 (  0.98)	Loss_d 0.363 (0.348)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.20 (  0.14)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.93 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.87it/s]
Test: [  0/  1]	Loss 1.853 (1.853)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.98 (  0.98)	Loss_d 1.853 (1.853)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.80 (  0.80)
Test: [  1/  1]	Loss 1.853 (1.853)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.98 (  0.98)	Loss_d 1.853 (1.853)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.80 (  0.80)
Overall Timing[ 12/  1]	epoch_time 0.0357 (0.0395)	validation_time 0.0003 (0.0009)	train_time 0.0354 (0.0382)
record: (train_acc, test_acc) (0.8213000263571739, 0.3100000023841858)
last accs (train_acc, test_acc) (0.8544000226855278, 0.2290000170469284)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.47it/s] 19%|#9        | 5/26 [00:00<00:00, 22.49it/s] 35%|###4      | 9/26 [00:00<00:00, 28.10it/s] 50%|#####     | 13/26 [00:00<00:00, 30.64it/s] 65%|######5   | 17/26 [00:00<00:00, 32.04it/s] 81%|########  | 21/26 [00:00<00:00, 33.16it/s] 96%|#########6| 25/26 [00:00<00:00, 34.02it/s]100%|##########| 26/26 [00:00<00:00, 28.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.468 (0.443)	train_nll   0.37 (  0.33)	train_penalty   0.05 (  0.02)	weight_norm   0.10 (  0.11)	train_acc   0.86 (  0.86)	train_minacc   0.23 (  0.28)	train_majacc   1.00 (  0.96)	train_corr   0.00 (  0.00)	l1 19.4339 (18.8961)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.77it/s] 27%|##6       | 7/26 [00:00<00:00, 37.31it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.31it/s] 50%|#####     | 13/26 [00:00<00:00, 41.35it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.48it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.48it/s] 96%|#########6| 25/26 [00:00<00:00, 47.00it/s]100%|##########| 26/26 [00:00<00:00, 40.49it/s]
Test: [   0/  26]	Loss 0.309 (0.309)	test_acc   0.87 (  0.87)	test_minacc   0.14 (  0.14)	test_majacc   0.99 (  0.99)	Loss_d 0.309 (0.309)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.318 (0.329)	test_acc   0.86 (  0.86)	test_minacc   0.11 (  0.15)	test_majacc   0.98 (  0.99)	Loss_d 0.318 (0.329)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.11 (  0.15)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.95 (  0.94)
Test: [  20/  26]	Loss 0.325 (0.339)	test_acc   0.85 (  0.86)	test_minacc   0.17 (  0.14)	test_majacc   0.97 (  0.99)	Loss_d 0.325 (0.339)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.17 (  0.14)	test_majacc_d   0.97 (  0.99)	test_corr_d   0.93 (  0.94)
Test: [  26/  26]	Loss 0.335 (0.332)	test_acc   0.85 (  0.86)	test_minacc   0.16 (  0.14)	test_majacc   1.00 (  0.99)	Loss_d 0.335 (0.332)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.16 (  0.14)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.52it/s]
Test: [  0/  1]	Loss 1.908 (1.908)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.98 (  0.98)	Loss_d 1.908 (1.908)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.80 (  0.80)
Test: [  1/  1]	Loss 1.908 (1.908)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.98 (  0.98)	Loss_d 1.908 (1.908)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.80 (  0.80)
Overall Timing[ 13/  1]	epoch_time 0.0354 (0.0392)	validation_time 0.0003 (0.0008)	train_time 0.0351 (0.0380)
record: (train_acc, test_acc) (0.8213000263571739, 0.3100000023841858)
last accs (train_acc, test_acc) (0.8595000235438347, 0.2290000170469284)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.95it/s] 19%|#9        | 5/26 [00:00<00:01, 19.70it/s] 35%|###4      | 9/26 [00:00<00:00, 25.66it/s] 50%|#####     | 13/26 [00:00<00:00, 29.36it/s] 65%|######5   | 17/26 [00:00<00:00, 31.93it/s] 81%|########  | 21/26 [00:00<00:00, 33.41it/s] 96%|#########6| 25/26 [00:00<00:00, 33.99it/s]100%|##########| 26/26 [00:00<00:00, 27.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.444 (0.427)	train_nll   0.35 (  0.33)	train_penalty   0.04 (  0.02)	weight_norm   0.10 (  0.10)	train_acc   0.86 (  0.86)	train_minacc   0.23 (  0.31)	train_majacc   1.00 (  0.96)	train_corr   0.00 (  0.00)	l1 20.3080 (19.9089)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.50it/s] 31%|###       | 8/26 [00:00<00:00, 42.20it/s]                                               31%|###       | 8/26 [00:00<00:00, 42.20it/s] 50%|#####     | 13/26 [00:00<00:00, 43.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.50it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.50it/s] 96%|#########6| 25/26 [00:00<00:00, 49.10it/s]100%|##########| 26/26 [00:00<00:00, 42.17it/s]
Test: [   0/  26]	Loss 0.304 (0.304)	test_acc   0.87 (  0.87)	test_minacc   0.18 (  0.18)	test_majacc   0.99 (  0.99)	Loss_d 0.304 (0.304)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.304 (0.318)	test_acc   0.86 (  0.86)	test_minacc   0.06 (  0.19)	test_majacc   0.99 (  0.98)	Loss_d 0.304 (0.318)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.06 (  0.19)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.95 (  0.93)
Test: [  20/  26]	Loss 0.298 (0.326)	test_acc   0.86 (  0.86)	test_minacc   0.21 (  0.17)	test_majacc   0.98 (  0.98)	Loss_d 0.298 (0.326)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.21 (  0.17)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.94)
Test: [  26/  26]	Loss 0.316 (0.320)	test_acc   0.88 (  0.86)	test_minacc   0.32 (  0.18)	test_majacc   1.00 (  0.99)	Loss_d 0.316 (0.320)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.32 (  0.18)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.92 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.11it/s]
Test: [  0/  1]	Loss 1.815 (1.815)	test_acc   0.26 (  0.26)	test_minacc   0.18 (  0.18)	test_majacc   0.99 (  0.99)	Loss_d 1.815 (1.815)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.75 (  0.75)
Test: [  1/  1]	Loss 1.815 (1.815)	test_acc   0.26 (  0.26)	test_minacc   0.18 (  0.18)	test_majacc   0.99 (  0.99)	Loss_d 1.815 (1.815)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.75 (  0.75)
Overall Timing[ 14/  1]	epoch_time 0.0362 (0.0390)	validation_time 0.0004 (0.0008)	train_time 0.0358 (0.0378)
record: (train_acc, test_acc) (0.8213000263571739, 0.3100000023841858)
last accs (train_acc, test_acc) (0.8634000242352485, 0.26200002431869507)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.33it/s] 15%|#5        | 4/26 [00:00<00:01, 17.53it/s] 31%|###       | 8/26 [00:00<00:00, 24.77it/s] 46%|####6     | 12/26 [00:00<00:00, 28.66it/s] 62%|######1   | 16/26 [00:00<00:00, 31.03it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.38it/s] 92%|#########2| 24/26 [00:00<00:00, 32.95it/s]100%|##########| 26/26 [00:00<00:00, 27.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.002 (0.160)	train_nll   0.60 (  0.43)	train_penalty   0.00 (  0.01)	weight_norm   0.12 (  0.10)	train_acc   0.69 (  0.79)	train_minacc   0.57 (  0.53)	train_majacc   0.71 (  0.83)	train_corr   0.00 (  0.00)	l1 20.3139 (20.5922)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.33it/s] 23%|##3       | 6/26 [00:00<00:00, 30.65it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.65it/s] 42%|####2     | 11/26 [00:00<00:00, 37.93it/s] 65%|######5   | 17/26 [00:00<00:00, 42.73it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.73it/s] 88%|########8 | 23/26 [00:00<00:00, 47.31it/s]100%|##########| 26/26 [00:00<00:00, 38.46it/s]
Test: [   0/  26]	Loss 0.622 (0.622)	test_acc   0.66 (  0.66)	test_minacc   0.46 (  0.46)	test_majacc   0.69 (  0.69)	Loss_d 0.622 (0.622)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.33 (  0.33)
Test: [  10/  26]	Loss 0.630 (0.611)	test_acc   0.65 (  0.68)	test_minacc   0.44 (  0.53)	test_majacc   0.69 (  0.70)	Loss_d 0.630 (0.611)	test_acc_d   0.65 (  0.68)	test_minacc_d   0.44 (  0.53)	test_majacc_d   0.69 (  0.70)	test_corr_d   0.38 (  0.35)
Test: [  20/  26]	Loss 0.618 (0.614)	test_acc   0.67 (  0.67)	test_minacc   0.53 (  0.50)	test_majacc   0.70 (  0.70)	Loss_d 0.618 (0.614)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.35 (  0.37)
Test: [  26/  26]	Loss 0.603 (0.614)	test_acc   0.66 (  0.67)	test_minacc   0.55 (  0.50)	test_majacc   0.68 (  0.70)	Loss_d 0.603 (0.614)	test_acc_d   0.66 (  0.67)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.68 (  0.70)	test_corr_d   0.36 (  0.36)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.52it/s]
Test: [  0/  1]	Loss 0.781 (0.781)	test_acc   0.40 (  0.40)	test_minacc   0.36 (  0.36)	test_majacc   0.74 (  0.74)	Loss_d 0.781 (0.781)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.24 (  0.24)
Test: [  1/  1]	Loss 0.781 (0.781)	test_acc   0.40 (  0.40)	test_minacc   0.36 (  0.36)	test_majacc   0.74 (  0.74)	Loss_d 0.781 (0.781)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.24 (  0.24)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/53/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0368 (0.0388)	validation_time 0.0004 (0.0008)	train_time 0.0363 (0.0377)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.01it/s] 19%|#9        | 5/26 [00:00<00:00, 21.50it/s] 35%|###4      | 9/26 [00:00<00:00, 26.74it/s] 50%|#####     | 13/26 [00:00<00:00, 30.05it/s] 65%|######5   | 17/26 [00:00<00:00, 31.25it/s] 81%|########  | 21/26 [00:00<00:00, 32.58it/s] 96%|#########6| 25/26 [00:00<00:00, 33.15it/s]100%|##########| 26/26 [00:00<00:00, 28.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.001 (0.001)	train_nll   0.65 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.13)	train_acc   0.61 (  0.61)	train_minacc   0.64 (  0.60)	train_majacc   0.60 (  0.61)	train_corr   0.00 (  0.00)	l1 20.0068 (20.1139)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.72it/s] 27%|##6       | 7/26 [00:00<00:00, 33.52it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.52it/s] 50%|#####     | 13/26 [00:00<00:00, 39.75it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.01it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.01it/s] 96%|#########6| 25/26 [00:00<00:00, 46.72it/s]100%|##########| 26/26 [00:00<00:00, 38.90it/s]
Test: [   0/  26]	Loss 0.673 (0.673)	test_acc   0.58 (  0.58)	test_minacc   0.62 (  0.62)	test_majacc   0.57 (  0.57)	Loss_d 0.673 (0.673)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.674 (0.669)	test_acc   0.60 (  0.58)	test_minacc   0.67 (  0.59)	test_majacc   0.59 (  0.58)	Loss_d 0.674 (0.669)	test_acc_d   0.60 (  0.58)	test_minacc_d   0.67 (  0.59)	test_majacc_d   0.59 (  0.58)	test_corr_d   0.16 (  0.12)
Test: [  20/  26]	Loss 0.670 (0.670)	test_acc   0.59 (  0.58)	test_minacc   0.55 (  0.58)	test_majacc   0.59 (  0.58)	Loss_d 0.670 (0.670)	test_acc_d   0.59 (  0.58)	test_minacc_d   0.55 (  0.58)	test_majacc_d   0.59 (  0.58)	test_corr_d   0.11 (  0.14)
Test: [  26/  26]	Loss 0.649 (0.670)	test_acc   0.60 (  0.58)	test_minacc   0.64 (  0.58)	test_majacc   0.59 (  0.58)	Loss_d 0.649 (0.670)	test_acc_d   0.60 (  0.58)	test_minacc_d   0.64 (  0.58)	test_majacc_d   0.59 (  0.58)	test_corr_d   0.21 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.11it/s]
Test: [  0/  1]	Loss 0.698 (0.698)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.57 (  0.57)	Loss_d 0.698 (0.698)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.698 (0.698)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.57 (  0.57)	Loss_d 0.698 (0.698)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 16/  1]	epoch_time 0.0371 (0.0387)	validation_time 0.0003 (0.0007)	train_time 0.0367 (0.0377)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.5809000075459481, 0.5100000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.56it/s] 19%|#9        | 5/26 [00:00<00:01, 19.95it/s] 35%|###4      | 9/26 [00:00<00:00, 25.94it/s] 50%|#####     | 13/26 [00:00<00:00, 29.14it/s] 65%|######5   | 17/26 [00:00<00:00, 30.67it/s] 81%|########  | 21/26 [00:00<00:00, 31.25it/s] 96%|#########6| 25/26 [00:00<00:00, 31.91it/s]100%|##########| 26/26 [00:00<00:00, 27.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.57 (  0.55)	train_minacc   0.64 (  0.56)	train_majacc   0.56 (  0.55)	train_corr   0.00 (  0.00)	l1 19.9598 (19.9756)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.51it/s] 23%|##3       | 6/26 [00:00<00:00, 29.15it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.15it/s] 42%|####2     | 11/26 [00:00<00:00, 37.87it/s] 65%|######5   | 17/26 [00:00<00:00, 42.30it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.30it/s] 88%|########8 | 23/26 [00:00<00:00, 47.77it/s]100%|##########| 26/26 [00:00<00:00, 38.34it/s]
Test: [   0/  26]	Loss 0.686 (0.686)	test_acc   0.54 (  0.54)	test_minacc   0.59 (  0.59)	test_majacc   0.53 (  0.53)	Loss_d 0.686 (0.686)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.688 (0.685)	test_acc   0.55 (  0.54)	test_minacc   0.65 (  0.57)	test_majacc   0.54 (  0.53)	Loss_d 0.688 (0.685)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.65 (  0.57)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.09 (  0.06)
Test: [  20/  26]	Loss 0.684 (0.685)	test_acc   0.55 (  0.54)	test_minacc   0.57 (  0.56)	test_majacc   0.55 (  0.54)	Loss_d 0.684 (0.685)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.05 (  0.09)
Test: [  26/  26]	Loss 0.675 (0.685)	test_acc   0.56 (  0.54)	test_minacc   0.64 (  0.56)	test_majacc   0.54 (  0.54)	Loss_d 0.675 (0.685)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.64 (  0.56)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.15 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.33it/s]
Test: [  0/  1]	Loss 0.702 (0.702)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.55 (  0.55)	Loss_d 0.702 (0.702)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.702 (0.702)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.55 (  0.55)	Loss_d 0.702 (0.702)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.07 (  0.07)
Overall Timing[ 17/  1]	epoch_time 0.0373 (0.0386)	validation_time 0.0004 (0.0007)	train_time 0.0369 (0.0376)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.5390000130534172, 0.4830000102519989)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.07it/s] 19%|#9        | 5/26 [00:00<00:01, 19.98it/s] 35%|###4      | 9/26 [00:00<00:00, 26.31it/s] 50%|#####     | 13/26 [00:00<00:00, 29.33it/s] 65%|######5   | 17/26 [00:00<00:00, 31.25it/s] 81%|########  | 21/26 [00:00<00:00, 32.64it/s] 96%|#########6| 25/26 [00:00<00:00, 33.11it/s]100%|##########| 26/26 [00:00<00:00, 27.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.52 (  0.52)	train_minacc   0.59 (  0.54)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 19.9515 (19.9546)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.00it/s] 31%|###       | 8/26 [00:00<00:00, 40.93it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.93it/s] 50%|#####     | 13/26 [00:00<00:00, 42.65it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.36it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.36it/s] 96%|#########6| 25/26 [00:00<00:00, 48.31it/s]100%|##########| 26/26 [00:00<00:00, 42.13it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.48 (  0.48)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.691 (0.691)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.49 (  0.50)	test_minacc   0.57 (  0.52)	test_majacc   0.48 (  0.50)	Loss_d 0.692 (0.691)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.06 (  0.03)
Test: [  20/  26]	Loss 0.688 (0.690)	test_acc   0.52 (  0.51)	test_minacc   0.48 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.688 (0.690)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.48 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.04 (  0.07)
Test: [  26/  26]	Loss 0.686 (0.690)	test_acc   0.52 (  0.50)	test_minacc   0.59 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.686 (0.690)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.59 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.11 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.80it/s]
Test: [  0/  1]	Loss 0.703 (0.703)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.53 (  0.53)	Loss_d 0.703 (0.703)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 0.703 (0.703)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.53 (  0.53)	Loss_d 0.703 (0.703)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.15 (  0.15)
Overall Timing[ 18/  1]	epoch_time 0.0341 (0.0384)	validation_time 0.0003 (0.0007)	train_time 0.0338 (0.0374)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.5048000098466873, 0.45100003480911255)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.00it/s] 19%|#9        | 5/26 [00:00<00:01, 20.83it/s] 35%|###4      | 9/26 [00:00<00:00, 26.17it/s] 50%|#####     | 13/26 [00:00<00:00, 28.91it/s] 65%|######5   | 17/26 [00:00<00:00, 31.08it/s] 81%|########  | 21/26 [00:00<00:00, 32.51it/s] 96%|#########6| 25/26 [00:00<00:00, 32.65it/s]100%|##########| 26/26 [00:00<00:00, 27.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.49 (  0.49)	train_minacc   0.52 (  0.48)	train_majacc   0.49 (  0.49)	train_corr   0.00 (  0.00)	l1 19.9475 (19.9492)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.10it/s] 19%|#9        | 5/26 [00:00<00:00, 24.63it/s] 38%|###8      | 10/26 [00:00<00:00, 34.84it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.84it/s] 62%|######1   | 16/26 [00:00<00:00, 39.91it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.91it/s] 85%|########4 | 22/26 [00:00<00:00, 46.26it/s]100%|##########| 26/26 [00:00<00:00, 37.45it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.48)	test_minacc   0.46 (  0.47)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.46 (  0.47)	test_majacc_d   0.48 (  0.49)	test_corr_d   0.06 (  0.04)
Test: [  20/  26]	Loss 0.689 (0.691)	test_acc   0.52 (  0.49)	test_minacc   0.47 (  0.46)	test_majacc   0.53 (  0.50)	Loss_d 0.689 (0.691)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.47 (  0.46)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.06 (  0.07)
Test: [  26/  26]	Loss 0.689 (0.691)	test_acc   0.50 (  0.49)	test_minacc   0.52 (  0.47)	test_majacc   0.50 (  0.50)	Loss_d 0.689 (0.691)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.10 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.51it/s]
Test: [  0/  1]	Loss 0.703 (0.703)	test_acc   0.42 (  0.42)	test_minacc   0.40 (  0.40)	test_majacc   0.55 (  0.55)	Loss_d 0.703 (0.703)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 0.703 (0.703)	test_acc   0.42 (  0.42)	test_minacc   0.40 (  0.40)	test_majacc   0.55 (  0.55)	Loss_d 0.703 (0.703)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.21 (  0.21)
Overall Timing[ 19/  1]	epoch_time 0.0376 (0.0384)	validation_time 0.0004 (0.0007)	train_time 0.0372 (0.0374)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.49230000975728033, 0.4180000126361847)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.17it/s] 19%|#9        | 5/26 [00:00<00:00, 22.75it/s] 35%|###4      | 9/26 [00:00<00:00, 28.41it/s] 50%|#####     | 13/26 [00:00<00:00, 31.49it/s] 65%|######5   | 17/26 [00:00<00:00, 32.82it/s] 81%|########  | 21/26 [00:00<00:00, 33.84it/s] 96%|#########6| 25/26 [00:00<00:00, 33.87it/s]100%|##########| 26/26 [00:00<00:00, 29.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.48 (  0.48)	train_minacc   0.48 (  0.45)	train_majacc   0.48 (  0.48)	train_corr   0.00 (  0.00)	l1 19.9450 (19.9461)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.04it/s] 35%|###4      | 9/26 [00:00<00:00, 41.46it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.46it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.65it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.65it/s] 81%|########  | 21/26 [00:00<00:00, 48.40it/s]100%|##########| 26/26 [00:00<00:00, 41.68it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.43 (  0.43)	test_majacc   0.46 (  0.46)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.41 (  0.43)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.41 (  0.43)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.04 (  0.03)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.50 (  0.48)	test_minacc   0.40 (  0.42)	test_majacc   0.52 (  0.49)	Loss_d 0.691 (0.692)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.40 (  0.42)	test_majacc_d   0.52 (  0.49)	test_corr_d   0.05 (  0.06)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.49 (  0.48)	test_minacc   0.48 (  0.43)	test_majacc   0.49 (  0.49)	Loss_d 0.691 (0.692)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.48 (  0.43)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.09 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.93it/s]
Test: [  0/  1]	Loss 0.701 (0.701)	test_acc   0.40 (  0.40)	test_minacc   0.38 (  0.38)	test_majacc   0.57 (  0.57)	Loss_d 0.701 (0.701)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 0.701 (0.701)	test_acc   0.40 (  0.40)	test_minacc   0.38 (  0.38)	test_majacc   0.57 (  0.57)	Loss_d 0.701 (0.701)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.23 (  0.23)
Overall Timing[ 20/  1]	epoch_time 0.0357 (0.0382)	validation_time 0.0004 (0.0007)	train_time 0.0353 (0.0373)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.4767000103890896, 0.39900001883506775)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.73it/s] 19%|#9        | 5/26 [00:00<00:00, 23.08it/s] 35%|###4      | 9/26 [00:00<00:00, 28.42it/s] 50%|#####     | 13/26 [00:00<00:00, 30.81it/s] 65%|######5   | 17/26 [00:00<00:00, 32.30it/s] 81%|########  | 21/26 [00:00<00:00, 33.23it/s] 96%|#########6| 25/26 [00:00<00:00, 33.03it/s]100%|##########| 26/26 [00:00<00:00, 28.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.50 (  0.47)	train_minacc   0.43 (  0.42)	train_majacc   0.51 (  0.48)	train_corr   0.00 (  0.00)	l1 19.9432 (19.9440)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.66it/s] 31%|###       | 8/26 [00:00<00:00, 40.99it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.99it/s] 50%|#####     | 13/26 [00:00<00:00, 40.66it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.96it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.96it/s] 96%|#########6| 25/26 [00:00<00:00, 46.98it/s]100%|##########| 26/26 [00:00<00:00, 40.87it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.34 (  0.34)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.50 (  0.47)	test_minacc   0.41 (  0.38)	test_majacc   0.51 (  0.49)	Loss_d 0.694 (0.693)	test_acc_d   0.50 (  0.47)	test_minacc_d   0.41 (  0.38)	test_majacc_d   0.51 (  0.49)	test_corr_d   0.02 (  0.02)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.52 (  0.49)	test_minacc   0.40 (  0.39)	test_majacc   0.54 (  0.50)	Loss_d 0.691 (0.693)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.40 (  0.39)	test_majacc_d   0.54 (  0.50)	test_corr_d   0.04 (  0.05)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.49)	test_minacc   0.43 (  0.40)	test_majacc   0.53 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.43 (  0.40)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.08 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.41it/s]
Test: [  0/  1]	Loss 0.699 (0.699)	test_acc   0.38 (  0.38)	test_minacc   0.36 (  0.36)	test_majacc   0.60 (  0.60)	Loss_d 0.699 (0.699)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.24 (  0.24)
Test: [  1/  1]	Loss 0.699 (0.699)	test_acc   0.38 (  0.38)	test_minacc   0.36 (  0.36)	test_majacc   0.60 (  0.60)	Loss_d 0.699 (0.699)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.24 (  0.24)
Overall Timing[ 21/  1]	epoch_time 0.0348 (0.0381)	validation_time 0.0004 (0.0007)	train_time 0.0344 (0.0372)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.48700000858306886, 0.3830000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.86it/s] 19%|#9        | 5/26 [00:00<00:00, 22.84it/s] 35%|###4      | 9/26 [00:00<00:00, 27.80it/s] 50%|#####     | 13/26 [00:00<00:00, 30.59it/s] 65%|######5   | 17/26 [00:00<00:00, 31.85it/s] 81%|########  | 21/26 [00:00<00:00, 32.56it/s] 96%|#########6| 25/26 [00:00<00:00, 32.99it/s]100%|##########| 26/26 [00:00<00:00, 28.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.48 (  0.49)	train_minacc   0.34 (  0.39)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 19.9421 (19.9425)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.35it/s] 35%|###4      | 9/26 [00:00<00:00, 40.66it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.66it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.81it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.81it/s] 81%|########  | 21/26 [00:00<00:00, 48.25it/s]100%|##########| 26/26 [00:00<00:00, 43.30it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.27 (  0.27)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.48)	test_minacc   0.43 (  0.35)	test_majacc   0.51 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.43 (  0.35)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.00 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.40 (  0.37)	test_majacc   0.54 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.40 (  0.37)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.04 (  0.05)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.36 (  0.37)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.36 (  0.37)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.08 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.50it/s]
Test: [  0/  1]	Loss 0.698 (0.698)	test_acc   0.36 (  0.36)	test_minacc   0.33 (  0.33)	test_majacc   0.64 (  0.64)	Loss_d 0.698 (0.698)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.24 (  0.24)
Test: [  1/  1]	Loss 0.698 (0.698)	test_acc   0.36 (  0.36)	test_minacc   0.33 (  0.33)	test_majacc   0.64 (  0.64)	Loss_d 0.698 (0.698)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.24 (  0.24)
Overall Timing[ 22/  1]	epoch_time 0.0352 (0.0380)	validation_time 0.0006 (0.0007)	train_time 0.0346 (0.0371)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.4985000122487545, 0.36100003123283386)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.97it/s] 15%|#5        | 4/26 [00:00<00:01, 18.56it/s] 31%|###       | 8/26 [00:00<00:00, 25.16it/s] 46%|####6     | 12/26 [00:00<00:00, 28.66it/s] 62%|######1   | 16/26 [00:00<00:00, 30.16it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.82it/s] 92%|#########2| 24/26 [00:00<00:00, 32.59it/s]100%|##########| 26/26 [00:00<00:00, 27.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 350 tensor(-0.0100, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
Epoch: [23][  26/  26]	Loss 0.001 (0.001)	train_nll   0.65 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.14)	train_acc   0.61 (  0.58)	train_minacc   0.61 (  0.51)	train_majacc   0.61 (  0.60)	train_corr   0.00 (  0.00)	l1 14.8110 (15.6702)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.08it/s] 31%|###       | 8/26 [00:00<00:00, 39.60it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.60it/s] 50%|#####     | 13/26 [00:00<00:00, 42.03it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.17it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.17it/s] 96%|#########6| 25/26 [00:00<00:00, 48.73it/s]100%|##########| 26/26 [00:00<00:00, 41.54it/s]
Test: [   0/  26]	Loss 0.667 (0.667)	test_acc   0.59 (  0.59)	test_minacc   0.62 (  0.62)	test_majacc   0.58 (  0.58)	Loss_d 0.667 (0.667)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.13 (  0.13)
Test: [  10/  26]	Loss 0.669 (0.665)	test_acc   0.60 (  0.59)	test_minacc   0.67 (  0.61)	test_majacc   0.59 (  0.59)	Loss_d 0.669 (0.665)	test_acc_d   0.60 (  0.59)	test_minacc_d   0.67 (  0.61)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.18 (  0.13)
Test: [  20/  26]	Loss 0.673 (0.667)	test_acc   0.56 (  0.58)	test_minacc   0.55 (  0.58)	test_majacc   0.56 (  0.58)	Loss_d 0.673 (0.667)	test_acc_d   0.56 (  0.58)	test_minacc_d   0.55 (  0.58)	test_majacc_d   0.56 (  0.58)	test_corr_d   0.07 (  0.15)
Test: [  26/  26]	Loss 0.651 (0.667)	test_acc   0.60 (  0.58)	test_minacc   0.61 (  0.58)	test_majacc   0.60 (  0.58)	Loss_d 0.651 (0.667)	test_acc_d   0.60 (  0.58)	test_minacc_d   0.61 (  0.58)	test_majacc_d   0.60 (  0.58)	test_corr_d   0.20 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.15it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.55 (  0.55)	test_minacc   0.54 (  0.54)	test_majacc   0.58 (  0.58)	Loss_d 0.690 (0.690)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.55 (  0.55)	test_minacc   0.54 (  0.54)	test_majacc   0.58 (  0.58)	Loss_d 0.690 (0.690)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 23/  1]	epoch_time 0.0366 (0.0379)	validation_time 0.0004 (0.0007)	train_time 0.0362 (0.0370)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.5832000099420548, 0.5470000505447388)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.76it/s] 15%|#5        | 4/26 [00:00<00:01, 18.23it/s] 31%|###       | 8/26 [00:00<00:00, 25.23it/s] 46%|####6     | 12/26 [00:00<00:00, 28.87it/s] 62%|######1   | 16/26 [00:00<00:00, 31.08it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.20it/s] 92%|#########2| 24/26 [00:00<00:00, 33.23it/s]100%|##########| 26/26 [00:00<00:00, 27.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.66 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.58 (  0.56)	train_minacc   0.61 (  0.57)	train_majacc   0.57 (  0.56)	train_corr   0.00 (  0.00)	l1 14.8002 (14.8070)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.93it/s] 27%|##6       | 7/26 [00:00<00:00, 36.14it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.14it/s] 50%|#####     | 13/26 [00:00<00:00, 40.33it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.74it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.74it/s] 96%|#########6| 25/26 [00:00<00:00, 46.81it/s]100%|##########| 26/26 [00:00<00:00, 40.10it/s]
Test: [   0/  26]	Loss 0.680 (0.680)	test_acc   0.56 (  0.56)	test_minacc   0.59 (  0.59)	test_majacc   0.56 (  0.56)	Loss_d 0.680 (0.680)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.682 (0.677)	test_acc   0.57 (  0.55)	test_minacc   0.67 (  0.58)	test_majacc   0.56 (  0.55)	Loss_d 0.682 (0.677)	test_acc_d   0.57 (  0.55)	test_minacc_d   0.67 (  0.58)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.13 (  0.08)
Test: [  20/  26]	Loss 0.681 (0.678)	test_acc   0.53 (  0.55)	test_minacc   0.53 (  0.56)	test_majacc   0.53 (  0.55)	Loss_d 0.681 (0.678)	test_acc_d   0.53 (  0.55)	test_minacc_d   0.53 (  0.56)	test_majacc_d   0.53 (  0.55)	test_corr_d   0.02 (  0.10)
Test: [  26/  26]	Loss 0.663 (0.678)	test_acc   0.58 (  0.55)	test_minacc   0.61 (  0.56)	test_majacc   0.57 (  0.55)	Loss_d 0.663 (0.678)	test_acc_d   0.58 (  0.55)	test_minacc_d   0.61 (  0.56)	test_majacc_d   0.57 (  0.55)	test_corr_d   0.15 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.69it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 24/  1]	epoch_time 0.0363 (0.0378)	validation_time 0.0004 (0.0006)	train_time 0.0358 (0.0370)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.5498000121712685, 0.5270000100135803)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.34it/s] 19%|#9        | 5/26 [00:00<00:00, 21.32it/s] 35%|###4      | 9/26 [00:00<00:00, 26.28it/s] 50%|#####     | 13/26 [00:00<00:00, 28.53it/s] 65%|######5   | 17/26 [00:00<00:00, 29.99it/s] 81%|########  | 21/26 [00:00<00:00, 31.14it/s] 96%|#########6| 25/26 [00:00<00:00, 31.86it/s]100%|##########| 26/26 [00:00<00:00, 27.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.57 (  0.55)	train_minacc   0.61 (  0.56)	train_majacc   0.56 (  0.55)	train_corr   0.00 (  0.00)	l1 14.8012 (14.7953)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.30it/s] 27%|##6       | 7/26 [00:00<00:00, 24.68it/s]                                               27%|##6       | 7/26 [00:00<00:00, 24.68it/s] 50%|#####     | 13/26 [00:00<00:00, 33.92it/s] 73%|#######3  | 19/26 [00:00<00:00, 41.50it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 41.50it/s] 96%|#########6| 25/26 [00:00<00:00, 44.16it/s]100%|##########| 26/26 [00:00<00:00, 34.25it/s]
Test: [   0/  26]	Loss 0.680 (0.680)	test_acc   0.57 (  0.57)	test_minacc   0.59 (  0.59)	test_majacc   0.56 (  0.56)	Loss_d 0.680 (0.680)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.683 (0.679)	test_acc   0.56 (  0.55)	test_minacc   0.65 (  0.57)	test_majacc   0.55 (  0.54)	Loss_d 0.683 (0.679)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.65 (  0.57)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.12 (  0.07)
Test: [  20/  26]	Loss 0.681 (0.679)	test_acc   0.52 (  0.55)	test_minacc   0.52 (  0.56)	test_majacc   0.52 (  0.55)	Loss_d 0.681 (0.679)	test_acc_d   0.52 (  0.55)	test_minacc_d   0.52 (  0.56)	test_majacc_d   0.52 (  0.55)	test_corr_d   0.02 (  0.09)
Test: [  26/  26]	Loss 0.667 (0.680)	test_acc   0.57 (  0.55)	test_minacc   0.61 (  0.55)	test_majacc   0.56 (  0.54)	Loss_d 0.667 (0.680)	test_acc_d   0.57 (  0.55)	test_minacc_d   0.61 (  0.55)	test_majacc_d   0.56 (  0.54)	test_corr_d   0.15 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.08it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 25/  1]	epoch_time 0.0363 (0.0378)	validation_time 0.0003 (0.0006)	train_time 0.0360 (0.0369)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.546100014090538, 0.5260000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.57it/s] 19%|#9        | 5/26 [00:00<00:00, 21.29it/s] 35%|###4      | 9/26 [00:00<00:00, 25.93it/s] 50%|#####     | 13/26 [00:00<00:00, 29.20it/s] 65%|######5   | 17/26 [00:00<00:00, 31.32it/s] 81%|########  | 21/26 [00:00<00:00, 32.83it/s] 96%|#########6| 25/26 [00:00<00:00, 33.58it/s]100%|##########| 26/26 [00:00<00:00, 28.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.56 (  0.54)	train_minacc   0.61 (  0.55)	train_majacc   0.55 (  0.54)	train_corr   0.00 (  0.00)	l1 14.8145 (14.8082)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.50it/s] 27%|##6       | 7/26 [00:00<00:00, 34.64it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.64it/s] 50%|#####     | 13/26 [00:00<00:00, 41.14it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.10it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.10it/s] 96%|#########6| 25/26 [00:00<00:00, 47.67it/s]100%|##########| 26/26 [00:00<00:00, 39.48it/s]
Test: [   0/  26]	Loss 0.682 (0.682)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.56 (  0.56)	Loss_d 0.682 (0.682)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.683 (0.681)	test_acc   0.55 (  0.54)	test_minacc   0.65 (  0.56)	test_majacc   0.54 (  0.54)	Loss_d 0.683 (0.681)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.65 (  0.56)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.11 (  0.06)
Test: [  20/  26]	Loss 0.682 (0.681)	test_acc   0.52 (  0.54)	test_minacc   0.52 (  0.55)	test_majacc   0.52 (  0.54)	Loss_d 0.682 (0.681)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.52 (  0.55)	test_majacc_d   0.52 (  0.54)	test_corr_d   0.02 (  0.08)
Test: [  26/  26]	Loss 0.670 (0.681)	test_acc   0.56 (  0.54)	test_minacc   0.61 (  0.55)	test_majacc   0.55 (  0.54)	Loss_d 0.670 (0.681)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.61 (  0.55)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.13 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.39it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 26/  1]	epoch_time 0.0367 (0.0377)	validation_time 0.0004 (0.0006)	train_time 0.0363 (0.0369)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.5409000093340873, 0.5260000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.91it/s] 19%|#9        | 5/26 [00:00<00:01, 20.22it/s] 31%|###       | 8/26 [00:00<00:00, 23.54it/s] 46%|####6     | 12/26 [00:00<00:00, 27.12it/s] 62%|######1   | 16/26 [00:00<00:00, 29.79it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.54it/s] 92%|#########2| 24/26 [00:00<00:00, 32.30it/s]100%|##########| 26/26 [00:00<00:00, 26.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.56 (  0.54)	train_minacc   0.61 (  0.55)	train_majacc   0.55 (  0.54)	train_corr   0.00 (  0.00)	l1 14.8221 (14.8182)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.16it/s] 31%|###       | 8/26 [00:00<00:00, 42.13it/s]                                               31%|###       | 8/26 [00:00<00:00, 42.13it/s] 50%|#####     | 13/26 [00:00<00:00, 42.29it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.23it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.23it/s] 96%|#########6| 25/26 [00:00<00:00, 48.33it/s]100%|##########| 26/26 [00:00<00:00, 41.61it/s]
Test: [   0/  26]	Loss 0.683 (0.683)	test_acc   0.56 (  0.56)	test_minacc   0.59 (  0.59)	test_majacc   0.56 (  0.56)	Loss_d 0.683 (0.683)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.682 (0.682)	test_acc   0.55 (  0.54)	test_minacc   0.65 (  0.56)	test_majacc   0.54 (  0.54)	Loss_d 0.682 (0.682)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.65 (  0.56)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.11 (  0.05)
Test: [  20/  26]	Loss 0.683 (0.682)	test_acc   0.52 (  0.54)	test_minacc   0.52 (  0.55)	test_majacc   0.52 (  0.54)	Loss_d 0.683 (0.682)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.52 (  0.55)	test_majacc_d   0.52 (  0.54)	test_corr_d   0.02 (  0.08)
Test: [  26/  26]	Loss 0.672 (0.682)	test_acc   0.56 (  0.54)	test_minacc   0.61 (  0.55)	test_majacc   0.55 (  0.54)	Loss_d 0.672 (0.682)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.61 (  0.55)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.12 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.66it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 27/  1]	epoch_time 0.0371 (0.0377)	validation_time 0.0004 (0.0006)	train_time 0.0367 (0.0369)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.5395000140666961, 0.5250000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.35it/s] 19%|#9        | 5/26 [00:00<00:00, 22.66it/s] 35%|###4      | 9/26 [00:00<00:00, 28.27it/s] 50%|#####     | 13/26 [00:00<00:00, 31.02it/s] 65%|######5   | 17/26 [00:00<00:00, 32.19it/s] 81%|########  | 21/26 [00:00<00:00, 32.88it/s] 96%|#########6| 25/26 [00:00<00:00, 33.58it/s]100%|##########| 26/26 [00:00<00:00, 29.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.56 (  0.54)	train_minacc   0.61 (  0.55)	train_majacc   0.54 (  0.54)	train_corr   0.00 (  0.00)	l1 14.8284 (14.8254)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.79it/s] 19%|#9        | 5/26 [00:00<00:00, 26.02it/s]                                               19%|#9        | 5/26 [00:00<00:00, 26.02it/s] 42%|####2     | 11/26 [00:00<00:00, 40.87it/s] 62%|######1   | 16/26 [00:00<00:00, 43.22it/s]                                                62%|######1   | 16/26 [00:00<00:00, 43.22it/s] 85%|########4 | 22/26 [00:00<00:00, 48.66it/s]100%|##########| 26/26 [00:00<00:00, 39.79it/s]
Test: [   0/  26]	Loss 0.684 (0.684)	test_acc   0.56 (  0.56)	test_minacc   0.59 (  0.59)	test_majacc   0.56 (  0.56)	Loss_d 0.684 (0.684)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.682 (0.683)	test_acc   0.55 (  0.54)	test_minacc   0.65 (  0.56)	test_majacc   0.54 (  0.54)	Loss_d 0.682 (0.683)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.65 (  0.56)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.11 (  0.05)
Test: [  20/  26]	Loss 0.684 (0.683)	test_acc   0.52 (  0.54)	test_minacc   0.52 (  0.55)	test_majacc   0.52 (  0.54)	Loss_d 0.684 (0.683)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.52 (  0.55)	test_majacc_d   0.52 (  0.54)	test_corr_d   0.02 (  0.07)
Test: [  26/  26]	Loss 0.674 (0.683)	test_acc   0.56 (  0.54)	test_minacc   0.61 (  0.55)	test_majacc   0.54 (  0.54)	Loss_d 0.674 (0.683)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.61 (  0.55)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.12 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.20it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 28/  1]	epoch_time 0.0377 (0.0377)	validation_time 0.0003 (0.0006)	train_time 0.0373 (0.0369)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.5377000119686127, 0.5250000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.67it/s] 23%|##3       | 6/26 [00:00<00:00, 24.93it/s] 38%|###8      | 10/26 [00:00<00:00, 28.92it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.98it/s] 69%|######9   | 18/26 [00:00<00:00, 32.13it/s] 85%|########4 | 22/26 [00:00<00:00, 32.59it/s]100%|##########| 26/26 [00:00<00:00, 33.31it/s]100%|##########| 26/26 [00:00<00:00, 29.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.56 (  0.54)	train_minacc   0.61 (  0.55)	train_majacc   0.54 (  0.54)	train_corr   0.00 (  0.00)	l1 14.8326 (14.8308)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.70it/s] 31%|###       | 8/26 [00:00<00:00, 40.07it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.07it/s] 50%|#####     | 13/26 [00:00<00:00, 41.03it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.47it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.47it/s] 96%|#########6| 25/26 [00:00<00:00, 47.38it/s]100%|##########| 26/26 [00:00<00:00, 41.25it/s]
Test: [   0/  26]	Loss 0.685 (0.685)	test_acc   0.56 (  0.56)	test_minacc   0.59 (  0.59)	test_majacc   0.56 (  0.56)	Loss_d 0.685 (0.685)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.682 (0.684)	test_acc   0.55 (  0.54)	test_minacc   0.65 (  0.56)	test_majacc   0.54 (  0.54)	Loss_d 0.682 (0.684)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.65 (  0.56)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.10 (  0.04)
Test: [  20/  26]	Loss 0.684 (0.684)	test_acc   0.52 (  0.54)	test_minacc   0.52 (  0.55)	test_majacc   0.52 (  0.54)	Loss_d 0.684 (0.684)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.52 (  0.55)	test_majacc_d   0.52 (  0.54)	test_corr_d   0.01 (  0.07)
Test: [  26/  26]	Loss 0.675 (0.684)	test_acc   0.56 (  0.54)	test_minacc   0.61 (  0.55)	test_majacc   0.54 (  0.53)	Loss_d 0.675 (0.684)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.61 (  0.55)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.11 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.52it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 29/  1]	epoch_time 0.0360 (0.0377)	validation_time 0.0004 (0.0006)	train_time 0.0356 (0.0369)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.5367000097036362, 0.5220000147819519)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.79it/s] 19%|#9        | 5/26 [00:00<00:00, 23.40it/s] 35%|###4      | 9/26 [00:00<00:00, 27.65it/s] 50%|#####     | 13/26 [00:00<00:00, 30.30it/s] 65%|######5   | 17/26 [00:00<00:00, 31.41it/s] 81%|########  | 21/26 [00:00<00:00, 32.43it/s] 96%|#########6| 25/26 [00:00<00:00, 32.84it/s]100%|##########| 26/26 [00:00<00:00, 28.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.55 (  0.54)	train_minacc   0.61 (  0.54)	train_majacc   0.54 (  0.53)	train_corr   0.00 (  0.00)	l1 14.8350 (14.8342)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.78it/s] 27%|##6       | 7/26 [00:00<00:00, 38.88it/s]                                               27%|##6       | 7/26 [00:00<00:00, 38.88it/s] 50%|#####     | 13/26 [00:00<00:00, 44.40it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.62it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.62it/s] 96%|#########6| 25/26 [00:00<00:00, 49.16it/s]100%|##########| 26/26 [00:00<00:00, 42.19it/s]
Test: [   0/  26]	Loss 0.685 (0.685)	test_acc   0.56 (  0.56)	test_minacc   0.61 (  0.61)	test_majacc   0.55 (  0.55)	Loss_d 0.685 (0.685)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.683 (0.684)	test_acc   0.55 (  0.54)	test_minacc   0.65 (  0.56)	test_majacc   0.54 (  0.54)	Loss_d 0.683 (0.684)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.65 (  0.56)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.10 (  0.04)
Test: [  20/  26]	Loss 0.685 (0.684)	test_acc   0.52 (  0.54)	test_minacc   0.52 (  0.55)	test_majacc   0.52 (  0.54)	Loss_d 0.685 (0.684)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.52 (  0.55)	test_majacc_d   0.52 (  0.54)	test_corr_d   0.01 (  0.06)
Test: [  26/  26]	Loss 0.676 (0.684)	test_acc   0.55 (  0.54)	test_minacc   0.61 (  0.55)	test_majacc   0.54 (  0.53)	Loss_d 0.676 (0.684)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.61 (  0.55)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.11 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.44it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 30/  1]	epoch_time 0.0367 (0.0376)	validation_time 0.0003 (0.0006)	train_time 0.0364 (0.0369)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.5355000060796737, 0.5220000147819519)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.66it/s] 23%|##3       | 6/26 [00:00<00:00, 25.55it/s] 38%|###8      | 10/26 [00:00<00:00, 28.15it/s] 54%|#####3    | 14/26 [00:00<00:00, 29.81it/s] 69%|######9   | 18/26 [00:00<00:00, 30.81it/s] 85%|########4 | 22/26 [00:00<00:00, 32.05it/s]100%|##########| 26/26 [00:00<00:00, 32.98it/s]100%|##########| 26/26 [00:00<00:00, 28.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.55 (  0.54)	train_minacc   0.61 (  0.55)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 14.8358 (14.8357)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.87it/s] 27%|##6       | 7/26 [00:00<00:00, 37.44it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.44it/s] 50%|#####     | 13/26 [00:00<00:00, 43.18it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.23it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.23it/s] 96%|#########6| 25/26 [00:00<00:00, 49.38it/s]100%|##########| 26/26 [00:00<00:00, 41.54it/s]
Test: [   0/  26]	Loss 0.685 (0.685)	test_acc   0.56 (  0.56)	test_minacc   0.61 (  0.61)	test_majacc   0.55 (  0.55)	Loss_d 0.685 (0.685)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.683 (0.684)	test_acc   0.55 (  0.54)	test_minacc   0.65 (  0.56)	test_majacc   0.54 (  0.54)	Loss_d 0.683 (0.684)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.65 (  0.56)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.10 (  0.04)
Test: [  20/  26]	Loss 0.685 (0.684)	test_acc   0.52 (  0.54)	test_minacc   0.52 (  0.55)	test_majacc   0.52 (  0.54)	Loss_d 0.685 (0.684)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.52 (  0.55)	test_majacc_d   0.52 (  0.54)	test_corr_d   0.01 (  0.06)
Test: [  26/  26]	Loss 0.677 (0.685)	test_acc   0.55 (  0.54)	test_minacc   0.61 (  0.55)	test_majacc   0.53 (  0.53)	Loss_d 0.677 (0.685)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.61 (  0.55)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.11 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.92it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 31/  1]	epoch_time 0.0359 (0.0376)	validation_time 0.0004 (0.0006)	train_time 0.0354 (0.0368)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.5353000163435936, 0.5210000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.36it/s] 15%|#5        | 4/26 [00:00<00:01, 18.89it/s] 31%|###       | 8/26 [00:00<00:00, 25.00it/s] 46%|####6     | 12/26 [00:00<00:00, 28.66it/s] 62%|######1   | 16/26 [00:00<00:00, 30.66it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.06it/s] 92%|#########2| 24/26 [00:00<00:00, 32.79it/s]100%|##########| 26/26 [00:00<00:00, 27.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.55 (  0.53)	train_minacc   0.61 (  0.55)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 14.8354 (14.8359)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.68it/s] 23%|##3       | 6/26 [00:00<00:00, 27.50it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.50it/s] 42%|####2     | 11/26 [00:00<00:00, 36.03it/s] 62%|######1   | 16/26 [00:00<00:00, 40.91it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.91it/s] 81%|########  | 21/26 [00:00<00:00, 40.35it/s]100%|##########| 26/26 [00:00<00:00, 35.78it/s]
Test: [   0/  26]	Loss 0.686 (0.686)	test_acc   0.56 (  0.56)	test_minacc   0.61 (  0.61)	test_majacc   0.55 (  0.55)	Loss_d 0.686 (0.686)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.683 (0.685)	test_acc   0.55 (  0.54)	test_minacc   0.65 (  0.56)	test_majacc   0.54 (  0.54)	Loss_d 0.683 (0.685)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.65 (  0.56)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.09 (  0.04)
Test: [  20/  26]	Loss 0.685 (0.685)	test_acc   0.52 (  0.54)	test_minacc   0.52 (  0.55)	test_majacc   0.52 (  0.54)	Loss_d 0.685 (0.685)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.52 (  0.55)	test_majacc_d   0.52 (  0.54)	test_corr_d   0.01 (  0.06)
Test: [  26/  26]	Loss 0.677 (0.685)	test_acc   0.55 (  0.53)	test_minacc   0.61 (  0.55)	test_majacc   0.53 (  0.53)	Loss_d 0.677 (0.685)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.61 (  0.55)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.69it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 32/  1]	epoch_time 0.0374 (0.0376)	validation_time 0.0004 (0.0006)	train_time 0.0370 (0.0368)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.534900017529726, 0.5210000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.41it/s] 19%|#9        | 5/26 [00:00<00:00, 22.20it/s] 31%|###       | 8/26 [00:00<00:00, 23.33it/s] 46%|####6     | 12/26 [00:00<00:00, 27.48it/s] 62%|######1   | 16/26 [00:00<00:00, 28.88it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.36it/s] 88%|########8 | 23/26 [00:00<00:00, 29.94it/s]100%|##########| 26/26 [00:00<00:00, 26.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.55 (  0.54)	train_minacc   0.61 (  0.55)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 14.8342 (14.8350)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.28it/s] 27%|##6       | 7/26 [00:00<00:00, 35.69it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.69it/s] 46%|####6     | 12/26 [00:00<00:00, 40.01it/s] 69%|######9   | 18/26 [00:00<00:00, 46.24it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.24it/s] 92%|#########2| 24/26 [00:00<00:00, 47.58it/s]100%|##########| 26/26 [00:00<00:00, 40.11it/s]
Test: [   0/  26]	Loss 0.686 (0.686)	test_acc   0.56 (  0.56)	test_minacc   0.61 (  0.61)	test_majacc   0.55 (  0.55)	Loss_d 0.686 (0.686)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.684 (0.685)	test_acc   0.55 (  0.54)	test_minacc   0.65 (  0.56)	test_majacc   0.54 (  0.54)	Loss_d 0.684 (0.685)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.65 (  0.56)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.09 (  0.04)
Test: [  20/  26]	Loss 0.686 (0.685)	test_acc   0.52 (  0.54)	test_minacc   0.52 (  0.55)	test_majacc   0.52 (  0.54)	Loss_d 0.686 (0.685)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.52 (  0.55)	test_majacc_d   0.52 (  0.54)	test_corr_d   0.02 (  0.06)
Test: [  26/  26]	Loss 0.678 (0.685)	test_acc   0.55 (  0.53)	test_minacc   0.61 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.678 (0.685)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.61 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.01it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 33/  1]	epoch_time 0.0380 (0.0376)	validation_time 0.0004 (0.0006)	train_time 0.0376 (0.0368)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.5349000152051449, 0.5210000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.66it/s] 19%|#9        | 5/26 [00:00<00:00, 22.97it/s] 35%|###4      | 9/26 [00:00<00:00, 26.63it/s] 50%|#####     | 13/26 [00:00<00:00, 28.53it/s] 65%|######5   | 17/26 [00:00<00:00, 30.40it/s] 81%|########  | 21/26 [00:00<00:00, 31.76it/s] 96%|#########6| 25/26 [00:00<00:00, 32.64it/s]100%|##########| 26/26 [00:00<00:00, 27.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.54 (  0.54)	train_minacc   0.61 (  0.54)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 14.8323 (14.8334)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.41it/s] 27%|##6       | 7/26 [00:00<00:00, 33.20it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.20it/s] 50%|#####     | 13/26 [00:00<00:00, 40.24it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.48it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.48it/s] 96%|#########6| 25/26 [00:00<00:00, 46.61it/s]100%|##########| 26/26 [00:00<00:00, 39.19it/s]
Test: [   0/  26]	Loss 0.686 (0.686)	test_acc   0.56 (  0.56)	test_minacc   0.61 (  0.61)	test_majacc   0.55 (  0.55)	Loss_d 0.686 (0.686)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.684 (0.685)	test_acc   0.55 (  0.54)	test_minacc   0.65 (  0.56)	test_majacc   0.54 (  0.54)	Loss_d 0.684 (0.685)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.65 (  0.56)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.09 (  0.04)
Test: [  20/  26]	Loss 0.686 (0.685)	test_acc   0.52 (  0.54)	test_minacc   0.52 (  0.55)	test_majacc   0.52 (  0.54)	Loss_d 0.686 (0.685)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.52 (  0.55)	test_majacc_d   0.52 (  0.54)	test_corr_d   0.02 (  0.06)
Test: [  26/  26]	Loss 0.678 (0.685)	test_acc   0.54 (  0.53)	test_minacc   0.61 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.678 (0.685)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.61 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.17it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.696 (0.696)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.696 (0.696)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 34/  1]	epoch_time 0.0369 (0.0376)	validation_time 0.0003 (0.0006)	train_time 0.0366 (0.0368)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.534900013834238, 0.5210000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.08it/s] 19%|#9        | 5/26 [00:00<00:01, 19.25it/s] 35%|###4      | 9/26 [00:00<00:00, 24.65it/s] 50%|#####     | 13/26 [00:00<00:00, 28.14it/s] 65%|######5   | 17/26 [00:00<00:00, 30.28it/s] 81%|########  | 21/26 [00:00<00:00, 31.81it/s] 96%|#########6| 25/26 [00:00<00:00, 32.77it/s]100%|##########| 26/26 [00:00<00:00, 27.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.54 (  0.53)	train_minacc   0.61 (  0.54)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 14.8302 (14.8314)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.90it/s] 27%|##6       | 7/26 [00:00<00:00, 32.34it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.34it/s] 50%|#####     | 13/26 [00:00<00:00, 40.18it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.34it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.34it/s] 96%|#########6| 25/26 [00:00<00:00, 46.92it/s]100%|##########| 26/26 [00:00<00:00, 38.59it/s]
Test: [   0/  26]	Loss 0.686 (0.686)	test_acc   0.56 (  0.56)	test_minacc   0.61 (  0.61)	test_majacc   0.55 (  0.55)	Loss_d 0.686 (0.686)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.684 (0.685)	test_acc   0.55 (  0.54)	test_minacc   0.65 (  0.56)	test_majacc   0.54 (  0.54)	Loss_d 0.684 (0.685)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.65 (  0.56)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.09 (  0.04)
Test: [  20/  26]	Loss 0.686 (0.685)	test_acc   0.53 (  0.54)	test_minacc   0.52 (  0.55)	test_majacc   0.53 (  0.54)	Loss_d 0.686 (0.685)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.52 (  0.55)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.02 (  0.06)
Test: [  26/  26]	Loss 0.679 (0.685)	test_acc   0.54 (  0.54)	test_minacc   0.61 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.679 (0.685)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.61 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.33it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.696 (0.696)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.696 (0.696)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 35/  1]	epoch_time 0.0372 (0.0376)	validation_time 0.0004 (0.0006)	train_time 0.0368 (0.0368)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.5350000126659871, 0.5220000147819519)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.45it/s] 19%|#9        | 5/26 [00:00<00:00, 23.41it/s] 35%|###4      | 9/26 [00:00<00:00, 28.89it/s] 50%|#####     | 13/26 [00:00<00:00, 31.67it/s] 65%|######5   | 17/26 [00:00<00:00, 33.04it/s] 81%|########  | 21/26 [00:00<00:00, 33.82it/s] 96%|#########6| 25/26 [00:00<00:00, 34.26it/s]100%|##########| 26/26 [00:00<00:00, 29.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.54 (  0.53)	train_minacc   0.61 (  0.54)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 14.8279 (14.8291)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.34it/s] 31%|###       | 8/26 [00:00<00:00, 39.55it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.55it/s] 50%|#####     | 13/26 [00:00<00:00, 42.51it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.23it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.23it/s] 96%|#########6| 25/26 [00:00<00:00, 49.04it/s]100%|##########| 26/26 [00:00<00:00, 41.74it/s]
Test: [   0/  26]	Loss 0.686 (0.686)	test_acc   0.56 (  0.56)	test_minacc   0.61 (  0.61)	test_majacc   0.55 (  0.55)	Loss_d 0.686 (0.686)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.685 (0.686)	test_acc   0.55 (  0.54)	test_minacc   0.65 (  0.56)	test_majacc   0.54 (  0.53)	Loss_d 0.685 (0.686)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.65 (  0.56)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.08 (  0.03)
Test: [  20/  26]	Loss 0.686 (0.685)	test_acc   0.53 (  0.54)	test_minacc   0.52 (  0.54)	test_majacc   0.53 (  0.54)	Loss_d 0.686 (0.685)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.52 (  0.54)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.02 (  0.06)
Test: [  26/  26]	Loss 0.679 (0.685)	test_acc   0.54 (  0.53)	test_minacc   0.61 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.679 (0.685)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.61 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.21it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.696 (0.696)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.696 (0.696)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 36/  1]	epoch_time 0.0357 (0.0375)	validation_time 0.0004 (0.0006)	train_time 0.0353 (0.0368)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.5344000150263309, 0.5220000147819519)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.32it/s] 19%|#9        | 5/26 [00:00<00:01, 20.69it/s] 35%|###4      | 9/26 [00:00<00:00, 25.99it/s] 50%|#####     | 13/26 [00:00<00:00, 28.53it/s] 65%|######5   | 17/26 [00:00<00:00, 30.22it/s] 81%|########  | 21/26 [00:00<00:00, 31.15it/s] 96%|#########6| 25/26 [00:00<00:00, 32.12it/s]100%|##########| 26/26 [00:00<00:00, 27.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.54 (  0.53)	train_minacc   0.61 (  0.54)	train_majacc   0.52 (  0.53)	train_corr   0.00 (  0.00)	l1 14.8256 (14.8268)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.94it/s] 27%|##6       | 7/26 [00:00<00:00, 36.29it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.29it/s] 50%|#####     | 13/26 [00:00<00:00, 41.64it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.94it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.94it/s] 96%|#########6| 25/26 [00:00<00:00, 46.45it/s]100%|##########| 26/26 [00:00<00:00, 39.17it/s]
Test: [   0/  26]	Loss 0.686 (0.686)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.55 (  0.55)	Loss_d 0.686 (0.686)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.685 (0.686)	test_acc   0.55 (  0.54)	test_minacc   0.65 (  0.55)	test_majacc   0.54 (  0.53)	Loss_d 0.685 (0.686)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.65 (  0.55)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.08 (  0.03)
Test: [  20/  26]	Loss 0.686 (0.685)	test_acc   0.53 (  0.54)	test_minacc   0.50 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.686 (0.685)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.50 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.02 (  0.06)
Test: [  26/  26]	Loss 0.679 (0.686)	test_acc   0.54 (  0.53)	test_minacc   0.61 (  0.54)	test_majacc   0.52 (  0.53)	Loss_d 0.679 (0.686)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.61 (  0.54)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.11it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.696 (0.696)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.696 (0.696)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 37/  1]	epoch_time 0.0368 (0.0375)	validation_time 0.0004 (0.0005)	train_time 0.0364 (0.0368)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.5338000148534775, 0.5220000147819519)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.39it/s] 19%|#9        | 5/26 [00:00<00:00, 23.15it/s] 35%|###4      | 9/26 [00:00<00:00, 27.77it/s] 50%|#####     | 13/26 [00:00<00:00, 30.04it/s] 65%|######5   | 17/26 [00:00<00:00, 30.17it/s] 81%|########  | 21/26 [00:00<00:00, 31.19it/s] 96%|#########6| 25/26 [00:00<00:00, 31.92it/s]100%|##########| 26/26 [00:00<00:00, 27.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.54 (  0.53)	train_minacc   0.61 (  0.54)	train_majacc   0.52 (  0.53)	train_corr   0.00 (  0.00)	l1 14.8234 (14.8245)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.33it/s] 31%|###       | 8/26 [00:00<00:00, 40.79it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.79it/s] 50%|#####     | 13/26 [00:00<00:00, 42.47it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.45it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.45it/s] 96%|#########6| 25/26 [00:00<00:00, 48.72it/s]100%|##########| 26/26 [00:00<00:00, 41.91it/s]
Test: [   0/  26]	Loss 0.686 (0.686)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.55 (  0.55)	Loss_d 0.686 (0.686)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.685 (0.686)	test_acc   0.55 (  0.54)	test_minacc   0.65 (  0.55)	test_majacc   0.54 (  0.53)	Loss_d 0.685 (0.686)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.65 (  0.55)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.08 (  0.03)
Test: [  20/  26]	Loss 0.686 (0.685)	test_acc   0.53 (  0.54)	test_minacc   0.50 (  0.54)	test_majacc   0.53 (  0.54)	Loss_d 0.686 (0.685)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.50 (  0.54)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.02 (  0.06)
Test: [  26/  26]	Loss 0.679 (0.686)	test_acc   0.54 (  0.53)	test_minacc   0.61 (  0.54)	test_majacc   0.52 (  0.53)	Loss_d 0.679 (0.686)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.61 (  0.54)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.05it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.696 (0.696)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.696 (0.696)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 38/  1]	epoch_time 0.0383 (0.0375)	validation_time 0.0003 (0.0005)	train_time 0.0380 (0.0368)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.5336000125408172, 0.5220000147819519)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.18it/s] 19%|#9        | 5/26 [00:00<00:00, 21.74it/s] 35%|###4      | 9/26 [00:00<00:00, 26.82it/s] 50%|#####     | 13/26 [00:00<00:00, 29.67it/s] 65%|######5   | 17/26 [00:00<00:00, 31.47it/s] 81%|########  | 21/26 [00:00<00:00, 32.53it/s] 96%|#########6| 25/26 [00:00<00:00, 32.71it/s]100%|##########| 26/26 [00:00<00:00, 28.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.54 (  0.53)	train_minacc   0.61 (  0.54)	train_majacc   0.52 (  0.53)	train_corr   0.00 (  0.00)	l1 14.8212 (14.8223)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.19it/s] 27%|##6       | 7/26 [00:00<00:00, 33.45it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.45it/s] 50%|#####     | 13/26 [00:00<00:00, 39.30it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.19it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.19it/s] 96%|#########6| 25/26 [00:00<00:00, 46.23it/s]100%|##########| 26/26 [00:00<00:00, 39.06it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.55 (  0.55)	Loss_d 0.687 (0.687)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.685 (0.686)	test_acc   0.55 (  0.54)	test_minacc   0.65 (  0.55)	test_majacc   0.54 (  0.54)	Loss_d 0.685 (0.686)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.65 (  0.55)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.08 (  0.03)
Test: [  20/  26]	Loss 0.686 (0.686)	test_acc   0.53 (  0.54)	test_minacc   0.50 (  0.54)	test_majacc   0.53 (  0.54)	Loss_d 0.686 (0.686)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.50 (  0.54)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.02 (  0.06)
Test: [  26/  26]	Loss 0.679 (0.686)	test_acc   0.54 (  0.53)	test_minacc   0.61 (  0.54)	test_majacc   0.52 (  0.53)	Loss_d 0.679 (0.686)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.61 (  0.54)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.23it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.697 (0.697)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.697 (0.697)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 39/  1]	epoch_time 0.0358 (0.0375)	validation_time 0.0006 (0.0005)	train_time 0.0352 (0.0368)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.5337000136971474, 0.5220000147819519)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.31it/s] 19%|#9        | 5/26 [00:00<00:00, 22.43it/s] 35%|###4      | 9/26 [00:00<00:00, 27.70it/s] 50%|#####     | 13/26 [00:00<00:00, 30.07it/s] 65%|######5   | 17/26 [00:00<00:00, 31.06it/s] 81%|########  | 21/26 [00:00<00:00, 31.58it/s] 96%|#########6| 25/26 [00:00<00:00, 32.29it/s]100%|##########| 26/26 [00:00<00:00, 28.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.54 (  0.53)	train_minacc   0.59 (  0.54)	train_majacc   0.52 (  0.53)	train_corr   0.00 (  0.00)	l1 14.8192 (14.8201)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.94it/s] 27%|##6       | 7/26 [00:00<00:00, 35.91it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.91it/s] 46%|####6     | 12/26 [00:00<00:00, 38.54it/s] 65%|######5   | 17/26 [00:00<00:00, 42.01it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.01it/s] 88%|########8 | 23/26 [00:00<00:00, 46.45it/s]100%|##########| 26/26 [00:00<00:00, 38.82it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.55 (  0.55)	Loss_d 0.687 (0.687)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.685 (0.686)	test_acc   0.55 (  0.54)	test_minacc   0.65 (  0.55)	test_majacc   0.54 (  0.54)	Loss_d 0.685 (0.686)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.65 (  0.55)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.08 (  0.03)
Test: [  20/  26]	Loss 0.686 (0.686)	test_acc   0.52 (  0.54)	test_minacc   0.50 (  0.54)	test_majacc   0.53 (  0.54)	Loss_d 0.686 (0.686)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.50 (  0.54)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.02 (  0.06)
Test: [  26/  26]	Loss 0.679 (0.686)	test_acc   0.54 (  0.53)	test_minacc   0.59 (  0.54)	test_majacc   0.52 (  0.53)	Loss_d 0.679 (0.686)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.59 (  0.54)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.52it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.697 (0.697)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.697 (0.697)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 40/  1]	epoch_time 0.0376 (0.0375)	validation_time 0.0004 (0.0005)	train_time 0.0372 (0.0368)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.5334000135064125, 0.5220000147819519)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.32it/s] 19%|#9        | 5/26 [00:00<00:00, 22.17it/s] 35%|###4      | 9/26 [00:00<00:00, 26.46it/s] 50%|#####     | 13/26 [00:00<00:00, 29.02it/s] 65%|######5   | 17/26 [00:00<00:00, 30.61it/s] 81%|########  | 21/26 [00:00<00:00, 31.71it/s] 96%|#########6| 25/26 [00:00<00:00, 32.57it/s]100%|##########| 26/26 [00:00<00:00, 27.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.54 (  0.53)	train_minacc   0.59 (  0.53)	train_majacc   0.52 (  0.53)	train_corr   0.00 (  0.00)	l1 14.8172 (14.8182)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.93it/s] 31%|###       | 8/26 [00:00<00:00, 35.55it/s]                                               31%|###       | 8/26 [00:00<00:00, 35.55it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.76it/s] 77%|#######6  | 20/26 [00:00<00:00, 45.50it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 45.50it/s]100%|##########| 26/26 [00:00<00:00, 48.63it/s]100%|##########| 26/26 [00:00<00:00, 39.86it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.55 (  0.55)	Loss_d 0.687 (0.687)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.685 (0.686)	test_acc   0.55 (  0.54)	test_minacc   0.65 (  0.55)	test_majacc   0.54 (  0.54)	Loss_d 0.685 (0.686)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.65 (  0.55)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.08 (  0.03)
Test: [  20/  26]	Loss 0.686 (0.686)	test_acc   0.52 (  0.54)	test_minacc   0.48 (  0.54)	test_majacc   0.53 (  0.54)	Loss_d 0.686 (0.686)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.48 (  0.54)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.02 (  0.06)
Test: [  26/  26]	Loss 0.680 (0.686)	test_acc   0.54 (  0.53)	test_minacc   0.59 (  0.53)	test_majacc   0.52 (  0.53)	Loss_d 0.680 (0.686)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.39it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.697 (0.697)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.697 (0.697)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 41/  1]	epoch_time 0.0367 (0.0374)	validation_time 0.0003 (0.0005)	train_time 0.0363 (0.0368)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.5333000123500824, 0.5220000147819519)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.35it/s] 19%|#9        | 5/26 [00:00<00:01, 20.78it/s] 35%|###4      | 9/26 [00:00<00:00, 25.48it/s] 46%|####6     | 12/26 [00:00<00:00, 26.34it/s] 62%|######1   | 16/26 [00:00<00:00, 28.34it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.97it/s] 92%|#########2| 24/26 [00:00<00:00, 30.71it/s]100%|##########| 26/26 [00:00<00:00, 26.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.54 (  0.53)	train_minacc   0.59 (  0.53)	train_majacc   0.52 (  0.53)	train_corr   0.00 (  0.00)	l1 14.8153 (14.8162)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.56it/s] 27%|##6       | 7/26 [00:00<00:00, 34.36it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.36it/s] 50%|#####     | 13/26 [00:00<00:00, 40.01it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.47it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.47it/s] 96%|#########6| 25/26 [00:00<00:00, 46.34it/s]100%|##########| 26/26 [00:00<00:00, 39.29it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.55 (  0.55)	Loss_d 0.687 (0.687)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.685 (0.686)	test_acc   0.55 (  0.54)	test_minacc   0.65 (  0.55)	test_majacc   0.54 (  0.54)	Loss_d 0.685 (0.686)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.65 (  0.55)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.08 (  0.03)
Test: [  20/  26]	Loss 0.686 (0.686)	test_acc   0.52 (  0.54)	test_minacc   0.48 (  0.54)	test_majacc   0.53 (  0.54)	Loss_d 0.686 (0.686)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.48 (  0.54)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.02 (  0.06)
Test: [  26/  26]	Loss 0.680 (0.686)	test_acc   0.54 (  0.53)	test_minacc   0.59 (  0.53)	test_majacc   0.52 (  0.53)	Loss_d 0.680 (0.686)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.11it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.697 (0.697)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.697 (0.697)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 42/  1]	epoch_time 0.0380 (0.0375)	validation_time 0.0004 (0.0005)	train_time 0.0375 (0.0368)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.5332000088691712, 0.5220000147819519)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.93it/s] 15%|#5        | 4/26 [00:00<00:01, 20.09it/s] 27%|##6       | 7/26 [00:00<00:00, 23.97it/s] 42%|####2     | 11/26 [00:00<00:00, 28.34it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.83it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.74it/s] 88%|########8 | 23/26 [00:00<00:00, 32.79it/s]100%|##########| 26/26 [00:00<00:00, 28.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.54 (  0.53)	train_minacc   0.59 (  0.53)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 14.8136 (14.8144)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.90it/s] 23%|##3       | 6/26 [00:00<00:00, 30.18it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.18it/s] 46%|####6     | 12/26 [00:00<00:00, 40.46it/s] 65%|######5   | 17/26 [00:00<00:00, 42.36it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.36it/s] 88%|########8 | 23/26 [00:00<00:00, 47.53it/s]100%|##########| 26/26 [00:00<00:00, 38.43it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.55 (  0.55)	Loss_d 0.687 (0.687)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.685 (0.686)	test_acc   0.55 (  0.54)	test_minacc   0.65 (  0.55)	test_majacc   0.54 (  0.53)	Loss_d 0.685 (0.686)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.65 (  0.55)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.08 (  0.03)
Test: [  20/  26]	Loss 0.686 (0.686)	test_acc   0.52 (  0.54)	test_minacc   0.48 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.686 (0.686)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.48 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.02 (  0.06)
Test: [  26/  26]	Loss 0.680 (0.686)	test_acc   0.54 (  0.53)	test_minacc   0.59 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.680 (0.686)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.90it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.697 (0.697)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.697 (0.697)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 43/  1]	epoch_time 0.0374 (0.0375)	validation_time 0.0004 (0.0005)	train_time 0.0370 (0.0368)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.5331000125706196, 0.5210000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.80it/s] 19%|#9        | 5/26 [00:00<00:01, 20.67it/s] 35%|###4      | 9/26 [00:00<00:00, 25.34it/s] 50%|#####     | 13/26 [00:00<00:00, 28.44it/s] 65%|######5   | 17/26 [00:00<00:00, 30.37it/s] 81%|########  | 21/26 [00:00<00:00, 30.78it/s] 96%|#########6| 25/26 [00:00<00:00, 31.52it/s]100%|##########| 26/26 [00:00<00:00, 27.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.54 (  0.53)	train_minacc   0.59 (  0.53)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 14.8120 (14.8127)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 37.07it/s] 35%|###4      | 9/26 [00:00<00:00, 38.98it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.98it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.37it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.37it/s] 81%|########  | 21/26 [00:00<00:00, 47.29it/s]100%|##########| 26/26 [00:00<00:00, 42.44it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.55 (  0.55)	Loss_d 0.687 (0.687)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.686 (0.686)	test_acc   0.55 (  0.54)	test_minacc   0.65 (  0.55)	test_majacc   0.54 (  0.53)	Loss_d 0.686 (0.686)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.65 (  0.55)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.07 (  0.03)
Test: [  20/  26]	Loss 0.686 (0.686)	test_acc   0.52 (  0.54)	test_minacc   0.48 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.686 (0.686)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.48 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.02 (  0.06)
Test: [  26/  26]	Loss 0.680 (0.686)	test_acc   0.54 (  0.53)	test_minacc   0.59 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.680 (0.686)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.28it/s]
Test: [  0/  1]	Loss 0.698 (0.698)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.698 (0.698)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.698 (0.698)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.698 (0.698)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 44/  1]	epoch_time 0.0362 (0.0374)	validation_time 0.0004 (0.0005)	train_time 0.0358 (0.0368)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.5331000125706196, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.85it/s] 23%|##3       | 6/26 [00:00<00:00, 25.12it/s] 38%|###8      | 10/26 [00:00<00:00, 28.12it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.34it/s] 69%|######9   | 18/26 [00:00<00:00, 31.66it/s] 85%|########4 | 22/26 [00:00<00:00, 32.44it/s]100%|##########| 26/26 [00:00<00:00, 33.43it/s]100%|##########| 26/26 [00:00<00:00, 28.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.54 (  0.53)	train_minacc   0.59 (  0.53)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 14.8105 (14.8111)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.91it/s] 31%|###       | 8/26 [00:00<00:00, 40.06it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.06it/s] 50%|#####     | 13/26 [00:00<00:00, 42.63it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.80it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.80it/s] 96%|#########6| 25/26 [00:00<00:00, 48.26it/s]100%|##########| 26/26 [00:00<00:00, 41.57it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.55 (  0.55)	Loss_d 0.687 (0.687)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.686 (0.686)	test_acc   0.55 (  0.54)	test_minacc   0.65 (  0.55)	test_majacc   0.54 (  0.53)	Loss_d 0.686 (0.686)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.65 (  0.55)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.07 (  0.04)
Test: [  20/  26]	Loss 0.686 (0.686)	test_acc   0.52 (  0.54)	test_minacc   0.48 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.686 (0.686)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.48 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.02 (  0.06)
Test: [  26/  26]	Loss 0.680 (0.686)	test_acc   0.54 (  0.53)	test_minacc   0.59 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.680 (0.686)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.48it/s]
Test: [  0/  1]	Loss 0.698 (0.698)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.698 (0.698)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.698 (0.698)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.698 (0.698)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 45/  1]	epoch_time 0.0360 (0.0374)	validation_time 0.0003 (0.0005)	train_time 0.0356 (0.0367)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.5333000148832798, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.00it/s] 19%|#9        | 5/26 [00:00<00:00, 22.20it/s] 35%|###4      | 9/26 [00:00<00:00, 26.92it/s] 50%|#####     | 13/26 [00:00<00:00, 29.63it/s] 65%|######5   | 17/26 [00:00<00:00, 31.36it/s] 81%|########  | 21/26 [00:00<00:00, 32.29it/s] 96%|#########6| 25/26 [00:00<00:00, 32.60it/s]100%|##########| 26/26 [00:00<00:00, 28.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.54 (  0.53)	train_minacc   0.59 (  0.53)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 14.8092 (14.8097)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.54it/s] 23%|##3       | 6/26 [00:00<00:00, 27.32it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.32it/s] 46%|####6     | 12/26 [00:00<00:00, 39.34it/s] 65%|######5   | 17/26 [00:00<00:00, 41.34it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.34it/s] 88%|########8 | 23/26 [00:00<00:00, 46.52it/s]100%|##########| 26/26 [00:00<00:00, 37.12it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.55 (  0.55)	Loss_d 0.687 (0.687)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.686 (0.686)	test_acc   0.55 (  0.54)	test_minacc   0.65 (  0.55)	test_majacc   0.54 (  0.53)	Loss_d 0.686 (0.686)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.65 (  0.55)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.07 (  0.04)
Test: [  20/  26]	Loss 0.686 (0.686)	test_acc   0.52 (  0.53)	test_minacc   0.48 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.686 (0.686)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.48 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.02 (  0.06)
Test: [  26/  26]	Loss 0.680 (0.686)	test_acc   0.54 (  0.53)	test_minacc   0.59 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.680 (0.686)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.61it/s]
Test: [  0/  1]	Loss 0.698 (0.698)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.698 (0.698)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.698 (0.698)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.698 (0.698)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 46/  1]	epoch_time 0.0361 (0.0374)	validation_time 0.0004 (0.0005)	train_time 0.0357 (0.0367)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.5330000137388706, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.44it/s] 15%|#5        | 4/26 [00:00<00:01, 17.63it/s] 31%|###       | 8/26 [00:00<00:00, 24.80it/s] 46%|####6     | 12/26 [00:00<00:00, 28.83it/s] 62%|######1   | 16/26 [00:00<00:00, 30.90it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.50it/s] 92%|#########2| 24/26 [00:00<00:00, 32.63it/s]100%|##########| 26/26 [00:00<00:00, 27.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.54 (  0.53)	train_minacc   0.59 (  0.53)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 14.8080 (14.8085)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.66it/s] 31%|###       | 8/26 [00:00<00:00, 42.21it/s]                                               31%|###       | 8/26 [00:00<00:00, 42.21it/s] 50%|#####     | 13/26 [00:00<00:00, 43.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.32it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.32it/s] 96%|#########6| 25/26 [00:00<00:00, 47.71it/s]100%|##########| 26/26 [00:00<00:00, 41.47it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.55 (  0.55)	Loss_d 0.687 (0.687)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.686 (0.686)	test_acc   0.55 (  0.54)	test_minacc   0.65 (  0.55)	test_majacc   0.54 (  0.53)	Loss_d 0.686 (0.686)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.65 (  0.55)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.07 (  0.04)
Test: [  20/  26]	Loss 0.686 (0.686)	test_acc   0.52 (  0.54)	test_minacc   0.48 (  0.53)	test_majacc   0.53 (  0.54)	Loss_d 0.686 (0.686)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.48 (  0.53)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.02 (  0.06)
Test: [  26/  26]	Loss 0.680 (0.686)	test_acc   0.54 (  0.53)	test_minacc   0.59 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.680 (0.686)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.15it/s]
Test: [  0/  1]	Loss 0.698 (0.698)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.698 (0.698)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.698 (0.698)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.698 (0.698)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 47/  1]	epoch_time 0.0367 (0.0374)	validation_time 0.0004 (0.0005)	train_time 0.0363 (0.0367)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.5333000125586986, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.59it/s] 15%|#5        | 4/26 [00:00<00:01, 17.68it/s] 31%|###       | 8/26 [00:00<00:00, 24.70it/s] 46%|####6     | 12/26 [00:00<00:00, 27.79it/s] 62%|######1   | 16/26 [00:00<00:00, 29.68it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.15it/s] 92%|#########2| 24/26 [00:00<00:00, 31.98it/s]100%|##########| 26/26 [00:00<00:00, 26.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.54 (  0.53)	train_minacc   0.59 (  0.53)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 14.8070 (14.8074)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.06it/s] 27%|##6       | 7/26 [00:00<00:00, 34.81it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.81it/s] 50%|#####     | 13/26 [00:00<00:00, 40.74it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.88it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.88it/s] 96%|#########6| 25/26 [00:00<00:00, 47.14it/s]100%|##########| 26/26 [00:00<00:00, 38.34it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.55 (  0.55)	Loss_d 0.687 (0.687)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.686 (0.686)	test_acc   0.55 (  0.54)	test_minacc   0.65 (  0.55)	test_majacc   0.54 (  0.53)	Loss_d 0.686 (0.686)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.65 (  0.55)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.07 (  0.04)
Test: [  20/  26]	Loss 0.686 (0.686)	test_acc   0.52 (  0.53)	test_minacc   0.48 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.686 (0.686)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.48 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.02 (  0.06)
Test: [  26/  26]	Loss 0.680 (0.686)	test_acc   0.54 (  0.53)	test_minacc   0.59 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.680 (0.686)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.64it/s]
Test: [  0/  1]	Loss 0.698 (0.698)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.698 (0.698)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.698 (0.698)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.698 (0.698)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 48/  1]	epoch_time 0.0361 (0.0373)	validation_time 0.0003 (0.0005)	train_time 0.0357 (0.0367)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.5331000125706196, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.87it/s] 19%|#9        | 5/26 [00:00<00:01, 20.31it/s] 35%|###4      | 9/26 [00:00<00:00, 26.00it/s] 50%|#####     | 13/26 [00:00<00:00, 29.04it/s] 65%|######5   | 17/26 [00:00<00:00, 31.02it/s] 81%|########  | 21/26 [00:00<00:00, 32.29it/s] 96%|#########6| 25/26 [00:00<00:00, 32.69it/s]100%|##########| 26/26 [00:00<00:00, 27.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.54 (  0.53)	train_minacc   0.59 (  0.53)	train_majacc   0.52 (  0.53)	train_corr   0.00 (  0.00)	l1 14.8062 (14.8065)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.18it/s] 35%|###4      | 9/26 [00:00<00:00, 39.16it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.16it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.91it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.91it/s] 81%|########  | 21/26 [00:00<00:00, 47.23it/s]100%|##########| 26/26 [00:00<00:00, 42.41it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.55 (  0.55)	Loss_d 0.687 (0.687)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.686 (0.686)	test_acc   0.55 (  0.54)	test_minacc   0.65 (  0.55)	test_majacc   0.54 (  0.53)	Loss_d 0.686 (0.686)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.65 (  0.55)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.07 (  0.04)
Test: [  20/  26]	Loss 0.686 (0.686)	test_acc   0.52 (  0.53)	test_minacc   0.48 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.686 (0.686)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.48 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.02 (  0.06)
Test: [  26/  26]	Loss 0.680 (0.686)	test_acc   0.54 (  0.53)	test_minacc   0.59 (  0.53)	test_majacc   0.52 (  0.53)	Loss_d 0.680 (0.686)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.50it/s]
Test: [  0/  1]	Loss 0.699 (0.699)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.699 (0.699)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.699 (0.699)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.699 (0.699)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 49/  1]	epoch_time 0.0362 (0.0373)	validation_time 0.0004 (0.0005)	train_time 0.0357 (0.0367)
record: (train_acc, test_acc) (0.6713000267148018, 0.4000000059604645)
last accs (train_acc, test_acc) (0.5328000147044659, 0.5200000405311584)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.097 MB of 0.097 MB uploadedwandb: \ 0.097 MB of 0.097 MB uploadedwandb: | 0.097 MB of 0.097 MB uploadedwandb: / 0.097 MB of 0.097 MB uploadedwandb: - 0.097 MB of 0.097 MB uploadedwandb: \ 0.097 MB of 0.097 MB uploadedwandb: | 0.097 MB of 0.097 MB uploadedwandb: / 0.097 MB of 0.097 MB uploadedwandb: - 0.097 MB of 0.097 MB uploadedwandb: \ 0.097 MB of 0.097 MB uploadedwandb: | 0.097 MB of 0.097 MB uploadedwandb: / 0.119 MB of 0.131 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/diagnostics/epoch_time_val █▂▂▁▁▁▁▁▂▁▁▁▁▁▂▁▁▁▁▁▁▁▁▂▁▁▂▂▂▁▁▂▂▁▂▂▁▁▁▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/diagnostics/train_time_val █▂▂▁▁▁▁▂▂▁▁▁▂▂▂▁▁▁▁▂▁▂▂▂▂▁▂▂▂▁▂▂▂▂▂▂▁▁▂▁
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/Loss_avg ▇▆▇▇▇██▇▇███▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/Loss_d_avg ▇▆▇▇▇██▇▇███▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/Loss_d_val ▇▆▇▇▇██▇▇███▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/Loss_val ▇▆▇▇▇██▇▇███▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/test_acc_avg ▁▄▂▂▄▂▂▃▄▂▃▃▆▇▇▆▆▅▅█████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/test_acc_d_avg ▁▄▂▂▄▂▂▃▄▂▃▃▆▇▇▆▆▅▅█████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/test_acc_d_val ▁▄▂▂▄▂▂▃▄▂▃▃▆▇▇▆▆▅▅█████████████████████
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/test_acc_val ▁▄▂▂▄▂▂▃▄▂▃▃▆▇▇▆▆▅▅█████████████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/test_corr_d_avg █▆▇▇▆▇▇▇▆▇▇▇▃▁▂▃▃▃▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/test_corr_d_val █▆▇▇▆▇▇▇▆▇▇▇▃▁▂▃▃▃▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/test_majacc_avg █▇██████████▄▂▁▁▂▂▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/test_majacc_d_avg █▇██████████▄▂▁▁▂▂▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/test_majacc_d_val █▇██████████▄▂▁▁▂▂▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/test_majacc_val █▇██████████▄▂▁▁▂▂▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/test_minacc_avg ▁▄▂▂▄▂▂▃▄▂▃▃▆▇▇▇▆▆▅█████████████████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/test_minacc_d_avg ▁▄▂▂▄▂▂▃▄▂▃▃▆▇▇▇▆▆▅█████████████████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/test_minacc_d_val ▁▄▂▂▄▂▂▃▄▂▃▃▆▇▇▇▆▆▅█████████████████████
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/test_minacc_val ▁▄▂▂▄▂▂▃▄▂▃▃▆▇▇▇▆▆▅█████████████████████
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/Loss_avg █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/Loss_val █▅▃▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/l1_avg ▂▂▁▁▁▁▂▃▅▆▇▇███████▆▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/l1_val ▂▂▁▁▁▂▃▄▆▆▇████████▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/train_acc_avg ▇███████████▇▃▂▂▁▁▁▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/train_acc_val ▇▇▇▇▇▇▇▇▇▇▇█▅▃▃▂▁▁▁▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/train_majacc_avg ▇███████████▆▃▂▁▁▁▁▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/train_majacc_val ████████████▄▃▂▁▁▁▁▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/train_minacc_avg ▂▁▁▂▂▂▃▃▄▄▄▄▇█▇▇▆▆▅▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/train_minacc_val ▁▁▁▁▃▁▃▂▂▂▃▄▇███▆▆▅█████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/train_nll_avg ▅▃▂▂▁▂▁▁▁▁▁▁▃▇█████▇████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/train_nll_val ▃▂▃▂▁▂▂▁▂▁▂▁▆▇█████▇▇███████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/train_penalty_avg █▃▃▃▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/train_penalty_val █▆▇▆▄▇▄▄▅▅▅▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/weight_norm_avg █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/weight_norm_val █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/diagnostics/epoch_time_val 0.03619
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/diagnostics/train_time_val 0.03575
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/diagnostics/validation_time_val 0.00041
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/Loss_avg 0.69852
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/Loss_d_avg 0.69852
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/Loss_d_val 0.69852
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/Loss_val 0.69852
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/test_acc_avg 0.52
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/test_acc_d_avg 0.52
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/test_acc_d_val 0.52
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/test_acc_val 0.52
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/test_corr_d_avg -0.03843
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/test_corr_d_val -0.03843
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/test_majacc_avg 0.55
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/test_majacc_d_avg 0.55
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/test_majacc_d_val 0.55
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/test_majacc_val 0.55
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/test_minacc_avg 0.51667
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/test_minacc_d_avg 0.51667
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/test_minacc_d_val 0.51667
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/test/test_minacc_val 0.51667
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/Loss_avg 9e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/Loss_val 0.00012
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/l1_avg 14.8065
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/l1_val 14.80625
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/train_acc_avg 0.5329
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/train_acc_val 0.536
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/train_majacc_avg 0.53304
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/train_majacc_val 0.52427
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/train_minacc_avg 0.53185
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/train_minacc_val 0.59091
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/train_nll_avg 0.68557
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/train_nll_val 0.68015
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/train_penalty_val 4e-05
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/weight_norm_avg 0.14621
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/53/logs/train/weight_norm_val 0.14611
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/bd3d4cz7
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_115301-bd3d4cz7/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_115535-mrqdtx7s
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/mrqdtx7s
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=15.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1149
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6057, 3, 32, 32) (5943, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:44,  1.79s/it] 19%|#9        | 5/26 [00:01<00:06,  3.45it/s] 35%|###4      | 9/26 [00:02<00:02,  6.81it/s] 50%|#####     | 13/26 [00:02<00:01, 10.54it/s] 65%|######5   | 17/26 [00:02<00:00, 14.41it/s] 81%|########  | 21/26 [00:02<00:00, 18.32it/s] 96%|#########6| 25/26 [00:02<00:00, 21.85it/s]100%|##########| 26/26 [00:02<00:00,  9.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 10.089 (12.631)	train_nll   0.44 (  0.59)	train_penalty   0.07 (  0.30)	weight_norm   9.65 ( 12.04)	train_acc   0.83 (  0.78)	train_minacc   0.07 (  0.11)	train_majacc   0.99 (  0.90)	train_corr   0.00 (  0.00)	l1 7.7915 (7.6118)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.18it/s] 31%|###       | 8/26 [00:00<00:00, 41.09it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.09it/s] 50%|#####     | 13/26 [00:00<00:00, 41.25it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.93it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.93it/s] 96%|#########6| 25/26 [00:00<00:00, 47.40it/s]100%|##########| 26/26 [00:00<00:00, 40.73it/s]
Test: [   0/  26]	Loss 0.367 (0.367)	test_acc   0.88 (  0.88)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.367 (0.367)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.418 (0.414)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.418 (0.414)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.393 (0.417)	test_acc   0.86 (  0.84)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.393 (0.417)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.432 (0.414)	test_acc   0.84 (  0.84)	test_minacc   0.07 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.432 (0.414)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.07 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.55it/s]100%|##########| 1/1 [00:00<00:00,  2.55it/s]
Test: [  0/  1]	Loss 1.743 (1.743)	test_acc   0.11 (  0.11)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.743 (1.743)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  1/  1]	Loss 1.743 (1.743)	test_acc   0.11 (  0.11)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.743 (1.743)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/54/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0738 (0.0738)	validation_time 0.0066 (0.0066)	train_time 0.0653 (0.0653)
record: (train_acc, test_acc) (0.8449000235795975, 0.11400000751018524)
last accs (train_acc, test_acc) (0.8449000235795975, 0.11400000751018524)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.28it/s] 19%|#9        | 5/26 [00:00<00:00, 23.14it/s] 35%|###4      | 9/26 [00:00<00:00, 29.01it/s] 50%|#####     | 13/26 [00:00<00:00, 31.14it/s] 65%|######5   | 17/26 [00:00<00:00, 32.65it/s] 81%|########  | 21/26 [00:00<00:00, 33.53it/s] 96%|#########6| 25/26 [00:00<00:00, 33.73it/s]100%|##########| 26/26 [00:00<00:00, 28.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 5.259 (7.290)	train_nll   0.40 (  0.41)	train_penalty   0.06 (  0.05)	weight_norm   4.86 (  6.88)	train_acc   0.84 (  0.85)	train_minacc   0.09 (  0.03)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 8.3369 (8.2381)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.71it/s] 27%|##6       | 7/26 [00:00<00:00, 33.87it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.87it/s] 50%|#####     | 13/26 [00:00<00:00, 40.37it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.58it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.58it/s] 96%|#########6| 25/26 [00:00<00:00, 46.18it/s]100%|##########| 26/26 [00:00<00:00, 38.51it/s]
Test: [   0/  26]	Loss 0.386 (0.386)	test_acc   0.85 (  0.85)	test_minacc   0.07 (  0.07)	test_majacc   0.96 (  0.96)	Loss_d 0.386 (0.386)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.390 (0.404)	test_acc   0.84 (  0.84)	test_minacc   0.15 (  0.11)	test_majacc   0.98 (  0.97)	Loss_d 0.390 (0.404)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.15 (  0.11)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.94 (  0.93)
Test: [  20/  26]	Loss 0.389 (0.407)	test_acc   0.85 (  0.84)	test_minacc   0.12 (  0.12)	test_majacc   0.96 (  0.97)	Loss_d 0.389 (0.407)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.93 (  0.93)
Test: [  26/  26]	Loss 0.396 (0.403)	test_acc   0.85 (  0.84)	test_minacc   0.23 (  0.12)	test_majacc   0.98 (  0.97)	Loss_d 0.396 (0.403)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.23 (  0.12)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.92 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.23it/s]
Test: [  0/  1]	Loss 1.532 (1.532)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.98 (  0.98)	Loss_d 1.532 (1.532)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.87 (  0.87)
Test: [  1/  1]	Loss 1.532 (1.532)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.98 (  0.98)	Loss_d 1.532 (1.532)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.87 (  0.87)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/54/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0376 (0.0557)	validation_time 0.0004 (0.0035)	train_time 0.0371 (0.0512)
record: (train_acc, test_acc) (0.843200021982193, 0.1860000044107437)
last accs (train_acc, test_acc) (0.843200021982193, 0.1860000044107437)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.06it/s] 19%|#9        | 5/26 [00:00<00:00, 21.20it/s] 35%|###4      | 9/26 [00:00<00:00, 26.94it/s] 50%|#####     | 13/26 [00:00<00:00, 30.51it/s] 65%|######5   | 17/26 [00:00<00:00, 32.81it/s] 81%|########  | 21/26 [00:00<00:00, 34.06it/s] 96%|#########6| 25/26 [00:00<00:00, 34.79it/s]100%|##########| 26/26 [00:00<00:00, 28.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 3.177 (4.059)	train_nll   0.38 (  0.40)	train_penalty   0.03 (  0.05)	weight_norm   2.80 (  3.66)	train_acc   0.83 (  0.84)	train_minacc   0.26 (  0.07)	train_majacc   0.95 (  0.98)	train_corr   0.00 (  0.00)	l1 7.7486 (8.0584)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 29.01it/s] 35%|###4      | 9/26 [00:00<00:00, 41.11it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.11it/s] 58%|#####7    | 15/26 [00:00<00:00, 48.11it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 48.11it/s] 81%|########  | 21/26 [00:00<00:00, 48.70it/s]100%|##########| 26/26 [00:00<00:00, 43.24it/s]
Test: [   0/  26]	Loss 0.363 (0.363)	test_acc   0.86 (  0.86)	test_minacc   0.09 (  0.09)	test_majacc   0.96 (  0.96)	Loss_d 0.363 (0.363)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.365 (0.380)	test_acc   0.85 (  0.85)	test_minacc   0.11 (  0.12)	test_majacc   0.98 (  0.97)	Loss_d 0.365 (0.380)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.11 (  0.12)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.93 (  0.92)
Test: [  20/  26]	Loss 0.352 (0.386)	test_acc   0.88 (  0.85)	test_minacc   0.21 (  0.13)	test_majacc   0.98 (  0.97)	Loss_d 0.352 (0.386)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.21 (  0.13)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.354 (0.381)	test_acc   0.86 (  0.85)	test_minacc   0.26 (  0.13)	test_majacc   0.98 (  0.97)	Loss_d 0.354 (0.381)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.26 (  0.13)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.90 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.46it/s]
Test: [  0/  1]	Loss 1.628 (1.628)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.98 (  0.98)	Loss_d 1.628 (1.628)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.77 (  0.77)
Test: [  1/  1]	Loss 1.628 (1.628)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.98 (  0.98)	Loss_d 1.628 (1.628)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.77 (  0.77)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/54/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0357 (0.0490)	validation_time 0.0004 (0.0025)	train_time 0.0352 (0.0459)
record: (train_acc, test_acc) (0.8472000268101693, 0.22300000488758087)
last accs (train_acc, test_acc) (0.8472000268101693, 0.22300000488758087)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.14it/s] 19%|#9        | 5/26 [00:00<00:00, 23.64it/s] 35%|###4      | 9/26 [00:00<00:00, 27.22it/s] 50%|#####     | 13/26 [00:00<00:00, 29.12it/s] 65%|######5   | 17/26 [00:00<00:00, 31.83it/s] 81%|########  | 21/26 [00:00<00:00, 33.41it/s] 96%|#########6| 25/26 [00:00<00:00, 34.34it/s]100%|##########| 26/26 [00:00<00:00, 28.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 2.126 (2.602)	train_nll   0.37 (  0.38)	train_penalty   0.04 (  0.04)	weight_norm   1.76 (  2.22)	train_acc   0.84 (  0.84)	train_minacc   0.14 (  0.08)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 7.1113 (7.3881)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.38it/s] 27%|##6       | 7/26 [00:00<00:00, 35.45it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.45it/s] 46%|####6     | 12/26 [00:00<00:00, 39.09it/s] 69%|######9   | 18/26 [00:00<00:00, 44.64it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.64it/s] 92%|#########2| 24/26 [00:00<00:00, 46.88it/s]100%|##########| 26/26 [00:00<00:00, 38.84it/s]
Test: [   0/  26]	Loss 0.380 (0.380)	test_acc   0.85 (  0.85)	test_minacc   0.18 (  0.18)	test_majacc   0.94 (  0.94)	Loss_d 0.380 (0.380)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.359 (0.371)	test_acc   0.84 (  0.84)	test_minacc   0.24 (  0.24)	test_majacc   0.96 (  0.94)	Loss_d 0.359 (0.371)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.87 (  0.86)
Test: [  20/  26]	Loss 0.338 (0.374)	test_acc   0.85 (  0.84)	test_minacc   0.31 (  0.25)	test_majacc   0.94 (  0.95)	Loss_d 0.338 (0.374)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.31 (  0.25)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.87 (  0.86)
Test: [  26/  26]	Loss 0.338 (0.372)	test_acc   0.86 (  0.84)	test_minacc   0.33 (  0.26)	test_majacc   0.97 (  0.95)	Loss_d 0.338 (0.372)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.33 (  0.26)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.84 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.50it/s]
Test: [  0/  1]	Loss 1.336 (1.336)	test_acc   0.33 (  0.33)	test_minacc   0.26 (  0.26)	test_majacc   0.94 (  0.94)	Loss_d 1.336 (1.336)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.57 (  0.57)
Test: [  1/  1]	Loss 1.336 (1.336)	test_acc   0.33 (  0.33)	test_minacc   0.26 (  0.26)	test_majacc   0.94 (  0.94)	Loss_d 1.336 (1.336)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.57 (  0.57)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/54/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0368 (0.0460)	validation_time 0.0004 (0.0020)	train_time 0.0364 (0.0435)
record: (train_acc, test_acc) (0.8430000246167183, 0.3290000259876251)
last accs (train_acc, test_acc) (0.8430000246167183, 0.3290000259876251)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.89it/s] 19%|#9        | 5/26 [00:00<00:01, 18.85it/s] 35%|###4      | 9/26 [00:00<00:00, 24.68it/s] 50%|#####     | 13/26 [00:00<00:00, 28.61it/s] 65%|######5   | 17/26 [00:00<00:00, 31.34it/s] 81%|########  | 21/26 [00:00<00:00, 33.34it/s] 96%|#########6| 25/26 [00:00<00:00, 33.91it/s]100%|##########| 26/26 [00:00<00:00, 27.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.482 (1.784)	train_nll   0.34 (  0.36)	train_penalty   0.02 (  0.03)	weight_norm   1.14 (  1.42)	train_acc   0.86 (  0.85)	train_minacc   0.40 (  0.15)	train_majacc   0.95 (  0.97)	train_corr   0.00 (  0.00)	l1 6.8523 (6.9517)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.01it/s] 27%|##6       | 7/26 [00:00<00:00, 32.91it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.91it/s] 50%|#####     | 13/26 [00:00<00:00, 40.36it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.79it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.79it/s] 96%|#########6| 25/26 [00:00<00:00, 47.19it/s]100%|##########| 26/26 [00:00<00:00, 38.69it/s]
Test: [   0/  26]	Loss 0.401 (0.401)	test_acc   0.81 (  0.81)	test_minacc   0.38 (  0.38)	test_majacc   0.87 (  0.87)	Loss_d 0.401 (0.401)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.79 (  0.79)
Test: [  10/  26]	Loss 0.342 (0.370)	test_acc   0.87 (  0.83)	test_minacc   0.55 (  0.48)	test_majacc   0.93 (  0.89)	Loss_d 0.342 (0.370)	test_acc_d   0.87 (  0.83)	test_minacc_d   0.55 (  0.48)	test_majacc_d   0.93 (  0.89)	test_corr_d   0.79 (  0.78)
Test: [  20/  26]	Loss 0.334 (0.369)	test_acc   0.84 (  0.83)	test_minacc   0.58 (  0.50)	test_majacc   0.88 (  0.89)	Loss_d 0.334 (0.369)	test_acc_d   0.84 (  0.83)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.88 (  0.89)	test_corr_d   0.79 (  0.78)
Test: [  26/  26]	Loss 0.332 (0.365)	test_acc   0.84 (  0.83)	test_minacc   0.60 (  0.51)	test_majacc   0.89 (  0.89)	Loss_d 0.332 (0.365)	test_acc_d   0.84 (  0.83)	test_minacc_d   0.60 (  0.51)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.74 (  0.77)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.04it/s]
Test: [  0/  1]	Loss 1.044 (1.044)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.87 (  0.87)	Loss_d 1.044 (1.044)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 1.044 (1.044)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.87 (  0.87)	Loss_d 1.044 (1.044)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.26 (  0.26)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/54/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0368 (0.0441)	validation_time 0.0003 (0.0016)	train_time 0.0365 (0.0421)
record: (train_acc, test_acc) (0.8319000294208526, 0.5220000147819519)
last accs (train_acc, test_acc) (0.8319000294208526, 0.5220000147819519)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.63it/s] 19%|#9        | 5/26 [00:00<00:01, 19.35it/s] 35%|###4      | 9/26 [00:00<00:00, 25.94it/s] 50%|#####     | 13/26 [00:00<00:00, 29.89it/s] 65%|######5   | 17/26 [00:00<00:00, 32.27it/s] 81%|########  | 21/26 [00:00<00:00, 33.82it/s] 96%|#########6| 25/26 [00:00<00:00, 34.15it/s]100%|##########| 26/26 [00:00<00:00, 27.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.133 (1.307)	train_nll   0.36 (  0.36)	train_penalty   0.04 (  0.03)	weight_norm   0.77 (  0.94)	train_acc   0.84 (  0.85)	train_minacc   0.09 (  0.16)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 7.0843 (6.9561)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.97it/s] 27%|##6       | 7/26 [00:00<00:00, 36.93it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.93it/s] 50%|#####     | 13/26 [00:00<00:00, 40.96it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.21it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.21it/s] 96%|#########6| 25/26 [00:00<00:00, 47.50it/s]100%|##########| 26/26 [00:00<00:00, 40.04it/s]
Test: [   0/  26]	Loss 0.369 (0.369)	test_acc   0.86 (  0.86)	test_minacc   0.20 (  0.20)	test_majacc   0.94 (  0.94)	Loss_d 0.369 (0.369)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.351 (0.354)	test_acc   0.86 (  0.85)	test_minacc   0.24 (  0.24)	test_majacc   0.98 (  0.95)	Loss_d 0.351 (0.354)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.98 (  0.95)	test_corr_d   0.88 (  0.88)
Test: [  20/  26]	Loss 0.323 (0.354)	test_acc   0.85 (  0.85)	test_minacc   0.27 (  0.25)	test_majacc   0.94 (  0.95)	Loss_d 0.323 (0.354)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.27 (  0.25)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.88 (  0.87)
Test: [  26/  26]	Loss 0.320 (0.351)	test_acc   0.85 (  0.85)	test_minacc   0.28 (  0.26)	test_majacc   0.97 (  0.95)	Loss_d 0.320 (0.351)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.28 (  0.26)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.87 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.63it/s]
Test: [  0/  1]	Loss 1.370 (1.370)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.96 (  0.96)	Loss_d 1.370 (1.370)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.60 (  0.60)
Test: [  1/  1]	Loss 1.370 (1.370)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.96 (  0.96)	Loss_d 1.370 (1.370)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.60 (  0.60)
Overall Timing[  5/  1]	epoch_time 0.0368 (0.0429)	validation_time 0.0004 (0.0014)	train_time 0.0364 (0.0411)
record: (train_acc, test_acc) (0.8319000294208526, 0.5220000147819519)
last accs (train_acc, test_acc) (0.848800025343895, 0.31800001859664917)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.82it/s] 19%|#9        | 5/26 [00:00<00:00, 21.21it/s] 35%|###4      | 9/26 [00:00<00:00, 26.82it/s] 50%|#####     | 13/26 [00:00<00:00, 29.93it/s] 65%|######5   | 17/26 [00:00<00:00, 32.21it/s] 81%|########  | 21/26 [00:00<00:00, 33.08it/s] 96%|#########6| 25/26 [00:00<00:00, 34.09it/s]100%|##########| 26/26 [00:00<00:00, 28.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.855 (0.981)	train_nll   0.34 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.51 (  0.63)	train_acc   0.84 (  0.85)	train_minacc   0.19 (  0.18)	train_majacc   0.97 (  0.97)	train_corr   0.00 (  0.00)	l1 7.8560 (7.4644)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.33it/s] 27%|##6       | 7/26 [00:00<00:00, 31.44it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.44it/s] 46%|####6     | 12/26 [00:00<00:00, 38.31it/s] 65%|######5   | 17/26 [00:00<00:00, 40.97it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.97it/s] 88%|########8 | 23/26 [00:00<00:00, 46.51it/s]100%|##########| 26/26 [00:00<00:00, 37.09it/s]
Test: [   0/  26]	Loss 0.344 (0.344)	test_acc   0.84 (  0.84)	test_minacc   0.40 (  0.40)	test_majacc   0.90 (  0.90)	Loss_d 0.344 (0.344)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.85 (  0.85)
Test: [  10/  26]	Loss 0.303 (0.327)	test_acc   0.87 (  0.85)	test_minacc   0.53 (  0.47)	test_majacc   0.94 (  0.91)	Loss_d 0.303 (0.327)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.53 (  0.47)	test_majacc_d   0.94 (  0.91)	test_corr_d   0.84 (  0.84)
Test: [  20/  26]	Loss 0.300 (0.326)	test_acc   0.87 (  0.85)	test_minacc   0.44 (  0.48)	test_majacc   0.93 (  0.92)	Loss_d 0.300 (0.326)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.44 (  0.48)	test_majacc_d   0.93 (  0.92)	test_corr_d   0.86 (  0.84)
Test: [  26/  26]	Loss 0.292 (0.322)	test_acc   0.88 (  0.86)	test_minacc   0.60 (  0.49)	test_majacc   0.93 (  0.92)	Loss_d 0.292 (0.322)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.60 (  0.49)	test_majacc_d   0.93 (  0.92)	test_corr_d   0.81 (  0.83)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.48it/s]
Test: [  0/  1]	Loss 1.187 (1.187)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.91 (  0.91)	Loss_d 1.187 (1.187)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.32 (  0.32)
Test: [  1/  1]	Loss 1.187 (1.187)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.91 (  0.91)	Loss_d 1.187 (1.187)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.32 (  0.32)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/54/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0359 (0.0419)	validation_time 0.0004 (0.0013)	train_time 0.0355 (0.0403)
record: (train_acc, test_acc) (0.856200024664402, 0.5390000343322754)
last accs (train_acc, test_acc) (0.856200024664402, 0.5390000343322754)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.93it/s] 23%|##3       | 6/26 [00:00<00:00, 23.34it/s] 38%|###8      | 10/26 [00:00<00:00, 28.49it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.62it/s] 69%|######9   | 18/26 [00:00<00:00, 32.79it/s] 85%|########4 | 22/26 [00:00<00:00, 33.51it/s]100%|##########| 26/26 [00:00<00:00, 33.86it/s]100%|##########| 26/26 [00:00<00:00, 28.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.692 (0.776)	train_nll   0.33 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.36 (  0.43)	train_acc   0.86 (  0.85)	train_minacc   0.28 (  0.21)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 9.1207 (8.4733)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.00it/s] 23%|##3       | 6/26 [00:00<00:00, 30.98it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.98it/s] 46%|####6     | 12/26 [00:00<00:00, 39.88it/s] 69%|######9   | 18/26 [00:00<00:00, 46.65it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.65it/s] 92%|#########2| 24/26 [00:00<00:00, 46.85it/s]100%|##########| 26/26 [00:00<00:00, 39.55it/s]
Test: [   0/  26]	Loss 0.357 (0.357)	test_acc   0.84 (  0.84)	test_minacc   0.33 (  0.33)	test_majacc   0.90 (  0.90)	Loss_d 0.357 (0.357)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.317 (0.349)	test_acc   0.86 (  0.84)	test_minacc   0.52 (  0.45)	test_majacc   0.92 (  0.91)	Loss_d 0.317 (0.349)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.52 (  0.45)	test_majacc_d   0.92 (  0.91)	test_corr_d   0.82 (  0.83)
Test: [  20/  26]	Loss 0.310 (0.347)	test_acc   0.86 (  0.84)	test_minacc   0.48 (  0.45)	test_majacc   0.91 (  0.91)	Loss_d 0.310 (0.347)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.48 (  0.45)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.84 (  0.83)
Test: [  26/  26]	Loss 0.311 (0.345)	test_acc   0.86 (  0.84)	test_minacc   0.44 (  0.46)	test_majacc   0.95 (  0.91)	Loss_d 0.311 (0.345)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.44 (  0.46)	test_majacc_d   0.95 (  0.91)	test_corr_d   0.81 (  0.82)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.01it/s]
Test: [  0/  1]	Loss 1.197 (1.197)	test_acc   0.47 (  0.47)	test_minacc   0.41 (  0.41)	test_majacc   0.93 (  0.93)	Loss_d 1.197 (1.197)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.42 (  0.42)
Test: [  1/  1]	Loss 1.197 (1.197)	test_acc   0.47 (  0.47)	test_minacc   0.41 (  0.41)	test_majacc   0.93 (  0.93)	Loss_d 1.197 (1.197)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.42 (  0.42)
Overall Timing[  7/  1]	epoch_time 0.0355 (0.0411)	validation_time 0.0003 (0.0012)	train_time 0.0352 (0.0397)
record: (train_acc, test_acc) (0.856200024664402, 0.5390000343322754)
last accs (train_acc, test_acc) (0.8433000224828721, 0.4660000205039978)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.08it/s] 19%|#9        | 5/26 [00:00<00:00, 23.33it/s] 35%|###4      | 9/26 [00:00<00:00, 29.07it/s] 50%|#####     | 13/26 [00:00<00:00, 31.73it/s] 65%|######5   | 17/26 [00:00<00:00, 32.92it/s] 81%|########  | 21/26 [00:00<00:00, 33.75it/s] 96%|#########6| 25/26 [00:00<00:00, 33.96it/s]100%|##########| 26/26 [00:00<00:00, 28.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.611 (0.649)	train_nll   0.36 (  0.35)	train_penalty   0.03 (  0.03)	weight_norm   0.25 (  0.30)	train_acc   0.84 (  0.85)	train_minacc   0.16 (  0.21)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 10.8549 (10.1319)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.50it/s] 31%|###       | 8/26 [00:00<00:00, 39.69it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.69it/s] 50%|#####     | 13/26 [00:00<00:00, 39.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.98it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.98it/s] 96%|#########6| 25/26 [00:00<00:00, 46.44it/s]100%|##########| 26/26 [00:00<00:00, 39.50it/s]
Test: [   0/  26]	Loss 0.349 (0.349)	test_acc   0.84 (  0.84)	test_minacc   0.20 (  0.20)	test_majacc   0.92 (  0.92)	Loss_d 0.349 (0.349)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.314 (0.339)	test_acc   0.88 (  0.85)	test_minacc   0.47 (  0.33)	test_majacc   0.96 (  0.94)	Loss_d 0.314 (0.339)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.47 (  0.33)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.87 (  0.87)
Test: [  20/  26]	Loss 0.322 (0.340)	test_acc   0.87 (  0.85)	test_minacc   0.38 (  0.35)	test_majacc   0.94 (  0.94)	Loss_d 0.322 (0.340)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.38 (  0.35)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.87 (  0.87)
Test: [  26/  26]	Loss 0.318 (0.337)	test_acc   0.86 (  0.85)	test_minacc   0.42 (  0.36)	test_majacc   0.95 (  0.94)	Loss_d 0.318 (0.337)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.42 (  0.36)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.85 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.66it/s]
Test: [  0/  1]	Loss 1.300 (1.300)	test_acc   0.42 (  0.42)	test_minacc   0.36 (  0.36)	test_majacc   0.94 (  0.94)	Loss_d 1.300 (1.300)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.52 (  0.52)
Test: [  1/  1]	Loss 1.300 (1.300)	test_acc   0.42 (  0.42)	test_minacc   0.36 (  0.36)	test_majacc   0.94 (  0.94)	Loss_d 1.300 (1.300)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.52 (  0.52)
Overall Timing[  8/  1]	epoch_time 0.0363 (0.0406)	validation_time 0.0004 (0.0011)	train_time 0.0359 (0.0393)
record: (train_acc, test_acc) (0.856200024664402, 0.5390000343322754)
last accs (train_acc, test_acc) (0.8535000275969505, 0.4150000214576721)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.84it/s] 19%|#9        | 5/26 [00:00<00:00, 22.76it/s] 35%|###4      | 9/26 [00:00<00:00, 27.51it/s] 50%|#####     | 13/26 [00:00<00:00, 30.01it/s] 65%|######5   | 17/26 [00:00<00:00, 31.53it/s] 81%|########  | 21/26 [00:00<00:00, 32.79it/s] 96%|#########6| 25/26 [00:00<00:00, 32.82it/s]100%|##########| 26/26 [00:00<00:00, 28.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.539 (0.557)	train_nll   0.34 (  0.34)	train_penalty   0.03 (  0.02)	weight_norm   0.19 (  0.22)	train_acc   0.84 (  0.85)	train_minacc   0.16 (  0.24)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 13.0541 (12.0334)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.57it/s] 23%|##3       | 6/26 [00:00<00:00, 27.54it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.54it/s] 46%|####6     | 12/26 [00:00<00:00, 39.75it/s] 65%|######5   | 17/26 [00:00<00:00, 41.70it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.70it/s] 88%|########8 | 23/26 [00:00<00:00, 47.39it/s]100%|##########| 26/26 [00:00<00:00, 37.24it/s]
Test: [   0/  26]	Loss 0.339 (0.339)	test_acc   0.87 (  0.87)	test_minacc   0.18 (  0.18)	test_majacc   0.96 (  0.96)	Loss_d 0.339 (0.339)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.317 (0.336)	test_acc   0.87 (  0.86)	test_minacc   0.26 (  0.23)	test_majacc   0.98 (  0.96)	Loss_d 0.317 (0.336)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.26 (  0.23)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  20/  26]	Loss 0.302 (0.335)	test_acc   0.89 (  0.85)	test_minacc   0.31 (  0.24)	test_majacc   0.98 (  0.96)	Loss_d 0.302 (0.335)	test_acc_d   0.89 (  0.85)	test_minacc_d   0.31 (  0.24)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.90 (  0.89)
Test: [  26/  26]	Loss 0.304 (0.332)	test_acc   0.86 (  0.86)	test_minacc   0.30 (  0.24)	test_majacc   0.98 (  0.96)	Loss_d 0.304 (0.332)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.30 (  0.24)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.87 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.06it/s]
Test: [  0/  1]	Loss 1.331 (1.331)	test_acc   0.29 (  0.29)	test_minacc   0.22 (  0.22)	test_majacc   0.98 (  0.98)	Loss_d 1.331 (1.331)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.66 (  0.66)
Test: [  1/  1]	Loss 1.331 (1.331)	test_acc   0.29 (  0.29)	test_minacc   0.22 (  0.22)	test_majacc   0.98 (  0.98)	Loss_d 1.331 (1.331)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.66 (  0.66)
Overall Timing[  9/  1]	epoch_time 0.0357 (0.0401)	validation_time 0.0003 (0.0010)	train_time 0.0354 (0.0389)
record: (train_acc, test_acc) (0.856200024664402, 0.5390000343322754)
last accs (train_acc, test_acc) (0.8556000261902809, 0.2930000126361847)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.32it/s] 19%|#9        | 5/26 [00:00<00:01, 20.02it/s] 35%|###4      | 9/26 [00:00<00:00, 26.00it/s] 50%|#####     | 13/26 [00:00<00:00, 29.11it/s] 65%|######5   | 17/26 [00:00<00:00, 30.90it/s] 81%|########  | 21/26 [00:00<00:00, 32.22it/s] 96%|#########6| 25/26 [00:00<00:00, 32.99it/s]100%|##########| 26/26 [00:00<00:00, 27.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.501 (0.508)	train_nll   0.35 (  0.34)	train_penalty   0.03 (  0.02)	weight_norm   0.15 (  0.17)	train_acc   0.86 (  0.85)	train_minacc   0.28 (  0.24)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 14.9255 (13.9659)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.46it/s] 23%|##3       | 6/26 [00:00<00:00, 32.65it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.65it/s] 46%|####6     | 12/26 [00:00<00:00, 43.75it/s] 65%|######5   | 17/26 [00:00<00:00, 43.80it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.80it/s] 88%|########8 | 23/26 [00:00<00:00, 48.95it/s]100%|##########| 26/26 [00:00<00:00, 39.79it/s]
Test: [   0/  26]	Loss 0.330 (0.330)	test_acc   0.86 (  0.86)	test_minacc   0.27 (  0.27)	test_majacc   0.94 (  0.94)	Loss_d 0.330 (0.330)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.289 (0.319)	test_acc   0.88 (  0.86)	test_minacc   0.45 (  0.36)	test_majacc   0.97 (  0.95)	Loss_d 0.289 (0.319)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.45 (  0.36)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.88 (  0.88)
Test: [  20/  26]	Loss 0.293 (0.319)	test_acc   0.89 (  0.86)	test_minacc   0.46 (  0.38)	test_majacc   0.96 (  0.95)	Loss_d 0.293 (0.319)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.46 (  0.38)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.88 (  0.87)
Test: [  26/  26]	Loss 0.289 (0.315)	test_acc   0.88 (  0.86)	test_minacc   0.47 (  0.39)	test_majacc   0.96 (  0.95)	Loss_d 0.289 (0.315)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.47 (  0.39)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.84 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.42it/s]
Test: [  0/  1]	Loss 1.251 (1.251)	test_acc   0.46 (  0.46)	test_minacc   0.40 (  0.40)	test_majacc   0.94 (  0.94)	Loss_d 1.251 (1.251)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.47 (  0.47)
Test: [  1/  1]	Loss 1.251 (1.251)	test_acc   0.46 (  0.46)	test_minacc   0.40 (  0.40)	test_majacc   0.94 (  0.94)	Loss_d 1.251 (1.251)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.47 (  0.47)
Overall Timing[ 10/  1]	epoch_time 0.0360 (0.0397)	validation_time 0.0004 (0.0009)	train_time 0.0356 (0.0386)
record: (train_acc, test_acc) (0.856200024664402, 0.5390000343322754)
last accs (train_acc, test_acc) (0.8648000264763832, 0.4580000340938568)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.09it/s] 23%|##3       | 6/26 [00:00<00:00, 27.81it/s] 38%|###8      | 10/26 [00:00<00:00, 30.95it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.15it/s] 69%|######9   | 18/26 [00:00<00:00, 33.08it/s] 85%|########4 | 22/26 [00:00<00:00, 33.73it/s]100%|##########| 26/26 [00:00<00:00, 33.95it/s]100%|##########| 26/26 [00:00<00:00, 29.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.459 (0.469)	train_nll   0.33 (  0.33)	train_penalty   0.03 (  0.02)	weight_norm   0.13 (  0.14)	train_acc   0.87 (  0.86)	train_minacc   0.28 (  0.29)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 16.5447 (15.8387)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.89it/s] 23%|##3       | 6/26 [00:00<00:00, 28.98it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.98it/s] 46%|####6     | 12/26 [00:00<00:00, 37.97it/s] 69%|######9   | 18/26 [00:00<00:00, 45.52it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.52it/s] 92%|#########2| 24/26 [00:00<00:00, 46.00it/s]100%|##########| 26/26 [00:00<00:00, 38.41it/s]
Test: [   0/  26]	Loss 0.344 (0.344)	test_acc   0.85 (  0.85)	test_minacc   0.22 (  0.22)	test_majacc   0.93 (  0.93)	Loss_d 0.344 (0.344)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.283 (0.322)	test_acc   0.89 (  0.86)	test_minacc   0.47 (  0.35)	test_majacc   0.97 (  0.95)	Loss_d 0.283 (0.322)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.47 (  0.35)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.87 (  0.87)
Test: [  20/  26]	Loss 0.306 (0.322)	test_acc   0.88 (  0.86)	test_minacc   0.42 (  0.38)	test_majacc   0.95 (  0.95)	Loss_d 0.306 (0.322)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.42 (  0.38)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.88 (  0.87)
Test: [  26/  26]	Loss 0.280 (0.318)	test_acc   0.88 (  0.86)	test_minacc   0.40 (  0.38)	test_majacc   0.98 (  0.95)	Loss_d 0.280 (0.318)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.40 (  0.38)	test_majacc_d   0.98 (  0.95)	test_corr_d   0.85 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.18it/s]
Test: [  0/  1]	Loss 1.268 (1.268)	test_acc   0.42 (  0.42)	test_minacc   0.36 (  0.36)	test_majacc   0.95 (  0.95)	Loss_d 1.268 (1.268)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.53 (  0.53)
Test: [  1/  1]	Loss 1.268 (1.268)	test_acc   0.42 (  0.42)	test_minacc   0.36 (  0.36)	test_majacc   0.95 (  0.95)	Loss_d 1.268 (1.268)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.53 (  0.53)
Overall Timing[ 11/  1]	epoch_time 0.0359 (0.0394)	validation_time 0.0004 (0.0009)	train_time 0.0355 (0.0383)
record: (train_acc, test_acc) (0.856200024664402, 0.5390000343322754)
last accs (train_acc, test_acc) (0.8639000207185745, 0.42100003361701965)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.29it/s] 19%|#9        | 5/26 [00:00<00:01, 20.14it/s] 35%|###4      | 9/26 [00:00<00:00, 25.50it/s] 50%|#####     | 13/26 [00:00<00:00, 29.12it/s] 65%|######5   | 17/26 [00:00<00:00, 31.30it/s] 81%|########  | 21/26 [00:00<00:00, 32.44it/s] 96%|#########6| 25/26 [00:00<00:00, 32.97it/s]100%|##########| 26/26 [00:00<00:00, 27.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.444 (0.452)	train_nll   0.33 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.11 (  0.12)	train_acc   0.86 (  0.86)	train_minacc   0.42 (  0.29)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 17.7993 (17.2621)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.82it/s] 27%|##6       | 7/26 [00:00<00:00, 33.03it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.03it/s] 50%|#####     | 13/26 [00:00<00:00, 40.32it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.79it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.79it/s] 96%|#########6| 25/26 [00:00<00:00, 47.37it/s]100%|##########| 26/26 [00:00<00:00, 38.26it/s]
Test: [   0/  26]	Loss 0.357 (0.357)	test_acc   0.84 (  0.84)	test_minacc   0.31 (  0.31)	test_majacc   0.90 (  0.90)	Loss_d 0.357 (0.357)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.85 (  0.85)
Test: [  10/  26]	Loss 0.308 (0.329)	test_acc   0.87 (  0.85)	test_minacc   0.52 (  0.46)	test_majacc   0.94 (  0.92)	Loss_d 0.308 (0.329)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.52 (  0.46)	test_majacc_d   0.94 (  0.92)	test_corr_d   0.84 (  0.84)
Test: [  20/  26]	Loss 0.310 (0.328)	test_acc   0.87 (  0.85)	test_minacc   0.52 (  0.47)	test_majacc   0.92 (  0.92)	Loss_d 0.310 (0.328)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.83 (  0.83)
Test: [  26/  26]	Loss 0.283 (0.324)	test_acc   0.87 (  0.86)	test_minacc   0.49 (  0.48)	test_majacc   0.95 (  0.92)	Loss_d 0.283 (0.324)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.49 (  0.48)	test_majacc_d   0.95 (  0.92)	test_corr_d   0.81 (  0.83)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.16it/s]
Test: [  0/  1]	Loss 1.135 (1.135)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.94 (  0.94)	Loss_d 1.135 (1.135)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.36 (  0.36)
Test: [  1/  1]	Loss 1.135 (1.135)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.94 (  0.94)	Loss_d 1.135 (1.135)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.36 (  0.36)
Overall Timing[ 12/  1]	epoch_time 0.0368 (0.0392)	validation_time 0.0003 (0.0008)	train_time 0.0365 (0.0382)
record: (train_acc, test_acc) (0.856200024664402, 0.5390000343322754)
last accs (train_acc, test_acc) (0.8567000207304954, 0.5100000500679016)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.57it/s] 19%|#9        | 5/26 [00:00<00:01, 20.10it/s] 35%|###4      | 9/26 [00:00<00:00, 25.77it/s] 50%|#####     | 13/26 [00:00<00:00, 28.33it/s] 65%|######5   | 17/26 [00:00<00:00, 30.52it/s] 81%|########  | 21/26 [00:00<00:00, 31.97it/s] 96%|#########6| 25/26 [00:00<00:00, 32.48it/s]100%|##########| 26/26 [00:00<00:00, 27.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.424 (0.445)	train_nll   0.32 (  0.33)	train_penalty   0.03 (  0.02)	weight_norm   0.11 (  0.12)	train_acc   0.87 (  0.86)	train_minacc   0.28 (  0.29)	train_majacc   1.00 (  0.96)	train_corr   0.00 (  0.00)	l1 19.1060 (18.4641)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.49it/s] 27%|##6       | 7/26 [00:00<00:00, 32.74it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.74it/s] 50%|#####     | 13/26 [00:00<00:00, 39.39it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.83it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.83it/s] 96%|#########6| 25/26 [00:00<00:00, 46.33it/s]100%|##########| 26/26 [00:00<00:00, 38.13it/s]
Test: [   0/  26]	Loss 0.335 (0.335)	test_acc   0.85 (  0.85)	test_minacc   0.38 (  0.38)	test_majacc   0.91 (  0.91)	Loss_d 0.335 (0.335)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.85 (  0.85)
Test: [  10/  26]	Loss 0.283 (0.313)	test_acc   0.89 (  0.86)	test_minacc   0.56 (  0.48)	test_majacc   0.95 (  0.93)	Loss_d 0.283 (0.313)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.56 (  0.48)	test_majacc_d   0.95 (  0.93)	test_corr_d   0.83 (  0.83)
Test: [  20/  26]	Loss 0.297 (0.313)	test_acc   0.88 (  0.86)	test_minacc   0.58 (  0.50)	test_majacc   0.92 (  0.93)	Loss_d 0.297 (0.313)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.92 (  0.93)	test_corr_d   0.83 (  0.83)
Test: [  26/  26]	Loss 0.266 (0.309)	test_acc   0.88 (  0.87)	test_minacc   0.53 (  0.51)	test_majacc   0.96 (  0.93)	Loss_d 0.266 (0.309)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.53 (  0.51)	test_majacc_d   0.96 (  0.93)	test_corr_d   0.81 (  0.83)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.72it/s]
Test: [  0/  1]	Loss 1.156 (1.156)	test_acc   0.50 (  0.50)	test_minacc   0.45 (  0.45)	test_majacc   0.93 (  0.93)	Loss_d 1.156 (1.156)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.38 (  0.38)
Test: [  1/  1]	Loss 1.156 (1.156)	test_acc   0.50 (  0.50)	test_minacc   0.45 (  0.45)	test_majacc   0.93 (  0.93)	Loss_d 1.156 (1.156)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.38 (  0.38)
Overall Timing[ 13/  1]	epoch_time 0.0368 (0.0390)	validation_time 0.0004 (0.0008)	train_time 0.0364 (0.0381)
record: (train_acc, test_acc) (0.856200024664402, 0.5390000343322754)
last accs (train_acc, test_acc) (0.8659000210165978, 0.49500003457069397)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.14it/s] 19%|#9        | 5/26 [00:00<00:00, 21.29it/s] 35%|###4      | 9/26 [00:00<00:00, 26.63it/s] 50%|#####     | 13/26 [00:00<00:00, 29.96it/s] 65%|######5   | 17/26 [00:00<00:00, 31.70it/s] 81%|########  | 21/26 [00:00<00:00, 32.86it/s] 96%|#########6| 25/26 [00:00<00:00, 33.47it/s]100%|##########| 26/26 [00:00<00:00, 27.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.401 (0.420)	train_nll   0.30 (  0.32)	train_penalty   0.02 (  0.02)	weight_norm   0.10 (  0.10)	train_acc   0.87 (  0.86)	train_minacc   0.30 (  0.35)	train_majacc   0.99 (  0.95)	train_corr   0.00 (  0.00)	l1 20.2098 (19.7249)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.55it/s] 23%|##3       | 6/26 [00:00<00:00, 22.31it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.31it/s] 46%|####6     | 12/26 [00:00<00:00, 34.43it/s] 69%|######9   | 18/26 [00:00<00:00, 40.17it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.17it/s] 92%|#########2| 24/26 [00:00<00:00, 44.35it/s]100%|##########| 26/26 [00:00<00:00, 34.51it/s]
Test: [   0/  26]	Loss 0.312 (0.312)	test_acc   0.87 (  0.87)	test_minacc   0.33 (  0.33)	test_majacc   0.94 (  0.94)	Loss_d 0.312 (0.312)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.279 (0.302)	test_acc   0.89 (  0.87)	test_minacc   0.45 (  0.40)	test_majacc   0.98 (  0.96)	Loss_d 0.279 (0.302)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.45 (  0.40)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  20/  26]	Loss 0.270 (0.299)	test_acc   0.89 (  0.87)	test_minacc   0.40 (  0.41)	test_majacc   0.96 (  0.96)	Loss_d 0.270 (0.299)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.40 (  0.41)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.88)
Test: [  26/  26]	Loss 0.258 (0.295)	test_acc   0.89 (  0.88)	test_minacc   0.44 (  0.42)	test_majacc   0.98 (  0.96)	Loss_d 0.258 (0.295)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.44 (  0.42)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.85 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.49it/s]
Test: [  0/  1]	Loss 1.282 (1.282)	test_acc   0.38 (  0.38)	test_minacc   0.31 (  0.31)	test_majacc   0.96 (  0.96)	Loss_d 1.282 (1.282)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.56 (  0.56)
Test: [  1/  1]	Loss 1.282 (1.282)	test_acc   0.38 (  0.38)	test_minacc   0.31 (  0.31)	test_majacc   0.96 (  0.96)	Loss_d 1.282 (1.282)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.56 (  0.56)
Overall Timing[ 14/  1]	epoch_time 0.0351 (0.0388)	validation_time 0.0004 (0.0008)	train_time 0.0347 (0.0378)
record: (train_acc, test_acc) (0.856200024664402, 0.5390000343322754)
last accs (train_acc, test_acc) (0.8755000241398812, 0.37700000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.61it/s] 23%|##3       | 6/26 [00:00<00:00, 27.62it/s] 38%|###8      | 10/26 [00:00<00:00, 30.94it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.68it/s] 69%|######9   | 18/26 [00:00<00:00, 32.32it/s] 85%|########4 | 22/26 [00:00<00:00, 32.37it/s]100%|##########| 26/26 [00:00<00:00, 33.46it/s]100%|##########| 26/26 [00:00<00:00, 29.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.004 (0.167)	train_nll   0.53 (  0.42)	train_penalty   0.00 (  0.01)	weight_norm   0.13 (  0.10)	train_acc   0.72 (  0.81)	train_minacc   0.74 (  0.51)	train_majacc   0.72 (  0.86)	train_corr   0.00 (  0.00)	l1 20.3407 (20.5233)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.84it/s] 23%|##3       | 6/26 [00:00<00:00, 28.41it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.41it/s] 46%|####6     | 12/26 [00:00<00:00, 40.65it/s] 65%|######5   | 17/26 [00:00<00:00, 42.88it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.88it/s] 85%|########4 | 22/26 [00:00<00:00, 44.35it/s]100%|##########| 26/26 [00:00<00:00, 38.53it/s]
Test: [   0/  26]	Loss 0.613 (0.613)	test_acc   0.67 (  0.67)	test_minacc   0.56 (  0.56)	test_majacc   0.69 (  0.69)	Loss_d 0.613 (0.613)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.545 (0.554)	test_acc   0.73 (  0.73)	test_minacc   0.79 (  0.75)	test_majacc   0.72 (  0.73)	Loss_d 0.545 (0.554)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.79 (  0.75)	test_majacc_d   0.72 (  0.73)	test_corr_d   0.35 (  0.39)
Test: [  20/  26]	Loss 0.593 (0.566)	test_acc   0.68 (  0.72)	test_minacc   0.65 (  0.73)	test_majacc   0.68 (  0.72)	Loss_d 0.593 (0.566)	test_acc_d   0.68 (  0.72)	test_minacc_d   0.65 (  0.73)	test_majacc_d   0.68 (  0.72)	test_corr_d   0.35 (  0.37)
Test: [  26/  26]	Loss 0.535 (0.567)	test_acc   0.72 (  0.72)	test_minacc   0.74 (  0.73)	test_majacc   0.72 (  0.72)	Loss_d 0.535 (0.567)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.74 (  0.73)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.37 (  0.37)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.74it/s]
Test: [  0/  1]	Loss 0.595 (0.595)	test_acc   0.71 (  0.71)	test_minacc   0.70 (  0.70)	test_majacc   0.76 (  0.76)	Loss_d 0.595 (0.595)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.76 (  0.76)	test_corr_d  -0.33 ( -0.33)
Test: [  1/  1]	Loss 0.595 (0.595)	test_acc   0.71 (  0.71)	test_minacc   0.70 (  0.70)	test_majacc   0.76 (  0.76)	Loss_d 0.595 (0.595)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.76 (  0.76)	test_corr_d  -0.33 ( -0.33)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/54/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0366 (0.0386)	validation_time 0.0003 (0.0008)	train_time 0.0363 (0.0377)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.34it/s] 19%|#9        | 5/26 [00:00<00:00, 21.18it/s] 35%|###4      | 9/26 [00:00<00:00, 26.64it/s] 50%|#####     | 13/26 [00:00<00:00, 29.80it/s] 65%|######5   | 17/26 [00:00<00:00, 31.47it/s] 81%|########  | 21/26 [00:00<00:00, 32.68it/s] 96%|#########6| 25/26 [00:00<00:00, 33.24it/s]100%|##########| 26/26 [00:00<00:00, 27.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.001 (0.001)	train_nll   0.60 (  0.60)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.15)	train_acc   0.64 (  0.68)	train_minacc   0.65 (  0.70)	train_majacc   0.64 (  0.68)	train_corr   0.00 (  0.00)	l1 20.0297 (20.1438)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.30it/s] 23%|##3       | 6/26 [00:00<00:00, 29.10it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.10it/s] 42%|####2     | 11/26 [00:00<00:00, 36.67it/s] 65%|######5   | 17/26 [00:00<00:00, 41.31it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.31it/s] 88%|########8 | 23/26 [00:00<00:00, 46.17it/s]100%|##########| 26/26 [00:00<00:00, 37.19it/s]
Test: [   0/  26]	Loss 0.652 (0.652)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.63 (  0.63)	Loss_d 0.652 (0.652)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.26 (  0.26)
Test: [  10/  26]	Loss 0.606 (0.618)	test_acc   0.68 (  0.68)	test_minacc   0.77 (  0.72)	test_majacc   0.66 (  0.67)	Loss_d 0.606 (0.618)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.77 (  0.72)	test_majacc_d   0.66 (  0.67)	test_corr_d   0.23 (  0.26)
Test: [  20/  26]	Loss 0.644 (0.626)	test_acc   0.61 (  0.66)	test_minacc   0.63 (  0.70)	test_majacc   0.61 (  0.65)	Loss_d 0.644 (0.626)	test_acc_d   0.61 (  0.66)	test_minacc_d   0.63 (  0.70)	test_majacc_d   0.61 (  0.65)	test_corr_d   0.22 (  0.25)
Test: [  26/  26]	Loss 0.607 (0.627)	test_acc   0.65 (  0.66)	test_minacc   0.67 (  0.70)	test_majacc   0.64 (  0.65)	Loss_d 0.607 (0.627)	test_acc_d   0.65 (  0.66)	test_minacc_d   0.67 (  0.70)	test_majacc_d   0.64 (  0.65)	test_corr_d   0.23 (  0.24)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.93it/s]
Test: [  0/  1]	Loss 0.603 (0.603)	test_acc   0.68 (  0.68)	test_minacc   0.68 (  0.68)	test_majacc   0.68 (  0.68)	Loss_d 0.603 (0.603)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.35 ( -0.35)
Test: [  1/  1]	Loss 0.603 (0.603)	test_acc   0.68 (  0.68)	test_minacc   0.68 (  0.68)	test_majacc   0.68 (  0.68)	Loss_d 0.603 (0.603)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.35 ( -0.35)
Overall Timing[ 16/  1]	epoch_time 0.0384 (0.0386)	validation_time 0.0004 (0.0007)	train_time 0.0380 (0.0378)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.658100014090538, 0.6780000329017639)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.87it/s] 19%|#9        | 5/26 [00:00<00:01, 19.90it/s] 35%|###4      | 9/26 [00:00<00:00, 25.99it/s] 50%|#####     | 13/26 [00:00<00:00, 29.16it/s] 65%|######5   | 17/26 [00:00<00:00, 31.21it/s] 81%|########  | 21/26 [00:00<00:00, 32.36it/s] 96%|#########6| 25/26 [00:00<00:00, 33.25it/s]100%|##########| 26/26 [00:00<00:00, 27.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.002 (0.001)	train_nll   0.62 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.65 (  0.65)	train_minacc   0.65 (  0.68)	train_majacc   0.65 (  0.64)	train_corr   0.00 (  0.00)	l1 19.9120 (19.9822)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.67it/s] 27%|##6       | 7/26 [00:00<00:00, 33.27it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.27it/s] 50%|#####     | 13/26 [00:00<00:00, 39.46it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.62it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.62it/s] 96%|#########6| 25/26 [00:00<00:00, 46.01it/s]100%|##########| 26/26 [00:00<00:00, 36.87it/s]
Test: [   0/  26]	Loss 0.648 (0.648)	test_acc   0.64 (  0.64)	test_minacc   0.60 (  0.60)	test_majacc   0.64 (  0.64)	Loss_d 0.648 (0.648)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.26 (  0.26)
Test: [  10/  26]	Loss 0.625 (0.634)	test_acc   0.69 (  0.67)	test_minacc   0.81 (  0.71)	test_majacc   0.67 (  0.66)	Loss_d 0.625 (0.634)	test_acc_d   0.69 (  0.67)	test_minacc_d   0.81 (  0.71)	test_majacc_d   0.67 (  0.66)	test_corr_d   0.22 (  0.25)
Test: [  20/  26]	Loss 0.647 (0.638)	test_acc   0.61 (  0.65)	test_minacc   0.63 (  0.69)	test_majacc   0.61 (  0.65)	Loss_d 0.647 (0.638)	test_acc_d   0.61 (  0.65)	test_minacc_d   0.63 (  0.69)	test_majacc_d   0.61 (  0.65)	test_corr_d   0.22 (  0.24)
Test: [  26/  26]	Loss 0.620 (0.639)	test_acc   0.64 (  0.65)	test_minacc   0.65 (  0.69)	test_majacc   0.64 (  0.64)	Loss_d 0.620 (0.639)	test_acc_d   0.64 (  0.65)	test_minacc_d   0.65 (  0.69)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.24 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.95it/s]
Test: [  0/  1]	Loss 0.623 (0.623)	test_acc   0.68 (  0.68)	test_minacc   0.68 (  0.68)	test_majacc   0.64 (  0.64)	Loss_d 0.623 (0.623)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.33 ( -0.33)
Test: [  1/  1]	Loss 0.623 (0.623)	test_acc   0.68 (  0.68)	test_minacc   0.68 (  0.68)	test_majacc   0.64 (  0.64)	Loss_d 0.623 (0.623)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.33 ( -0.33)
Overall Timing[ 17/  1]	epoch_time 0.0370 (0.0385)	validation_time 0.0004 (0.0007)	train_time 0.0366 (0.0377)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.6501000249385833, 0.6800000071525574)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.32it/s] 19%|#9        | 5/26 [00:00<00:00, 23.11it/s] 35%|###4      | 9/26 [00:00<00:00, 27.92it/s] 50%|#####     | 13/26 [00:00<00:00, 30.68it/s] 65%|######5   | 17/26 [00:00<00:00, 32.47it/s] 81%|########  | 21/26 [00:00<00:00, 33.58it/s] 96%|#########6| 25/26 [00:00<00:00, 34.25it/s]100%|##########| 26/26 [00:00<00:00, 28.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.001 (0.001)	train_nll   0.64 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.62 (  0.60)	train_minacc   0.65 (  0.66)	train_majacc   0.61 (  0.59)	train_corr   0.00 (  0.00)	l1 19.8428 (19.8897)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.92it/s] 27%|##6       | 7/26 [00:00<00:00, 38.61it/s]                                               27%|##6       | 7/26 [00:00<00:00, 38.61it/s] 50%|#####     | 13/26 [00:00<00:00, 43.14it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.07it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.07it/s] 96%|#########6| 25/26 [00:00<00:00, 48.76it/s]100%|##########| 26/26 [00:00<00:00, 40.76it/s]
Test: [   0/  26]	Loss 0.660 (0.660)	test_acc   0.61 (  0.61)	test_minacc   0.62 (  0.62)	test_majacc   0.61 (  0.61)	Loss_d 0.660 (0.660)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.644 (0.651)	test_acc   0.67 (  0.64)	test_minacc   0.74 (  0.69)	test_majacc   0.66 (  0.64)	Loss_d 0.644 (0.651)	test_acc_d   0.67 (  0.64)	test_minacc_d   0.74 (  0.69)	test_majacc_d   0.66 (  0.64)	test_corr_d   0.17 (  0.20)
Test: [  20/  26]	Loss 0.658 (0.654)	test_acc   0.61 (  0.63)	test_minacc   0.62 (  0.68)	test_majacc   0.61 (  0.63)	Loss_d 0.658 (0.654)	test_acc_d   0.61 (  0.63)	test_minacc_d   0.62 (  0.68)	test_majacc_d   0.61 (  0.63)	test_corr_d   0.18 (  0.19)
Test: [  26/  26]	Loss 0.641 (0.654)	test_acc   0.62 (  0.63)	test_minacc   0.67 (  0.68)	test_majacc   0.60 (  0.62)	Loss_d 0.641 (0.654)	test_acc_d   0.62 (  0.63)	test_minacc_d   0.67 (  0.68)	test_majacc_d   0.60 (  0.62)	test_corr_d   0.19 (  0.18)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.55it/s]
Test: [  0/  1]	Loss 0.634 (0.634)	test_acc   0.69 (  0.69)	test_minacc   0.69 (  0.69)	test_majacc   0.65 (  0.65)	Loss_d 0.634 (0.634)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.32 ( -0.32)
Test: [  1/  1]	Loss 0.634 (0.634)	test_acc   0.69 (  0.69)	test_minacc   0.69 (  0.69)	test_majacc   0.65 (  0.65)	Loss_d 0.634 (0.634)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.32 ( -0.32)
Overall Timing[ 18/  1]	epoch_time 0.0369 (0.0384)	validation_time 0.0003 (0.0007)	train_time 0.0366 (0.0376)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.6299000077843666, 0.6880000233650208)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.15it/s] 19%|#9        | 5/26 [00:00<00:00, 24.88it/s] 35%|###4      | 9/26 [00:00<00:00, 29.67it/s] 50%|#####     | 13/26 [00:00<00:00, 31.99it/s] 65%|######5   | 17/26 [00:00<00:00, 33.40it/s] 81%|########  | 21/26 [00:00<00:00, 34.03it/s] 96%|#########6| 25/26 [00:00<00:00, 34.54it/s]100%|##########| 26/26 [00:00<00:00, 29.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.58 (  0.55)	train_minacc   0.67 (  0.69)	train_majacc   0.56 (  0.53)	train_corr   0.00 (  0.00)	l1 19.8073 (19.8265)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.77it/s] 19%|#9        | 5/26 [00:00<00:00, 24.15it/s]                                               19%|#9        | 5/26 [00:00<00:00, 24.15it/s] 42%|####2     | 11/26 [00:00<00:00, 37.39it/s] 62%|######1   | 16/26 [00:00<00:00, 39.63it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.63it/s] 88%|########8 | 23/26 [00:00<00:00, 47.45it/s]100%|##########| 26/26 [00:00<00:00, 37.34it/s]
Test: [   0/  26]	Loss 0.684 (0.684)	test_acc   0.54 (  0.54)	test_minacc   0.64 (  0.64)	test_majacc   0.53 (  0.53)	Loss_d 0.684 (0.684)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.674 (0.679)	test_acc   0.59 (  0.57)	test_minacc   0.79 (  0.70)	test_majacc   0.55 (  0.54)	Loss_d 0.674 (0.679)	test_acc_d   0.59 (  0.57)	test_minacc_d   0.79 (  0.70)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.05 (  0.09)
Test: [  20/  26]	Loss 0.681 (0.680)	test_acc   0.56 (  0.56)	test_minacc   0.60 (  0.68)	test_majacc   0.56 (  0.54)	Loss_d 0.681 (0.680)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.60 (  0.68)	test_majacc_d   0.56 (  0.54)	test_corr_d   0.09 (  0.07)
Test: [  26/  26]	Loss 0.674 (0.680)	test_acc   0.58 (  0.56)	test_minacc   0.70 (  0.68)	test_majacc   0.56 (  0.53)	Loss_d 0.674 (0.680)	test_acc_d   0.58 (  0.56)	test_minacc_d   0.70 (  0.68)	test_majacc_d   0.56 (  0.53)	test_corr_d   0.06 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 33.82it/s]
Test: [  0/  1]	Loss 0.656 (0.656)	test_acc   0.68 (  0.68)	test_minacc   0.70 (  0.70)	test_majacc   0.50 (  0.50)	Loss_d 0.656 (0.656)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.32 ( -0.32)
Test: [  1/  1]	Loss 0.656 (0.656)	test_acc   0.68 (  0.68)	test_minacc   0.70 (  0.70)	test_majacc   0.50 (  0.50)	Loss_d 0.656 (0.656)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.32 ( -0.32)
Overall Timing[ 19/  1]	epoch_time 0.0358 (0.0383)	validation_time 0.0007 (0.0007)	train_time 0.0351 (0.0375)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.5564000108242035, 0.6800000071525574)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.26it/s] 19%|#9        | 5/26 [00:00<00:00, 24.12it/s] 35%|###4      | 9/26 [00:00<00:00, 28.16it/s] 50%|#####     | 13/26 [00:00<00:00, 30.16it/s] 65%|######5   | 17/26 [00:00<00:00, 31.87it/s] 81%|########  | 21/26 [00:00<00:00, 33.21it/s] 96%|#########6| 25/26 [00:00<00:00, 33.69it/s]100%|##########| 26/26 [00:00<00:00, 29.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.53 (  0.51)	train_minacc   0.67 (  0.68)	train_majacc   0.50 (  0.48)	train_corr   0.00 (  0.00)	l1 19.7893 (19.7959)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.67it/s] 23%|##3       | 6/26 [00:00<00:00, 29.72it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.72it/s] 42%|####2     | 11/26 [00:00<00:00, 38.37it/s] 65%|######5   | 17/26 [00:00<00:00, 41.77it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.77it/s] 88%|########8 | 23/26 [00:00<00:00, 47.00it/s]100%|##########| 26/26 [00:00<00:00, 37.81it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.46 (  0.46)	test_minacc   0.69 (  0.69)	test_majacc   0.43 (  0.43)	Loss_d 0.695 (0.695)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.47 (  0.46)	test_minacc   0.65 (  0.66)	test_majacc   0.44 (  0.42)	Loss_d 0.691 (0.692)	test_acc_d   0.47 (  0.46)	test_minacc_d   0.65 (  0.66)	test_majacc_d   0.44 (  0.42)	test_corr_d  -0.11 ( -0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.46)	test_minacc   0.67 (  0.66)	test_majacc   0.44 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.46)	test_minacc_d   0.67 (  0.66)	test_majacc_d   0.44 (  0.42)	test_corr_d  -0.05 ( -0.07)
Test: [  26/  26]	Loss 0.690 (0.693)	test_acc   0.53 (  0.46)	test_minacc   0.67 (  0.66)	test_majacc   0.50 (  0.42)	Loss_d 0.690 (0.693)	test_acc_d   0.53 (  0.46)	test_minacc_d   0.67 (  0.66)	test_majacc_d   0.50 (  0.42)	test_corr_d  -0.10 ( -0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.69it/s]
Test: [  0/  1]	Loss 0.673 (0.673)	test_acc   0.67 (  0.67)	test_minacc   0.70 (  0.70)	test_majacc   0.39 (  0.39)	Loss_d 0.673 (0.673)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.33 ( -0.33)
Test: [  1/  1]	Loss 0.673 (0.673)	test_acc   0.67 (  0.67)	test_minacc   0.70 (  0.70)	test_majacc   0.39 (  0.39)	Loss_d 0.673 (0.673)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.33 ( -0.33)
Overall Timing[ 20/  1]	epoch_time 0.0368 (0.0382)	validation_time 0.0003 (0.0007)	train_time 0.0365 (0.0375)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.4584000038206577, 0.6720000505447388)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.48it/s] 19%|#9        | 5/26 [00:00<00:01, 20.54it/s] 35%|###4      | 9/26 [00:00<00:00, 26.15it/s] 50%|#####     | 13/26 [00:00<00:00, 29.14it/s] 65%|######5   | 17/26 [00:00<00:00, 31.10it/s] 81%|########  | 21/26 [00:00<00:00, 32.39it/s] 96%|#########6| 25/26 [00:00<00:00, 32.66it/s]100%|##########| 26/26 [00:00<00:00, 27.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.52 (  0.46)	train_minacc   0.65 (  0.66)	train_majacc   0.49 (  0.42)	train_corr   0.00 (  0.00)	l1 19.7854 (19.7869)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.57it/s] 31%|###       | 8/26 [00:00<00:00, 39.60it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.60it/s] 50%|#####     | 13/26 [00:00<00:00, 41.65it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.51it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.51it/s] 96%|#########6| 25/26 [00:00<00:00, 46.66it/s]100%|##########| 26/26 [00:00<00:00, 39.85it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.43 (  0.43)	test_minacc   0.67 (  0.67)	test_majacc   0.39 (  0.39)	Loss_d 0.692 (0.692)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.690 (0.691)	test_acc   0.47 (  0.46)	test_minacc   0.68 (  0.66)	test_majacc   0.43 (  0.43)	Loss_d 0.690 (0.691)	test_acc_d   0.47 (  0.46)	test_minacc_d   0.68 (  0.66)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.06 ( -0.01)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.49 (  0.46)	test_minacc   0.67 (  0.66)	test_majacc   0.46 (  0.43)	Loss_d 0.691 (0.692)	test_acc_d   0.49 (  0.46)	test_minacc_d   0.67 (  0.66)	test_majacc_d   0.46 (  0.43)	test_corr_d  -0.00 ( -0.03)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.52 (  0.46)	test_minacc   0.65 (  0.66)	test_majacc   0.49 (  0.43)	Loss_d 0.690 (0.692)	test_acc_d   0.52 (  0.46)	test_minacc_d   0.65 (  0.66)	test_majacc_d   0.49 (  0.43)	test_corr_d  -0.07 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.69it/s]
Test: [  0/  1]	Loss 0.679 (0.679)	test_acc   0.67 (  0.67)	test_minacc   0.70 (  0.70)	test_majacc   0.39 (  0.39)	Loss_d 0.679 (0.679)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.28 ( -0.28)
Test: [  1/  1]	Loss 0.679 (0.679)	test_acc   0.67 (  0.67)	test_minacc   0.70 (  0.70)	test_majacc   0.39 (  0.39)	Loss_d 0.679 (0.679)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.28 ( -0.28)
Overall Timing[ 21/  1]	epoch_time 0.0370 (0.0382)	validation_time 0.0004 (0.0007)	train_time 0.0366 (0.0374)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.4643000043332577, 0.6710000038146973)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.53it/s] 19%|#9        | 5/26 [00:00<00:01, 18.62it/s] 35%|###4      | 9/26 [00:00<00:00, 24.85it/s] 50%|#####     | 13/26 [00:00<00:00, 28.60it/s] 65%|######5   | 17/26 [00:00<00:00, 30.81it/s] 81%|########  | 21/26 [00:00<00:00, 32.21it/s] 96%|#########6| 25/26 [00:00<00:00, 33.16it/s]100%|##########| 26/26 [00:00<00:00, 26.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.16 (  0.16)	train_acc   0.50 (  0.46)	train_minacc   0.63 (  0.65)	train_majacc   0.48 (  0.43)	train_corr   0.00 (  0.00)	l1 19.7843 (19.7848)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.37it/s] 23%|##3       | 6/26 [00:00<00:00, 30.65it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.65it/s] 42%|####2     | 11/26 [00:00<00:00, 38.76it/s] 62%|######1   | 16/26 [00:00<00:00, 42.67it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.67it/s] 81%|########  | 21/26 [00:00<00:00, 44.60it/s]100%|##########| 26/26 [00:00<00:00, 38.06it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.69 (  0.69)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.45 (  0.45)	test_minacc   0.58 (  0.61)	test_majacc   0.42 (  0.43)	Loss_d 0.692 (0.692)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.58 (  0.61)	test_majacc_d   0.42 (  0.43)	test_corr_d  -0.07 ( -0.02)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.47 (  0.46)	test_minacc   0.63 (  0.61)	test_majacc   0.45 (  0.43)	Loss_d 0.692 (0.692)	test_acc_d   0.47 (  0.46)	test_minacc_d   0.63 (  0.61)	test_majacc_d   0.45 (  0.43)	test_corr_d  -0.01 ( -0.03)
Test: [  26/  26]	Loss 0.691 (0.693)	test_acc   0.51 (  0.46)	test_minacc   0.63 (  0.61)	test_majacc   0.49 (  0.43)	Loss_d 0.691 (0.693)	test_acc_d   0.51 (  0.46)	test_minacc_d   0.63 (  0.61)	test_majacc_d   0.49 (  0.43)	test_corr_d  -0.08 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.04it/s]
Test: [  0/  1]	Loss 0.683 (0.683)	test_acc   0.67 (  0.67)	test_minacc   0.70 (  0.70)	test_majacc   0.39 (  0.39)	Loss_d 0.683 (0.683)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.26 ( -0.26)
Test: [  1/  1]	Loss 0.683 (0.683)	test_acc   0.67 (  0.67)	test_minacc   0.70 (  0.70)	test_majacc   0.39 (  0.39)	Loss_d 0.683 (0.683)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.26 ( -0.26)
Overall Timing[ 22/  1]	epoch_time 0.0377 (0.0382)	validation_time 0.0004 (0.0006)	train_time 0.0373 (0.0374)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.45780000314116476, 0.6690000295639038)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.26it/s] 15%|#5        | 4/26 [00:00<00:01, 16.40it/s] 31%|###       | 8/26 [00:00<00:00, 23.56it/s] 42%|####2     | 11/26 [00:00<00:00, 24.86it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.40it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.49it/s] 88%|########8 | 23/26 [00:00<00:00, 32.06it/s]100%|##########| 26/26 [00:01<00:00, 25.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 336 tensor(-0.0131, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
rho, theta 395 tensor(-0.0063, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
Epoch: [23][  26/  26]	Loss 0.000 (0.011)	train_nll   0.68 (  0.71)	train_penalty   0.00 (  0.01)	weight_norm   0.19 (  0.17)	train_acc   0.55 (  0.52)	train_minacc   0.49 (  0.56)	train_majacc   0.57 (  0.51)	train_corr   0.00 (  0.00)	l1 14.7528 (15.6780)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.06it/s] 31%|###       | 8/26 [00:00<00:00, 38.54it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.54it/s] 50%|#####     | 13/26 [00:00<00:00, 41.29it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.56it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.56it/s] 96%|#########6| 25/26 [00:00<00:00, 47.72it/s]100%|##########| 26/26 [00:00<00:00, 39.73it/s]
Test: [   0/  26]	Loss 0.713 (0.713)	test_acc   0.48 (  0.48)	test_minacc   0.42 (  0.42)	test_majacc   0.49 (  0.49)	Loss_d 0.713 (0.713)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.700 (0.705)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.48)	test_majacc   0.52 (  0.50)	Loss_d 0.700 (0.705)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.48)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.21 (  0.23)
Test: [  20/  26]	Loss 0.710 (0.705)	test_acc   0.48 (  0.50)	test_minacc   0.52 (  0.49)	test_majacc   0.48 (  0.50)	Loss_d 0.710 (0.705)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.19 (  0.22)
Test: [  26/  26]	Loss 0.683 (0.704)	test_acc   0.55 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.57 (  0.50)	Loss_d 0.683 (0.704)	test_acc_d   0.55 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.57 (  0.50)	test_corr_d   0.19 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.49it/s]
Test: [  0/  1]	Loss 0.701 (0.701)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.701 (0.701)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.35 ( -0.35)
Test: [  1/  1]	Loss 0.701 (0.701)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.701 (0.701)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.35 ( -0.35)
Overall Timing[ 23/  1]	epoch_time 0.0379 (0.0381)	validation_time 0.0003 (0.0006)	train_time 0.0375 (0.0374)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.5000000105202198, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.38it/s] 19%|#9        | 5/26 [00:00<00:01, 20.38it/s] 35%|###4      | 9/26 [00:00<00:00, 26.24it/s] 50%|#####     | 13/26 [00:00<00:00, 29.54it/s] 65%|######5   | 17/26 [00:00<00:00, 31.66it/s] 81%|########  | 21/26 [00:00<00:00, 32.87it/s] 96%|#########6| 25/26 [00:00<00:00, 33.37it/s]100%|##########| 26/26 [00:00<00:00, 27.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.58 (  0.51)	train_minacc   0.51 (  0.51)	train_majacc   0.60 (  0.51)	train_corr   0.00 (  0.00)	l1 13.8960 (14.2219)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.74it/s] 27%|##6       | 7/26 [00:00<00:00, 31.55it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.55it/s] 50%|#####     | 13/26 [00:00<00:00, 39.91it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.42it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.42it/s] 96%|#########6| 25/26 [00:00<00:00, 46.74it/s]100%|##########| 26/26 [00:00<00:00, 37.94it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.50 (  0.50)	test_minacc   0.44 (  0.44)	test_majacc   0.50 (  0.50)	Loss_d 0.689 (0.689)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.678 (0.682)	test_acc   0.54 (  0.53)	test_minacc   0.48 (  0.51)	test_majacc   0.55 (  0.53)	Loss_d 0.678 (0.682)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.48 (  0.51)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.23 (  0.26)
Test: [  20/  26]	Loss 0.686 (0.683)	test_acc   0.52 (  0.53)	test_minacc   0.56 (  0.52)	test_majacc   0.51 (  0.53)	Loss_d 0.686 (0.683)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.56 (  0.52)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.22 (  0.24)
Test: [  26/  26]	Loss 0.671 (0.682)	test_acc   0.58 (  0.53)	test_minacc   0.51 (  0.52)	test_majacc   0.60 (  0.53)	Loss_d 0.671 (0.682)	test_acc_d   0.58 (  0.53)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.60 (  0.53)	test_corr_d   0.27 (  0.24)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.06it/s]
Test: [  0/  1]	Loss 0.680 (0.680)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.56 (  0.56)	Loss_d 0.680 (0.680)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.680 (0.680)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.56 (  0.56)	Loss_d 0.680 (0.680)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.31 ( -0.31)
Overall Timing[ 24/  1]	epoch_time 0.0376 (0.0381)	validation_time 0.0004 (0.0006)	train_time 0.0372 (0.0374)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.5274000102281571, 0.534000039100647)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.44it/s] 19%|#9        | 5/26 [00:00<00:00, 21.56it/s] 35%|###4      | 9/26 [00:00<00:00, 26.30it/s] 50%|#####     | 13/26 [00:00<00:00, 29.21it/s] 65%|######5   | 17/26 [00:00<00:00, 30.94it/s] 81%|########  | 21/26 [00:00<00:00, 32.30it/s] 96%|#########6| 25/26 [00:00<00:00, 33.07it/s]100%|##########| 26/26 [00:00<00:00, 27.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.56 (  0.52)	train_minacc   0.49 (  0.52)	train_majacc   0.58 (  0.52)	train_corr   0.00 (  0.00)	l1 13.8176 (13.8365)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.49it/s] 31%|###       | 8/26 [00:00<00:00, 40.42it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.42it/s] 50%|#####     | 13/26 [00:00<00:00, 43.29it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.82it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.82it/s] 96%|#########6| 25/26 [00:00<00:00, 48.86it/s]100%|##########| 26/26 [00:00<00:00, 41.36it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.48 (  0.48)	test_minacc   0.44 (  0.44)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.682 (0.686)	test_acc   0.52 (  0.51)	test_minacc   0.47 (  0.49)	test_majacc   0.53 (  0.51)	Loss_d 0.682 (0.686)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.23 (  0.25)
Test: [  20/  26]	Loss 0.689 (0.686)	test_acc   0.50 (  0.51)	test_minacc   0.54 (  0.50)	test_majacc   0.49 (  0.51)	Loss_d 0.689 (0.686)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.54 (  0.50)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.21 (  0.24)
Test: [  26/  26]	Loss 0.675 (0.686)	test_acc   0.56 (  0.51)	test_minacc   0.49 (  0.51)	test_majacc   0.58 (  0.51)	Loss_d 0.675 (0.686)	test_acc_d   0.56 (  0.51)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.58 (  0.51)	test_corr_d   0.26 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.35it/s]
Test: [  0/  1]	Loss 0.683 (0.683)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.683 (0.683)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.32 ( -0.32)
Test: [  1/  1]	Loss 0.683 (0.683)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.683 (0.683)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.32 ( -0.32)
Overall Timing[ 25/  1]	epoch_time 0.0357 (0.0380)	validation_time 0.0004 (0.0006)	train_time 0.0353 (0.0373)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.5105000113546848, 0.5139999985694885)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.73it/s] 19%|#9        | 5/26 [00:00<00:00, 24.32it/s] 35%|###4      | 9/26 [00:00<00:00, 28.64it/s] 50%|#####     | 13/26 [00:00<00:00, 31.12it/s] 65%|######5   | 17/26 [00:00<00:00, 31.62it/s] 81%|########  | 21/26 [00:00<00:00, 32.84it/s] 96%|#########6| 25/26 [00:00<00:00, 33.12it/s]100%|##########| 26/26 [00:00<00:00, 28.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.55 (  0.51)	train_minacc   0.49 (  0.51)	train_majacc   0.57 (  0.51)	train_corr   0.00 (  0.00)	l1 13.7973 (13.8084)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.18it/s] 27%|##6       | 7/26 [00:00<00:00, 32.89it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.89it/s] 50%|#####     | 13/26 [00:00<00:00, 39.90it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.07it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.07it/s] 96%|#########6| 25/26 [00:00<00:00, 46.58it/s]100%|##########| 26/26 [00:00<00:00, 38.48it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.44 (  0.44)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.685 (0.688)	test_acc   0.52 (  0.50)	test_minacc   0.45 (  0.49)	test_majacc   0.53 (  0.50)	Loss_d 0.685 (0.688)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.23 (  0.25)
Test: [  20/  26]	Loss 0.691 (0.688)	test_acc   0.49 (  0.50)	test_minacc   0.54 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.691 (0.688)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.54 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.21 (  0.23)
Test: [  26/  26]	Loss 0.677 (0.688)	test_acc   0.55 (  0.50)	test_minacc   0.49 (  0.51)	test_majacc   0.57 (  0.50)	Loss_d 0.677 (0.688)	test_acc_d   0.55 (  0.50)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.57 (  0.50)	test_corr_d   0.25 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.20it/s]
Test: [  0/  1]	Loss 0.686 (0.686)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.686 (0.686)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.32 ( -0.32)
Test: [  1/  1]	Loss 0.686 (0.686)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.686 (0.686)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.32 ( -0.32)
Overall Timing[ 26/  1]	epoch_time 0.0364 (0.0380)	validation_time 0.0003 (0.0006)	train_time 0.0360 (0.0373)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.5039000126123429, 0.5070000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.63it/s] 19%|#9        | 5/26 [00:00<00:01, 19.63it/s] 35%|###4      | 9/26 [00:00<00:00, 25.31it/s] 50%|#####     | 13/26 [00:00<00:00, 28.36it/s] 65%|######5   | 17/26 [00:00<00:00, 30.10it/s] 81%|########  | 21/26 [00:00<00:00, 31.93it/s] 96%|#########6| 25/26 [00:00<00:00, 32.94it/s]100%|##########| 26/26 [00:00<00:00, 27.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.55 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.57 (  0.50)	train_corr   0.00 (  0.00)	l1 13.7662 (13.7811)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.33it/s] 23%|##3       | 6/26 [00:00<00:00, 28.32it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.32it/s] 42%|####2     | 11/26 [00:00<00:00, 33.69it/s] 69%|######9   | 18/26 [00:00<00:00, 44.43it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.43it/s] 88%|########8 | 23/26 [00:00<00:00, 44.54it/s]100%|##########| 26/26 [00:00<00:00, 37.53it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.42 (  0.42)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.686 (0.688)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.48)	test_majacc   0.52 (  0.50)	Loss_d 0.686 (0.688)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.48)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.22 (  0.25)
Test: [  20/  26]	Loss 0.691 (0.689)	test_acc   0.49 (  0.50)	test_minacc   0.54 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.691 (0.689)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.54 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.21 (  0.23)
Test: [  26/  26]	Loss 0.679 (0.688)	test_acc   0.55 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.57 (  0.50)	Loss_d 0.679 (0.688)	test_acc_d   0.55 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.57 (  0.50)	test_corr_d   0.25 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.23it/s]
Test: [  0/  1]	Loss 0.686 (0.686)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.686 (0.686)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.32 ( -0.32)
Test: [  1/  1]	Loss 0.686 (0.686)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.686 (0.686)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.32 ( -0.32)
Overall Timing[ 27/  1]	epoch_time 0.0362 (0.0379)	validation_time 0.0004 (0.0006)	train_time 0.0357 (0.0372)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.5033000149726867, 0.5060000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.83it/s] 19%|#9        | 5/26 [00:00<00:00, 23.14it/s] 35%|###4      | 9/26 [00:00<00:00, 28.39it/s] 50%|#####     | 13/26 [00:00<00:00, 31.07it/s] 65%|######5   | 17/26 [00:00<00:00, 32.58it/s] 81%|########  | 21/26 [00:00<00:00, 33.52it/s] 96%|#########6| 25/26 [00:00<00:00, 33.82it/s]100%|##########| 26/26 [00:00<00:00, 28.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.55 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.57 (  0.50)	train_corr   0.00 (  0.00)	l1 13.7382 (13.7512)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.09it/s] 35%|###4      | 9/26 [00:00<00:00, 38.29it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.29it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.84it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.84it/s] 81%|########  | 21/26 [00:00<00:00, 47.09it/s]100%|##########| 26/26 [00:00<00:00, 41.31it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.42 (  0.42)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.687 (0.689)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.48)	test_majacc   0.52 (  0.50)	Loss_d 0.687 (0.689)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.48)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.22 (  0.25)
Test: [  20/  26]	Loss 0.691 (0.689)	test_acc   0.49 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.691 (0.689)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.21 (  0.23)
Test: [  26/  26]	Loss 0.680 (0.689)	test_acc   0.55 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.57 (  0.50)	Loss_d 0.680 (0.689)	test_acc_d   0.55 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.57 (  0.50)	test_corr_d   0.24 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.30it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.687 (0.687)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.32 ( -0.32)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.687 (0.687)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.32 ( -0.32)
Overall Timing[ 28/  1]	epoch_time 0.0363 (0.0378)	validation_time 0.0004 (0.0006)	train_time 0.0358 (0.0372)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.5029000103473663, 0.5060000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.98it/s] 19%|#9        | 5/26 [00:00<00:01, 20.24it/s] 35%|###4      | 9/26 [00:00<00:00, 25.81it/s] 50%|#####     | 13/26 [00:00<00:00, 28.24it/s] 65%|######5   | 17/26 [00:00<00:00, 30.26it/s] 81%|########  | 21/26 [00:00<00:00, 31.30it/s] 96%|#########6| 25/26 [00:00<00:00, 32.69it/s]100%|##########| 26/26 [00:00<00:00, 27.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.55 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.57 (  0.50)	train_corr   0.00 (  0.00)	l1 13.7133 (13.7249)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.07it/s] 23%|##3       | 6/26 [00:00<00:00, 31.66it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.66it/s] 46%|####6     | 12/26 [00:00<00:00, 41.89it/s] 65%|######5   | 17/26 [00:00<00:00, 42.66it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.66it/s] 88%|########8 | 23/26 [00:00<00:00, 47.51it/s]100%|##########| 26/26 [00:00<00:00, 38.89it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.42 (  0.42)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.688 (0.690)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.48)	test_majacc   0.52 (  0.50)	Loss_d 0.688 (0.690)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.48)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.22 (  0.24)
Test: [  20/  26]	Loss 0.692 (0.690)	test_acc   0.49 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.690)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.21 (  0.23)
Test: [  26/  26]	Loss 0.682 (0.689)	test_acc   0.55 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.57 (  0.50)	Loss_d 0.682 (0.689)	test_acc_d   0.55 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.57 (  0.50)	test_corr_d   0.24 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.79it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.688 (0.688)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.32 ( -0.32)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.688 (0.688)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.32 ( -0.32)
Overall Timing[ 29/  1]	epoch_time 0.0371 (0.0378)	validation_time 0.0004 (0.0006)	train_time 0.0367 (0.0372)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.5020000150501728, 0.5049999952316284)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.46it/s] 19%|#9        | 5/26 [00:00<00:00, 23.36it/s] 35%|###4      | 9/26 [00:00<00:00, 27.85it/s] 50%|#####     | 13/26 [00:00<00:00, 30.27it/s] 65%|######5   | 17/26 [00:00<00:00, 31.20it/s] 81%|########  | 21/26 [00:00<00:00, 32.53it/s] 96%|#########6| 25/26 [00:00<00:00, 33.70it/s]100%|##########| 26/26 [00:00<00:00, 28.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.55 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.57 (  0.50)	train_corr   0.00 (  0.00)	l1 13.6909 (13.7012)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.02it/s] 27%|##6       | 7/26 [00:00<00:00, 37.02it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.02it/s] 50%|#####     | 13/26 [00:00<00:00, 42.77it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.17it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.17it/s] 96%|#########6| 25/26 [00:00<00:00, 48.25it/s]100%|##########| 26/26 [00:00<00:00, 40.50it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.42 (  0.42)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.688 (0.690)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.48)	test_majacc   0.52 (  0.50)	Loss_d 0.688 (0.690)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.48)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.22 (  0.24)
Test: [  20/  26]	Loss 0.692 (0.690)	test_acc   0.49 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.690)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.21 (  0.23)
Test: [  26/  26]	Loss 0.683 (0.690)	test_acc   0.55 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.57 (  0.50)	Loss_d 0.683 (0.690)	test_acc_d   0.55 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.57 (  0.50)	test_corr_d   0.23 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.21it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.689 (0.689)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.32 ( -0.32)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.689 (0.689)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.32 ( -0.32)
Overall Timing[ 30/  1]	epoch_time 0.0363 (0.0378)	validation_time 0.0003 (0.0006)	train_time 0.0360 (0.0371)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.5020000150501728, 0.5040000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.80it/s] 19%|#9        | 5/26 [00:00<00:01, 20.77it/s] 35%|###4      | 9/26 [00:00<00:00, 26.30it/s] 50%|#####     | 13/26 [00:00<00:00, 28.61it/s] 65%|######5   | 17/26 [00:00<00:00, 30.31it/s] 81%|########  | 21/26 [00:00<00:00, 31.71it/s] 96%|#########6| 25/26 [00:00<00:00, 32.23it/s]100%|##########| 26/26 [00:00<00:00, 27.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.55 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.57 (  0.50)	train_corr   0.00 (  0.00)	l1 13.6701 (13.6797)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.16it/s] 23%|##3       | 6/26 [00:00<00:00, 30.86it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.86it/s] 46%|####6     | 12/26 [00:00<00:00, 42.65it/s] 69%|######9   | 18/26 [00:00<00:00, 45.29it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.29it/s] 92%|#########2| 24/26 [00:00<00:00, 50.00it/s]100%|##########| 26/26 [00:00<00:00, 40.08it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.42 (  0.42)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.689 (0.691)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.48)	test_majacc   0.52 (  0.50)	Loss_d 0.689 (0.691)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.48)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.21 (  0.23)
Test: [  20/  26]	Loss 0.692 (0.691)	test_acc   0.49 (  0.50)	test_minacc   0.52 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.691)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.21 (  0.22)
Test: [  26/  26]	Loss 0.684 (0.691)	test_acc   0.55 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.57 (  0.50)	Loss_d 0.684 (0.691)	test_acc_d   0.55 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.57 (  0.50)	test_corr_d   0.22 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.11it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.31 ( -0.31)
Overall Timing[ 31/  1]	epoch_time 0.0365 (0.0377)	validation_time 0.0003 (0.0006)	train_time 0.0361 (0.0371)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.5018000127375126, 0.5040000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.38it/s] 19%|#9        | 5/26 [00:00<00:01, 19.83it/s] 35%|###4      | 9/26 [00:00<00:00, 25.63it/s] 50%|#####     | 13/26 [00:00<00:00, 27.85it/s] 65%|######5   | 17/26 [00:00<00:00, 30.16it/s] 81%|########  | 21/26 [00:00<00:00, 31.58it/s] 96%|#########6| 25/26 [00:00<00:00, 32.74it/s]100%|##########| 26/26 [00:00<00:00, 26.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.55 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.57 (  0.50)	train_corr   0.00 (  0.00)	l1 13.6509 (13.6597)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.47it/s] 27%|##6       | 7/26 [00:00<00:00, 36.29it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.29it/s] 50%|#####     | 13/26 [00:00<00:00, 41.29it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.09it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.09it/s] 96%|#########6| 25/26 [00:00<00:00, 47.01it/s]100%|##########| 26/26 [00:00<00:00, 39.37it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.42 (  0.42)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.48)	test_majacc   0.52 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.48)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.20 (  0.21)
Test: [  20/  26]	Loss 0.692 (0.691)	test_acc   0.49 (  0.50)	test_minacc   0.52 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.691)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.20 (  0.21)
Test: [  26/  26]	Loss 0.686 (0.691)	test_acc   0.55 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.57 (  0.50)	Loss_d 0.686 (0.691)	test_acc_d   0.55 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.57 (  0.50)	test_corr_d   0.20 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.69it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.30 ( -0.30)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.30 ( -0.30)
Overall Timing[ 32/  1]	epoch_time 0.0386 (0.0378)	validation_time 0.0004 (0.0006)	train_time 0.0382 (0.0371)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.5018000127375126, 0.5040000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.66it/s] 19%|#9        | 5/26 [00:00<00:01, 20.34it/s] 35%|###4      | 9/26 [00:00<00:00, 25.60it/s] 50%|#####     | 13/26 [00:00<00:00, 28.67it/s] 65%|######5   | 17/26 [00:00<00:00, 30.57it/s] 81%|########  | 21/26 [00:00<00:00, 32.11it/s] 96%|#########6| 25/26 [00:00<00:00, 33.03it/s]100%|##########| 26/26 [00:00<00:00, 27.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.55 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.57 (  0.50)	train_corr   0.00 (  0.00)	l1 13.6330 (13.6412)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.15it/s] 27%|##6       | 7/26 [00:00<00:00, 37.00it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.00it/s] 50%|#####     | 13/26 [00:00<00:00, 41.84it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.99it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.99it/s] 96%|#########6| 25/26 [00:00<00:00, 48.07it/s]100%|##########| 26/26 [00:00<00:00, 40.43it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.42 (  0.42)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.13 (  0.13)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.48)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.48)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.18 (  0.19)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.19 (  0.19)
Test: [  26/  26]	Loss 0.687 (0.692)	test_acc   0.55 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.57 (  0.50)	Loss_d 0.687 (0.692)	test_acc_d   0.55 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.57 (  0.50)	test_corr_d   0.18 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.42it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.28 ( -0.28)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.28 ( -0.28)
Overall Timing[ 33/  1]	epoch_time 0.0359 (0.0377)	validation_time 0.0003 (0.0006)	train_time 0.0355 (0.0371)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.5020000150501728, 0.5049999952316284)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.04it/s] 19%|#9        | 5/26 [00:00<00:01, 20.73it/s] 35%|###4      | 9/26 [00:00<00:00, 26.70it/s] 50%|#####     | 13/26 [00:00<00:00, 29.29it/s] 65%|######5   | 17/26 [00:00<00:00, 30.60it/s] 81%|########  | 21/26 [00:00<00:00, 32.10it/s] 96%|#########6| 25/26 [00:00<00:00, 32.95it/s]100%|##########| 26/26 [00:00<00:00, 27.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.55 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.57 (  0.50)	train_corr   0.00 (  0.00)	l1 13.6174 (13.6244)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.46it/s] 27%|##6       | 7/26 [00:00<00:00, 37.07it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.07it/s] 50%|#####     | 13/26 [00:00<00:00, 41.87it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.28it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.28it/s] 96%|#########6| 25/26 [00:00<00:00, 47.78it/s]100%|##########| 26/26 [00:00<00:00, 40.39it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.42 (  0.42)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.48)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.48)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.15 (  0.16)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.17 (  0.16)
Test: [  26/  26]	Loss 0.688 (0.692)	test_acc   0.55 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.57 (  0.50)	Loss_d 0.688 (0.692)	test_acc_d   0.55 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.57 (  0.50)	test_corr_d   0.14 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.63it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 34/  1]	epoch_time 0.0360 (0.0377)	validation_time 0.0004 (0.0006)	train_time 0.0356 (0.0370)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.5023000115454197, 0.5060000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.55it/s] 19%|#9        | 5/26 [00:00<00:01, 20.03it/s] 35%|###4      | 9/26 [00:00<00:00, 25.37it/s] 50%|#####     | 13/26 [00:00<00:00, 28.19it/s] 65%|######5   | 17/26 [00:00<00:00, 29.52it/s] 81%|########  | 21/26 [00:00<00:00, 30.98it/s] 96%|#########6| 25/26 [00:00<00:00, 31.63it/s]100%|##########| 26/26 [00:00<00:00, 26.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.55 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.57 (  0.50)	train_corr   0.00 (  0.00)	l1 13.6037 (13.6098)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.06it/s] 27%|##6       | 7/26 [00:00<00:00, 34.29it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.29it/s] 50%|#####     | 13/26 [00:00<00:00, 40.64it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.48it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.48it/s] 96%|#########6| 25/26 [00:00<00:00, 47.73it/s]100%|##########| 26/26 [00:00<00:00, 39.53it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.42 (  0.42)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.45 (  0.48)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.45 (  0.48)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.11 (  0.11)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.54 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.54 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.14 (  0.12)
Test: [  26/  26]	Loss 0.689 (0.692)	test_acc   0.55 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.57 (  0.50)	Loss_d 0.689 (0.692)	test_acc_d   0.55 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.57 (  0.50)	test_corr_d   0.09 (  0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.52it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 35/  1]	epoch_time 0.0385 (0.0377)	validation_time 0.0004 (0.0005)	train_time 0.0381 (0.0371)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.503000012665987, 0.5070000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.10it/s] 19%|#9        | 5/26 [00:00<00:00, 21.09it/s] 35%|###4      | 9/26 [00:00<00:00, 26.40it/s] 50%|#####     | 13/26 [00:00<00:00, 29.71it/s] 65%|######5   | 17/26 [00:00<00:00, 31.43it/s] 81%|########  | 21/26 [00:00<00:00, 32.78it/s] 96%|#########6| 25/26 [00:00<00:00, 33.06it/s]100%|##########| 26/26 [00:00<00:00, 27.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.55 (  0.50)	train_minacc   0.49 (  0.50)	train_majacc   0.57 (  0.50)	train_corr   0.00 (  0.00)	l1 13.5917 (13.5971)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.83it/s] 27%|##6       | 7/26 [00:00<00:00, 32.79it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.79it/s] 50%|#####     | 13/26 [00:00<00:00, 42.91it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.50it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.50it/s] 96%|#########6| 25/26 [00:00<00:00, 49.52it/s]100%|##########| 26/26 [00:00<00:00, 40.13it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.44 (  0.44)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.45 (  0.49)	test_majacc   0.53 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.07 (  0.06)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.54 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.54 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.11 (  0.07)
Test: [  26/  26]	Loss 0.690 (0.693)	test_acc   0.55 (  0.50)	test_minacc   0.49 (  0.51)	test_majacc   0.57 (  0.50)	Loss_d 0.690 (0.693)	test_acc_d   0.55 (  0.50)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.57 (  0.50)	test_corr_d   0.03 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.91it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 36/  1]	epoch_time 0.0370 (0.0377)	validation_time 0.0004 (0.0005)	train_time 0.0366 (0.0371)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.5038000149428844, 0.5060000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.97it/s] 19%|#9        | 5/26 [00:00<00:01, 19.90it/s] 35%|###4      | 9/26 [00:00<00:00, 26.41it/s] 50%|#####     | 13/26 [00:00<00:00, 29.52it/s] 65%|######5   | 17/26 [00:00<00:00, 31.01it/s] 81%|########  | 21/26 [00:00<00:00, 32.22it/s] 96%|#########6| 25/26 [00:00<00:00, 32.78it/s]100%|##########| 26/26 [00:00<00:00, 27.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.56 (  0.50)	train_minacc   0.49 (  0.51)	train_majacc   0.58 (  0.50)	train_corr   0.00 (  0.00)	l1 13.5816 (13.5861)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.85it/s] 35%|###4      | 9/26 [00:00<00:00, 37.02it/s]                                               35%|###4      | 9/26 [00:00<00:00, 37.02it/s] 58%|#####7    | 15/26 [00:00<00:00, 44.32it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 44.32it/s] 81%|########  | 21/26 [00:00<00:00, 46.03it/s]100%|##########| 26/26 [00:00<00:00, 40.44it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.44 (  0.44)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.45 (  0.49)	test_majacc   0.53 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.05 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.54 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.54 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.09 (  0.04)
Test: [  26/  26]	Loss 0.691 (0.693)	test_acc   0.56 (  0.51)	test_minacc   0.49 (  0.51)	test_majacc   0.58 (  0.51)	Loss_d 0.691 (0.693)	test_acc_d   0.56 (  0.51)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.58 (  0.51)	test_corr_d   0.01 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.13it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 37/  1]	epoch_time 0.0372 (0.0376)	validation_time 0.0003 (0.0005)	train_time 0.0368 (0.0370)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.5055000104904175, 0.5110000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.87it/s] 19%|#9        | 5/26 [00:00<00:00, 23.53it/s] 35%|###4      | 9/26 [00:00<00:00, 27.89it/s] 50%|#####     | 13/26 [00:00<00:00, 30.05it/s] 65%|######5   | 17/26 [00:00<00:00, 31.29it/s] 81%|########  | 21/26 [00:00<00:00, 32.30it/s] 96%|#########6| 25/26 [00:00<00:00, 32.52it/s]100%|##########| 26/26 [00:00<00:00, 28.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.56 (  0.51)	train_minacc   0.49 (  0.51)	train_majacc   0.58 (  0.51)	train_corr   0.00 (  0.00)	l1 13.5736 (13.5771)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.07it/s] 23%|##3       | 6/26 [00:00<00:00, 31.94it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.94it/s] 46%|####6     | 12/26 [00:00<00:00, 41.77it/s] 65%|######5   | 17/26 [00:00<00:00, 41.55it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.55it/s] 88%|########8 | 23/26 [00:00<00:00, 45.44it/s]100%|##########| 26/26 [00:00<00:00, 38.18it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.44 (  0.44)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.47 (  0.49)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.54 (  0.50)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.54 (  0.50)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.08 (  0.03)
Test: [  26/  26]	Loss 0.691 (0.693)	test_acc   0.56 (  0.51)	test_minacc   0.49 (  0.51)	test_majacc   0.58 (  0.51)	Loss_d 0.691 (0.693)	test_acc_d   0.56 (  0.51)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.58 (  0.51)	test_corr_d  -0.01 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.06it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 38/  1]	epoch_time 0.0380 (0.0377)	validation_time 0.0004 (0.0005)	train_time 0.0376 (0.0371)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.5087000068128109, 0.5180000066757202)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.27it/s] 19%|#9        | 5/26 [00:00<00:00, 21.67it/s] 35%|###4      | 9/26 [00:00<00:00, 26.79it/s] 50%|#####     | 13/26 [00:00<00:00, 29.47it/s] 65%|######5   | 17/26 [00:00<00:00, 30.66it/s] 81%|########  | 21/26 [00:00<00:00, 31.03it/s] 96%|#########6| 25/26 [00:00<00:00, 31.86it/s]100%|##########| 26/26 [00:00<00:00, 27.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.57 (  0.51)	train_minacc   0.56 (  0.52)	train_majacc   0.57 (  0.51)	train_corr   0.00 (  0.00)	l1 13.5675 (13.5701)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.67it/s] 35%|###4      | 9/26 [00:00<00:00, 38.73it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.73it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.01it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.44it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.44it/s] 96%|#########6| 25/26 [00:00<00:00, 46.63it/s]100%|##########| 26/26 [00:00<00:00, 40.78it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.07 ( -0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.47 (  0.50)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.02 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.54 (  0.51)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.07 (  0.01)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.57 (  0.51)	test_minacc   0.56 (  0.52)	test_majacc   0.57 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.56 (  0.52)	test_majacc_d   0.57 (  0.51)	test_corr_d  -0.03 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.51it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 39/  1]	epoch_time 0.0366 (0.0376)	validation_time 0.0006 (0.0005)	train_time 0.0360 (0.0370)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.5083000060915946, 0.5220000147819519)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.72it/s] 19%|#9        | 5/26 [00:00<00:00, 22.55it/s] 35%|###4      | 9/26 [00:00<00:00, 27.94it/s] 50%|#####     | 13/26 [00:00<00:00, 30.81it/s] 65%|######5   | 17/26 [00:00<00:00, 32.31it/s] 81%|########  | 21/26 [00:00<00:00, 33.69it/s] 96%|#########6| 25/26 [00:00<00:00, 34.35it/s]100%|##########| 26/26 [00:00<00:00, 29.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.57 (  0.51)	train_minacc   0.56 (  0.51)	train_majacc   0.57 (  0.51)	train_corr   0.00 (  0.00)	l1 13.5627 (13.5647)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.70it/s] 23%|##3       | 6/26 [00:00<00:00, 28.71it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.71it/s] 46%|####6     | 12/26 [00:00<00:00, 38.56it/s] 69%|######9   | 18/26 [00:00<00:00, 44.09it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.09it/s] 92%|#########2| 24/26 [00:00<00:00, 46.48it/s]100%|##########| 26/26 [00:00<00:00, 37.92it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.07 ( -0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.50)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.02 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.62 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.06 (  0.00)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.51)	test_minacc   0.56 (  0.52)	test_majacc   0.57 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.51)	test_minacc_d   0.56 (  0.52)	test_majacc_d   0.57 (  0.51)	test_corr_d  -0.04 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.94it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 40/  1]	epoch_time 0.0358 (0.0376)	validation_time 0.0004 (0.0005)	train_time 0.0355 (0.0370)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.5113000101447105, 0.5230000019073486)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.84it/s] 19%|#9        | 5/26 [00:00<00:00, 23.09it/s] 35%|###4      | 9/26 [00:00<00:00, 27.67it/s] 50%|#####     | 13/26 [00:00<00:00, 30.39it/s] 65%|######5   | 17/26 [00:00<00:00, 31.56it/s] 81%|########  | 21/26 [00:00<00:00, 32.94it/s] 96%|#########6| 25/26 [00:00<00:00, 33.32it/s]100%|##########| 26/26 [00:00<00:00, 28.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.56 (  0.51)	train_minacc   0.58 (  0.52)	train_majacc   0.56 (  0.51)	train_corr   0.00 (  0.00)	l1 13.5590 (13.5606)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.75it/s] 27%|##6       | 7/26 [00:00<00:00, 32.58it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.58it/s] 50%|#####     | 13/26 [00:00<00:00, 40.39it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.93it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.93it/s] 96%|#########6| 25/26 [00:00<00:00, 47.37it/s]100%|##########| 26/26 [00:00<00:00, 38.70it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.58 (  0.58)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.47 (  0.50)	test_majacc   0.53 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.01 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.65 (  0.52)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.65 (  0.52)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.06 ( -0.00)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.51)	test_minacc   0.58 (  0.52)	test_majacc   0.55 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.51)	test_minacc_d   0.58 (  0.52)	test_majacc_d   0.55 (  0.51)	test_corr_d  -0.04 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.35it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 41/  1]	epoch_time 0.0369 (0.0376)	validation_time 0.0003 (0.0005)	train_time 0.0365 (0.0370)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.5121000146567821, 0.5330000519752502)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.97it/s] 19%|#9        | 5/26 [00:00<00:01, 20.84it/s] 35%|###4      | 9/26 [00:00<00:00, 25.51it/s] 50%|#####     | 13/26 [00:00<00:00, 28.61it/s] 65%|######5   | 17/26 [00:00<00:00, 29.54it/s] 81%|########  | 21/26 [00:00<00:00, 31.37it/s] 96%|#########6| 25/26 [00:00<00:00, 32.23it/s]100%|##########| 26/26 [00:00<00:00, 26.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.54 (  0.51)	train_minacc   0.63 (  0.53)	train_majacc   0.52 (  0.51)	train_corr   0.00 (  0.00)	l1 13.5563 (13.5574)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.97it/s] 27%|##6       | 7/26 [00:00<00:00, 34.93it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.93it/s] 46%|####6     | 12/26 [00:00<00:00, 37.80it/s] 69%|######9   | 18/26 [00:00<00:00, 44.08it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.08it/s] 92%|#########2| 24/26 [00:00<00:00, 45.77it/s]100%|##########| 26/26 [00:00<00:00, 39.28it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.53 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.50 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.01 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.58 (  0.52)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.58 (  0.52)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.06 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.63 (  0.53)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.63 (  0.53)	test_majacc_d   0.52 (  0.51)	test_corr_d  -0.04 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.15it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 42/  1]	epoch_time 0.0387 (0.0376)	validation_time 0.0006 (0.0005)	train_time 0.0381 (0.0370)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.5129000102877617, 0.531000018119812)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.96it/s] 19%|#9        | 5/26 [00:00<00:01, 19.43it/s] 35%|###4      | 9/26 [00:00<00:00, 25.49it/s] 50%|#####     | 13/26 [00:00<00:00, 28.20it/s] 65%|######5   | 17/26 [00:00<00:00, 29.65it/s] 81%|########  | 21/26 [00:00<00:00, 31.47it/s] 96%|#########6| 25/26 [00:00<00:00, 32.44it/s]100%|##########| 26/26 [00:00<00:00, 26.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.54 (  0.51)	train_minacc   0.65 (  0.52)	train_majacc   0.52 (  0.51)	train_corr   0.00 (  0.00)	l1 13.5542 (13.5550)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.95it/s] 23%|##3       | 6/26 [00:00<00:00, 30.29it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.29it/s] 46%|####6     | 12/26 [00:00<00:00, 41.63it/s] 69%|######9   | 18/26 [00:00<00:00, 44.90it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.90it/s] 92%|#########2| 24/26 [00:00<00:00, 49.16it/s]100%|##########| 26/26 [00:00<00:00, 40.25it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.60 (  0.60)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.52 (  0.53)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.52 (  0.53)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.01 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.60 (  0.53)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.60 (  0.53)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.05 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.65 (  0.53)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.65 (  0.53)	test_majacc_d   0.52 (  0.51)	test_corr_d  -0.04 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.53it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 43/  1]	epoch_time 0.0374 (0.0376)	validation_time 0.0004 (0.0005)	train_time 0.0370 (0.0370)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.5139000150859356, 0.5360000133514404)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.61it/s] 19%|#9        | 5/26 [00:00<00:00, 21.90it/s] 35%|###4      | 9/26 [00:00<00:00, 26.14it/s] 50%|#####     | 13/26 [00:00<00:00, 29.48it/s] 65%|######5   | 17/26 [00:00<00:00, 31.33it/s] 81%|########  | 21/26 [00:00<00:00, 32.47it/s] 96%|#########6| 25/26 [00:00<00:00, 32.96it/s]100%|##########| 26/26 [00:00<00:00, 27.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.55 (  0.51)	train_minacc   0.65 (  0.52)	train_majacc   0.53 (  0.51)	train_corr   0.00 (  0.00)	l1 13.5526 (13.5532)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.78it/s] 23%|##3       | 6/26 [00:00<00:00, 29.83it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.83it/s] 42%|####2     | 11/26 [00:00<00:00, 37.93it/s] 65%|######5   | 17/26 [00:00<00:00, 42.01it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.01it/s] 88%|########8 | 23/26 [00:00<00:00, 47.48it/s]100%|##########| 26/26 [00:00<00:00, 37.89it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.60 (  0.60)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.52 (  0.53)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.52 (  0.53)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.01 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.60 (  0.52)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.60 (  0.52)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.05 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.51)	test_minacc   0.65 (  0.52)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.65 (  0.52)	test_majacc_d   0.53 (  0.51)	test_corr_d  -0.04 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.55it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 44/  1]	epoch_time 0.0374 (0.0376)	validation_time 0.0003 (0.0005)	train_time 0.0370 (0.0370)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.5113000096380711, 0.5290000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.53it/s] 19%|#9        | 5/26 [00:00<00:01, 18.26it/s] 35%|###4      | 9/26 [00:00<00:00, 24.12it/s] 50%|#####     | 13/26 [00:00<00:00, 28.10it/s] 65%|######5   | 17/26 [00:00<00:00, 30.66it/s] 81%|########  | 21/26 [00:00<00:00, 31.92it/s] 96%|#########6| 25/26 [00:00<00:00, 32.46it/s]100%|##########| 26/26 [00:00<00:00, 26.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.20)	train_acc   0.54 (  0.51)	train_minacc   0.65 (  0.52)	train_majacc   0.52 (  0.51)	train_corr   0.00 (  0.00)	l1 13.5514 (13.5518)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.96it/s] 27%|##6       | 7/26 [00:00<00:00, 34.13it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.13it/s] 50%|#####     | 13/26 [00:00<00:00, 39.84it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.25it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.25it/s] 96%|#########6| 25/26 [00:00<00:00, 46.83it/s]100%|##########| 26/26 [00:00<00:00, 38.82it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.62 (  0.62)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.48 (  0.52)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.48 (  0.52)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.01 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.56 (  0.52)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.56 (  0.52)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.05 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.65 (  0.52)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.65 (  0.52)	test_majacc_d   0.52 (  0.51)	test_corr_d  -0.04 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.80it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 45/  1]	epoch_time 0.0367 (0.0376)	validation_time 0.0005 (0.0005)	train_time 0.0362 (0.0370)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.5131000128090382, 0.5240000486373901)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.41it/s] 19%|#9        | 5/26 [00:00<00:00, 22.85it/s] 35%|###4      | 9/26 [00:00<00:00, 27.86it/s] 50%|#####     | 13/26 [00:00<00:00, 30.30it/s] 65%|######5   | 17/26 [00:00<00:00, 31.42it/s] 81%|########  | 21/26 [00:00<00:00, 32.68it/s] 96%|#########6| 25/26 [00:00<00:00, 33.29it/s]100%|##########| 26/26 [00:00<00:00, 28.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.55 (  0.51)	train_minacc   0.60 (  0.52)	train_majacc   0.54 (  0.51)	train_corr   0.00 (  0.00)	l1 13.5504 (13.5507)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.58it/s] 31%|###       | 8/26 [00:00<00:00, 40.40it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.40it/s] 50%|#####     | 13/26 [00:00<00:00, 43.80it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.44it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.44it/s] 96%|#########6| 25/26 [00:00<00:00, 49.96it/s]100%|##########| 26/26 [00:00<00:00, 41.87it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.62 (  0.62)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.48 (  0.52)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.48 (  0.52)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.01 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.56 (  0.52)	test_majacc   0.54 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.56 (  0.52)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.05 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.51)	test_minacc   0.60 (  0.52)	test_majacc   0.54 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.60 (  0.52)	test_majacc_d   0.54 (  0.51)	test_corr_d  -0.04 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 23.36it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 46/  1]	epoch_time 0.0369 (0.0376)	validation_time 0.0008 (0.0005)	train_time 0.0361 (0.0370)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.5132000130116939, 0.5290000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.91it/s] 19%|#9        | 5/26 [00:00<00:00, 21.10it/s] 35%|###4      | 9/26 [00:00<00:00, 26.28it/s] 50%|#####     | 13/26 [00:00<00:00, 29.23it/s] 65%|######5   | 17/26 [00:00<00:00, 30.81it/s] 81%|########  | 21/26 [00:00<00:00, 31.66it/s] 96%|#########6| 25/26 [00:00<00:00, 32.16it/s]100%|##########| 26/26 [00:00<00:00, 27.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.53 (  0.51)	train_minacc   0.56 (  0.52)	train_majacc   0.53 (  0.51)	train_corr   0.00 (  0.00)	l1 13.5497 (13.5499)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.27it/s] 35%|###4      | 9/26 [00:00<00:00, 37.72it/s]                                               35%|###4      | 9/26 [00:00<00:00, 37.72it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.64it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.64it/s] 81%|########  | 21/26 [00:00<00:00, 46.47it/s]100%|##########| 26/26 [00:00<00:00, 40.73it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.62 (  0.62)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.47 (  0.53)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.47 (  0.53)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.01 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.51)	test_minacc   0.56 (  0.52)	test_majacc   0.55 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.56 (  0.52)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.05 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.56 (  0.52)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.56 (  0.52)	test_majacc_d   0.53 (  0.51)	test_corr_d  -0.04 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.70it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 47/  1]	epoch_time 0.0381 (0.0376)	validation_time 0.0003 (0.0005)	train_time 0.0377 (0.0370)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.5139000109732151, 0.5260000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.17it/s] 19%|#9        | 5/26 [00:00<00:00, 21.33it/s] 35%|###4      | 9/26 [00:00<00:00, 27.05it/s] 50%|#####     | 13/26 [00:00<00:00, 30.02it/s] 65%|######5   | 17/26 [00:00<00:00, 31.75it/s] 81%|########  | 21/26 [00:00<00:00, 32.80it/s] 96%|#########6| 25/26 [00:00<00:00, 33.45it/s]100%|##########| 26/26 [00:00<00:00, 28.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.53 (  0.52)	train_minacc   0.56 (  0.52)	train_majacc   0.53 (  0.51)	train_corr   0.00 (  0.00)	l1 13.5491 (13.5492)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.35it/s] 27%|##6       | 7/26 [00:00<00:00, 32.74it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.74it/s] 50%|#####     | 13/26 [00:00<00:00, 41.19it/s] 69%|######9   | 18/26 [00:00<00:00, 43.61it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.61it/s] 92%|#########2| 24/26 [00:00<00:00, 46.75it/s]100%|##########| 26/26 [00:00<00:00, 38.55it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.60 (  0.60)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.47 (  0.52)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.47 (  0.52)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.01 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.51)	test_minacc   0.56 (  0.52)	test_majacc   0.54 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.56 (  0.52)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.05 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.56 (  0.52)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.56 (  0.52)	test_majacc_d   0.53 (  0.51)	test_corr_d  -0.04 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.22it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 48/  1]	epoch_time 0.0366 (0.0375)	validation_time 0.0004 (0.0005)	train_time 0.0361 (0.0370)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.514300014436245, 0.5290000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.58it/s] 19%|#9        | 5/26 [00:00<00:01, 18.86it/s] 35%|###4      | 9/26 [00:00<00:00, 24.79it/s] 50%|#####     | 13/26 [00:00<00:00, 28.13it/s] 65%|######5   | 17/26 [00:00<00:00, 29.45it/s] 81%|########  | 21/26 [00:00<00:00, 31.34it/s] 96%|#########6| 25/26 [00:00<00:00, 32.61it/s]100%|##########| 26/26 [00:00<00:00, 26.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.54 (  0.52)	train_minacc   0.58 (  0.52)	train_majacc   0.53 (  0.51)	train_corr   0.00 (  0.00)	l1 13.5485 (13.5487)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.14it/s] 27%|##6       | 7/26 [00:00<00:00, 33.27it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.27it/s] 50%|#####     | 13/26 [00:00<00:00, 40.90it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.13it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.13it/s] 96%|#########6| 25/26 [00:00<00:00, 47.67it/s]100%|##########| 26/26 [00:00<00:00, 38.83it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.64 (  0.64)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.47 (  0.53)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.47 (  0.53)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.01 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.51)	test_minacc   0.56 (  0.53)	test_majacc   0.55 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.56 (  0.53)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.05 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.58 (  0.52)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.58 (  0.52)	test_majacc_d   0.53 (  0.51)	test_corr_d  -0.04 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.49it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 49/  1]	epoch_time 0.0366 (0.0375)	validation_time 0.0004 (0.0005)	train_time 0.0362 (0.0370)
record: (train_acc, test_acc) (0.7173000336289406, 0.7070000171661377)
last accs (train_acc, test_acc) (0.5147000111341477, 0.5330000519752502)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.097 MB of 0.097 MB uploadedwandb: \ 0.097 MB of 0.097 MB uploadedwandb: | 0.097 MB of 0.097 MB uploadedwandb: / 0.119 MB of 0.127 MB uploaded (0.003 MB deduped)wandb: - 0.495 MB of 0.495 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/diagnostics/epoch_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▂▁▂▁▁▁▁▁▂▁▁▁▁▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/diagnostics/train_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▂▁▁▁▁▁▁▂▁▂▁▁▂▁▁▂▁▁▁▂▁
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/Loss_avg █▇▇▆▆▅▅▅▅▅▄▄▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/Loss_d_avg █▇▇▆▆▅▅▅▅▅▄▄▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/Loss_d_val █▇▇▆▆▅▅▅▅▅▄▄▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/Loss_val █▇▇▆▆▅▅▅▅▅▄▄▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/test_acc_avg ▁▂▂▄▃▆▅▅▅▅▆▅███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/test_acc_d_avg ▁▂▂▄▃▆▅▅▅▅▆▅███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/test_acc_d_val ▁▂▂▄▃▆▅▅▅▅▆▅███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/test_acc_val ▁▂▂▄▃▆▅▅▅▅▆▅███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/test_corr_d_avg ██▇▆▆▅▅▆▅▆▅▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/test_corr_d_val ██▇▆▆▅▅▆▅▆▅▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/test_majacc_avg ███▇█▇▇▇▇▇▇▇▅▄▄▄▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▃▃▃▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/test_majacc_d_avg ███▇█▇▇▇▇▇▇▇▅▄▄▄▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▃▃▃▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/test_majacc_d_val ███▇█▇▇▇▇▇▇▇▅▄▄▄▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/test_majacc_val ███▇█▇▇▇▇▇▇▇▅▄▄▄▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/test_minacc_avg ▁▂▂▃▃▆▅▄▅▅▆▅███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/test_minacc_d_avg ▁▂▂▃▃▆▅▄▅▅▆▅███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/test_minacc_d_val ▁▂▂▃▃▆▅▄▅▅▆▅███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/test_minacc_val ▁▂▂▃▃▆▅▄▅▅▆▅███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/Loss_avg █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/Loss_val █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/l1_avg ▁▂▂▁▁▁▂▃▅▆▆▇███████▆▅▅▅▅▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/l1_val ▁▂▁▁▁▁▂▃▅▆▇▇███████▅▅▅▅▅▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/train_acc_avg ▇███████████▇▅▄▄▂▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/train_acc_val ▇▇▇▇▇▇█▇████▅▄▄▃▂▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/train_majacc_avg ▇███████████▆▄▄▃▂▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/train_majacc_val ██▇███████▇█▄▃▃▃▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/train_minacc_avg ▂▁▁▂▂▃▃▃▃▄▄▄▆█████▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/train_minacc_val ▁▁▃▂▁▂▃▂▃▃▅▃█▇▇▇▇▇▇▅▅▅▅▅▅▅▅▅▅▅▅▅▆▆▇▇▇▇▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/train_nll_avg ▆▂▂▂▂▂▁▁▁▁▁▁▃▆▇▇████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/train_nll_val ▃▃▂▂▂▁▁▂▂▁▁▁▅▆▇▇████████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/train_penalty_avg █▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/train_penalty_val █▆▄▅▅▃▃▄▄▄▃▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/weight_norm_avg █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/weight_norm_val █▄▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/diagnostics/epoch_time_val 0.03663
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/diagnostics/train_time_val 0.0362
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/diagnostics/validation_time_val 0.00041
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/Loss_avg 0.69256
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/Loss_d_avg 0.69256
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/Loss_d_val 0.69256
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/Loss_val 0.69256
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/test_acc_avg 0.533
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/test_acc_d_avg 0.533
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/test_acc_d_val 0.533
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/test_acc_val 0.533
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/test_corr_d_avg -0.08636
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/test_corr_d_val -0.08636
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/test_majacc_avg 0.53
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/test_majacc_d_avg 0.53
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/test_majacc_d_val 0.53
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/test_majacc_val 0.53
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/test_minacc_avg 0.53333
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/test_minacc_d_avg 0.53333
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/test_minacc_d_val 0.53333
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/test/test_minacc_val 0.53333
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/Loss_avg 9e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/Loss_val 9e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/l1_avg 13.54867
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/l1_val 13.54854
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/train_acc_avg 0.5151
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/train_acc_val 0.536
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/train_majacc_avg 0.51335
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/train_majacc_val 0.52657
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/train_minacc_avg 0.52482
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/train_minacc_val 0.5814
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/train_nll_avg 0.69307
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/train_nll_val 0.69294
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/weight_norm_avg 0.19404
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/54/logs/train/weight_norm_val 0.19391
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/mrqdtx7s
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_115535-mrqdtx7s/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_115802-k05ms93z
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/k05ms93z
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=15.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1246
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6012, 3, 32, 32) (5988, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:41,  1.65s/it] 19%|#9        | 5/26 [00:01<00:05,  3.69it/s] 35%|###4      | 9/26 [00:01<00:02,  7.19it/s] 50%|#####     | 13/26 [00:02<00:01, 10.88it/s] 65%|######5   | 17/26 [00:02<00:00, 14.71it/s] 81%|########  | 21/26 [00:02<00:00, 18.51it/s] 96%|#########6| 25/26 [00:02<00:00, 21.78it/s]100%|##########| 26/26 [00:02<00:00,  9.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 9.931 (12.535)	train_nll   0.42 (  0.59)	train_penalty   0.06 (  0.27)	weight_norm   9.51 ( 11.95)	train_acc   0.86 (  0.77)	train_minacc   0.00 (  0.12)	train_majacc   1.00 (  0.89)	train_corr   0.00 (  0.00)	l1 8.0606 (8.5544)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.75it/s] 27%|##6       | 7/26 [00:00<00:00, 38.93it/s]                                               27%|##6       | 7/26 [00:00<00:00, 38.93it/s] 50%|#####     | 13/26 [00:00<00:00, 42.63it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.04it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.04it/s] 96%|#########6| 25/26 [00:00<00:00, 48.14it/s]100%|##########| 26/26 [00:00<00:00, 41.21it/s]
Test: [   0/  26]	Loss 0.426 (0.426)	test_acc   0.83 (  0.83)	test_minacc   0.02 (  0.02)	test_majacc   0.98 (  0.98)	Loss_d 0.426 (0.426)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.417 (0.411)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.417 (0.411)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.97)
Test: [  20/  26]	Loss 0.425 (0.409)	test_acc   0.83 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.425 (0.409)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.97)
Test: [  26/  26]	Loss 0.396 (0.412)	test_acc   0.86 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.396 (0.412)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.56it/s]100%|##########| 1/1 [00:00<00:00,  2.56it/s]
Test: [  0/  1]	Loss 1.620 (1.620)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.620 (1.620)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.620 (1.620)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.620 (1.620)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/55/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0769 (0.0769)	validation_time 0.0066 (0.0066)	train_time 0.0668 (0.0668)
record: (train_acc, test_acc) (0.8436000247001648, 0.1120000034570694)
last accs (train_acc, test_acc) (0.8436000247001648, 0.1120000034570694)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.47it/s] 19%|#9        | 5/26 [00:00<00:00, 21.56it/s] 35%|###4      | 9/26 [00:00<00:00, 26.67it/s] 50%|#####     | 13/26 [00:00<00:00, 29.79it/s] 65%|######5   | 17/26 [00:00<00:00, 31.65it/s] 81%|########  | 21/26 [00:00<00:00, 32.77it/s] 96%|#########6| 25/26 [00:00<00:00, 33.16it/s]100%|##########| 26/26 [00:00<00:00, 27.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 5.223 (7.194)	train_nll   0.43 (  0.42)	train_penalty   0.05 (  0.06)	weight_norm   4.80 (  6.78)	train_acc   0.84 (  0.84)	train_minacc   0.03 (  0.03)	train_majacc   0.98 (  0.99)	train_corr   0.00 (  0.00)	l1 7.9642 (8.1465)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 22.83it/s] 31%|###       | 8/26 [00:00<00:00, 34.53it/s]                                               31%|###       | 8/26 [00:00<00:00, 34.53it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.88it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.92it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.92it/s] 92%|#########2| 24/26 [00:00<00:00, 46.50it/s]100%|##########| 26/26 [00:00<00:00, 40.32it/s]
Test: [   0/  26]	Loss 0.410 (0.410)	test_acc   0.84 (  0.84)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.410 (0.410)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.398 (0.394)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.398 (0.394)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.394 (0.391)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.03)	test_majacc   1.00 (  0.99)	Loss_d 0.394 (0.391)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.03)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.391 (0.392)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  0.99)	Loss_d 0.391 (0.392)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.38it/s]
Test: [  0/  1]	Loss 1.458 (1.458)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 1.458 (1.458)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  1/  1]	Loss 1.458 (1.458)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 1.458 (1.458)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/55/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0374 (0.0572)	validation_time 0.0004 (0.0035)	train_time 0.0370 (0.0519)
record: (train_acc, test_acc) (0.8473000208735466, 0.12000000476837158)
last accs (train_acc, test_acc) (0.8473000208735466, 0.12000000476837158)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.31it/s] 19%|#9        | 5/26 [00:00<00:01, 19.66it/s] 35%|###4      | 9/26 [00:00<00:00, 25.43it/s] 50%|#####     | 13/26 [00:00<00:00, 28.19it/s] 65%|######5   | 17/26 [00:00<00:00, 29.92it/s] 81%|########  | 21/26 [00:00<00:00, 31.25it/s] 96%|#########6| 25/26 [00:00<00:00, 32.14it/s]100%|##########| 26/26 [00:00<00:00, 26.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 3.196 (4.031)	train_nll   0.41 (  0.40)	train_penalty   0.04 (  0.05)	weight_norm   2.79 (  3.64)	train_acc   0.86 (  0.85)	train_minacc   0.09 (  0.06)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 7.3944 (7.6884)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.73it/s] 27%|##6       | 7/26 [00:00<00:00, 36.39it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.39it/s] 46%|####6     | 12/26 [00:00<00:00, 37.11it/s] 69%|######9   | 18/26 [00:00<00:00, 44.72it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.72it/s] 92%|#########2| 24/26 [00:00<00:00, 45.78it/s]100%|##########| 26/26 [00:00<00:00, 38.81it/s]
Test: [   0/  26]	Loss 0.386 (0.386)	test_acc   0.85 (  0.85)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.386 (0.386)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.386 (0.380)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.386 (0.380)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.368 (0.375)	test_acc   0.84 (  0.85)	test_minacc   0.03 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.368 (0.375)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.03 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.359 (0.376)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.359 (0.376)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.86it/s]
Test: [  0/  1]	Loss 1.480 (1.480)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.480 (1.480)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.480 (1.480)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.480 (1.480)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/55/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0381 (0.0508)	validation_time 0.0003 (0.0024)	train_time 0.0377 (0.0472)
record: (train_acc, test_acc) (0.8494000195860862, 0.1210000067949295)
last accs (train_acc, test_acc) (0.8494000195860862, 0.1210000067949295)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.90it/s] 19%|#9        | 5/26 [00:00<00:01, 20.80it/s] 35%|###4      | 9/26 [00:00<00:00, 25.94it/s] 50%|#####     | 13/26 [00:00<00:00, 28.88it/s] 65%|######5   | 17/26 [00:00<00:00, 30.53it/s] 81%|########  | 21/26 [00:00<00:00, 31.76it/s] 96%|#########6| 25/26 [00:00<00:00, 32.79it/s]100%|##########| 26/26 [00:00<00:00, 27.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 2.134 (2.613)	train_nll   0.35 (  0.38)	train_penalty   0.02 (  0.04)	weight_norm   1.79 (  2.23)	train_acc   0.85 (  0.85)	train_minacc   0.29 (  0.09)	train_majacc   0.94 (  0.98)	train_corr   0.00 (  0.00)	l1 6.9948 (7.1817)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 11.68it/s] 31%|###       | 8/26 [00:00<00:00, 33.59it/s]                                               31%|###       | 8/26 [00:00<00:00, 33.59it/s] 54%|#####3    | 14/26 [00:00<00:00, 39.91it/s] 77%|#######6  | 20/26 [00:00<00:00, 45.76it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 45.76it/s]100%|##########| 26/26 [00:00<00:00, 49.53it/s]100%|##########| 26/26 [00:00<00:00, 38.48it/s]
Test: [   0/  26]	Loss 0.384 (0.384)	test_acc   0.85 (  0.85)	test_minacc   0.34 (  0.34)	test_majacc   0.94 (  0.94)	Loss_d 0.384 (0.384)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.85 (  0.85)
Test: [  10/  26]	Loss 0.394 (0.385)	test_acc   0.84 (  0.84)	test_minacc   0.32 (  0.27)	test_majacc   0.94 (  0.93)	Loss_d 0.394 (0.385)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.32 (  0.27)	test_majacc_d   0.94 (  0.93)	test_corr_d   0.82 (  0.84)
Test: [  20/  26]	Loss 0.349 (0.373)	test_acc   0.86 (  0.84)	test_minacc   0.34 (  0.30)	test_majacc   0.96 (  0.94)	Loss_d 0.349 (0.373)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.34 (  0.30)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.83 (  0.84)
Test: [  26/  26]	Loss 0.329 (0.372)	test_acc   0.86 (  0.84)	test_minacc   0.26 (  0.30)	test_majacc   0.96 (  0.94)	Loss_d 0.329 (0.372)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.26 (  0.30)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.87 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.14it/s]
Test: [  0/  1]	Loss 1.312 (1.312)	test_acc   0.33 (  0.33)	test_minacc   0.26 (  0.26)	test_majacc   0.95 (  0.95)	Loss_d 1.312 (1.312)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.58 (  0.58)
Test: [  1/  1]	Loss 1.312 (1.312)	test_acc   0.33 (  0.33)	test_minacc   0.26 (  0.26)	test_majacc   0.95 (  0.95)	Loss_d 1.312 (1.312)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.58 (  0.58)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/55/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0383 (0.0477)	validation_time 0.0003 (0.0019)	train_time 0.0379 (0.0449)
record: (train_acc, test_acc) (0.8421000235080719, 0.32600000500679016)
last accs (train_acc, test_acc) (0.8421000235080719, 0.32600000500679016)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.55it/s] 19%|#9        | 5/26 [00:00<00:01, 20.64it/s] 35%|###4      | 9/26 [00:00<00:00, 26.56it/s] 50%|#####     | 13/26 [00:00<00:00, 29.17it/s] 65%|######5   | 17/26 [00:00<00:00, 31.17it/s] 81%|########  | 21/26 [00:00<00:00, 32.36it/s] 96%|#########6| 25/26 [00:00<00:00, 33.20it/s]100%|##########| 26/26 [00:00<00:00, 27.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.491 (1.807)	train_nll   0.33 (  0.37)	train_penalty   0.02 (  0.03)	weight_norm   1.16 (  1.44)	train_acc   0.85 (  0.85)	train_minacc   0.26 (  0.17)	train_majacc   0.94 (  0.97)	train_corr   0.00 (  0.00)	l1 6.5426 (6.7813)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.37it/s] 27%|##6       | 7/26 [00:00<00:00, 31.63it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.63it/s] 50%|#####     | 13/26 [00:00<00:00, 39.38it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.01it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.01it/s] 96%|#########6| 25/26 [00:00<00:00, 46.85it/s]100%|##########| 26/26 [00:00<00:00, 37.96it/s]
Test: [   0/  26]	Loss 0.379 (0.379)	test_acc   0.84 (  0.84)	test_minacc   0.16 (  0.16)	test_majacc   0.97 (  0.97)	Loss_d 0.379 (0.379)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.370 (0.364)	test_acc   0.86 (  0.85)	test_minacc   0.22 (  0.15)	test_majacc   0.98 (  0.97)	Loss_d 0.370 (0.364)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.22 (  0.15)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.92 (  0.92)
Test: [  20/  26]	Loss 0.345 (0.357)	test_acc   0.86 (  0.85)	test_minacc   0.25 (  0.15)	test_majacc   0.98 (  0.97)	Loss_d 0.345 (0.357)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.25 (  0.15)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.91 (  0.92)
Test: [  26/  26]	Loss 0.303 (0.357)	test_acc   0.86 (  0.85)	test_minacc   0.11 (  0.15)	test_majacc   0.99 (  0.97)	Loss_d 0.303 (0.357)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.11 (  0.15)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.94 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.04it/s]
Test: [  0/  1]	Loss 1.602 (1.602)	test_acc   0.24 (  0.24)	test_minacc   0.15 (  0.15)	test_majacc   1.00 (  1.00)	Loss_d 1.602 (1.602)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.15 (  0.15)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.81 (  0.81)
Test: [  1/  1]	Loss 1.602 (1.602)	test_acc   0.24 (  0.24)	test_minacc   0.15 (  0.15)	test_majacc   1.00 (  1.00)	Loss_d 1.602 (1.602)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.15 (  0.15)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.81 (  0.81)
Overall Timing[  4/  1]	epoch_time 0.0371 (0.0456)	validation_time 0.0003 (0.0016)	train_time 0.0368 (0.0433)
record: (train_acc, test_acc) (0.8421000235080719, 0.32600000500679016)
last accs (train_acc, test_acc) (0.8514000278115272, 0.23500001430511475)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.28it/s] 19%|#9        | 5/26 [00:00<00:00, 21.61it/s] 35%|###4      | 9/26 [00:00<00:00, 27.14it/s] 50%|#####     | 13/26 [00:00<00:00, 30.33it/s] 65%|######5   | 17/26 [00:00<00:00, 32.12it/s] 81%|########  | 21/26 [00:00<00:00, 33.37it/s] 96%|#########6| 25/26 [00:00<00:00, 33.40it/s]100%|##########| 26/26 [00:00<00:00, 28.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.071 (1.296)	train_nll   0.30 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.77 (  0.95)	train_acc   0.88 (  0.85)	train_minacc   0.40 (  0.19)	train_majacc   0.96 (  0.97)	train_corr   0.00 (  0.00)	l1 6.7751 (6.6354)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.45it/s] 27%|##6       | 7/26 [00:00<00:00, 36.82it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.82it/s] 50%|#####     | 13/26 [00:00<00:00, 41.59it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.49it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.49it/s] 96%|#########6| 25/26 [00:00<00:00, 48.11it/s]100%|##########| 26/26 [00:00<00:00, 39.67it/s]
Test: [   0/  26]	Loss 0.372 (0.372)	test_acc   0.83 (  0.83)	test_minacc   0.23 (  0.23)	test_majacc   0.94 (  0.94)	Loss_d 0.372 (0.372)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.381 (0.371)	test_acc   0.84 (  0.83)	test_minacc   0.27 (  0.26)	test_majacc   0.94 (  0.93)	Loss_d 0.381 (0.371)	test_acc_d   0.84 (  0.83)	test_minacc_d   0.27 (  0.26)	test_majacc_d   0.94 (  0.93)	test_corr_d   0.88 (  0.88)
Test: [  20/  26]	Loss 0.323 (0.363)	test_acc   0.85 (  0.83)	test_minacc   0.41 (  0.27)	test_majacc   0.94 (  0.93)	Loss_d 0.323 (0.363)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.41 (  0.27)	test_majacc_d   0.94 (  0.93)	test_corr_d   0.86 (  0.88)
Test: [  26/  26]	Loss 0.280 (0.361)	test_acc   0.89 (  0.83)	test_minacc   0.34 (  0.27)	test_majacc   0.98 (  0.93)	Loss_d 0.280 (0.361)	test_acc_d   0.89 (  0.83)	test_minacc_d   0.34 (  0.27)	test_majacc_d   0.98 (  0.93)	test_corr_d   0.91 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.22it/s]
Test: [  0/  1]	Loss 1.620 (1.620)	test_acc   0.30 (  0.30)	test_minacc   0.23 (  0.23)	test_majacc   0.97 (  0.97)	Loss_d 1.620 (1.620)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.73 (  0.73)
Test: [  1/  1]	Loss 1.620 (1.620)	test_acc   0.30 (  0.30)	test_minacc   0.23 (  0.23)	test_majacc   0.97 (  0.97)	Loss_d 1.620 (1.620)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.73 (  0.73)
Overall Timing[  5/  1]	epoch_time 0.0375 (0.0442)	validation_time 0.0004 (0.0014)	train_time 0.0371 (0.0422)
record: (train_acc, test_acc) (0.8421000235080719, 0.32600000500679016)
last accs (train_acc, test_acc) (0.832900026679039, 0.30100002884864807)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.80it/s] 19%|#9        | 5/26 [00:00<00:00, 22.10it/s] 35%|###4      | 9/26 [00:00<00:00, 26.42it/s] 50%|#####     | 13/26 [00:00<00:00, 29.49it/s] 65%|######5   | 17/26 [00:00<00:00, 31.37it/s] 81%|########  | 21/26 [00:00<00:00, 31.49it/s] 96%|#########6| 25/26 [00:00<00:00, 32.70it/s]100%|##########| 26/26 [00:00<00:00, 27.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.823 (0.997)	train_nll   0.29 (  0.36)	train_penalty   0.02 (  0.03)	weight_norm   0.53 (  0.63)	train_acc   0.89 (  0.85)	train_minacc   0.23 (  0.17)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 7.2987 (6.8956)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.58it/s] 27%|##6       | 7/26 [00:00<00:00, 34.06it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.06it/s] 50%|#####     | 13/26 [00:00<00:00, 41.42it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.22it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.22it/s] 96%|#########6| 25/26 [00:00<00:00, 47.17it/s]100%|##########| 26/26 [00:00<00:00, 38.99it/s]
Test: [   0/  26]	Loss 0.375 (0.375)	test_acc   0.83 (  0.83)	test_minacc   0.46 (  0.46)	test_majacc   0.89 (  0.89)	Loss_d 0.375 (0.375)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.81 (  0.81)
Test: [  10/  26]	Loss 0.395 (0.380)	test_acc   0.82 (  0.82)	test_minacc   0.42 (  0.42)	test_majacc   0.90 (  0.89)	Loss_d 0.395 (0.380)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.90 (  0.89)	test_corr_d   0.80 (  0.80)
Test: [  20/  26]	Loss 0.335 (0.366)	test_acc   0.84 (  0.83)	test_minacc   0.45 (  0.43)	test_majacc   0.92 (  0.90)	Loss_d 0.335 (0.366)	test_acc_d   0.84 (  0.83)	test_minacc_d   0.45 (  0.43)	test_majacc_d   0.92 (  0.90)	test_corr_d   0.80 (  0.81)
Test: [  26/  26]	Loss 0.274 (0.363)	test_acc   0.87 (  0.83)	test_minacc   0.57 (  0.44)	test_majacc   0.92 (  0.90)	Loss_d 0.274 (0.363)	test_acc_d   0.87 (  0.83)	test_minacc_d   0.57 (  0.44)	test_majacc_d   0.92 (  0.90)	test_corr_d   0.83 (  0.81)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.39it/s]
Test: [  0/  1]	Loss 1.410 (1.410)	test_acc   0.46 (  0.46)	test_minacc   0.41 (  0.41)	test_majacc   0.94 (  0.94)	Loss_d 1.410 (1.410)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.40 (  0.40)
Test: [  1/  1]	Loss 1.410 (1.410)	test_acc   0.46 (  0.46)	test_minacc   0.41 (  0.41)	test_majacc   0.94 (  0.94)	Loss_d 1.410 (1.410)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.40 (  0.40)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/55/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0375 (0.0433)	validation_time 0.0003 (0.0012)	train_time 0.0372 (0.0415)
record: (train_acc, test_acc) (0.8295000213980674, 0.46300002932548523)
last accs (train_acc, test_acc) (0.8295000213980674, 0.46300002932548523)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.43it/s] 19%|#9        | 5/26 [00:00<00:01, 18.62it/s] 35%|###4      | 9/26 [00:00<00:00, 24.62it/s] 50%|#####     | 13/26 [00:00<00:00, 28.17it/s] 65%|######5   | 17/26 [00:00<00:00, 30.35it/s] 81%|########  | 21/26 [00:00<00:00, 31.67it/s] 96%|#########6| 25/26 [00:00<00:00, 32.14it/s]100%|##########| 26/26 [00:00<00:00, 26.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.672 (0.785)	train_nll   0.31 (  0.35)	train_penalty   0.01 (  0.03)	weight_norm   0.36 (  0.44)	train_acc   0.85 (  0.85)	train_minacc   0.57 (  0.23)	train_majacc   0.89 (  0.96)	train_corr   0.00 (  0.00)	l1 8.5547 (7.9204)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.42it/s] 27%|##6       | 7/26 [00:00<00:00, 28.24it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.24it/s] 50%|#####     | 13/26 [00:00<00:00, 35.16it/s] 73%|#######3  | 19/26 [00:00<00:00, 42.69it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 42.69it/s] 96%|#########6| 25/26 [00:00<00:00, 44.17it/s]100%|##########| 26/26 [00:00<00:00, 35.26it/s]
Test: [   0/  26]	Loss 0.421 (0.421)	test_acc   0.81 (  0.81)	test_minacc   0.44 (  0.44)	test_majacc   0.87 (  0.87)	Loss_d 0.421 (0.421)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.77 (  0.77)
Test: [  10/  26]	Loss 0.430 (0.410)	test_acc   0.80 (  0.79)	test_minacc   0.45 (  0.45)	test_majacc   0.86 (  0.85)	Loss_d 0.430 (0.410)	test_acc_d   0.80 (  0.79)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.86 (  0.85)	test_corr_d   0.75 (  0.75)
Test: [  20/  26]	Loss 0.365 (0.397)	test_acc   0.81 (  0.80)	test_minacc   0.48 (  0.45)	test_majacc   0.87 (  0.86)	Loss_d 0.365 (0.397)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.48 (  0.45)	test_majacc_d   0.87 (  0.86)	test_corr_d   0.75 (  0.76)
Test: [  26/  26]	Loss 0.282 (0.394)	test_acc   0.88 (  0.80)	test_minacc   0.69 (  0.46)	test_majacc   0.91 (  0.86)	Loss_d 0.282 (0.394)	test_acc_d   0.88 (  0.80)	test_minacc_d   0.69 (  0.46)	test_majacc_d   0.91 (  0.86)	test_corr_d   0.77 (  0.76)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.10it/s]
Test: [  0/  1]	Loss 1.417 (1.417)	test_acc   0.47 (  0.47)	test_minacc   0.42 (  0.42)	test_majacc   0.92 (  0.92)	Loss_d 1.417 (1.417)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.38 (  0.38)
Test: [  1/  1]	Loss 1.417 (1.417)	test_acc   0.47 (  0.47)	test_minacc   0.42 (  0.42)	test_majacc   0.92 (  0.92)	Loss_d 1.417 (1.417)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.38 (  0.38)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/55/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0387 (0.0427)	validation_time 0.0004 (0.0011)	train_time 0.0382 (0.0411)
record: (train_acc, test_acc) (0.8031000233888627, 0.46800002455711365)
last accs (train_acc, test_acc) (0.8031000233888627, 0.46800002455711365)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.85it/s] 19%|#9        | 5/26 [00:00<00:00, 21.99it/s] 35%|###4      | 9/26 [00:00<00:00, 26.25it/s] 50%|#####     | 13/26 [00:00<00:00, 29.46it/s] 65%|######5   | 17/26 [00:00<00:00, 31.19it/s] 81%|########  | 21/26 [00:00<00:00, 31.74it/s] 96%|#########6| 25/26 [00:00<00:00, 32.69it/s]100%|##########| 26/26 [00:00<00:00, 27.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.555 (0.650)	train_nll   0.30 (  0.34)	train_penalty   0.01 (  0.02)	weight_norm   0.26 (  0.31)	train_acc   0.88 (  0.85)	train_minacc   0.43 (  0.21)	train_majacc   0.95 (  0.97)	train_corr   0.00 (  0.00)	l1 10.1694 (9.3660)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.68it/s] 27%|##6       | 7/26 [00:00<00:00, 32.28it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.28it/s] 50%|#####     | 13/26 [00:00<00:00, 39.66it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.04it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.04it/s] 96%|#########6| 25/26 [00:00<00:00, 46.96it/s]100%|##########| 26/26 [00:00<00:00, 38.59it/s]
Test: [   0/  26]	Loss 0.361 (0.361)	test_acc   0.85 (  0.85)	test_minacc   0.48 (  0.48)	test_majacc   0.91 (  0.91)	Loss_d 0.361 (0.361)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.82 (  0.82)
Test: [  10/  26]	Loss 0.385 (0.363)	test_acc   0.83 (  0.83)	test_minacc   0.38 (  0.43)	test_majacc   0.91 (  0.90)	Loss_d 0.385 (0.363)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.38 (  0.43)	test_majacc_d   0.91 (  0.90)	test_corr_d   0.80 (  0.81)
Test: [  20/  26]	Loss 0.310 (0.352)	test_acc   0.86 (  0.84)	test_minacc   0.58 (  0.44)	test_majacc   0.91 (  0.90)	Loss_d 0.310 (0.352)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.58 (  0.44)	test_majacc_d   0.91 (  0.90)	test_corr_d   0.80 (  0.81)
Test: [  26/  26]	Loss 0.264 (0.350)	test_acc   0.90 (  0.84)	test_minacc   0.60 (  0.45)	test_majacc   0.95 (  0.91)	Loss_d 0.264 (0.350)	test_acc_d   0.90 (  0.84)	test_minacc_d   0.60 (  0.45)	test_majacc_d   0.95 (  0.91)	test_corr_d   0.83 (  0.81)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.74it/s]
Test: [  0/  1]	Loss 1.394 (1.394)	test_acc   0.44 (  0.44)	test_minacc   0.39 (  0.39)	test_majacc   0.96 (  0.96)	Loss_d 1.394 (1.394)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.42 (  0.42)
Test: [  1/  1]	Loss 1.394 (1.394)	test_acc   0.44 (  0.44)	test_minacc   0.39 (  0.39)	test_majacc   0.96 (  0.96)	Loss_d 1.394 (1.394)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.42 (  0.42)
Overall Timing[  8/  1]	epoch_time 0.0367 (0.0420)	validation_time 0.0003 (0.0010)	train_time 0.0364 (0.0406)
record: (train_acc, test_acc) (0.8031000233888627, 0.46800002455711365)
last accs (train_acc, test_acc) (0.83780002784729, 0.44300001859664917)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.00it/s] 19%|#9        | 5/26 [00:00<00:01, 17.75it/s] 35%|###4      | 9/26 [00:00<00:00, 23.77it/s] 46%|####6     | 12/26 [00:00<00:00, 25.28it/s] 62%|######1   | 16/26 [00:00<00:00, 28.42it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.12it/s] 92%|#########2| 24/26 [00:00<00:00, 31.42it/s]100%|##########| 26/26 [00:01<00:00, 24.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.496 (0.555)	train_nll   0.31 (  0.34)	train_penalty   0.01 (  0.02)	weight_norm   0.19 (  0.22)	train_acc   0.85 (  0.85)	train_minacc   0.37 (  0.26)	train_majacc   0.93 (  0.96)	train_corr   0.00 (  0.00)	l1 11.9952 (11.0578)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.56it/s] 27%|##6       | 7/26 [00:00<00:00, 30.31it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.31it/s] 50%|#####     | 13/26 [00:00<00:00, 38.27it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.62it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.62it/s] 96%|#########6| 25/26 [00:00<00:00, 46.03it/s]100%|##########| 26/26 [00:00<00:00, 37.20it/s]
Test: [   0/  26]	Loss 0.366 (0.366)	test_acc   0.83 (  0.83)	test_minacc   0.46 (  0.46)	test_majacc   0.90 (  0.90)	Loss_d 0.366 (0.366)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.82 (  0.82)
Test: [  10/  26]	Loss 0.379 (0.369)	test_acc   0.83 (  0.82)	test_minacc   0.42 (  0.42)	test_majacc   0.90 (  0.89)	Loss_d 0.379 (0.369)	test_acc_d   0.83 (  0.82)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.90 (  0.89)	test_corr_d   0.81 (  0.81)
Test: [  20/  26]	Loss 0.332 (0.358)	test_acc   0.85 (  0.83)	test_minacc   0.52 (  0.42)	test_majacc   0.92 (  0.90)	Loss_d 0.332 (0.358)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.52 (  0.42)	test_majacc_d   0.92 (  0.90)	test_corr_d   0.81 (  0.82)
Test: [  26/  26]	Loss 0.275 (0.357)	test_acc   0.88 (  0.83)	test_minacc   0.54 (  0.42)	test_majacc   0.93 (  0.90)	Loss_d 0.275 (0.357)	test_acc_d   0.88 (  0.83)	test_minacc_d   0.54 (  0.42)	test_majacc_d   0.93 (  0.90)	test_corr_d   0.83 (  0.82)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.27it/s]
Test: [  0/  1]	Loss 1.414 (1.414)	test_acc   0.45 (  0.45)	test_minacc   0.40 (  0.40)	test_majacc   0.94 (  0.94)	Loss_d 1.414 (1.414)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.46 (  0.46)
Test: [  1/  1]	Loss 1.414 (1.414)	test_acc   0.45 (  0.45)	test_minacc   0.40 (  0.40)	test_majacc   0.94 (  0.94)	Loss_d 1.414 (1.414)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.46 (  0.46)
Overall Timing[  9/  1]	epoch_time 0.0387 (0.0417)	validation_time 0.0004 (0.0010)	train_time 0.0383 (0.0403)
record: (train_acc, test_acc) (0.8031000233888627, 0.46800002455711365)
last accs (train_acc, test_acc) (0.8272000231146812, 0.453000009059906)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.74it/s] 19%|#9        | 5/26 [00:00<00:00, 23.63it/s] 35%|###4      | 9/26 [00:00<00:00, 28.16it/s] 50%|#####     | 13/26 [00:00<00:00, 30.47it/s] 65%|######5   | 17/26 [00:00<00:00, 31.88it/s] 81%|########  | 21/26 [00:00<00:00, 32.06it/s] 96%|#########6| 25/26 [00:00<00:00, 33.04it/s]100%|##########| 26/26 [00:00<00:00, 28.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.464 (0.515)	train_nll   0.31 (  0.34)	train_penalty   0.02 (  0.02)	weight_norm   0.16 (  0.17)	train_acc   0.86 (  0.85)	train_minacc   0.23 (  0.20)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 13.7143 (12.8349)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.69it/s] 27%|##6       | 7/26 [00:00<00:00, 32.03it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.03it/s] 50%|#####     | 13/26 [00:00<00:00, 42.60it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.39it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.39it/s] 96%|#########6| 25/26 [00:00<00:00, 48.74it/s]100%|##########| 26/26 [00:00<00:00, 39.97it/s]
Test: [   0/  26]	Loss 0.339 (0.339)	test_acc   0.84 (  0.84)	test_minacc   0.15 (  0.15)	test_majacc   0.97 (  0.97)	Loss_d 0.339 (0.339)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.347 (0.341)	test_acc   0.85 (  0.85)	test_minacc   0.18 (  0.22)	test_majacc   0.98 (  0.96)	Loss_d 0.347 (0.341)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.18 (  0.22)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.90 (  0.90)
Test: [  20/  26]	Loss 0.308 (0.332)	test_acc   0.87 (  0.86)	test_minacc   0.28 (  0.22)	test_majacc   0.98 (  0.97)	Loss_d 0.308 (0.332)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.28 (  0.22)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.89 (  0.90)
Test: [  26/  26]	Loss 0.275 (0.330)	test_acc   0.87 (  0.86)	test_minacc   0.20 (  0.22)	test_majacc   0.98 (  0.97)	Loss_d 0.275 (0.330)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.20 (  0.22)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.91 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 56.60it/s]
Test: [  0/  1]	Loss 1.547 (1.547)	test_acc   0.30 (  0.30)	test_minacc   0.22 (  0.22)	test_majacc   1.00 (  1.00)	Loss_d 1.547 (1.547)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.22 (  0.22)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.69 (  0.69)
Test: [  1/  1]	Loss 1.547 (1.547)	test_acc   0.30 (  0.30)	test_minacc   0.22 (  0.22)	test_majacc   1.00 (  1.00)	Loss_d 1.547 (1.547)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.22 (  0.22)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.69 (  0.69)
Overall Timing[ 10/  1]	epoch_time 0.0383 (0.0414)	validation_time 0.0004 (0.0009)	train_time 0.0379 (0.0401)
record: (train_acc, test_acc) (0.8031000233888627, 0.46800002455711365)
last accs (train_acc, test_acc) (0.8557000221610069, 0.29600000381469727)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.47it/s] 19%|#9        | 5/26 [00:00<00:00, 23.37it/s] 35%|###4      | 9/26 [00:00<00:00, 28.13it/s] 50%|#####     | 13/26 [00:00<00:00, 30.22it/s] 65%|######5   | 17/26 [00:00<00:00, 31.62it/s] 81%|########  | 21/26 [00:00<00:00, 32.84it/s] 96%|#########6| 25/26 [00:00<00:00, 33.35it/s]100%|##########| 26/26 [00:00<00:00, 28.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.460 (0.498)	train_nll   0.32 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.14 (  0.15)	train_acc   0.86 (  0.85)	train_minacc   0.31 (  0.18)	train_majacc   0.94 (  0.97)	train_corr   0.00 (  0.00)	l1 15.2653 (14.4401)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.09it/s] 23%|##3       | 6/26 [00:00<00:00, 29.66it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.66it/s] 46%|####6     | 12/26 [00:00<00:00, 41.07it/s] 69%|######9   | 18/26 [00:00<00:00, 44.07it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.07it/s] 92%|#########2| 24/26 [00:00<00:00, 48.73it/s]100%|##########| 26/26 [00:00<00:00, 39.44it/s]
Test: [   0/  26]	Loss 0.318 (0.318)	test_acc   0.87 (  0.87)	test_minacc   0.44 (  0.44)	test_majacc   0.95 (  0.95)	Loss_d 0.318 (0.318)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.341 (0.329)	test_acc   0.87 (  0.86)	test_minacc   0.37 (  0.34)	test_majacc   0.97 (  0.95)	Loss_d 0.341 (0.329)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.37 (  0.34)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.86 (  0.87)
Test: [  20/  26]	Loss 0.289 (0.323)	test_acc   0.88 (  0.86)	test_minacc   0.45 (  0.35)	test_majacc   0.96 (  0.95)	Loss_d 0.289 (0.323)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.45 (  0.35)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.85 (  0.87)
Test: [  26/  26]	Loss 0.278 (0.322)	test_acc   0.88 (  0.86)	test_minacc   0.37 (  0.35)	test_majacc   0.96 (  0.95)	Loss_d 0.278 (0.322)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.37 (  0.35)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.88 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.15it/s]
Test: [  0/  1]	Loss 1.513 (1.513)	test_acc   0.39 (  0.39)	test_minacc   0.33 (  0.33)	test_majacc   0.96 (  0.96)	Loss_d 1.513 (1.513)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.53 (  0.53)
Test: [  1/  1]	Loss 1.513 (1.513)	test_acc   0.39 (  0.39)	test_minacc   0.33 (  0.33)	test_majacc   0.96 (  0.96)	Loss_d 1.513 (1.513)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.53 (  0.53)
Overall Timing[ 11/  1]	epoch_time 0.0376 (0.0411)	validation_time 0.0003 (0.0009)	train_time 0.0373 (0.0399)
record: (train_acc, test_acc) (0.8031000233888627, 0.46800002455711365)
last accs (train_acc, test_acc) (0.8593000246882438, 0.39100003242492676)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.55it/s] 19%|#9        | 5/26 [00:00<00:00, 22.87it/s] 35%|###4      | 9/26 [00:00<00:00, 27.89it/s] 50%|#####     | 13/26 [00:00<00:00, 30.47it/s] 65%|######5   | 17/26 [00:00<00:00, 32.24it/s] 81%|########  | 21/26 [00:00<00:00, 33.23it/s] 96%|#########6| 25/26 [00:00<00:00, 33.74it/s]100%|##########| 26/26 [00:00<00:00, 28.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.439 (0.472)	train_nll   0.33 (  0.35)	train_penalty   0.01 (  0.03)	weight_norm   0.11 (  0.12)	train_acc   0.84 (  0.85)	train_minacc   0.34 (  0.19)	train_majacc   0.92 (  0.97)	train_corr   0.00 (  0.00)	l1 16.2544 (15.8704)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.05it/s] 31%|###       | 8/26 [00:00<00:00, 41.04it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.04it/s] 50%|#####     | 13/26 [00:00<00:00, 40.24it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.41it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.41it/s] 96%|#########6| 25/26 [00:00<00:00, 47.74it/s]100%|##########| 26/26 [00:00<00:00, 40.77it/s]
Test: [   0/  26]	Loss 0.324 (0.324)	test_acc   0.86 (  0.86)	test_minacc   0.26 (  0.26)	test_majacc   0.97 (  0.97)	Loss_d 0.324 (0.324)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.341 (0.329)	test_acc   0.86 (  0.86)	test_minacc   0.32 (  0.27)	test_majacc   0.96 (  0.96)	Loss_d 0.341 (0.329)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.32 (  0.27)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  20/  26]	Loss 0.303 (0.322)	test_acc   0.86 (  0.86)	test_minacc   0.34 (  0.28)	test_majacc   0.97 (  0.96)	Loss_d 0.303 (0.322)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.34 (  0.28)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.86 (  0.88)
Test: [  26/  26]	Loss 0.284 (0.321)	test_acc   0.86 (  0.86)	test_minacc   0.31 (  0.29)	test_majacc   0.94 (  0.96)	Loss_d 0.284 (0.321)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.31 (  0.29)	test_majacc_d   0.94 (  0.96)	test_corr_d   0.87 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.02it/s]
Test: [  0/  1]	Loss 1.473 (1.473)	test_acc   0.35 (  0.35)	test_minacc   0.28 (  0.28)	test_majacc   0.98 (  0.98)	Loss_d 1.473 (1.473)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.63 (  0.63)
Test: [  1/  1]	Loss 1.473 (1.473)	test_acc   0.35 (  0.35)	test_minacc   0.28 (  0.28)	test_majacc   0.98 (  0.98)	Loss_d 1.473 (1.473)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.63 (  0.63)
Overall Timing[ 12/  1]	epoch_time 0.0374 (0.0408)	validation_time 0.0004 (0.0008)	train_time 0.0369 (0.0397)
record: (train_acc, test_acc) (0.8031000233888627, 0.46800002455711365)
last accs (train_acc, test_acc) (0.8616000259518624, 0.3500000238418579)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.52it/s] 27%|##6       | 7/26 [00:00<00:00, 28.24it/s] 42%|####2     | 11/26 [00:00<00:00, 30.19it/s] 58%|#####7    | 15/26 [00:00<00:00, 31.76it/s] 73%|#######3  | 19/26 [00:00<00:00, 32.04it/s] 88%|########8 | 23/26 [00:00<00:00, 32.78it/s]100%|##########| 26/26 [00:00<00:00, 29.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.400 (0.435)	train_nll   0.31 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.09 (  0.10)	train_acc   0.87 (  0.85)	train_minacc   0.20 (  0.25)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 17.7968 (17.0953)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.59it/s] 23%|##3       | 6/26 [00:00<00:00, 27.58it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.58it/s] 46%|####6     | 12/26 [00:00<00:00, 39.02it/s] 65%|######5   | 17/26 [00:00<00:00, 41.14it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.14it/s] 88%|########8 | 23/26 [00:00<00:00, 46.34it/s]100%|##########| 26/26 [00:00<00:00, 36.89it/s]
Test: [   0/  26]	Loss 0.343 (0.343)	test_acc   0.86 (  0.86)	test_minacc   0.20 (  0.20)	test_majacc   0.99 (  0.99)	Loss_d 0.343 (0.343)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.346 (0.321)	test_acc   0.86 (  0.86)	test_minacc   0.17 (  0.18)	test_majacc   0.99 (  0.98)	Loss_d 0.346 (0.321)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.17 (  0.18)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  20/  26]	Loss 0.304 (0.316)	test_acc   0.87 (  0.86)	test_minacc   0.33 (  0.20)	test_majacc   0.98 (  0.98)	Loss_d 0.304 (0.316)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.33 (  0.20)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.91)
Test: [  26/  26]	Loss 0.270 (0.317)	test_acc   0.89 (  0.86)	test_minacc   0.23 (  0.21)	test_majacc   1.00 (  0.98)	Loss_d 0.270 (0.317)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.23 (  0.21)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.92 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.50it/s]
Test: [  0/  1]	Loss 1.672 (1.672)	test_acc   0.24 (  0.24)	test_minacc   0.15 (  0.15)	test_majacc   1.00 (  1.00)	Loss_d 1.672 (1.672)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.15 (  0.15)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.75 (  0.75)
Test: [  1/  1]	Loss 1.672 (1.672)	test_acc   0.24 (  0.24)	test_minacc   0.15 (  0.15)	test_majacc   1.00 (  1.00)	Loss_d 1.672 (1.672)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.15 (  0.15)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.75 (  0.75)
Overall Timing[ 13/  1]	epoch_time 0.0379 (0.0406)	validation_time 0.0004 (0.0008)	train_time 0.0375 (0.0395)
record: (train_acc, test_acc) (0.8031000233888627, 0.46800002455711365)
last accs (train_acc, test_acc) (0.8622000191211701, 0.2370000183582306)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.42it/s] 15%|#5        | 4/26 [00:00<00:01, 17.41it/s] 31%|###       | 8/26 [00:00<00:00, 24.03it/s] 46%|####6     | 12/26 [00:00<00:00, 27.96it/s] 62%|######1   | 16/26 [00:00<00:00, 30.17it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.65it/s] 92%|#########2| 24/26 [00:00<00:00, 32.47it/s]100%|##########| 26/26 [00:00<00:00, 26.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.395 (0.413)	train_nll   0.31 (  0.32)	train_penalty   0.02 (  0.02)	weight_norm   0.09 (  0.09)	train_acc   0.87 (  0.86)	train_minacc   0.31 (  0.29)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 18.9952 (18.4944)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.21it/s] 27%|##6       | 7/26 [00:00<00:00, 31.67it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.67it/s] 50%|#####     | 13/26 [00:00<00:00, 39.96it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.51it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.51it/s] 96%|#########6| 25/26 [00:00<00:00, 46.88it/s]100%|##########| 26/26 [00:00<00:00, 38.04it/s]
Test: [   0/  26]	Loss 0.312 (0.312)	test_acc   0.87 (  0.87)	test_minacc   0.41 (  0.41)	test_majacc   0.96 (  0.96)	Loss_d 0.312 (0.312)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.313 (0.314)	test_acc   0.88 (  0.86)	test_minacc   0.43 (  0.38)	test_majacc   0.96 (  0.95)	Loss_d 0.313 (0.314)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.43 (  0.38)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.86 (  0.86)
Test: [  20/  26]	Loss 0.276 (0.308)	test_acc   0.88 (  0.86)	test_minacc   0.55 (  0.40)	test_majacc   0.94 (  0.95)	Loss_d 0.276 (0.308)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.55 (  0.40)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.84 (  0.86)
Test: [  26/  26]	Loss 0.267 (0.307)	test_acc   0.90 (  0.86)	test_minacc   0.49 (  0.40)	test_majacc   0.96 (  0.95)	Loss_d 0.267 (0.307)	test_acc_d   0.90 (  0.86)	test_minacc_d   0.49 (  0.40)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.88 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.72it/s]
Test: [  0/  1]	Loss 1.445 (1.445)	test_acc   0.37 (  0.37)	test_minacc   0.31 (  0.31)	test_majacc   0.97 (  0.97)	Loss_d 1.445 (1.445)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.54 (  0.54)
Test: [  1/  1]	Loss 1.445 (1.445)	test_acc   0.37 (  0.37)	test_minacc   0.31 (  0.31)	test_majacc   0.97 (  0.97)	Loss_d 1.445 (1.445)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.54 (  0.54)
Overall Timing[ 14/  1]	epoch_time 0.0397 (0.0405)	validation_time 0.0004 (0.0008)	train_time 0.0393 (0.0395)
record: (train_acc, test_acc) (0.8031000233888627, 0.46800002455711365)
last accs (train_acc, test_acc) (0.8643000167608261, 0.37400001287460327)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.66it/s] 19%|#9        | 5/26 [00:00<00:01, 20.68it/s] 35%|###4      | 9/26 [00:00<00:00, 25.97it/s] 50%|#####     | 13/26 [00:00<00:00, 29.25it/s] 65%|######5   | 17/26 [00:00<00:00, 31.18it/s] 81%|########  | 21/26 [00:00<00:00, 31.80it/s] 96%|#########6| 25/26 [00:00<00:00, 32.62it/s]100%|##########| 26/26 [00:00<00:00, 27.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.000 (0.166)	train_nll   0.67 (  0.46)	train_penalty   0.00 (  0.01)	weight_norm   0.12 (  0.09)	train_acc   0.62 (  0.78)	train_minacc   0.51 (  0.50)	train_majacc   0.64 (  0.83)	train_corr   0.00 (  0.00)	l1 18.2855 (18.8797)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.40it/s] 27%|##6       | 7/26 [00:00<00:00, 35.03it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.03it/s] 46%|####6     | 12/26 [00:00<00:00, 39.80it/s] 69%|######9   | 18/26 [00:00<00:00, 46.09it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.09it/s] 92%|#########2| 24/26 [00:00<00:00, 46.74it/s]100%|##########| 26/26 [00:00<00:00, 39.31it/s]
Test: [   0/  26]	Loss 0.663 (0.663)	test_acc   0.62 (  0.62)	test_minacc   0.57 (  0.57)	test_majacc   0.63 (  0.63)	Loss_d 0.663 (0.663)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.654 (0.648)	test_acc   0.65 (  0.64)	test_minacc   0.65 (  0.59)	test_majacc   0.65 (  0.64)	Loss_d 0.654 (0.648)	test_acc_d   0.65 (  0.64)	test_minacc_d   0.65 (  0.59)	test_majacc_d   0.65 (  0.64)	test_corr_d   0.24 (  0.24)
Test: [  20/  26]	Loss 0.651 (0.648)	test_acc   0.64 (  0.64)	test_minacc   0.61 (  0.59)	test_majacc   0.64 (  0.65)	Loss_d 0.651 (0.648)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.61 (  0.59)	test_majacc_d   0.64 (  0.65)	test_corr_d   0.21 (  0.24)
Test: [  26/  26]	Loss 0.663 (0.648)	test_acc   0.63 (  0.64)	test_minacc   0.49 (  0.59)	test_majacc   0.66 (  0.65)	Loss_d 0.663 (0.648)	test_acc_d   0.63 (  0.64)	test_minacc_d   0.49 (  0.59)	test_majacc_d   0.66 (  0.65)	test_corr_d   0.25 (  0.24)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.51it/s]
Test: [  0/  1]	Loss 0.657 (0.657)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.77 (  0.77)	Loss_d 0.657 (0.657)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.77 (  0.77)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.657 (0.657)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.77 (  0.77)	Loss_d 0.657 (0.657)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.77 (  0.77)	test_corr_d  -0.21 ( -0.21)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/55/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0378 (0.0404)	validation_time 0.0003 (0.0007)	train_time 0.0375 (0.0394)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.00it/s] 19%|#9        | 5/26 [00:00<00:00, 23.07it/s] 35%|###4      | 9/26 [00:00<00:00, 28.22it/s] 50%|#####     | 13/26 [00:00<00:00, 30.88it/s] 65%|######5   | 17/26 [00:00<00:00, 32.75it/s] 81%|########  | 21/26 [00:00<00:00, 33.56it/s] 96%|#########6| 25/26 [00:00<00:00, 34.05it/s]100%|##########| 26/26 [00:00<00:00, 28.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.14)	train_acc   0.47 (  0.57)	train_minacc   0.46 (  0.55)	train_majacc   0.47 (  0.57)	train_corr   0.00 (  0.00)	l1 17.9023 (18.0179)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.15it/s] 35%|###4      | 9/26 [00:00<00:00, 36.62it/s]                                               35%|###4      | 9/26 [00:00<00:00, 36.62it/s] 58%|#####7    | 15/26 [00:00<00:00, 44.67it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 44.67it/s] 81%|########  | 21/26 [00:00<00:00, 45.37it/s]100%|##########| 26/26 [00:00<00:00, 40.47it/s]
Test: [   0/  26]	Loss 0.697 (0.697)	test_acc   0.46 (  0.46)	test_minacc   0.49 (  0.49)	test_majacc   0.45 (  0.45)	Loss_d 0.697 (0.697)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.13 (  0.13)
Test: [  10/  26]	Loss 0.683 (0.681)	test_acc   0.50 (  0.51)	test_minacc   0.57 (  0.54)	test_majacc   0.48 (  0.51)	Loss_d 0.683 (0.681)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.57 (  0.54)	test_majacc_d   0.48 (  0.51)	test_corr_d   0.13 (  0.13)
Test: [  20/  26]	Loss 0.683 (0.681)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.54)	test_majacc   0.52 (  0.51)	Loss_d 0.683 (0.681)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.54)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.11 (  0.14)
Test: [  26/  26]	Loss 0.692 (0.680)	test_acc   0.47 (  0.51)	test_minacc   0.46 (  0.54)	test_majacc   0.47 (  0.51)	Loss_d 0.692 (0.680)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.46 (  0.54)	test_majacc_d   0.47 (  0.51)	test_corr_d   0.16 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.50it/s]
Test: [  0/  1]	Loss 0.673 (0.673)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.53 (  0.53)	Loss_d 0.673 (0.673)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.22 ( -0.22)
Test: [  1/  1]	Loss 0.673 (0.673)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.53 (  0.53)	Loss_d 0.673 (0.673)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.22 ( -0.22)
Overall Timing[ 16/  1]	epoch_time 0.0364 (0.0401)	validation_time 0.0003 (0.0007)	train_time 0.0361 (0.0392)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.513500012755394, 0.550000011920929)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.08it/s] 19%|#9        | 5/26 [00:00<00:01, 19.95it/s] 35%|###4      | 9/26 [00:00<00:00, 26.06it/s] 50%|#####     | 13/26 [00:00<00:00, 29.13it/s] 65%|######5   | 17/26 [00:00<00:00, 31.07it/s] 81%|########  | 21/26 [00:00<00:00, 32.41it/s] 96%|#########6| 25/26 [00:00<00:00, 33.24it/s]100%|##########| 26/26 [00:00<00:00, 27.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.47 (  0.52)	train_minacc   0.51 (  0.56)	train_majacc   0.47 (  0.51)	train_corr   0.00 (  0.00)	l1 17.8564 (17.8719)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.27it/s] 27%|##6       | 7/26 [00:00<00:00, 30.18it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.18it/s] 50%|#####     | 13/26 [00:00<00:00, 40.16it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.54it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.54it/s] 96%|#########6| 25/26 [00:00<00:00, 47.28it/s]100%|##########| 26/26 [00:00<00:00, 38.28it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.51 (  0.51)	test_majacc   0.46 (  0.46)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.685 (0.684)	test_acc   0.49 (  0.50)	test_minacc   0.60 (  0.54)	test_majacc   0.47 (  0.50)	Loss_d 0.685 (0.684)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.60 (  0.54)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.10 (  0.09)
Test: [  20/  26]	Loss 0.685 (0.684)	test_acc   0.50 (  0.50)	test_minacc   0.45 (  0.54)	test_majacc   0.51 (  0.50)	Loss_d 0.685 (0.684)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.45 (  0.54)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.08 (  0.10)
Test: [  26/  26]	Loss 0.691 (0.684)	test_acc   0.47 (  0.51)	test_minacc   0.51 (  0.55)	test_majacc   0.47 (  0.50)	Loss_d 0.691 (0.684)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.51 (  0.55)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.11 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.31it/s]
Test: [  0/  1]	Loss 0.676 (0.676)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.56 (  0.56)	Loss_d 0.676 (0.676)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.676 (0.676)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.56 (  0.56)	Loss_d 0.676 (0.676)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 17/  1]	epoch_time 0.0367 (0.0399)	validation_time 0.0003 (0.0007)	train_time 0.0363 (0.0390)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.506400013178587, 0.5440000295639038)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.70it/s] 19%|#9        | 5/26 [00:00<00:01, 19.95it/s] 35%|###4      | 9/26 [00:00<00:00, 25.57it/s] 50%|#####     | 13/26 [00:00<00:00, 28.91it/s] 65%|######5   | 17/26 [00:00<00:00, 30.56it/s] 81%|########  | 21/26 [00:00<00:00, 31.17it/s] 96%|#########6| 25/26 [00:00<00:00, 31.66it/s]100%|##########| 26/26 [00:00<00:00, 26.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.48 (  0.50)	train_minacc   0.49 (  0.55)	train_majacc   0.48 (  0.49)	train_corr   0.00 (  0.00)	l1 17.8464 (17.8506)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.16it/s] 31%|###       | 8/26 [00:00<00:00, 41.15it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.15it/s] 50%|#####     | 13/26 [00:00<00:00, 42.35it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.52it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.52it/s] 96%|#########6| 25/26 [00:00<00:00, 47.56it/s]100%|##########| 26/26 [00:00<00:00, 41.38it/s]
Test: [   0/  26]	Loss 0.696 (0.696)	test_acc   0.46 (  0.46)	test_minacc   0.48 (  0.48)	test_majacc   0.45 (  0.45)	Loss_d 0.696 (0.696)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.689 (0.688)	test_acc   0.49 (  0.49)	test_minacc   0.60 (  0.51)	test_majacc   0.47 (  0.49)	Loss_d 0.689 (0.688)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.60 (  0.51)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.07 (  0.06)
Test: [  20/  26]	Loss 0.689 (0.688)	test_acc   0.49 (  0.49)	test_minacc   0.44 (  0.51)	test_majacc   0.51 (  0.49)	Loss_d 0.689 (0.688)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.44 (  0.51)	test_majacc_d   0.51 (  0.49)	test_corr_d   0.07 (  0.07)
Test: [  26/  26]	Loss 0.693 (0.688)	test_acc   0.48 (  0.50)	test_minacc   0.49 (  0.52)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.688)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.49 (  0.52)	test_majacc_d   0.48 (  0.49)	test_corr_d   0.07 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.51it/s]
Test: [  0/  1]	Loss 0.682 (0.682)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.682 (0.682)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.682 (0.682)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.55 (  0.55)	Loss_d 0.682 (0.682)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 18/  1]	epoch_time 0.0375 (0.0398)	validation_time 0.0004 (0.0007)	train_time 0.0371 (0.0389)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.49830001005530355, 0.5260000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.70it/s] 19%|#9        | 5/26 [00:00<00:00, 23.65it/s] 35%|###4      | 9/26 [00:00<00:00, 28.53it/s] 50%|#####     | 13/26 [00:00<00:00, 30.81it/s] 65%|######5   | 17/26 [00:00<00:00, 32.20it/s] 81%|########  | 21/26 [00:00<00:00, 32.86it/s] 96%|#########6| 25/26 [00:00<00:00, 33.61it/s]100%|##########| 26/26 [00:00<00:00, 28.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.47 (  0.50)	train_minacc   0.43 (  0.52)	train_majacc   0.48 (  0.49)	train_corr   0.00 (  0.00)	l1 17.8421 (17.8439)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.73it/s] 27%|##6       | 7/26 [00:00<00:00, 37.71it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.71it/s] 50%|#####     | 13/26 [00:00<00:00, 43.07it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.38it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.38it/s] 96%|#########6| 25/26 [00:00<00:00, 48.93it/s]100%|##########| 26/26 [00:00<00:00, 40.92it/s]
Test: [   0/  26]	Loss 0.696 (0.696)	test_acc   0.47 (  0.47)	test_minacc   0.51 (  0.51)	test_majacc   0.46 (  0.46)	Loss_d 0.696 (0.696)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.58 (  0.50)	test_majacc   0.47 (  0.49)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.03 (  0.02)
Test: [  20/  26]	Loss 0.692 (0.691)	test_acc   0.49 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.691)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.04 (  0.02)
Test: [  26/  26]	Loss 0.694 (0.691)	test_acc   0.47 (  0.50)	test_minacc   0.43 (  0.51)	test_majacc   0.48 (  0.50)	Loss_d 0.694 (0.691)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.02 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.83it/s]
Test: [  0/  1]	Loss 0.684 (0.684)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.684 (0.684)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.684 (0.684)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.684 (0.684)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 19/  1]	epoch_time 0.0378 (0.0397)	validation_time 0.0003 (0.0007)	train_time 0.0375 (0.0388)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.5005000135302544, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.94it/s] 19%|#9        | 5/26 [00:00<00:00, 21.97it/s] 35%|###4      | 9/26 [00:00<00:00, 27.06it/s] 50%|#####     | 13/26 [00:00<00:00, 29.68it/s] 65%|######5   | 17/26 [00:00<00:00, 31.19it/s] 81%|########  | 21/26 [00:00<00:00, 32.18it/s] 96%|#########6| 25/26 [00:00<00:00, 32.87it/s]100%|##########| 26/26 [00:00<00:00, 27.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.47 (  0.50)	train_minacc   0.37 (  0.50)	train_majacc   0.48 (  0.51)	train_corr   0.00 (  0.00)	l1 17.8400 (17.8409)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.08it/s] 27%|##6       | 7/26 [00:00<00:00, 33.77it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.77it/s] 50%|#####     | 13/26 [00:00<00:00, 41.87it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.98it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.98it/s] 96%|#########6| 25/26 [00:00<00:00, 48.28it/s]100%|##########| 26/26 [00:00<00:00, 39.59it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.48 (  0.48)	test_majacc   0.47 (  0.47)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.49 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.49 (  0.51)	test_corr_d  -0.00 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.51)	test_minacc   0.38 (  0.48)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.38 (  0.48)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.03 ( -0.00)
Test: [  26/  26]	Loss 0.694 (0.692)	test_acc   0.46 (  0.51)	test_minacc   0.37 (  0.49)	test_majacc   0.48 (  0.51)	Loss_d 0.694 (0.692)	test_acc_d   0.46 (  0.51)	test_minacc_d   0.37 (  0.49)	test_majacc_d   0.48 (  0.51)	test_corr_d  -0.02 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.25it/s]
Test: [  0/  1]	Loss 0.686 (0.686)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.53 (  0.53)	Loss_d 0.686 (0.686)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.686 (0.686)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.53 (  0.53)	Loss_d 0.686 (0.686)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 20/  1]	epoch_time 0.0365 (0.0395)	validation_time 0.0004 (0.0006)	train_time 0.0362 (0.0387)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.5093000137507916, 0.49400001764297485)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.16it/s] 19%|#9        | 5/26 [00:00<00:00, 22.54it/s] 35%|###4      | 9/26 [00:00<00:00, 27.05it/s] 50%|#####     | 13/26 [00:00<00:00, 29.45it/s] 65%|######5   | 17/26 [00:00<00:00, 30.68it/s] 81%|########  | 21/26 [00:00<00:00, 31.75it/s] 96%|#########6| 25/26 [00:00<00:00, 32.59it/s]100%|##########| 26/26 [00:00<00:00, 27.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.47 (  0.51)	train_minacc   0.37 (  0.48)	train_majacc   0.48 (  0.52)	train_corr   0.00 (  0.00)	l1 17.8390 (17.8395)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.35it/s] 27%|##6       | 7/26 [00:00<00:00, 34.28it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.28it/s] 50%|#####     | 13/26 [00:00<00:00, 42.77it/s] 69%|######9   | 18/26 [00:00<00:00, 44.85it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.85it/s] 92%|#########2| 24/26 [00:00<00:00, 49.68it/s]100%|##########| 26/26 [00:00<00:00, 39.53it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.47)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.52 (  0.48)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.52 (  0.48)	test_majacc_d   0.49 (  0.51)	test_corr_d  -0.02 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.39 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.39 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.02 ( -0.02)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.51)	test_minacc   0.37 (  0.47)	test_majacc   0.47 (  0.52)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.51)	test_minacc_d   0.37 (  0.47)	test_majacc_d   0.47 (  0.52)	test_corr_d  -0.03 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.64it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.58 (  0.58)	Loss_d 0.688 (0.688)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.58 (  0.58)	Loss_d 0.688 (0.688)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 21/  1]	epoch_time 0.0368 (0.0394)	validation_time 0.0003 (0.0006)	train_time 0.0365 (0.0386)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.5113000192344189, 0.4960000216960907)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.36it/s] 19%|#9        | 5/26 [00:00<00:01, 18.38it/s] 35%|###4      | 9/26 [00:00<00:00, 24.59it/s] 50%|#####     | 13/26 [00:00<00:00, 28.14it/s] 65%|######5   | 17/26 [00:00<00:00, 30.33it/s] 81%|########  | 21/26 [00:00<00:00, 31.79it/s] 96%|#########6| 25/26 [00:00<00:00, 32.30it/s]100%|##########| 26/26 [00:00<00:00, 26.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.49 (  0.51)	train_minacc   0.40 (  0.46)	train_majacc   0.50 (  0.52)	train_corr   0.00 (  0.00)	l1 17.8384 (17.8387)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.35it/s] 27%|##6       | 7/26 [00:00<00:00, 28.85it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.85it/s] 50%|#####     | 13/26 [00:00<00:00, 37.08it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.90it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.90it/s] 96%|#########6| 25/26 [00:00<00:00, 45.23it/s]100%|##########| 26/26 [00:00<00:00, 35.81it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.48 (  0.48)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.45)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.45)	test_majacc_d   0.51 (  0.52)	test_corr_d  -0.03 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.36 (  0.45)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.36 (  0.45)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.02 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.40 (  0.45)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.40 (  0.45)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.04 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.98it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.55 (  0.55)	Loss_d 0.689 (0.689)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.55 (  0.55)	Loss_d 0.689 (0.689)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 22/  1]	epoch_time 0.0391 (0.0394)	validation_time 0.0004 (0.0006)	train_time 0.0387 (0.0386)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.5112000071704388, 0.48500001430511475)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.69it/s] 15%|#5        | 4/26 [00:00<00:01, 15.12it/s] 31%|###       | 8/26 [00:00<00:00, 21.83it/s] 42%|####2     | 11/26 [00:00<00:00, 24.41it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.06it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.26it/s] 88%|########8 | 23/26 [00:00<00:00, 30.85it/s]100%|##########| 26/26 [00:01<00:00, 24.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 342 tensor(-0.0185, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
Epoch: [23][  26/  26]	Loss 0.000 (0.002)	train_nll   0.70 (  0.70)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.16)	train_acc   0.45 (  0.53)	train_minacc   0.46 (  0.50)	train_majacc   0.45 (  0.53)	train_corr   0.00 (  0.00)	l1 14.9813 (15.4234)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.43it/s] 35%|###4      | 9/26 [00:00<00:00, 42.02it/s]                                               35%|###4      | 9/26 [00:00<00:00, 42.02it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.78it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.83it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.83it/s]100%|##########| 26/26 [00:00<00:00, 52.33it/s]100%|##########| 26/26 [00:00<00:00, 42.86it/s]
Test: [   0/  26]	Loss 0.701 (0.701)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.701 (0.701)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.13 ( -0.13)
Test: [  10/  26]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d  -0.13 ( -0.14)
Test: [  20/  26]	Loss 0.697 (0.695)	test_acc   0.48 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.697 (0.695)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d  -0.19 ( -0.15)
Test: [  26/  26]	Loss 0.700 (0.695)	test_acc   0.45 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.700 (0.695)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d  -0.25 ( -0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.32it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.00 (  0.00)
Overall Timing[ 23/  1]	epoch_time 0.0388 (0.0394)	validation_time 0.0004 (0.0006)	train_time 0.0384 (0.0386)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.5000000132620335, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.45it/s] 19%|#9        | 5/26 [00:00<00:00, 22.65it/s] 35%|###4      | 9/26 [00:00<00:00, 27.92it/s] 50%|#####     | 13/26 [00:00<00:00, 30.12it/s] 65%|######5   | 17/26 [00:00<00:00, 31.62it/s] 81%|########  | 21/26 [00:00<00:00, 32.26it/s] 96%|#########6| 25/26 [00:00<00:00, 33.13it/s]100%|##########| 26/26 [00:00<00:00, 28.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.45 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 14.9281 (14.9563)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 39.25it/s] 35%|###4      | 9/26 [00:00<00:00, 43.25it/s]                                               35%|###4      | 9/26 [00:00<00:00, 43.25it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.81it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.81it/s] 81%|########  | 21/26 [00:00<00:00, 48.79it/s]100%|##########| 26/26 [00:00<00:00, 43.82it/s]
Test: [   0/  26]	Loss 0.699 (0.699)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.699 (0.699)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.13 (  0.12)
Test: [  20/  26]	Loss 0.695 (0.694)	test_acc   0.48 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.695 (0.694)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.03 (  0.11)
Test: [  26/  26]	Loss 0.699 (0.694)	test_acc   0.45 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.699 (0.694)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.10 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.19it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 24/  1]	epoch_time 0.0364 (0.0393)	validation_time 0.0003 (0.0006)	train_time 0.0361 (0.0385)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.5000000132620335, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.64it/s] 19%|#9        | 5/26 [00:00<00:01, 17.13it/s] 35%|###4      | 9/26 [00:00<00:00, 23.52it/s] 50%|#####     | 13/26 [00:00<00:00, 27.22it/s] 65%|######5   | 17/26 [00:00<00:00, 29.05it/s] 81%|########  | 21/26 [00:00<00:00, 30.05it/s] 96%|#########6| 25/26 [00:00<00:00, 31.10it/s]100%|##########| 26/26 [00:01<00:00, 24.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.45 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 14.8859 (14.9017)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.33it/s] 23%|##3       | 6/26 [00:00<00:00, 28.90it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.90it/s] 46%|####6     | 12/26 [00:00<00:00, 40.02it/s] 65%|######5   | 17/26 [00:00<00:00, 42.11it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.11it/s] 85%|########4 | 22/26 [00:00<00:00, 43.79it/s]100%|##########| 26/26 [00:00<00:00, 37.93it/s]
Test: [   0/  26]	Loss 0.697 (0.697)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.697 (0.697)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.21 (  0.21)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.694 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.14 (  0.21)
Test: [  26/  26]	Loss 0.697 (0.692)	test_acc   0.45 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.697 (0.692)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.27 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.11it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 25/  1]	epoch_time 0.0382 (0.0392)	validation_time 0.0004 (0.0006)	train_time 0.0378 (0.0385)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.5001000144183636, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.46it/s] 19%|#9        | 5/26 [00:00<00:01, 18.89it/s] 35%|###4      | 9/26 [00:00<00:00, 24.45it/s] 50%|#####     | 13/26 [00:00<00:00, 27.80it/s] 65%|######5   | 17/26 [00:00<00:00, 29.78it/s] 81%|########  | 21/26 [00:00<00:00, 31.36it/s] 96%|#########6| 25/26 [00:00<00:00, 32.04it/s]100%|##########| 26/26 [00:00<00:00, 26.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.45 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 14.8689 (14.8748)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.21it/s] 27%|##6       | 7/26 [00:00<00:00, 30.35it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.35it/s] 46%|####6     | 12/26 [00:00<00:00, 37.81it/s] 65%|######5   | 17/26 [00:00<00:00, 41.05it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.05it/s] 88%|########8 | 23/26 [00:00<00:00, 46.50it/s]100%|##########| 26/26 [00:00<00:00, 36.91it/s]
Test: [   0/  26]	Loss 0.697 (0.697)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.45 (  0.45)	Loss_d 0.697 (0.697)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.49 (  0.51)	Loss_d 0.692 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.22 (  0.21)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.15 (  0.22)
Test: [  26/  26]	Loss 0.696 (0.692)	test_acc   0.45 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.696 (0.692)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.28 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.34it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 26/  1]	epoch_time 0.0382 (0.0392)	validation_time 0.0003 (0.0006)	train_time 0.0378 (0.0385)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.5006000143885613, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.37it/s] 19%|#9        | 5/26 [00:00<00:00, 22.20it/s] 35%|###4      | 9/26 [00:00<00:00, 27.40it/s] 50%|#####     | 13/26 [00:00<00:00, 30.01it/s] 65%|######5   | 17/26 [00:00<00:00, 31.44it/s] 81%|########  | 21/26 [00:00<00:00, 32.22it/s] 96%|#########6| 25/26 [00:00<00:00, 33.20it/s]100%|##########| 26/26 [00:00<00:00, 28.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.45 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 14.8586 (14.8622)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.03it/s] 31%|###       | 8/26 [00:00<00:00, 33.85it/s]                                               31%|###       | 8/26 [00:00<00:00, 33.85it/s] 54%|#####3    | 14/26 [00:00<00:00, 42.95it/s] 77%|#######6  | 20/26 [00:00<00:00, 43.76it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 43.76it/s]100%|##########| 26/26 [00:00<00:00, 48.77it/s]100%|##########| 26/26 [00:00<00:00, 39.95it/s]
Test: [   0/  26]	Loss 0.697 (0.697)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.697 (0.697)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.21 (  0.21)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.14 (  0.21)
Test: [  26/  26]	Loss 0.696 (0.692)	test_acc   0.45 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.696 (0.692)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.27 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.08it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 27/  1]	epoch_time 0.0361 (0.0391)	validation_time 0.0003 (0.0006)	train_time 0.0358 (0.0384)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.5002000155746937, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.66it/s] 15%|#5        | 4/26 [00:00<00:01, 14.66it/s] 31%|###       | 8/26 [00:00<00:00, 22.63it/s] 46%|####6     | 12/26 [00:00<00:00, 27.01it/s] 62%|######1   | 16/26 [00:00<00:00, 29.52it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.85it/s] 92%|#########2| 24/26 [00:00<00:00, 32.13it/s]100%|##########| 26/26 [00:01<00:00, 25.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.45 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 14.8489 (14.8524)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.22it/s] 31%|###       | 8/26 [00:00<00:00, 39.45it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.45it/s] 50%|#####     | 13/26 [00:00<00:00, 41.84it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.56it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.56it/s] 96%|#########6| 25/26 [00:00<00:00, 46.45it/s]100%|##########| 26/26 [00:00<00:00, 40.26it/s]
Test: [   0/  26]	Loss 0.697 (0.697)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.697 (0.697)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.21 (  0.21)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.14 (  0.21)
Test: [  26/  26]	Loss 0.696 (0.692)	test_acc   0.45 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.696 (0.692)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.27 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.69it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 28/  1]	epoch_time 0.0387 (0.0391)	validation_time 0.0004 (0.0006)	train_time 0.0382 (0.0384)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.5002000155746937, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.41it/s] 19%|#9        | 5/26 [00:00<00:00, 21.52it/s] 35%|###4      | 9/26 [00:00<00:00, 27.21it/s] 50%|#####     | 13/26 [00:00<00:00, 30.12it/s] 65%|######5   | 17/26 [00:00<00:00, 31.96it/s] 81%|########  | 21/26 [00:00<00:00, 33.01it/s] 96%|#########6| 25/26 [00:00<00:00, 33.74it/s]100%|##########| 26/26 [00:00<00:00, 28.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.45 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 14.8391 (14.8426)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.87it/s] 27%|##6       | 7/26 [00:00<00:00, 36.58it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.58it/s] 46%|####6     | 12/26 [00:00<00:00, 40.51it/s] 69%|######9   | 18/26 [00:00<00:00, 45.69it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.69it/s] 92%|#########2| 24/26 [00:00<00:00, 48.07it/s]100%|##########| 26/26 [00:00<00:00, 40.32it/s]
Test: [   0/  26]	Loss 0.697 (0.697)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.697 (0.697)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.20 (  0.20)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.13 (  0.20)
Test: [  26/  26]	Loss 0.696 (0.692)	test_acc   0.45 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.696 (0.692)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.26 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.61it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 29/  1]	epoch_time 0.0383 (0.0390)	validation_time 0.0004 (0.0006)	train_time 0.0379 (0.0383)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.5001000144183636, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.67it/s] 19%|#9        | 5/26 [00:00<00:01, 19.80it/s] 35%|###4      | 9/26 [00:00<00:00, 25.21it/s] 50%|#####     | 13/26 [00:00<00:00, 27.50it/s] 65%|######5   | 17/26 [00:00<00:00, 29.45it/s] 81%|########  | 21/26 [00:00<00:00, 30.75it/s] 96%|#########6| 25/26 [00:00<00:00, 31.49it/s]100%|##########| 26/26 [00:00<00:00, 26.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.45 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 14.8293 (14.8329)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.49it/s] 27%|##6       | 7/26 [00:00<00:00, 36.56it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.56it/s] 50%|#####     | 13/26 [00:00<00:00, 41.14it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.80it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.80it/s] 96%|#########6| 25/26 [00:00<00:00, 47.40it/s]100%|##########| 26/26 [00:00<00:00, 39.66it/s]
Test: [   0/  26]	Loss 0.697 (0.697)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.697 (0.697)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.20 (  0.19)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.13 (  0.20)
Test: [  26/  26]	Loss 0.696 (0.692)	test_acc   0.45 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.696 (0.692)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.25 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.78it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 30/  1]	epoch_time 0.0385 (0.0390)	validation_time 0.0004 (0.0006)	train_time 0.0382 (0.0383)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.5001000144183636, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.41it/s] 19%|#9        | 5/26 [00:00<00:01, 19.75it/s] 35%|###4      | 9/26 [00:00<00:00, 25.43it/s] 50%|#####     | 13/26 [00:00<00:00, 28.67it/s] 65%|######5   | 17/26 [00:00<00:00, 29.92it/s] 81%|########  | 21/26 [00:00<00:00, 31.20it/s] 96%|#########6| 25/26 [00:00<00:00, 32.25it/s]100%|##########| 26/26 [00:00<00:00, 26.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.45 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 14.8197 (14.8232)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.28it/s] 27%|##6       | 7/26 [00:00<00:00, 36.39it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.39it/s] 50%|#####     | 13/26 [00:00<00:00, 41.04it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.13it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.13it/s] 96%|#########6| 25/26 [00:00<00:00, 47.38it/s]100%|##########| 26/26 [00:00<00:00, 39.29it/s]
Test: [   0/  26]	Loss 0.697 (0.697)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.697 (0.697)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.19 (  0.19)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.12 (  0.19)
Test: [  26/  26]	Loss 0.696 (0.692)	test_acc   0.45 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.696 (0.692)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.25 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.32it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 31/  1]	epoch_time 0.0383 (0.0390)	validation_time 0.0003 (0.0005)	train_time 0.0380 (0.0383)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.5001000144183636, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.76it/s] 23%|##3       | 6/26 [00:00<00:00, 26.37it/s] 38%|###8      | 10/26 [00:00<00:00, 29.93it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.58it/s] 69%|######9   | 18/26 [00:00<00:00, 31.92it/s] 85%|########4 | 22/26 [00:00<00:00, 32.48it/s]100%|##########| 26/26 [00:00<00:00, 33.25it/s]100%|##########| 26/26 [00:00<00:00, 29.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.45 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 14.8103 (14.8137)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.47it/s] 23%|##3       | 6/26 [00:00<00:00, 31.01it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.01it/s] 42%|####2     | 11/26 [00:00<00:00, 38.96it/s] 65%|######5   | 17/26 [00:00<00:00, 43.17it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.17it/s] 88%|########8 | 23/26 [00:00<00:00, 47.58it/s]100%|##########| 26/26 [00:00<00:00, 38.78it/s]
Test: [   0/  26]	Loss 0.696 (0.696)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.696 (0.696)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.18 (  0.18)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.12 (  0.19)
Test: [  26/  26]	Loss 0.696 (0.692)	test_acc   0.45 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.696 (0.692)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.24 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.91it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 32/  1]	epoch_time 0.0381 (0.0390)	validation_time 0.0004 (0.0005)	train_time 0.0377 (0.0383)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.5001000144183636, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.37it/s] 19%|#9        | 5/26 [00:00<00:00, 24.41it/s] 35%|###4      | 9/26 [00:00<00:00, 28.76it/s] 50%|#####     | 13/26 [00:00<00:00, 30.66it/s] 65%|######5   | 17/26 [00:00<00:00, 31.39it/s] 81%|########  | 21/26 [00:00<00:00, 32.12it/s] 96%|#########6| 25/26 [00:00<00:00, 32.49it/s]100%|##########| 26/26 [00:00<00:00, 28.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.45 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 14.8010 (14.8044)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.51it/s] 15%|#5        | 4/26 [00:00<00:01, 19.32it/s] 38%|###8      | 10/26 [00:00<00:00, 35.06it/s]                                                38%|###8      | 10/26 [00:00<00:00, 35.06it/s] 62%|######1   | 16/26 [00:00<00:00, 41.69it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.69it/s] 85%|########4 | 22/26 [00:00<00:00, 45.44it/s]100%|##########| 26/26 [00:00<00:00, 37.41it/s]
Test: [   0/  26]	Loss 0.696 (0.696)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.696 (0.696)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.15 (  0.15)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.18 (  0.18)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.11 (  0.18)
Test: [  26/  26]	Loss 0.696 (0.692)	test_acc   0.45 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.696 (0.692)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.23 (  0.18)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.71it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 33/  1]	epoch_time 0.0380 (0.0389)	validation_time 0.0003 (0.0005)	train_time 0.0376 (0.0383)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.5001000144183636, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.80it/s] 19%|#9        | 5/26 [00:00<00:00, 23.37it/s] 35%|###4      | 9/26 [00:00<00:00, 28.31it/s] 50%|#####     | 13/26 [00:00<00:00, 30.87it/s] 65%|######5   | 17/26 [00:00<00:00, 31.73it/s] 81%|########  | 21/26 [00:00<00:00, 32.52it/s] 96%|#########6| 25/26 [00:00<00:00, 32.63it/s]100%|##########| 26/26 [00:00<00:00, 28.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.45 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 14.7920 (14.7952)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.87it/s] 31%|###       | 8/26 [00:00<00:00, 39.68it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.68it/s] 50%|#####     | 13/26 [00:00<00:00, 42.97it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.24it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.24it/s] 96%|#########6| 25/26 [00:00<00:00, 48.23it/s]100%|##########| 26/26 [00:00<00:00, 41.09it/s]
Test: [   0/  26]	Loss 0.696 (0.696)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.696 (0.696)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.17 (  0.17)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.11 (  0.18)
Test: [  26/  26]	Loss 0.695 (0.692)	test_acc   0.45 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.695 (0.692)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.23 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.30it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 34/  1]	epoch_time 0.0375 (0.0389)	validation_time 0.0004 (0.0005)	train_time 0.0371 (0.0383)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.5000000132620335, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.59it/s] 19%|#9        | 5/26 [00:00<00:00, 22.10it/s] 35%|###4      | 9/26 [00:00<00:00, 27.91it/s] 50%|#####     | 13/26 [00:00<00:00, 29.72it/s] 65%|######5   | 17/26 [00:00<00:00, 30.98it/s] 81%|########  | 21/26 [00:00<00:00, 31.90it/s] 96%|#########6| 25/26 [00:00<00:00, 32.96it/s]100%|##########| 26/26 [00:00<00:00, 27.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.45 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 14.7831 (14.7863)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.20it/s] 27%|##6       | 7/26 [00:00<00:00, 33.38it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.38it/s] 46%|####6     | 12/26 [00:00<00:00, 38.77it/s] 69%|######9   | 18/26 [00:00<00:00, 45.17it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.17it/s] 88%|########8 | 23/26 [00:00<00:00, 46.42it/s]100%|##########| 26/26 [00:00<00:00, 38.29it/s]
Test: [   0/  26]	Loss 0.696 (0.696)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.696 (0.696)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.16 (  0.16)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.10 (  0.17)
Test: [  26/  26]	Loss 0.695 (0.692)	test_acc   0.45 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.695 (0.692)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.22 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.24it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 35/  1]	epoch_time 0.0378 (0.0389)	validation_time 0.0003 (0.0005)	train_time 0.0374 (0.0382)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.5000000132620335, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.18it/s] 19%|#9        | 5/26 [00:00<00:01, 18.04it/s] 35%|###4      | 9/26 [00:00<00:00, 23.90it/s] 50%|#####     | 13/26 [00:00<00:00, 27.38it/s] 65%|######5   | 17/26 [00:00<00:00, 29.84it/s] 81%|########  | 21/26 [00:00<00:00, 31.51it/s] 96%|#########6| 25/26 [00:00<00:00, 32.34it/s]100%|##########| 26/26 [00:00<00:00, 26.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.45 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 14.7745 (14.7776)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.67it/s] 31%|###       | 8/26 [00:00<00:00, 41.70it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.70it/s] 50%|#####     | 13/26 [00:00<00:00, 42.61it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.01it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.01it/s] 96%|#########6| 25/26 [00:00<00:00, 47.53it/s]100%|##########| 26/26 [00:00<00:00, 41.16it/s]
Test: [   0/  26]	Loss 0.696 (0.696)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.696 (0.696)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.13 (  0.13)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.16 (  0.16)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.10 (  0.16)
Test: [  26/  26]	Loss 0.695 (0.692)	test_acc   0.45 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.695 (0.692)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.21 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.59it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 36/  1]	epoch_time 0.0386 (0.0389)	validation_time 0.0003 (0.0005)	train_time 0.0382 (0.0382)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.5000000132620335, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.20it/s] 19%|#9        | 5/26 [00:00<00:01, 20.81it/s] 35%|###4      | 9/26 [00:00<00:00, 26.20it/s] 50%|#####     | 13/26 [00:00<00:00, 28.52it/s] 65%|######5   | 17/26 [00:00<00:00, 30.02it/s] 81%|########  | 21/26 [00:00<00:00, 31.00it/s] 96%|#########6| 25/26 [00:00<00:00, 31.89it/s]100%|##########| 26/26 [00:00<00:00, 26.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.45 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 14.7660 (14.7691)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.89it/s] 27%|##6       | 7/26 [00:00<00:00, 32.33it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.33it/s] 50%|#####     | 13/26 [00:00<00:00, 39.77it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.09it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.09it/s] 96%|#########6| 25/26 [00:00<00:00, 46.22it/s]100%|##########| 26/26 [00:00<00:00, 38.02it/s]
Test: [   0/  26]	Loss 0.696 (0.696)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.696 (0.696)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.15 (  0.15)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.09 (  0.16)
Test: [  26/  26]	Loss 0.695 (0.692)	test_acc   0.45 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.695 (0.692)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.20 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.53it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 37/  1]	epoch_time 0.0385 (0.0389)	validation_time 0.0003 (0.0005)	train_time 0.0382 (0.0382)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.5000000132620335, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.66it/s] 19%|#9        | 5/26 [00:00<00:01, 17.38it/s] 35%|###4      | 9/26 [00:00<00:00, 23.84it/s] 50%|#####     | 13/26 [00:00<00:00, 27.65it/s] 65%|######5   | 17/26 [00:00<00:00, 29.51it/s] 81%|########  | 21/26 [00:00<00:00, 31.16it/s] 96%|#########6| 25/26 [00:00<00:00, 32.12it/s]100%|##########| 26/26 [00:01<00:00, 25.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.45 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 14.7577 (14.7607)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.26it/s] 27%|##6       | 7/26 [00:00<00:00, 33.63it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.63it/s] 46%|####6     | 12/26 [00:00<00:00, 39.76it/s] 65%|######5   | 17/26 [00:00<00:00, 41.93it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.93it/s] 88%|########8 | 23/26 [00:00<00:00, 47.64it/s]100%|##########| 26/26 [00:00<00:00, 38.21it/s]
Test: [   0/  26]	Loss 0.696 (0.696)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.696 (0.696)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.14 (  0.14)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.08 (  0.15)
Test: [  26/  26]	Loss 0.695 (0.692)	test_acc   0.45 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.695 (0.692)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.19 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.91it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 38/  1]	epoch_time 0.0382 (0.0388)	validation_time 0.0004 (0.0005)	train_time 0.0377 (0.0382)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.5000000132620335, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.85it/s] 19%|#9        | 5/26 [00:00<00:00, 22.08it/s] 35%|###4      | 9/26 [00:00<00:00, 27.15it/s] 50%|#####     | 13/26 [00:00<00:00, 29.98it/s] 65%|######5   | 17/26 [00:00<00:00, 31.69it/s] 81%|########  | 21/26 [00:00<00:00, 32.04it/s] 96%|#########6| 25/26 [00:00<00:00, 32.62it/s]100%|##########| 26/26 [00:00<00:00, 27.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.45 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 14.7497 (14.7525)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.64it/s] 31%|###       | 8/26 [00:00<00:00, 35.64it/s]                                               31%|###       | 8/26 [00:00<00:00, 35.64it/s] 50%|#####     | 13/26 [00:00<00:00, 39.10it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.83it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.83it/s] 96%|#########6| 25/26 [00:00<00:00, 46.59it/s]100%|##########| 26/26 [00:00<00:00, 38.19it/s]
Test: [   0/  26]	Loss 0.696 (0.696)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.696 (0.696)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.13 (  0.14)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.08 (  0.14)
Test: [  26/  26]	Loss 0.695 (0.692)	test_acc   0.45 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.695 (0.692)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.18 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.23it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 39/  1]	epoch_time 0.0377 (0.0388)	validation_time 0.0003 (0.0005)	train_time 0.0373 (0.0382)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.5000000132620335, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.12it/s] 15%|#5        | 4/26 [00:00<00:01, 15.62it/s] 31%|###       | 8/26 [00:00<00:00, 23.13it/s] 46%|####6     | 12/26 [00:00<00:00, 27.34it/s] 62%|######1   | 16/26 [00:00<00:00, 28.91it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.62it/s] 92%|#########2| 24/26 [00:00<00:00, 31.94it/s]100%|##########| 26/26 [00:01<00:00, 25.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.45 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 14.7418 (14.7446)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.19it/s] 19%|#9        | 5/26 [00:00<00:00, 25.42it/s] 38%|###8      | 10/26 [00:00<00:00, 35.22it/s]                                                38%|###8      | 10/26 [00:00<00:00, 35.22it/s] 62%|######1   | 16/26 [00:00<00:00, 40.07it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.07it/s] 81%|########  | 21/26 [00:00<00:00, 42.17it/s]100%|##########| 26/26 [00:00<00:00, 36.21it/s]
Test: [   0/  26]	Loss 0.696 (0.696)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.696 (0.696)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.12 (  0.13)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.07 (  0.13)
Test: [  26/  26]	Loss 0.695 (0.692)	test_acc   0.45 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.695 (0.692)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.18 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.03it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 40/  1]	epoch_time 0.0372 (0.0388)	validation_time 0.0004 (0.0005)	train_time 0.0368 (0.0382)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.5000000132620335, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.63it/s] 19%|#9        | 5/26 [00:00<00:00, 22.00it/s] 35%|###4      | 9/26 [00:00<00:00, 26.84it/s] 50%|#####     | 13/26 [00:00<00:00, 29.68it/s] 65%|######5   | 17/26 [00:00<00:00, 31.46it/s] 81%|########  | 21/26 [00:00<00:00, 32.65it/s] 96%|#########6| 25/26 [00:00<00:00, 32.96it/s]100%|##########| 26/26 [00:00<00:00, 28.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.45 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 14.7341 (14.7368)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.45it/s] 23%|##3       | 6/26 [00:00<00:00, 27.99it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.99it/s] 46%|####6     | 12/26 [00:00<00:00, 37.97it/s] 69%|######9   | 18/26 [00:00<00:00, 43.68it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.68it/s] 92%|#########2| 24/26 [00:00<00:00, 46.21it/s]100%|##########| 26/26 [00:00<00:00, 38.15it/s]
Test: [   0/  26]	Loss 0.696 (0.696)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.696 (0.696)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.12 (  0.12)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.06 (  0.13)
Test: [  26/  26]	Loss 0.695 (0.692)	test_acc   0.45 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.695 (0.692)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.17 (  0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.98it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 41/  1]	epoch_time 0.0365 (0.0387)	validation_time 0.0004 (0.0005)	train_time 0.0361 (0.0381)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.5000000132620335, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.50it/s] 15%|#5        | 4/26 [00:00<00:01, 17.76it/s] 31%|###       | 8/26 [00:00<00:00, 24.07it/s] 46%|####6     | 12/26 [00:00<00:00, 28.02it/s] 62%|######1   | 16/26 [00:00<00:00, 30.32it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.58it/s] 92%|#########2| 24/26 [00:00<00:00, 32.37it/s]100%|##########| 26/26 [00:00<00:00, 26.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.45 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 14.7266 (14.7293)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.48it/s] 27%|##6       | 7/26 [00:00<00:00, 36.69it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.69it/s] 50%|#####     | 13/26 [00:00<00:00, 43.06it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.56it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.56it/s] 96%|#########6| 25/26 [00:00<00:00, 48.47it/s]100%|##########| 26/26 [00:00<00:00, 40.31it/s]
Test: [   0/  26]	Loss 0.696 (0.696)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.696 (0.696)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.11 (  0.11)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.06 (  0.12)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.45 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.695 (0.693)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.16 (  0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.48it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 42/  1]	epoch_time 0.0376 (0.0387)	validation_time 0.0004 (0.0005)	train_time 0.0372 (0.0381)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.5000000132620335, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.48it/s] 15%|#5        | 4/26 [00:00<00:01, 16.02it/s] 31%|###       | 8/26 [00:00<00:00, 23.01it/s] 46%|####6     | 12/26 [00:00<00:00, 26.73it/s] 62%|######1   | 16/26 [00:00<00:00, 29.12it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.25it/s] 92%|#########2| 24/26 [00:00<00:00, 31.34it/s]100%|##########| 26/26 [00:01<00:00, 25.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.45 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 14.7194 (14.7219)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.77it/s] 31%|###       | 8/26 [00:00<00:00, 39.41it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.41it/s] 50%|#####     | 13/26 [00:00<00:00, 41.02it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.80it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.80it/s] 96%|#########6| 25/26 [00:00<00:00, 47.80it/s]100%|##########| 26/26 [00:00<00:00, 40.65it/s]
Test: [   0/  26]	Loss 0.696 (0.696)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.696 (0.696)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.10 (  0.11)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.05 (  0.11)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.45 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.695 (0.693)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.15 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.88it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 43/  1]	epoch_time 0.0383 (0.0387)	validation_time 0.0004 (0.0005)	train_time 0.0379 (0.0381)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.5000000132620335, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.15it/s] 15%|#5        | 4/26 [00:00<00:01, 19.57it/s] 31%|###       | 8/26 [00:00<00:00, 25.41it/s] 46%|####6     | 12/26 [00:00<00:00, 27.20it/s] 62%|######1   | 16/26 [00:00<00:00, 29.03it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.27it/s] 92%|#########2| 24/26 [00:00<00:00, 31.24it/s]100%|##########| 26/26 [00:00<00:00, 26.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.45 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 14.7124 (14.7148)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.08it/s] 27%|##6       | 7/26 [00:00<00:00, 33.49it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.49it/s] 50%|#####     | 13/26 [00:00<00:00, 40.44it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.75it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.75it/s] 96%|#########6| 25/26 [00:00<00:00, 47.05it/s]100%|##########| 26/26 [00:00<00:00, 38.89it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.695 (0.695)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.09 (  0.10)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.04 (  0.11)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.45 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.695 (0.693)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.14 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.10it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 44/  1]	epoch_time 0.0381 (0.0387)	validation_time 0.0003 (0.0005)	train_time 0.0378 (0.0381)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.5000000132620335, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.09it/s] 19%|#9        | 5/26 [00:00<00:00, 22.22it/s] 35%|###4      | 9/26 [00:00<00:00, 26.69it/s] 50%|#####     | 13/26 [00:00<00:00, 29.38it/s] 62%|######1   | 16/26 [00:00<00:00, 29.31it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.66it/s] 92%|#########2| 24/26 [00:00<00:00, 31.57it/s]100%|##########| 26/26 [00:00<00:00, 27.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.45 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 14.7056 (14.7079)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.89it/s] 27%|##6       | 7/26 [00:00<00:00, 34.78it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.78it/s] 50%|#####     | 13/26 [00:00<00:00, 40.03it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.86it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.86it/s] 96%|#########6| 25/26 [00:00<00:00, 47.26it/s]100%|##########| 26/26 [00:00<00:00, 38.57it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.695 (0.695)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.08 (  0.09)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.04 (  0.10)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.45 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.695 (0.693)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.13 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.92it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 45/  1]	epoch_time 0.0389 (0.0387)	validation_time 0.0004 (0.0005)	train_time 0.0385 (0.0381)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.5000000132620335, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.38it/s] 19%|#9        | 5/26 [00:00<00:00, 22.23it/s] 35%|###4      | 9/26 [00:00<00:00, 27.28it/s] 50%|#####     | 13/26 [00:00<00:00, 30.13it/s] 65%|######5   | 17/26 [00:00<00:00, 31.84it/s] 81%|########  | 21/26 [00:00<00:00, 32.35it/s] 96%|#########6| 25/26 [00:00<00:00, 32.59it/s]100%|##########| 26/26 [00:00<00:00, 27.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.45 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 14.6990 (14.7013)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.89it/s] 27%|##6       | 7/26 [00:00<00:00, 31.37it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.37it/s] 50%|#####     | 13/26 [00:00<00:00, 38.85it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.68it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.68it/s] 96%|#########6| 25/26 [00:00<00:00, 45.86it/s]100%|##########| 26/26 [00:00<00:00, 37.39it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.695 (0.695)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.08 (  0.09)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.03 (  0.09)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.45 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.695 (0.693)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.12 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.18it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 46/  1]	epoch_time 0.0396 (0.0387)	validation_time 0.0004 (0.0005)	train_time 0.0392 (0.0381)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.5000000132620335, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.78it/s] 19%|#9        | 5/26 [00:00<00:00, 22.02it/s] 35%|###4      | 9/26 [00:00<00:00, 27.18it/s] 50%|#####     | 13/26 [00:00<00:00, 29.67it/s] 65%|######5   | 17/26 [00:00<00:00, 30.94it/s] 81%|########  | 21/26 [00:00<00:00, 32.11it/s] 96%|#########6| 25/26 [00:00<00:00, 32.25it/s]100%|##########| 26/26 [00:00<00:00, 27.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.45 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 14.6926 (14.6948)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.24it/s] 23%|##3       | 6/26 [00:00<00:00, 28.43it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.43it/s] 46%|####6     | 12/26 [00:00<00:00, 39.31it/s] 69%|######9   | 18/26 [00:00<00:00, 43.54it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.54it/s] 92%|#########2| 24/26 [00:00<00:00, 47.82it/s]100%|##########| 26/26 [00:00<00:00, 39.09it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.695 (0.695)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.07 (  0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.03 (  0.08)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.45 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.695 (0.693)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.12 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.27it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 47/  1]	epoch_time 0.0384 (0.0387)	validation_time 0.0004 (0.0005)	train_time 0.0380 (0.0381)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.5000000132620335, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.85it/s] 19%|#9        | 5/26 [00:00<00:01, 20.13it/s] 35%|###4      | 9/26 [00:00<00:00, 25.76it/s] 50%|#####     | 13/26 [00:00<00:00, 28.14it/s] 65%|######5   | 17/26 [00:00<00:00, 30.52it/s] 81%|########  | 21/26 [00:00<00:00, 31.69it/s] 96%|#########6| 25/26 [00:00<00:00, 32.48it/s]100%|##########| 26/26 [00:00<00:00, 27.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.45 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 14.6864 (14.6885)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.03it/s] 27%|##6       | 7/26 [00:00<00:00, 31.12it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.12it/s] 50%|#####     | 13/26 [00:00<00:00, 37.96it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.02it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.02it/s] 96%|#########6| 25/26 [00:00<00:00, 46.13it/s]100%|##########| 26/26 [00:00<00:00, 37.46it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.695 (0.695)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.06 (  0.07)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.02 (  0.08)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.45 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.695 (0.693)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.11 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.90it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 48/  1]	epoch_time 0.0381 (0.0387)	validation_time 0.0003 (0.0005)	train_time 0.0378 (0.0381)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.5000000132620335, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.11it/s] 19%|#9        | 5/26 [00:00<00:00, 22.08it/s] 35%|###4      | 9/26 [00:00<00:00, 27.42it/s] 50%|#####     | 13/26 [00:00<00:00, 30.99it/s] 65%|######5   | 17/26 [00:00<00:00, 32.90it/s] 81%|########  | 21/26 [00:00<00:00, 33.74it/s] 96%|#########6| 25/26 [00:00<00:00, 34.30it/s]100%|##########| 26/26 [00:00<00:00, 28.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.45 (  0.50)	train_minacc   0.46 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 14.6804 (14.6824)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.96it/s] 27%|##6       | 7/26 [00:00<00:00, 32.16it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.16it/s] 50%|#####     | 13/26 [00:00<00:00, 38.64it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.03it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.03it/s] 96%|#########6| 25/26 [00:00<00:00, 45.80it/s]100%|##########| 26/26 [00:00<00:00, 37.61it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.44 (  0.44)	Loss_d 0.695 (0.695)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.06 (  0.07)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.02 (  0.07)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.45 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.695 (0.693)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.10 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.38it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 49/  1]	epoch_time 0.0379 (0.0387)	validation_time 0.0004 (0.0005)	train_time 0.0375 (0.0381)
record: (train_acc, test_acc) (0.6422000145316124, 0.6060000061988831)
last accs (train_acc, test_acc) (0.5001000120937824, 0.5)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.094 MB of 0.094 MB uploadedwandb: \ 0.094 MB of 0.094 MB uploadedwandb: | 0.116 MB of 0.124 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/diagnostics/epoch_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/diagnostics/train_time_val █▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▂▂▁▁▁▂▂▂▁▁▁▂▂▁▁▁▁▁▂▂▁▁
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/Loss_avg █▇▇▆█▆▆▆▇▇▇█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/Loss_d_avg █▇▇▆█▆▆▆▇▇▇█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/Loss_d_val █▇▇▆█▆▆▆▇▇▇█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/Loss_val █▇▇▆█▆▆▆▇▇▇█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/test_acc_avg ▁▁▁▄▄▆▆▆▄▅▄▃█▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/test_acc_d_avg ▁▁▁▄▄▆▆▆▄▅▄▃█▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/test_acc_d_val ▁▁▁▄▄▆▆▆▄▅▄▃█▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/test_acc_val ▁▁▁▄▄▆▆▆▄▅▄▃█▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/test_corr_d_avg ███▆▇▅▅▅▆▅▆▇▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/test_corr_d_val ███▆▇▅▅▅▆▅▆▇▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/test_majacc_avg ███▇█▇▇▇█▇██▅▁▂▂▁▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/test_majacc_d_avg ███▇█▇▇▇█▇██▅▁▂▂▁▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/test_majacc_d_val ███▇█▇▇▇█▇██▅▁▂▂▁▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/test_majacc_val ███▇█▇▇▇█▇██▅▁▂▂▁▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/test_minacc_avg ▁▁▁▄▄▆▆▆▃▅▄▃██▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/test_minacc_d_avg ▁▁▁▄▄▆▆▆▃▅▄▃██▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/test_minacc_d_val ▁▁▁▄▄▆▆▆▃▅▄▃██▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/test_minacc_val ▁▁▁▄▄▆▆▆▃▅▄▃██▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/Loss_avg █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/Loss_val █▅▃▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/l1_avg ▂▂▂▁▁▁▂▃▅▅▆▇██▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/l1_val ▂▂▁▁▁▁▂▃▅▆▇████████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/train_acc_avg ▆███████████▇▂▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/train_acc_val ▇▇█▇██▇█▇▇▇█▄▁▁▂▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/train_majacc_avg ▇███████████▆▂▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/train_majacc_val ███▇██▇▇█▇▇█▃▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/train_minacc_avg ▂▁▁▂▃▃▄▃▃▃▃▄▇███▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/train_minacc_val ▁▁▂▅▆▄█▆▄▅▅▃▇▇▇▇▆▆▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/train_nll_avg ▆▃▂▂▁▂▁▁▁▁▁▁▄▇██████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/train_nll_val ▃▃▃▂▁▁▁▁▁▂▂▁▇███████████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/train_penalty_avg █▃▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/train_penalty_val █▇▅▃▃▄▂▂▃▃▂▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/weight_norm_avg █▅▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/weight_norm_val █▄▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/diagnostics/epoch_time_val 0.03785
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/diagnostics/train_time_val 0.03747
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/diagnostics/validation_time_val 0.00037
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/Loss_avg 0.69233
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/Loss_d_avg 0.69233
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/Loss_d_val 0.69233
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/Loss_val 0.69233
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/test_acc_avg 0.5
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/test_acc_d_avg 0.5
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/test_acc_d_val 0.5
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/test_acc_val 0.5
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/test_corr_d_avg -0.15565
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/test_corr_d_val -0.15565
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/test_majacc_avg 0.5
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/test_majacc_d_avg 0.5
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/test_majacc_d_val 0.5
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/test_majacc_val 0.5
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/test_minacc_avg 0.5
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/test_minacc_d_avg 0.5
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/test_minacc_d_val 0.5
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/test/test_minacc_val 0.5
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/Loss_avg 9e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/Loss_val 9e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/l1_avg 14.68244
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/l1_val 14.68036
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/train_acc_avg 0.5001
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/train_acc_val 0.452
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/train_majacc_avg 0.50011
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/train_majacc_val 0.45116
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/train_minacc_avg 0.50408
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/train_minacc_val 0.45714
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/train_nll_avg 0.69266
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/train_nll_val 0.69461
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/weight_norm_avg 0.17195
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/55/logs/train/weight_norm_val 0.17182
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/k05ms93z
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_115802-k05ms93z/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_120038-pqapgnfb
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/pqapgnfb
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=15.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1223
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6013, 3, 32, 32) (5987, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:41,  1.65s/it] 19%|#9        | 5/26 [00:01<00:05,  3.68it/s] 35%|###4      | 9/26 [00:01<00:02,  7.26it/s] 50%|#####     | 13/26 [00:01<00:01, 11.14it/s] 65%|######5   | 17/26 [00:02<00:00, 15.07it/s] 81%|########  | 21/26 [00:02<00:00, 18.78it/s] 96%|#########6| 25/26 [00:02<00:00, 22.10it/s]100%|##########| 26/26 [00:02<00:00,  9.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 8.442 (11.623)	train_nll   0.40 (  0.49)	train_penalty   0.05 (  0.18)	weight_norm   8.05 ( 11.13)	train_acc   0.85 (  0.82)	train_minacc   0.08 (  0.07)	train_majacc   0.98 (  0.95)	train_corr   0.00 (  0.00)	l1 7.1749 (7.9641)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.68it/s] 27%|##6       | 7/26 [00:00<00:00, 36.18it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.18it/s] 50%|#####     | 13/26 [00:00<00:00, 40.26it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.84it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.84it/s] 96%|#########6| 25/26 [00:00<00:00, 47.39it/s]100%|##########| 26/26 [00:00<00:00, 39.62it/s]
Test: [   0/  26]	Loss 0.455 (0.455)	test_acc   0.82 (  0.82)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.455 (0.455)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.368 (0.390)	test_acc   0.86 (  0.85)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.368 (0.390)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.427 (0.391)	test_acc   0.83 (  0.85)	test_minacc   0.07 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.427 (0.391)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.07 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.96)
Test: [  26/  26]	Loss 0.386 (0.390)	test_acc   0.85 (  0.85)	test_minacc   0.08 (  0.04)	test_majacc   0.98 (  0.99)	Loss_d 0.386 (0.390)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.08 (  0.04)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.94 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.55it/s]100%|##########| 1/1 [00:00<00:00,  2.55it/s]
Test: [  0/  1]	Loss 1.632 (1.632)	test_acc   0.13 (  0.13)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 1.632 (1.632)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  1/  1]	Loss 1.632 (1.632)	test_acc   0.13 (  0.13)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 1.632 (1.632)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/56/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0759 (0.0759)	validation_time 0.0066 (0.0066)	train_time 0.0647 (0.0647)
record: (train_acc, test_acc) (0.8493000227808952, 0.12700000405311584)
last accs (train_acc, test_acc) (0.8493000227808952, 0.12700000405311584)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.99it/s] 19%|#9        | 5/26 [00:00<00:00, 22.52it/s] 35%|###4      | 9/26 [00:00<00:00, 28.59it/s] 50%|#####     | 13/26 [00:00<00:00, 31.60it/s] 65%|######5   | 17/26 [00:00<00:00, 33.33it/s] 81%|########  | 21/26 [00:00<00:00, 34.41it/s] 96%|#########6| 25/26 [00:00<00:00, 34.52it/s]100%|##########| 26/26 [00:00<00:00, 29.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 4.225 (5.915)	train_nll   0.39 (  0.39)	train_penalty   0.04 (  0.05)	weight_norm   3.83 (  5.52)	train_acc   0.83 (  0.85)	train_minacc   0.03 (  0.08)	train_majacc   0.97 (  0.98)	train_corr   0.00 (  0.00)	l1 6.4316 (6.9699)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.79it/s] 27%|##6       | 7/26 [00:00<00:00, 36.00it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.00it/s] 50%|#####     | 13/26 [00:00<00:00, 42.58it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.57it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.57it/s] 96%|#########6| 25/26 [00:00<00:00, 48.22it/s]100%|##########| 26/26 [00:00<00:00, 40.44it/s]
Test: [   0/  26]	Loss 0.427 (0.427)	test_acc   0.83 (  0.83)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.427 (0.427)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.345 (0.379)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.345 (0.379)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.419 (0.380)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.419 (0.380)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.373 (0.377)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.373 (0.377)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.30it/s]
Test: [  0/  1]	Loss 1.693 (1.693)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.693 (1.693)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.693 (1.693)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.693 (1.693)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Overall Timing[  1/  1]	epoch_time 0.0351 (0.0555)	validation_time 0.0004 (0.0035)	train_time 0.0346 (0.0497)
record: (train_acc, test_acc) (0.8493000227808952, 0.12700000405311584)
last accs (train_acc, test_acc) (0.8482000253796578, 0.11000000685453415)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.65it/s] 19%|#9        | 5/26 [00:00<00:01, 18.92it/s] 35%|###4      | 9/26 [00:00<00:00, 25.34it/s] 50%|#####     | 13/26 [00:00<00:00, 29.23it/s] 65%|######5   | 17/26 [00:00<00:00, 31.60it/s] 81%|########  | 21/26 [00:00<00:00, 33.05it/s] 96%|#########6| 25/26 [00:00<00:00, 33.62it/s]100%|##########| 26/26 [00:00<00:00, 27.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 2.640 (3.290)	train_nll   0.39 (  0.38)	train_penalty   0.03 (  0.04)	weight_norm   2.25 (  2.91)	train_acc   0.83 (  0.85)	train_minacc   0.14 (  0.13)	train_majacc   0.95 (  0.98)	train_corr   0.00 (  0.00)	l1 5.0365 (5.7119)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.85it/s] 27%|##6       | 7/26 [00:00<00:00, 36.48it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.48it/s] 46%|####6     | 12/26 [00:00<00:00, 39.74it/s] 69%|######9   | 18/26 [00:00<00:00, 47.01it/s]                                                69%|######9   | 18/26 [00:00<00:00, 47.01it/s] 92%|#########2| 24/26 [00:00<00:00, 47.56it/s]100%|##########| 26/26 [00:00<00:00, 40.28it/s]
Test: [   0/  26]	Loss 0.453 (0.453)	test_acc   0.83 (  0.83)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.453 (0.453)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  10/  26]	Loss 0.375 (0.400)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.375 (0.400)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  20/  26]	Loss 0.431 (0.398)	test_acc   0.83 (  0.85)	test_minacc   0.01 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.431 (0.398)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.01 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  26/  26]	Loss 0.386 (0.395)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.386 (0.395)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 56.23it/s]
Test: [  0/  1]	Loss 1.913 (1.913)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.913 (1.913)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 1.913 (1.913)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.913 (1.913)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Overall Timing[  2/  1]	epoch_time 0.0356 (0.0488)	validation_time 0.0007 (0.0026)	train_time 0.0349 (0.0447)
record: (train_acc, test_acc) (0.8493000227808952, 0.12700000405311584)
last accs (train_acc, test_acc) (0.8494000220298767, 0.10100000351667404)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.56it/s] 19%|#9        | 5/26 [00:00<00:01, 18.91it/s] 35%|###4      | 9/26 [00:00<00:00, 25.09it/s] 50%|#####     | 13/26 [00:00<00:00, 28.92it/s] 65%|######5   | 17/26 [00:00<00:00, 31.06it/s] 81%|########  | 21/26 [00:00<00:00, 32.53it/s] 96%|#########6| 25/26 [00:00<00:00, 33.11it/s]100%|##########| 26/26 [00:00<00:00, 26.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 1.822 (2.180)	train_nll   0.38 (  0.38)	train_penalty   0.07 (  0.05)	weight_norm   1.44 (  1.80)	train_acc   0.85 (  0.85)	train_minacc   0.03 (  0.09)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 4.8060 (4.6411)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.20it/s] 31%|###       | 8/26 [00:00<00:00, 37.42it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.42it/s] 50%|#####     | 13/26 [00:00<00:00, 40.66it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.34it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.34it/s] 96%|#########6| 25/26 [00:00<00:00, 47.22it/s]100%|##########| 26/26 [00:00<00:00, 40.22it/s]
Test: [   0/  26]	Loss 0.421 (0.421)	test_acc   0.82 (  0.82)	test_minacc   0.20 (  0.20)	test_majacc   0.96 (  0.96)	Loss_d 0.421 (0.421)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.328 (0.360)	test_acc   0.87 (  0.85)	test_minacc   0.33 (  0.24)	test_majacc   0.96 (  0.96)	Loss_d 0.328 (0.360)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.33 (  0.24)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  20/  26]	Loss 0.407 (0.360)	test_acc   0.84 (  0.85)	test_minacc   0.24 (  0.24)	test_majacc   0.96 (  0.96)	Loss_d 0.407 (0.360)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.90)
Test: [  26/  26]	Loss 0.310 (0.352)	test_acc   0.87 (  0.85)	test_minacc   0.28 (  0.26)	test_majacc   0.97 (  0.96)	Loss_d 0.310 (0.352)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.28 (  0.26)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.89 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.69it/s]
Test: [  0/  1]	Loss 1.745 (1.745)	test_acc   0.27 (  0.27)	test_minacc   0.19 (  0.19)	test_majacc   0.94 (  0.94)	Loss_d 1.745 (1.745)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.72 (  0.72)
Test: [  1/  1]	Loss 1.745 (1.745)	test_acc   0.27 (  0.27)	test_minacc   0.19 (  0.19)	test_majacc   0.94 (  0.94)	Loss_d 1.745 (1.745)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.72 (  0.72)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/56/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0374 (0.0460)	validation_time 0.0004 (0.0020)	train_time 0.0370 (0.0428)
record: (train_acc, test_acc) (0.8533000279068946, 0.2680000066757202)
last accs (train_acc, test_acc) (0.8533000279068946, 0.2680000066757202)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.40it/s] 19%|#9        | 5/26 [00:00<00:01, 19.97it/s] 35%|###4      | 9/26 [00:00<00:00, 25.14it/s] 50%|#####     | 13/26 [00:00<00:00, 28.52it/s] 65%|######5   | 17/26 [00:00<00:00, 30.83it/s] 81%|########  | 21/26 [00:00<00:00, 32.34it/s] 96%|#########6| 25/26 [00:00<00:00, 33.38it/s]100%|##########| 26/26 [00:00<00:00, 27.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.280 (1.531)	train_nll   0.35 (  0.37)	train_penalty   0.02 (  0.04)	weight_norm   0.93 (  1.16)	train_acc   0.85 (  0.85)	train_minacc   0.08 (  0.10)	train_majacc   0.98 (  0.98)	train_corr   0.00 (  0.00)	l1 4.6064 (4.7417)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.01it/s] 31%|###       | 8/26 [00:00<00:00, 36.37it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.37it/s] 50%|#####     | 13/26 [00:00<00:00, 42.09it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.37it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.37it/s] 92%|#########2| 24/26 [00:00<00:00, 48.32it/s]100%|##########| 26/26 [00:00<00:00, 41.07it/s]
Test: [   0/  26]	Loss 0.420 (0.420)	test_acc   0.83 (  0.83)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 0.420 (0.420)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.369 (0.371)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.369 (0.371)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.405 (0.369)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.405 (0.369)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.94)
Test: [  26/  26]	Loss 0.338 (0.364)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.338 (0.364)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.63it/s]
Test: [  0/  1]	Loss 1.720 (1.720)	test_acc   0.13 (  0.13)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 1.720 (1.720)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.89 (  0.89)
Test: [  1/  1]	Loss 1.720 (1.720)	test_acc   0.13 (  0.13)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 1.720 (1.720)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.89 (  0.89)
Overall Timing[  4/  1]	epoch_time 0.0372 (0.0442)	validation_time 0.0005 (0.0017)	train_time 0.0366 (0.0416)
record: (train_acc, test_acc) (0.8533000279068946, 0.2680000066757202)
last accs (train_acc, test_acc) (0.8495000231862068, 0.1300000101327896)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.91it/s] 19%|#9        | 5/26 [00:00<00:00, 23.68it/s] 35%|###4      | 9/26 [00:00<00:00, 28.10it/s] 50%|#####     | 13/26 [00:00<00:00, 30.96it/s] 65%|######5   | 17/26 [00:00<00:00, 32.34it/s] 81%|########  | 21/26 [00:00<00:00, 33.16it/s] 96%|#########6| 25/26 [00:00<00:00, 33.83it/s]100%|##########| 26/26 [00:00<00:00, 29.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.965 (1.118)	train_nll   0.35 (  0.36)	train_penalty   0.02 (  0.03)	weight_norm   0.61 (  0.75)	train_acc   0.85 (  0.85)	train_minacc   0.31 (  0.13)	train_majacc   0.94 (  0.97)	train_corr   0.00 (  0.00)	l1 5.8825 (5.1456)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.49it/s] 19%|#9        | 5/26 [00:00<00:00, 25.27it/s]                                               19%|#9        | 5/26 [00:00<00:00, 25.27it/s] 42%|####2     | 11/26 [00:00<00:00, 38.97it/s] 62%|######1   | 16/26 [00:00<00:00, 42.05it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.05it/s] 85%|########4 | 22/26 [00:00<00:00, 47.90it/s]100%|##########| 26/26 [00:00<00:00, 38.63it/s]
Test: [   0/  26]	Loss 0.416 (0.416)	test_acc   0.83 (  0.83)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.416 (0.416)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.332 (0.369)	test_acc   0.87 (  0.85)	test_minacc   0.07 (  0.06)	test_majacc   1.00 (  0.99)	Loss_d 0.332 (0.369)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.07 (  0.06)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.95)
Test: [  20/  26]	Loss 0.425 (0.366)	test_acc   0.83 (  0.85)	test_minacc   0.07 (  0.06)	test_majacc   0.98 (  0.99)	Loss_d 0.425 (0.366)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.07 (  0.06)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  26/  26]	Loss 0.327 (0.359)	test_acc   0.86 (  0.85)	test_minacc   0.06 (  0.06)	test_majacc   1.00 (  0.99)	Loss_d 0.327 (0.359)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.06 (  0.06)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.25it/s]
Test: [  0/  1]	Loss 2.017 (2.017)	test_acc   0.14 (  0.14)	test_minacc   0.04 (  0.04)	test_majacc   0.98 (  0.98)	Loss_d 2.017 (2.017)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  1/  1]	Loss 2.017 (2.017)	test_acc   0.14 (  0.14)	test_minacc   0.04 (  0.04)	test_majacc   0.98 (  0.98)	Loss_d 2.017 (2.017)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Overall Timing[  5/  1]	epoch_time 0.0360 (0.0429)	validation_time 0.0003 (0.0015)	train_time 0.0357 (0.0406)
record: (train_acc, test_acc) (0.8533000279068946, 0.2680000066757202)
last accs (train_acc, test_acc) (0.8505000230073929, 0.13700000941753387)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.23it/s] 15%|#5        | 4/26 [00:00<00:01, 19.60it/s] 31%|###       | 8/26 [00:00<00:00, 26.15it/s] 46%|####6     | 12/26 [00:00<00:00, 28.90it/s] 62%|######1   | 16/26 [00:00<00:00, 30.36it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.08it/s] 92%|#########2| 24/26 [00:00<00:00, 31.85it/s]100%|##########| 26/26 [00:00<00:00, 27.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.727 (0.860)	train_nll   0.32 (  0.36)	train_penalty   0.02 (  0.03)	weight_norm   0.41 (  0.50)	train_acc   0.84 (  0.85)	train_minacc   0.06 (  0.11)	train_majacc   0.98 (  0.98)	train_corr   0.00 (  0.00)	l1 6.8470 (6.5984)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.46it/s] 27%|##6       | 7/26 [00:00<00:00, 33.56it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.56it/s] 50%|#####     | 13/26 [00:00<00:00, 40.32it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.21it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.21it/s] 96%|#########6| 25/26 [00:00<00:00, 46.80it/s]100%|##########| 26/26 [00:00<00:00, 38.59it/s]
Test: [   0/  26]	Loss 0.395 (0.395)	test_acc   0.84 (  0.84)	test_minacc   0.22 (  0.22)	test_majacc   0.97 (  0.97)	Loss_d 0.395 (0.395)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.335 (0.347)	test_acc   0.86 (  0.85)	test_minacc   0.29 (  0.26)	test_majacc   0.95 (  0.96)	Loss_d 0.335 (0.347)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.29 (  0.26)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.86 (  0.87)
Test: [  20/  26]	Loss 0.424 (0.351)	test_acc   0.83 (  0.85)	test_minacc   0.31 (  0.28)	test_majacc   0.94 (  0.95)	Loss_d 0.424 (0.351)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.31 (  0.28)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.87 (  0.87)
Test: [  26/  26]	Loss 0.296 (0.343)	test_acc   0.85 (  0.85)	test_minacc   0.28 (  0.29)	test_majacc   0.94 (  0.95)	Loss_d 0.296 (0.343)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.28 (  0.29)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.88 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.21it/s]
Test: [  0/  1]	Loss 1.583 (1.583)	test_acc   0.31 (  0.31)	test_minacc   0.23 (  0.23)	test_majacc   0.95 (  0.95)	Loss_d 1.583 (1.583)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.68 (  0.68)
Test: [  1/  1]	Loss 1.583 (1.583)	test_acc   0.31 (  0.31)	test_minacc   0.23 (  0.23)	test_majacc   0.95 (  0.95)	Loss_d 1.583 (1.583)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.68 (  0.68)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/56/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0370 (0.0420)	validation_time 0.0004 (0.0013)	train_time 0.0366 (0.0400)
record: (train_acc, test_acc) (0.8541000224947929, 0.3050000071525574)
last accs (train_acc, test_acc) (0.8541000224947929, 0.3050000071525574)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.79it/s] 19%|#9        | 5/26 [00:00<00:01, 20.14it/s] 31%|###       | 8/26 [00:00<00:00, 22.95it/s] 46%|####6     | 12/26 [00:00<00:00, 27.89it/s] 62%|######1   | 16/26 [00:00<00:00, 30.93it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.61it/s] 92%|#########2| 24/26 [00:00<00:00, 33.58it/s]100%|##########| 26/26 [00:00<00:00, 27.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.622 (0.715)	train_nll   0.32 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.30 (  0.36)	train_acc   0.86 (  0.85)	train_minacc   0.08 (  0.13)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 8.3957 (8.1320)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.12it/s] 31%|###       | 8/26 [00:00<00:00, 38.81it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.81it/s] 50%|#####     | 13/26 [00:00<00:00, 41.07it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.48it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.48it/s] 96%|#########6| 25/26 [00:00<00:00, 47.72it/s]100%|##########| 26/26 [00:00<00:00, 39.96it/s]
Test: [   0/  26]	Loss 0.378 (0.378)	test_acc   0.83 (  0.83)	test_minacc   0.19 (  0.19)	test_majacc   0.96 (  0.96)	Loss_d 0.378 (0.378)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.326 (0.331)	test_acc   0.88 (  0.85)	test_minacc   0.33 (  0.23)	test_majacc   0.97 (  0.97)	Loss_d 0.326 (0.331)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.33 (  0.23)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.89)
Test: [  20/  26]	Loss 0.390 (0.331)	test_acc   0.83 (  0.86)	test_minacc   0.25 (  0.24)	test_majacc   0.95 (  0.97)	Loss_d 0.390 (0.331)	test_acc_d   0.83 (  0.86)	test_minacc_d   0.25 (  0.24)	test_majacc_d   0.95 (  0.97)	test_corr_d   0.88 (  0.89)
Test: [  26/  26]	Loss 0.298 (0.325)	test_acc   0.84 (  0.86)	test_minacc   0.14 (  0.24)	test_majacc   0.96 (  0.97)	Loss_d 0.298 (0.325)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.14 (  0.24)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.90 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.81it/s]
Test: [  0/  1]	Loss 1.646 (1.646)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.95 (  0.95)	Loss_d 1.646 (1.646)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.76 (  0.76)
Test: [  1/  1]	Loss 1.646 (1.646)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.95 (  0.95)	Loss_d 1.646 (1.646)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.76 (  0.76)
Overall Timing[  7/  1]	epoch_time 0.0350 (0.0411)	validation_time 0.0003 (0.0012)	train_time 0.0347 (0.0394)
record: (train_acc, test_acc) (0.8541000224947929, 0.3050000071525574)
last accs (train_acc, test_acc) (0.8579000255465508, 0.24300001561641693)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.56it/s] 15%|#5        | 4/26 [00:00<00:01, 17.75it/s] 31%|###       | 8/26 [00:00<00:00, 25.09it/s] 46%|####6     | 12/26 [00:00<00:00, 28.71it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.86it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.06it/s] 88%|########8 | 23/26 [00:00<00:00, 32.77it/s]100%|##########| 26/26 [00:00<00:00, 27.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.517 (0.588)	train_nll   0.32 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.20 (  0.24)	train_acc   0.86 (  0.85)	train_minacc   0.14 (  0.17)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 10.2438 (9.5577)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.55it/s] 27%|##6       | 7/26 [00:00<00:00, 32.73it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.73it/s] 50%|#####     | 13/26 [00:00<00:00, 38.67it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.66it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.66it/s] 96%|#########6| 25/26 [00:00<00:00, 46.12it/s]100%|##########| 26/26 [00:00<00:00, 38.10it/s]
Test: [   0/  26]	Loss 0.366 (0.366)	test_acc   0.84 (  0.84)	test_minacc   0.33 (  0.33)	test_majacc   0.94 (  0.94)	Loss_d 0.366 (0.366)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.340 (0.343)	test_acc   0.85 (  0.84)	test_minacc   0.38 (  0.31)	test_majacc   0.93 (  0.93)	Loss_d 0.340 (0.343)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.38 (  0.31)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.86 (  0.87)
Test: [  20/  26]	Loss 0.411 (0.344)	test_acc   0.82 (  0.84)	test_minacc   0.34 (  0.33)	test_majacc   0.92 (  0.93)	Loss_d 0.411 (0.344)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.34 (  0.33)	test_majacc_d   0.92 (  0.93)	test_corr_d   0.84 (  0.87)
Test: [  26/  26]	Loss 0.306 (0.338)	test_acc   0.88 (  0.85)	test_minacc   0.39 (  0.35)	test_majacc   0.96 (  0.94)	Loss_d 0.306 (0.338)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.39 (  0.35)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.89 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.30it/s]
Test: [  0/  1]	Loss 1.497 (1.497)	test_acc   0.35 (  0.35)	test_minacc   0.29 (  0.29)	test_majacc   0.89 (  0.89)	Loss_d 1.497 (1.497)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.63 (  0.63)
Test: [  1/  1]	Loss 1.497 (1.497)	test_acc   0.35 (  0.35)	test_minacc   0.29 (  0.29)	test_majacc   0.89 (  0.89)	Loss_d 1.497 (1.497)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.63 (  0.63)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/56/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0374 (0.0407)	validation_time 0.0004 (0.0011)	train_time 0.0370 (0.0391)
record: (train_acc, test_acc) (0.8470000228881835, 0.3530000150203705)
last accs (train_acc, test_acc) (0.8470000228881835, 0.3530000150203705)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.46it/s] 19%|#9        | 5/26 [00:00<00:00, 23.28it/s] 35%|###4      | 9/26 [00:00<00:00, 28.25it/s] 50%|#####     | 13/26 [00:00<00:00, 31.40it/s] 65%|######5   | 17/26 [00:00<00:00, 32.73it/s] 81%|########  | 21/26 [00:00<00:00, 33.16it/s] 96%|#########6| 25/26 [00:00<00:00, 33.39it/s]100%|##########| 26/26 [00:00<00:00, 28.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.507 (0.534)	train_nll   0.35 (  0.35)	train_penalty   0.05 (  0.03)	weight_norm   0.16 (  0.18)	train_acc   0.86 (  0.85)	train_minacc   0.08 (  0.17)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 12.5005 (11.4324)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.43it/s] 27%|##6       | 7/26 [00:00<00:00, 36.33it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.33it/s] 50%|#####     | 13/26 [00:00<00:00, 42.53it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.38it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.38it/s] 96%|#########6| 25/26 [00:00<00:00, 48.26it/s]100%|##########| 26/26 [00:00<00:00, 40.44it/s]
Test: [   0/  26]	Loss 0.378 (0.378)	test_acc   0.84 (  0.84)	test_minacc   0.22 (  0.22)	test_majacc   0.98 (  0.98)	Loss_d 0.378 (0.378)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.308 (0.330)	test_acc   0.89 (  0.86)	test_minacc   0.31 (  0.22)	test_majacc   0.98 (  0.97)	Loss_d 0.308 (0.330)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.31 (  0.22)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.91 (  0.92)
Test: [  20/  26]	Loss 0.389 (0.333)	test_acc   0.84 (  0.86)	test_minacc   0.31 (  0.22)	test_majacc   0.95 (  0.97)	Loss_d 0.389 (0.333)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.31 (  0.22)	test_majacc_d   0.95 (  0.97)	test_corr_d   0.89 (  0.91)
Test: [  26/  26]	Loss 0.307 (0.326)	test_acc   0.86 (  0.86)	test_minacc   0.25 (  0.23)	test_majacc   0.97 (  0.97)	Loss_d 0.307 (0.326)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.25 (  0.23)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.92 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.72it/s]
Test: [  0/  1]	Loss 1.704 (1.704)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.93 (  0.93)	Loss_d 1.704 (1.704)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.78 (  0.78)
Test: [  1/  1]	Loss 1.704 (1.704)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.93 (  0.93)	Loss_d 1.704 (1.704)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.78 (  0.78)
Overall Timing[  9/  1]	epoch_time 0.0381 (0.0405)	validation_time 0.0003 (0.0010)	train_time 0.0377 (0.0390)
record: (train_acc, test_acc) (0.8470000228881835, 0.3530000150203705)
last accs (train_acc, test_acc) (0.8592000226974488, 0.23500001430511475)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.41it/s] 19%|#9        | 5/26 [00:00<00:00, 22.83it/s] 35%|###4      | 9/26 [00:00<00:00, 27.47it/s] 50%|#####     | 13/26 [00:00<00:00, 30.27it/s] 65%|######5   | 17/26 [00:00<00:00, 32.13it/s] 81%|########  | 21/26 [00:00<00:00, 33.08it/s] 96%|#########6| 25/26 [00:00<00:00, 33.58it/s]100%|##########| 26/26 [00:00<00:00, 28.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.445 (0.482)	train_nll   0.32 (  0.34)	train_penalty   0.02 (  0.02)	weight_norm   0.12 (  0.14)	train_acc   0.87 (  0.85)	train_minacc   0.19 (  0.23)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 14.0914 (13.3967)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.94it/s] 23%|##3       | 6/26 [00:00<00:00, 32.68it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.68it/s] 42%|####2     | 11/26 [00:00<00:00, 40.31it/s] 65%|######5   | 17/26 [00:00<00:00, 44.48it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.48it/s] 88%|########8 | 23/26 [00:00<00:00, 49.02it/s]100%|##########| 26/26 [00:00<00:00, 39.86it/s]
Test: [   0/  26]	Loss 0.379 (0.379)	test_acc   0.83 (  0.83)	test_minacc   0.10 (  0.10)	test_majacc   0.98 (  0.98)	Loss_d 0.379 (0.379)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.309 (0.347)	test_acc   0.87 (  0.85)	test_minacc   0.13 (  0.15)	test_majacc   0.99 (  0.98)	Loss_d 0.309 (0.347)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.13 (  0.15)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.93 (  0.92)
Test: [  20/  26]	Loss 0.397 (0.346)	test_acc   0.82 (  0.85)	test_minacc   0.19 (  0.14)	test_majacc   0.95 (  0.98)	Loss_d 0.397 (0.346)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.19 (  0.14)	test_majacc_d   0.95 (  0.98)	test_corr_d   0.90 (  0.93)
Test: [  26/  26]	Loss 0.304 (0.340)	test_acc   0.88 (  0.85)	test_minacc   0.22 (  0.14)	test_majacc   0.99 (  0.98)	Loss_d 0.304 (0.340)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.22 (  0.14)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.93 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.39it/s]
Test: [  0/  1]	Loss 1.725 (1.725)	test_acc   0.20 (  0.20)	test_minacc   0.12 (  0.12)	test_majacc   0.95 (  0.95)	Loss_d 1.725 (1.725)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.79 (  0.79)
Test: [  1/  1]	Loss 1.725 (1.725)	test_acc   0.20 (  0.20)	test_minacc   0.12 (  0.12)	test_majacc   0.95 (  0.95)	Loss_d 1.725 (1.725)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.79 (  0.79)
Overall Timing[ 10/  1]	epoch_time 0.0367 (0.0401)	validation_time 0.0004 (0.0010)	train_time 0.0362 (0.0387)
record: (train_acc, test_acc) (0.8470000228881835, 0.3530000150203705)
last accs (train_acc, test_acc) (0.8540000271201134, 0.203000009059906)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.98it/s] 19%|#9        | 5/26 [00:00<00:00, 22.56it/s] 35%|###4      | 9/26 [00:00<00:00, 27.45it/s] 50%|#####     | 13/26 [00:00<00:00, 30.33it/s] 65%|######5   | 17/26 [00:00<00:00, 31.13it/s] 81%|########  | 21/26 [00:00<00:00, 32.50it/s] 96%|#########6| 25/26 [00:00<00:00, 33.64it/s]100%|##########| 26/26 [00:00<00:00, 28.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.434 (0.453)	train_nll   0.33 (  0.34)	train_penalty   0.03 (  0.03)	weight_norm   0.10 (  0.11)	train_acc   0.86 (  0.85)	train_minacc   0.06 (  0.22)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 15.6267 (14.9809)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.92it/s] 19%|#9        | 5/26 [00:00<00:00, 25.27it/s]                                               19%|#9        | 5/26 [00:00<00:00, 25.27it/s] 42%|####2     | 11/26 [00:00<00:00, 38.31it/s] 62%|######1   | 16/26 [00:00<00:00, 42.24it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.24it/s] 85%|########4 | 22/26 [00:00<00:00, 46.37it/s]100%|##########| 26/26 [00:00<00:00, 38.39it/s]
Test: [   0/  26]	Loss 0.375 (0.375)	test_acc   0.84 (  0.84)	test_minacc   0.38 (  0.38)	test_majacc   0.94 (  0.94)	Loss_d 0.375 (0.375)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.321 (0.345)	test_acc   0.85 (  0.85)	test_minacc   0.31 (  0.32)	test_majacc   0.94 (  0.94)	Loss_d 0.321 (0.345)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.31 (  0.32)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.88 (  0.88)
Test: [  20/  26]	Loss 0.400 (0.347)	test_acc   0.82 (  0.85)	test_minacc   0.31 (  0.32)	test_majacc   0.93 (  0.94)	Loss_d 0.400 (0.347)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.31 (  0.32)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.86 (  0.88)
Test: [  26/  26]	Loss 0.299 (0.340)	test_acc   0.90 (  0.85)	test_minacc   0.44 (  0.33)	test_majacc   0.98 (  0.95)	Loss_d 0.299 (0.340)	test_acc_d   0.90 (  0.85)	test_minacc_d   0.44 (  0.33)	test_majacc_d   0.98 (  0.95)	test_corr_d   0.89 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.09it/s]
Test: [  0/  1]	Loss 1.479 (1.479)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.91 (  0.91)	Loss_d 1.479 (1.479)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.63 (  0.63)
Test: [  1/  1]	Loss 1.479 (1.479)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.91 (  0.91)	Loss_d 1.479 (1.479)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.63 (  0.63)
Overall Timing[ 11/  1]	epoch_time 0.0372 (0.0399)	validation_time 0.0003 (0.0009)	train_time 0.0369 (0.0386)
record: (train_acc, test_acc) (0.8470000228881835, 0.3530000150203705)
last accs (train_acc, test_acc) (0.8536000269055366, 0.33500000834465027)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.59it/s] 19%|#9        | 5/26 [00:00<00:00, 22.05it/s] 35%|###4      | 9/26 [00:00<00:00, 27.22it/s] 50%|#####     | 13/26 [00:00<00:00, 29.34it/s] 65%|######5   | 17/26 [00:00<00:00, 31.22it/s] 81%|########  | 21/26 [00:00<00:00, 32.66it/s] 96%|#########6| 25/26 [00:00<00:00, 33.20it/s]100%|##########| 26/26 [00:00<00:00, 28.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.405 (0.439)	train_nll   0.31 (  0.34)	train_penalty   0.02 (  0.02)	weight_norm   0.09 (  0.10)	train_acc   0.85 (  0.85)	train_minacc   0.33 (  0.26)	train_majacc   0.94 (  0.96)	train_corr   0.00 (  0.00)	l1 17.2724 (16.5135)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.81it/s] 27%|##6       | 7/26 [00:00<00:00, 35.77it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.77it/s] 50%|#####     | 13/26 [00:00<00:00, 41.05it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.20it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.20it/s] 96%|#########6| 25/26 [00:00<00:00, 47.56it/s]100%|##########| 26/26 [00:00<00:00, 40.14it/s]
Test: [   0/  26]	Loss 0.372 (0.372)	test_acc   0.83 (  0.83)	test_minacc   0.28 (  0.28)	test_majacc   0.94 (  0.94)	Loss_d 0.372 (0.372)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.301 (0.324)	test_acc   0.87 (  0.86)	test_minacc   0.40 (  0.33)	test_majacc   0.95 (  0.95)	Loss_d 0.301 (0.324)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.40 (  0.33)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.89 (  0.90)
Test: [  20/  26]	Loss 0.381 (0.322)	test_acc   0.84 (  0.86)	test_minacc   0.33 (  0.32)	test_majacc   0.95 (  0.95)	Loss_d 0.381 (0.322)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.33 (  0.32)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.88 (  0.90)
Test: [  26/  26]	Loss 0.283 (0.317)	test_acc   0.87 (  0.86)	test_minacc   0.28 (  0.33)	test_majacc   0.97 (  0.96)	Loss_d 0.283 (0.317)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.28 (  0.33)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.91 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.37it/s]
Test: [  0/  1]	Loss 1.495 (1.495)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.92 (  0.92)	Loss_d 1.495 (1.495)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.67 (  0.67)
Test: [  1/  1]	Loss 1.495 (1.495)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.92 (  0.92)	Loss_d 1.495 (1.495)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.67 (  0.67)
Overall Timing[ 12/  1]	epoch_time 0.0368 (0.0396)	validation_time 0.0004 (0.0009)	train_time 0.0363 (0.0384)
record: (train_acc, test_acc) (0.8470000228881835, 0.3530000150203705)
last accs (train_acc, test_acc) (0.8608000239729882, 0.31700000166893005)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.80it/s] 19%|#9        | 5/26 [00:00<00:00, 23.75it/s] 35%|###4      | 9/26 [00:00<00:00, 28.47it/s] 50%|#####     | 13/26 [00:00<00:00, 30.57it/s] 65%|######5   | 17/26 [00:00<00:00, 31.71it/s] 81%|########  | 21/26 [00:00<00:00, 32.55it/s] 96%|#########6| 25/26 [00:00<00:00, 33.41it/s]100%|##########| 26/26 [00:00<00:00, 27.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.386 (0.423)	train_nll   0.30 (  0.33)	train_penalty   0.01 (  0.02)	weight_norm   0.09 (  0.09)	train_acc   0.87 (  0.86)	train_minacc   0.56 (  0.27)	train_majacc   0.92 (  0.96)	train_corr   0.00 (  0.00)	l1 18.7119 (18.0303)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.34it/s] 27%|##6       | 7/26 [00:00<00:00, 31.81it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.81it/s] 50%|#####     | 13/26 [00:00<00:00, 39.69it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.36it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.36it/s] 96%|#########6| 25/26 [00:00<00:00, 46.82it/s]100%|##########| 26/26 [00:00<00:00, 38.36it/s]
Test: [   0/  26]	Loss 0.380 (0.380)	test_acc   0.85 (  0.85)	test_minacc   0.35 (  0.35)	test_majacc   0.95 (  0.95)	Loss_d 0.380 (0.380)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.336 (0.328)	test_acc   0.86 (  0.86)	test_minacc   0.35 (  0.35)	test_majacc   0.95 (  0.95)	Loss_d 0.336 (0.328)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.88 (  0.88)
Test: [  20/  26]	Loss 0.383 (0.326)	test_acc   0.84 (  0.86)	test_minacc   0.40 (  0.36)	test_majacc   0.93 (  0.95)	Loss_d 0.383 (0.326)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.40 (  0.36)	test_majacc_d   0.93 (  0.95)	test_corr_d   0.88 (  0.88)
Test: [  26/  26]	Loss 0.281 (0.319)	test_acc   0.88 (  0.86)	test_minacc   0.39 (  0.38)	test_majacc   0.96 (  0.95)	Loss_d 0.281 (0.319)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.39 (  0.38)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.90 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.38it/s]
Test: [  0/  1]	Loss 1.470 (1.470)	test_acc   0.35 (  0.35)	test_minacc   0.29 (  0.29)	test_majacc   0.90 (  0.90)	Loss_d 1.470 (1.470)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.63 (  0.63)
Test: [  1/  1]	Loss 1.470 (1.470)	test_acc   0.35 (  0.35)	test_minacc   0.29 (  0.29)	test_majacc   0.90 (  0.90)	Loss_d 1.470 (1.470)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.63 (  0.63)
Overall Timing[ 13/  1]	epoch_time 0.0360 (0.0394)	validation_time 0.0004 (0.0009)	train_time 0.0356 (0.0382)
record: (train_acc, test_acc) (0.8470000228881835, 0.3530000150203705)
last accs (train_acc, test_acc) (0.8627000254392624, 0.3490000069141388)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.32it/s] 15%|#5        | 4/26 [00:00<00:01, 17.16it/s] 31%|###       | 8/26 [00:00<00:00, 24.16it/s] 46%|####6     | 12/26 [00:00<00:00, 27.25it/s] 62%|######1   | 16/26 [00:00<00:00, 29.53it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.84it/s] 92%|#########2| 24/26 [00:00<00:00, 31.92it/s]100%|##########| 26/26 [00:00<00:00, 26.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.404 (0.412)	train_nll   0.33 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.08 (  0.09)	train_acc   0.87 (  0.86)	train_minacc   0.31 (  0.27)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 19.5397 (19.1950)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.27it/s] 19%|#9        | 5/26 [00:00<00:00, 26.20it/s] 38%|###8      | 10/26 [00:00<00:00, 33.23it/s]                                                38%|###8      | 10/26 [00:00<00:00, 33.23it/s] 62%|######1   | 16/26 [00:00<00:00, 42.36it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.36it/s] 85%|########4 | 22/26 [00:00<00:00, 44.43it/s]100%|##########| 26/26 [00:00<00:00, 37.93it/s]
Test: [   0/  26]	Loss 0.350 (0.350)	test_acc   0.85 (  0.85)	test_minacc   0.36 (  0.36)	test_majacc   0.95 (  0.95)	Loss_d 0.350 (0.350)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.293 (0.310)	test_acc   0.87 (  0.86)	test_minacc   0.36 (  0.37)	test_majacc   0.96 (  0.95)	Loss_d 0.293 (0.310)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.36 (  0.37)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.88 (  0.88)
Test: [  20/  26]	Loss 0.380 (0.313)	test_acc   0.84 (  0.86)	test_minacc   0.36 (  0.37)	test_majacc   0.94 (  0.95)	Loss_d 0.380 (0.313)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.36 (  0.37)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.86 (  0.88)
Test: [  26/  26]	Loss 0.282 (0.308)	test_acc   0.89 (  0.87)	test_minacc   0.44 (  0.38)	test_majacc   0.97 (  0.95)	Loss_d 0.282 (0.308)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.44 (  0.38)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.89 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.76it/s]
Test: [  0/  1]	Loss 1.317 (1.317)	test_acc   0.33 (  0.33)	test_minacc   0.26 (  0.26)	test_majacc   0.93 (  0.93)	Loss_d 1.317 (1.317)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.61 (  0.61)
Test: [  1/  1]	Loss 1.317 (1.317)	test_acc   0.33 (  0.33)	test_minacc   0.26 (  0.26)	test_majacc   0.93 (  0.93)	Loss_d 1.317 (1.317)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.61 (  0.61)
Overall Timing[ 14/  1]	epoch_time 0.0380 (0.0393)	validation_time 0.0003 (0.0008)	train_time 0.0377 (0.0381)
record: (train_acc, test_acc) (0.8470000228881835, 0.3530000150203705)
last accs (train_acc, test_acc) (0.8660000234246253, 0.3290000259876251)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.70it/s] 19%|#9        | 5/26 [00:00<00:00, 21.64it/s] 35%|###4      | 9/26 [00:00<00:00, 26.87it/s] 50%|#####     | 13/26 [00:00<00:00, 29.91it/s] 65%|######5   | 17/26 [00:00<00:00, 31.44it/s] 81%|########  | 21/26 [00:00<00:00, 32.87it/s] 96%|#########6| 25/26 [00:00<00:00, 33.19it/s]100%|##########| 26/26 [00:00<00:00, 28.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.004 (0.158)	train_nll   0.64 (  0.42)	train_penalty   0.00 (  0.01)	weight_norm   0.11 (  0.08)	train_acc   0.64 (  0.79)	train_minacc   0.47 (  0.50)	train_majacc   0.66 (  0.85)	train_corr   0.00 (  0.00)	l1 19.6278 (19.8882)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.59it/s] 27%|##6       | 7/26 [00:00<00:00, 33.62it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.62it/s] 50%|#####     | 13/26 [00:00<00:00, 40.18it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.58it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.58it/s] 96%|#########6| 25/26 [00:00<00:00, 47.10it/s]100%|##########| 26/26 [00:00<00:00, 38.82it/s]
Test: [   0/  26]	Loss 0.599 (0.599)	test_acc   0.67 (  0.67)	test_minacc   0.48 (  0.48)	test_majacc   0.72 (  0.72)	Loss_d 0.599 (0.599)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.43 (  0.43)
Test: [  10/  26]	Loss 0.557 (0.604)	test_acc   0.74 (  0.68)	test_minacc   0.69 (  0.57)	test_majacc   0.75 (  0.70)	Loss_d 0.557 (0.604)	test_acc_d   0.74 (  0.68)	test_minacc_d   0.69 (  0.57)	test_majacc_d   0.75 (  0.70)	test_corr_d   0.42 (  0.39)
Test: [  20/  26]	Loss 0.628 (0.607)	test_acc   0.65 (  0.67)	test_minacc   0.49 (  0.56)	test_majacc   0.69 (  0.69)	Loss_d 0.628 (0.607)	test_acc_d   0.65 (  0.67)	test_minacc_d   0.49 (  0.56)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.38 (  0.38)
Test: [  26/  26]	Loss 0.633 (0.607)	test_acc   0.65 (  0.68)	test_minacc   0.50 (  0.57)	test_majacc   0.68 (  0.69)	Loss_d 0.633 (0.607)	test_acc_d   0.65 (  0.68)	test_minacc_d   0.50 (  0.57)	test_majacc_d   0.68 (  0.69)	test_corr_d   0.37 (  0.37)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.02it/s]
Test: [  0/  1]	Loss 0.734 (0.734)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.66 (  0.66)	Loss_d 0.734 (0.734)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.734 (0.734)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.66 (  0.66)	Loss_d 0.734 (0.734)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.03 (  0.03)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/56/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0379 (0.0392)	validation_time 0.0004 (0.0008)	train_time 0.0375 (0.0381)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.52it/s] 19%|#9        | 5/26 [00:00<00:01, 20.92it/s] 35%|###4      | 9/26 [00:00<00:00, 26.20it/s] 50%|#####     | 13/26 [00:00<00:00, 28.87it/s] 65%|######5   | 17/26 [00:00<00:00, 29.99it/s] 81%|########  | 21/26 [00:00<00:00, 31.22it/s] 96%|#########6| 25/26 [00:00<00:00, 32.34it/s]100%|##########| 26/26 [00:00<00:00, 27.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.13 (  0.13)	train_acc   0.52 (  0.57)	train_minacc   0.64 (  0.65)	train_majacc   0.50 (  0.55)	train_corr   0.00 (  0.00)	l1 19.1789 (19.3167)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.20it/s] 27%|##6       | 7/26 [00:00<00:00, 28.51it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.51it/s] 50%|#####     | 13/26 [00:00<00:00, 36.97it/s] 77%|#######6  | 20/26 [00:00<00:00, 45.90it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 45.90it/s] 96%|#########6| 25/26 [00:00<00:00, 45.44it/s]100%|##########| 26/26 [00:00<00:00, 36.34it/s]
Test: [   0/  26]	Loss 0.671 (0.671)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.61 (  0.61)	Loss_d 0.671 (0.671)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.15 (  0.15)
Test: [  10/  26]	Loss 0.667 (0.681)	test_acc   0.61 (  0.56)	test_minacc   0.71 (  0.61)	test_majacc   0.59 (  0.55)	Loss_d 0.667 (0.681)	test_acc_d   0.61 (  0.56)	test_minacc_d   0.71 (  0.61)	test_majacc_d   0.59 (  0.55)	test_corr_d   0.11 (  0.07)
Test: [  20/  26]	Loss 0.691 (0.682)	test_acc   0.51 (  0.55)	test_minacc   0.61 (  0.62)	test_majacc   0.49 (  0.54)	Loss_d 0.691 (0.682)	test_acc_d   0.51 (  0.55)	test_minacc_d   0.61 (  0.62)	test_majacc_d   0.49 (  0.54)	test_corr_d   0.05 (  0.05)
Test: [  26/  26]	Loss 0.682 (0.682)	test_acc   0.53 (  0.55)	test_minacc   0.64 (  0.62)	test_majacc   0.51 (  0.54)	Loss_d 0.682 (0.682)	test_acc_d   0.53 (  0.55)	test_minacc_d   0.64 (  0.62)	test_majacc_d   0.51 (  0.54)	test_corr_d   0.07 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.28it/s]
Test: [  0/  1]	Loss 0.673 (0.673)	test_acc   0.58 (  0.58)	test_minacc   0.58 (  0.58)	test_majacc   0.55 (  0.55)	Loss_d 0.673 (0.673)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.673 (0.673)	test_acc   0.58 (  0.58)	test_minacc   0.58 (  0.58)	test_majacc   0.55 (  0.55)	Loss_d 0.673 (0.673)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 16/  1]	epoch_time 0.0368 (0.0391)	validation_time 0.0005 (0.0008)	train_time 0.0362 (0.0380)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.5500000111460686, 0.578000009059906)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.96it/s] 19%|#9        | 5/26 [00:00<00:00, 22.01it/s] 35%|###4      | 9/26 [00:00<00:00, 27.01it/s] 50%|#####     | 13/26 [00:00<00:00, 28.89it/s] 65%|######5   | 17/26 [00:00<00:00, 30.49it/s] 81%|########  | 21/26 [00:00<00:00, 31.62it/s] 96%|#########6| 25/26 [00:00<00:00, 31.80it/s]100%|##########| 26/26 [00:00<00:00, 27.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.53 (  0.54)	train_minacc   0.56 (  0.59)	train_majacc   0.52 (  0.53)	train_corr   0.00 (  0.00)	l1 19.1410 (19.1518)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.70it/s] 31%|###       | 8/26 [00:00<00:00, 39.52it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.52it/s] 50%|#####     | 13/26 [00:00<00:00, 42.30it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.05it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.05it/s] 96%|#########6| 25/26 [00:00<00:00, 48.00it/s]100%|##########| 26/26 [00:00<00:00, 39.52it/s]
Test: [   0/  26]	Loss 0.680 (0.680)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.57 (  0.57)	Loss_d 0.680 (0.680)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.678 (0.685)	test_acc   0.59 (  0.55)	test_minacc   0.65 (  0.58)	test_majacc   0.58 (  0.54)	Loss_d 0.678 (0.685)	test_acc_d   0.59 (  0.55)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.14 (  0.11)
Test: [  20/  26]	Loss 0.691 (0.686)	test_acc   0.49 (  0.53)	test_minacc   0.58 (  0.58)	test_majacc   0.47 (  0.53)	Loss_d 0.691 (0.686)	test_acc_d   0.49 (  0.53)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.47 (  0.53)	test_corr_d   0.11 (  0.08)
Test: [  26/  26]	Loss 0.684 (0.686)	test_acc   0.53 (  0.53)	test_minacc   0.56 (  0.58)	test_majacc   0.52 (  0.52)	Loss_d 0.684 (0.686)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.56 (  0.58)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.11 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.40it/s]
Test: [  0/  1]	Loss 0.685 (0.685)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.51 (  0.51)	Loss_d 0.685 (0.685)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.685 (0.685)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.51 (  0.51)	Loss_d 0.685 (0.685)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 17/  1]	epoch_time 0.0375 (0.0390)	validation_time 0.0003 (0.0008)	train_time 0.0372 (0.0380)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.5329000154435635, 0.5420000553131104)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.40it/s] 23%|##3       | 6/26 [00:00<00:00, 28.49it/s] 38%|###8      | 10/26 [00:00<00:00, 30.27it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.49it/s] 69%|######9   | 18/26 [00:00<00:00, 32.49it/s] 85%|########4 | 22/26 [00:00<00:00, 33.15it/s]100%|##########| 26/26 [00:00<00:00, 33.60it/s]100%|##########| 26/26 [00:00<00:00, 29.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.53 (  0.53)	train_minacc   0.56 (  0.57)	train_majacc   0.52 (  0.52)	train_corr   0.00 (  0.00)	l1 19.1392 (19.1389)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.47it/s] 27%|##6       | 7/26 [00:00<00:00, 34.19it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.19it/s] 50%|#####     | 13/26 [00:00<00:00, 39.36it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.69it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.69it/s] 96%|#########6| 25/26 [00:00<00:00, 44.65it/s]100%|##########| 26/26 [00:00<00:00, 38.16it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.55 (  0.55)	Loss_d 0.687 (0.687)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.15 (  0.15)
Test: [  10/  26]	Loss 0.686 (0.689)	test_acc   0.57 (  0.54)	test_minacc   0.60 (  0.57)	test_majacc   0.57 (  0.53)	Loss_d 0.686 (0.689)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.60 (  0.57)	test_majacc_d   0.57 (  0.53)	test_corr_d   0.12 (  0.09)
Test: [  20/  26]	Loss 0.692 (0.690)	test_acc   0.49 (  0.53)	test_minacc   0.58 (  0.58)	test_majacc   0.47 (  0.52)	Loss_d 0.692 (0.690)	test_acc_d   0.49 (  0.53)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.47 (  0.52)	test_corr_d   0.12 (  0.07)
Test: [  26/  26]	Loss 0.687 (0.690)	test_acc   0.53 (  0.53)	test_minacc   0.56 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.687 (0.690)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.56 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.10 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.66it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.52 (  0.52)	Loss_d 0.688 (0.688)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.52 (  0.52)	Loss_d 0.688 (0.688)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 18/  1]	epoch_time 0.0377 (0.0389)	validation_time 0.0004 (0.0007)	train_time 0.0373 (0.0379)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.5252000135779381, 0.5390000343322754)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.05it/s] 19%|#9        | 5/26 [00:00<00:01, 20.85it/s] 35%|###4      | 9/26 [00:00<00:00, 26.40it/s] 50%|#####     | 13/26 [00:00<00:00, 29.72it/s] 65%|######5   | 17/26 [00:00<00:00, 31.13it/s] 81%|########  | 21/26 [00:00<00:00, 32.39it/s] 96%|#########6| 25/26 [00:00<00:00, 33.12it/s]100%|##########| 26/26 [00:00<00:00, 27.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.54 (  0.52)	train_minacc   0.58 (  0.57)	train_majacc   0.54 (  0.51)	train_corr   0.00 (  0.00)	l1 19.1413 (19.1403)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.35it/s] 27%|##6       | 7/26 [00:00<00:00, 36.34it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.34it/s] 50%|#####     | 13/26 [00:00<00:00, 43.20it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.70it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.70it/s] 96%|#########6| 25/26 [00:00<00:00, 49.47it/s]100%|##########| 26/26 [00:00<00:00, 40.67it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.55 (  0.54)	test_minacc   0.51 (  0.57)	test_majacc   0.55 (  0.53)	Loss_d 0.691 (0.692)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.51 (  0.57)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.05 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.58 (  0.54)	test_minacc   0.55 (  0.57)	test_majacc   0.58 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.58 (  0.54)	test_minacc_d   0.55 (  0.57)	test_majacc_d   0.58 (  0.53)	test_corr_d   0.07 (  0.01)
Test: [  26/  26]	Loss 0.688 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.56 (  0.56)	test_majacc   0.54 (  0.53)	Loss_d 0.688 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.09 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.26it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.49 (  0.49)	Loss_d 0.689 (0.689)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.49 (  0.49)	Loss_d 0.689 (0.689)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 19/  1]	epoch_time 0.0363 (0.0388)	validation_time 0.0003 (0.0007)	train_time 0.0359 (0.0378)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.5350000159442425, 0.5680000185966492)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.58it/s] 19%|#9        | 5/26 [00:00<00:00, 24.85it/s] 35%|###4      | 9/26 [00:00<00:00, 29.29it/s] 50%|#####     | 13/26 [00:00<00:00, 31.43it/s] 65%|######5   | 17/26 [00:00<00:00, 32.53it/s] 81%|########  | 21/26 [00:00<00:00, 33.12it/s] 96%|#########6| 25/26 [00:00<00:00, 33.32it/s]100%|##########| 26/26 [00:00<00:00, 29.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.49 (  0.50)	train_minacc   0.47 (  0.55)	train_majacc   0.50 (  0.49)	train_corr   0.00 (  0.00)	l1 19.1426 (19.1422)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.79it/s] 35%|###4      | 9/26 [00:00<00:00, 37.61it/s]                                               35%|###4      | 9/26 [00:00<00:00, 37.61it/s] 62%|######1   | 16/26 [00:00<00:00, 48.01it/s]                                                62%|######1   | 16/26 [00:00<00:00, 48.01it/s] 85%|########4 | 22/26 [00:00<00:00, 46.84it/s]100%|##########| 26/26 [00:00<00:00, 39.41it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.52 (  0.52)	test_majacc   0.41 (  0.41)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.48)	test_minacc   0.42 (  0.53)	test_majacc   0.43 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.48)	test_minacc_d   0.42 (  0.53)	test_majacc_d   0.43 (  0.47)	test_corr_d  -0.01 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.49)	test_minacc   0.40 (  0.52)	test_majacc   0.55 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.49)	test_minacc_d   0.40 (  0.52)	test_majacc_d   0.55 (  0.48)	test_corr_d   0.03 ( -0.03)
Test: [  26/  26]	Loss 0.690 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.52)	test_majacc   0.49 (  0.48)	Loss_d 0.690 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.52)	test_majacc_d   0.49 (  0.48)	test_corr_d   0.07 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.05it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.43 (  0.43)	Loss_d 0.690 (0.690)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.43 (  0.43)	Loss_d 0.690 (0.690)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 20/  1]	epoch_time 0.0376 (0.0387)	validation_time 0.0007 (0.0007)	train_time 0.0369 (0.0378)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.4834000109434128, 0.562000036239624)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.43it/s] 19%|#9        | 5/26 [00:00<00:00, 22.21it/s] 35%|###4      | 9/26 [00:00<00:00, 27.84it/s] 50%|#####     | 13/26 [00:00<00:00, 30.30it/s] 65%|######5   | 17/26 [00:00<00:00, 31.85it/s] 81%|########  | 21/26 [00:00<00:00, 33.03it/s] 96%|#########6| 25/26 [00:00<00:00, 34.08it/s]100%|##########| 26/26 [00:00<00:00, 28.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.48 (  0.49)	train_minacc   0.50 (  0.51)	train_majacc   0.47 (  0.49)	train_corr   0.00 (  0.00)	l1 19.1423 (19.1424)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.95it/s] 27%|##6       | 7/26 [00:00<00:00, 34.73it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.73it/s] 50%|#####     | 13/26 [00:00<00:00, 41.92it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.26it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.26it/s] 96%|#########6| 25/26 [00:00<00:00, 47.98it/s]100%|##########| 26/26 [00:00<00:00, 40.16it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.52 (  0.52)	test_majacc   0.39 (  0.39)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.09 ( -0.09)
Test: [  10/  26]	Loss 0.693 (0.694)	test_acc   0.45 (  0.47)	test_minacc   0.49 (  0.54)	test_majacc   0.44 (  0.46)	Loss_d 0.693 (0.694)	test_acc_d   0.45 (  0.47)	test_minacc_d   0.49 (  0.54)	test_majacc_d   0.44 (  0.46)	test_corr_d  -0.02 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.48)	test_minacc   0.42 (  0.53)	test_majacc   0.57 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.48)	test_minacc_d   0.42 (  0.53)	test_majacc_d   0.57 (  0.47)	test_corr_d   0.03 ( -0.04)
Test: [  26/  26]	Loss 0.690 (0.693)	test_acc   0.46 (  0.48)	test_minacc   0.50 (  0.53)	test_majacc   0.46 (  0.47)	Loss_d 0.690 (0.693)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.50 (  0.53)	test_majacc_d   0.46 (  0.47)	test_corr_d   0.06 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.63it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.41 (  0.41)	Loss_d 0.690 (0.690)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.41 (  0.41)	Loss_d 0.690 (0.690)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 21/  1]	epoch_time 0.0371 (0.0386)	validation_time 0.0004 (0.0007)	train_time 0.0367 (0.0377)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.477700002849102, 0.5790000557899475)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.76it/s] 19%|#9        | 5/26 [00:00<00:00, 23.94it/s] 35%|###4      | 9/26 [00:00<00:00, 28.32it/s] 50%|#####     | 13/26 [00:00<00:00, 29.79it/s] 65%|######5   | 17/26 [00:00<00:00, 31.69it/s] 81%|########  | 21/26 [00:00<00:00, 32.96it/s] 96%|#########6| 25/26 [00:00<00:00, 33.25it/s]100%|##########| 26/26 [00:00<00:00, 28.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.48 (  0.48)	train_minacc   0.67 (  0.53)	train_majacc   0.45 (  0.48)	train_corr   0.00 (  0.00)	l1 19.1417 (19.1419)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.91it/s] 27%|##6       | 7/26 [00:00<00:00, 38.41it/s]                                               27%|##6       | 7/26 [00:00<00:00, 38.41it/s] 50%|#####     | 13/26 [00:00<00:00, 43.71it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.57it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.57it/s] 96%|#########6| 25/26 [00:00<00:00, 48.70it/s]100%|##########| 26/26 [00:00<00:00, 41.05it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.58 (  0.58)	test_majacc   0.39 (  0.39)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.09 ( -0.09)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.51 (  0.57)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.51 (  0.57)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.02 ( -0.05)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.55 (  0.48)	test_minacc   0.43 (  0.56)	test_majacc   0.57 (  0.46)	Loss_d 0.694 (0.693)	test_acc_d   0.55 (  0.48)	test_minacc_d   0.43 (  0.56)	test_majacc_d   0.57 (  0.46)	test_corr_d   0.03 ( -0.04)
Test: [  26/  26]	Loss 0.690 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.67 (  0.56)	test_majacc   0.45 (  0.46)	Loss_d 0.690 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.67 (  0.56)	test_majacc_d   0.45 (  0.46)	test_corr_d   0.05 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.07it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.40 (  0.40)	Loss_d 0.690 (0.690)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.40 (  0.40)	Loss_d 0.690 (0.690)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 22/  1]	epoch_time 0.0370 (0.0386)	validation_time 0.0007 (0.0007)	train_time 0.0363 (0.0377)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.47760000547766684, 0.5830000042915344)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.22it/s] 15%|#5        | 4/26 [00:00<00:01, 16.90it/s] 27%|##6       | 7/26 [00:00<00:00, 19.40it/s] 35%|###4      | 9/26 [00:00<00:00, 19.05it/s] 42%|####2     | 11/26 [00:00<00:00, 18.67it/s] 50%|#####     | 13/26 [00:00<00:00, 18.48it/s] 58%|#####7    | 15/26 [00:00<00:00, 18.22it/s] 65%|######5   | 17/26 [00:00<00:00, 17.81it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.35it/s] 81%|########  | 21/26 [00:01<00:00, 16.89it/s] 88%|########8 | 23/26 [00:01<00:00, 16.74it/s] 96%|#########6| 25/26 [00:01<00:00, 16.72it/s]100%|##########| 26/26 [00:01<00:00, 16.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 345 tensor(-0.0222, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
rho, theta 403 tensor(-0.0018, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
rho, theta 417 tensor(-0.0009, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
rho, theta 419 tensor(-0.0008, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
rho, theta 421 tensor(-0.0007, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
rho, theta 431 tensor(-0.0007, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
rho, theta 433 tensor(-0.0006, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
rho, theta 445 tensor(-0.0006, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
rho, theta 461 tensor(-0.0005, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
rho, theta 465 tensor(-0.0004, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
rho, theta 473 tensor(-0.0004, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
rho, theta 477 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
rho, theta 485 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
rho, theta 493 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
rho, theta 500 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
rho, theta 506 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
rho, theta 507 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
rho, theta 508 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
rho, theta 486 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
rho, theta 502 tensor(-0.0003, device='cuda:0')
Epoch: [23][  26/  26]	Loss 0.000 (0.008)	train_nll   0.70 (  0.70)	train_penalty   0.00 (  0.01)	weight_norm   0.16 (  0.15)	train_acc   0.49 (  0.52)	train_minacc   0.47 (  0.53)	train_majacc   0.49 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0571 (15.6784)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.28it/s] 27%|##6       | 7/26 [00:00<00:00, 36.60it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.60it/s] 50%|#####     | 13/26 [00:00<00:00, 41.64it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.60it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.60it/s] 96%|#########6| 25/26 [00:00<00:00, 46.85it/s]100%|##########| 26/26 [00:00<00:00, 39.68it/s]
Test: [   0/  26]	Loss 0.700 (0.700)	test_acc   0.46 (  0.46)	test_minacc   0.49 (  0.49)	test_majacc   0.45 (  0.45)	Loss_d 0.700 (0.700)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.19 ( -0.19)
Test: [  10/  26]	Loss 0.701 (0.699)	test_acc   0.46 (  0.48)	test_minacc   0.49 (  0.49)	test_majacc   0.46 (  0.47)	Loss_d 0.701 (0.699)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.46 (  0.47)	test_corr_d  -0.21 ( -0.20)
Test: [  20/  26]	Loss 0.693 (0.698)	test_acc   0.53 (  0.49)	test_minacc   0.46 (  0.50)	test_majacc   0.54 (  0.49)	Loss_d 0.693 (0.698)	test_acc_d   0.53 (  0.49)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.54 (  0.49)	test_corr_d  -0.22 ( -0.21)
Test: [  26/  26]	Loss 0.698 (0.698)	test_acc   0.49 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.49 (  0.48)	Loss_d 0.698 (0.698)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.49 (  0.48)	test_corr_d  -0.19 ( -0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.34it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 23/  1]	epoch_time 0.0487 (0.0390)	validation_time 0.0006 (0.0007)	train_time 0.0481 (0.0381)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.4873000085949898, 0.5010000467300415)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.52it/s] 12%|#1        | 3/26 [00:00<00:02, 11.20it/s] 19%|#9        | 5/26 [00:00<00:01, 13.19it/s] 27%|##6       | 7/26 [00:00<00:01, 14.41it/s] 35%|###4      | 9/26 [00:00<00:01, 15.15it/s] 42%|####2     | 11/26 [00:00<00:00, 15.63it/s] 50%|#####     | 13/26 [00:00<00:00, 16.10it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.30it/s] 65%|######5   | 17/26 [00:01<00:00, 16.42it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.60it/s] 81%|########  | 21/26 [00:01<00:00, 16.62it/s] 88%|########8 | 23/26 [00:01<00:00, 16.74it/s] 96%|#########6| 25/26 [00:01<00:00, 16.74it/s]100%|##########| 26/26 [00:01<00:00, 15.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
rho, theta 508 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
rho, theta 505 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
rho, theta 507 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
rho, theta 509 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
rho, theta 510 tensor(-6.1726e-05, device='cuda:0')
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.70)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.50 (  0.49)	train_minacc   0.47 (  0.50)	train_majacc   0.50 (  0.49)	train_corr   0.00 (  0.00)	l1 15.0148 (15.0324)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.79it/s] 23%|##3       | 6/26 [00:00<00:00, 33.05it/s]                                               23%|##3       | 6/26 [00:00<00:00, 33.05it/s] 46%|####6     | 12/26 [00:00<00:00, 43.49it/s] 65%|######5   | 17/26 [00:00<00:00, 45.48it/s]                                                65%|######5   | 17/26 [00:00<00:00, 45.48it/s] 85%|########4 | 22/26 [00:00<00:00, 45.71it/s]100%|##########| 26/26 [00:00<00:00, 40.41it/s]
Test: [   0/  26]	Loss 0.697 (0.697)	test_acc   0.47 (  0.47)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.47)	Loss_d 0.697 (0.697)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.697 (0.696)	test_acc   0.48 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.49)	Loss_d 0.697 (0.696)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.05 (  0.01)
Test: [  20/  26]	Loss 0.690 (0.695)	test_acc   0.53 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.690 (0.695)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.15 (  0.03)
Test: [  26/  26]	Loss 0.694 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.47 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.13 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.10it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 24/  1]	epoch_time 0.0513 (0.0395)	validation_time 0.0004 (0.0007)	train_time 0.0509 (0.0386)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.4986000117063522, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.22it/s] 12%|#1        | 3/26 [00:00<00:02,  9.35it/s] 19%|#9        | 5/26 [00:00<00:01, 12.08it/s] 27%|##6       | 7/26 [00:00<00:01, 13.70it/s] 35%|###4      | 9/26 [00:00<00:01, 14.59it/s] 42%|####2     | 11/26 [00:00<00:00, 15.25it/s] 50%|#####     | 13/26 [00:00<00:00, 15.80it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.10it/s] 65%|######5   | 17/26 [00:01<00:00, 16.26it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.19it/s] 81%|########  | 21/26 [00:01<00:00, 16.12it/s] 88%|########8 | 23/26 [00:01<00:00, 16.40it/s] 96%|#########6| 25/26 [00:01<00:00, 16.63it/s]100%|##########| 26/26 [00:01<00:00, 14.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
rho, theta 510 tensor(0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.50 (  0.50)	train_minacc   0.47 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 15.0199 (15.0281)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.39it/s] 27%|##6       | 7/26 [00:00<00:00, 35.46it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.46it/s] 46%|####6     | 12/26 [00:00<00:00, 41.44it/s] 65%|######5   | 17/26 [00:00<00:00, 43.67it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.67it/s] 88%|########8 | 23/26 [00:00<00:00, 48.77it/s]100%|##########| 26/26 [00:00<00:00, 39.80it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.48 (  0.48)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.47)	Loss_d 0.695 (0.695)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.695 (0.694)	test_acc   0.48 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.49)	Loss_d 0.695 (0.694)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.40 (  0.33)
Test: [  20/  26]	Loss 0.690 (0.693)	test_acc   0.53 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.690 (0.693)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.40 (  0.34)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.47 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.47 (  0.35)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.50it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 25/  1]	epoch_time 0.0499 (0.0399)	validation_time 0.0004 (0.0007)	train_time 0.0495 (0.0390)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.4994000128209591, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.46it/s] 12%|#1        | 3/26 [00:00<00:02, 10.39it/s] 19%|#9        | 5/26 [00:00<00:01, 12.84it/s] 27%|##6       | 7/26 [00:00<00:01, 14.29it/s] 35%|###4      | 9/26 [00:00<00:01, 15.22it/s] 42%|####2     | 11/26 [00:00<00:00, 15.59it/s] 50%|#####     | 13/26 [00:00<00:00, 15.83it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.05it/s] 65%|######5   | 17/26 [00:01<00:00, 16.22it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.36it/s] 81%|########  | 21/26 [00:01<00:00, 16.30it/s] 88%|########8 | 23/26 [00:01<00:00, 16.32it/s] 96%|#########6| 25/26 [00:01<00:00, 16.41it/s]100%|##########| 26/26 [00:01<00:00, 14.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.50 (  0.50)	train_minacc   0.47 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 15.0719 (15.0487)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.55it/s] 23%|##3       | 6/26 [00:00<00:00, 32.86it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.86it/s] 46%|####6     | 12/26 [00:00<00:00, 42.95it/s] 69%|######9   | 18/26 [00:00<00:00, 44.81it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.81it/s] 92%|#########2| 24/26 [00:00<00:00, 48.73it/s]100%|##########| 26/26 [00:00<00:00, 40.73it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.44 (  0.44)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.49)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.45 (  0.38)
Test: [  20/  26]	Loss 0.689 (0.692)	test_acc   0.53 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.689 (0.692)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.43 (  0.39)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.47 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.50 (  0.40)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.78it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 26/  1]	epoch_time 0.0512 (0.0403)	validation_time 0.0007 (0.0007)	train_time 0.0505 (0.0395)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.4994000128209591, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.27it/s] 12%|#1        | 3/26 [00:00<00:02, 10.36it/s] 19%|#9        | 5/26 [00:00<00:01, 12.65it/s] 27%|##6       | 7/26 [00:00<00:01, 14.09it/s] 35%|###4      | 9/26 [00:00<00:01, 14.52it/s] 42%|####2     | 11/26 [00:00<00:00, 15.03it/s] 50%|#####     | 13/26 [00:00<00:00, 14.57it/s] 58%|#####7    | 15/26 [00:01<00:00, 14.92it/s] 65%|######5   | 17/26 [00:01<00:00, 14.77it/s] 73%|#######3  | 19/26 [00:01<00:00, 15.12it/s] 81%|########  | 21/26 [00:01<00:00, 15.35it/s] 88%|########8 | 23/26 [00:01<00:00, 15.53it/s] 96%|#########6| 25/26 [00:01<00:00, 15.86it/s]100%|##########| 26/26 [00:01<00:00, 14.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.50 (  0.50)	train_minacc   0.47 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 15.1043 (15.0887)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.74it/s] 27%|##6       | 7/26 [00:00<00:00, 34.68it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.68it/s] 46%|####6     | 12/26 [00:00<00:00, 39.93it/s] 65%|######5   | 17/26 [00:00<00:00, 43.15it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.15it/s] 85%|########4 | 22/26 [00:00<00:00, 44.71it/s]100%|##########| 26/26 [00:00<00:00, 38.18it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.41 (  0.41)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.49)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.43 (  0.36)
Test: [  20/  26]	Loss 0.690 (0.692)	test_acc   0.53 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.42 (  0.37)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.47 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.50 (  0.38)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.70it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 27/  1]	epoch_time 0.0534 (0.0408)	validation_time 0.0004 (0.0007)	train_time 0.0530 (0.0399)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.49930001282691955, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.39it/s] 12%|#1        | 3/26 [00:00<00:01, 11.88it/s] 19%|#9        | 5/26 [00:00<00:01, 13.90it/s] 27%|##6       | 7/26 [00:00<00:01, 14.97it/s] 35%|###4      | 9/26 [00:00<00:01, 15.69it/s] 42%|####2     | 11/26 [00:00<00:00, 16.01it/s] 50%|#####     | 13/26 [00:00<00:00, 16.31it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.58it/s] 65%|######5   | 17/26 [00:01<00:00, 16.69it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.66it/s] 81%|########  | 21/26 [00:01<00:00, 16.67it/s] 88%|########8 | 23/26 [00:01<00:00, 16.53it/s] 96%|#########6| 25/26 [00:01<00:00, 16.61it/s]100%|##########| 26/26 [00:01<00:00, 15.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.50 (  0.50)	train_minacc   0.47 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 15.1318 (15.1180)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.75it/s] 23%|##3       | 6/26 [00:00<00:00, 28.99it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.99it/s] 46%|####6     | 12/26 [00:00<00:00, 40.94it/s] 65%|######5   | 17/26 [00:00<00:00, 43.18it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.18it/s] 88%|########8 | 23/26 [00:00<00:00, 47.48it/s]100%|##########| 26/26 [00:00<00:00, 38.18it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.49)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.41 (  0.33)
Test: [  20/  26]	Loss 0.690 (0.692)	test_acc   0.53 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.42 (  0.35)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.47 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.48 (  0.36)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.67it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 28/  1]	epoch_time 0.0506 (0.0411)	validation_time 0.0004 (0.0007)	train_time 0.0502 (0.0403)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.4991000140011311, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.89it/s] 12%|#1        | 3/26 [00:00<00:02, 11.07it/s] 19%|#9        | 5/26 [00:00<00:01, 13.31it/s] 27%|##6       | 7/26 [00:00<00:01, 14.61it/s] 35%|###4      | 9/26 [00:00<00:01, 15.35it/s] 42%|####2     | 11/26 [00:00<00:00, 15.84it/s] 50%|#####     | 13/26 [00:00<00:00, 16.13it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.37it/s] 65%|######5   | 17/26 [00:01<00:00, 16.43it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.63it/s] 81%|########  | 21/26 [00:01<00:00, 16.61it/s] 88%|########8 | 23/26 [00:01<00:00, 16.72it/s] 96%|#########6| 25/26 [00:01<00:00, 16.76it/s]100%|##########| 26/26 [00:01<00:00, 15.08it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.50 (  0.50)	train_minacc   0.47 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 15.1577 (15.1446)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.99it/s] 31%|###       | 8/26 [00:00<00:00, 36.29it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.29it/s] 50%|#####     | 13/26 [00:00<00:00, 39.75it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.76it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.76it/s] 96%|#########6| 25/26 [00:00<00:00, 47.06it/s]100%|##########| 26/26 [00:00<00:00, 38.78it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.34 (  0.34)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.49)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.39 (  0.29)
Test: [  20/  26]	Loss 0.690 (0.692)	test_acc   0.53 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.42 (  0.32)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.47 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.46 (  0.33)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.06it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 29/  1]	epoch_time 0.0506 (0.0414)	validation_time 0.0003 (0.0006)	train_time 0.0503 (0.0406)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.4989000128507614, 0.49900001287460327)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.81it/s] 12%|#1        | 3/26 [00:00<00:01, 12.33it/s] 19%|#9        | 5/26 [00:00<00:01, 14.33it/s] 27%|##6       | 7/26 [00:00<00:01, 15.36it/s] 35%|###4      | 9/26 [00:00<00:01, 15.99it/s] 42%|####2     | 11/26 [00:00<00:00, 16.38it/s] 50%|#####     | 13/26 [00:00<00:00, 16.56it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.69it/s] 65%|######5   | 17/26 [00:01<00:00, 16.61it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.59it/s] 81%|########  | 21/26 [00:01<00:00, 16.68it/s] 88%|########8 | 23/26 [00:01<00:00, 16.64it/s] 96%|#########6| 25/26 [00:01<00:00, 16.55it/s]100%|##########| 26/26 [00:01<00:00, 15.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.50 (  0.50)	train_minacc   0.47 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 15.1821 (15.1698)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.43it/s] 27%|##6       | 7/26 [00:00<00:00, 35.50it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.50it/s] 50%|#####     | 13/26 [00:00<00:00, 41.36it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.94it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.94it/s] 96%|#########6| 25/26 [00:00<00:00, 47.71it/s]100%|##########| 26/26 [00:00<00:00, 39.58it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.30 (  0.30)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.49)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.36 (  0.26)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.53 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.691 (0.693)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.41 (  0.29)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.47 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.43 (  0.30)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.73it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 30/  1]	epoch_time 0.0505 (0.0417)	validation_time 0.0004 (0.0006)	train_time 0.0501 (0.0409)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.4985000117123127, 0.49900001287460327)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.34it/s] 12%|#1        | 3/26 [00:00<00:02, 10.38it/s] 19%|#9        | 5/26 [00:00<00:01, 12.83it/s] 27%|##6       | 7/26 [00:00<00:01, 13.99it/s] 35%|###4      | 9/26 [00:00<00:01, 14.81it/s] 42%|####2     | 11/26 [00:00<00:00, 15.31it/s] 50%|#####     | 13/26 [00:00<00:00, 15.75it/s] 58%|#####7    | 15/26 [00:01<00:00, 15.88it/s] 65%|######5   | 17/26 [00:01<00:00, 16.09it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.32it/s] 81%|########  | 21/26 [00:01<00:00, 16.33it/s] 88%|########8 | 23/26 [00:01<00:00, 16.49it/s] 96%|#########6| 25/26 [00:01<00:00, 16.52it/s]100%|##########| 26/26 [00:01<00:00, 14.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.50 (  0.50)	train_minacc   0.47 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 15.2050 (15.1934)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.30it/s] 27%|##6       | 7/26 [00:00<00:00, 31.73it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.73it/s] 50%|#####     | 13/26 [00:00<00:00, 40.60it/s] 69%|######9   | 18/26 [00:00<00:00, 43.44it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.44it/s] 92%|#########2| 24/26 [00:00<00:00, 48.15it/s]100%|##########| 26/26 [00:00<00:00, 38.61it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.25 (  0.25)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.49)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.32 (  0.22)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.53 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.691 (0.693)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.41 (  0.25)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.47 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.39 (  0.26)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.90it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 31/  1]	epoch_time 0.0512 (0.0420)	validation_time 0.0006 (0.0006)	train_time 0.0505 (0.0412)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.49790001174807547, 0.49900001287460327)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.88it/s] 12%|#1        | 3/26 [00:00<00:02, 11.06it/s] 19%|#9        | 5/26 [00:00<00:01, 13.24it/s] 27%|##6       | 7/26 [00:00<00:01, 14.60it/s] 35%|###4      | 9/26 [00:00<00:01, 15.21it/s] 42%|####2     | 11/26 [00:00<00:00, 15.71it/s] 50%|#####     | 13/26 [00:00<00:00, 15.99it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.15it/s] 65%|######5   | 17/26 [00:01<00:00, 16.21it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.35it/s] 81%|########  | 21/26 [00:01<00:00, 16.41it/s] 88%|########8 | 23/26 [00:01<00:00, 16.22it/s] 96%|#########6| 25/26 [00:01<00:00, 16.35it/s]100%|##########| 26/26 [00:01<00:00, 14.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.50 (  0.50)	train_minacc   0.47 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 15.2263 (15.2155)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.47it/s] 35%|###4      | 9/26 [00:00<00:00, 41.62it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.62it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.22it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.22it/s] 81%|########  | 21/26 [00:00<00:00, 48.94it/s]100%|##########| 26/26 [00:00<00:00, 42.46it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.49)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.28 (  0.18)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.53 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.691 (0.693)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.39 (  0.22)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.47 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.34 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.71it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.01 (  0.01)
Overall Timing[ 32/  1]	epoch_time 0.0504 (0.0423)	validation_time 0.0004 (0.0006)	train_time 0.0500 (0.0415)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.4970000106394291, 0.49900001287460327)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.86it/s] 12%|#1        | 3/26 [00:00<00:02, 10.97it/s] 19%|#9        | 5/26 [00:00<00:01, 13.22it/s] 27%|##6       | 7/26 [00:00<00:01, 14.56it/s] 35%|###4      | 9/26 [00:00<00:01, 15.33it/s] 42%|####2     | 11/26 [00:00<00:00, 15.79it/s] 50%|#####     | 13/26 [00:00<00:00, 16.00it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.01it/s] 65%|######5   | 17/26 [00:01<00:00, 16.11it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.22it/s] 81%|########  | 21/26 [00:01<00:00, 16.28it/s] 88%|########8 | 23/26 [00:01<00:00, 16.40it/s] 96%|#########6| 25/26 [00:01<00:00, 16.42it/s]100%|##########| 26/26 [00:01<00:00, 14.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.50 (  0.50)	train_minacc   0.47 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 15.2457 (15.2359)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.28it/s] 27%|##6       | 7/26 [00:00<00:00, 36.46it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.46it/s] 46%|####6     | 12/26 [00:00<00:00, 42.21it/s] 65%|######5   | 17/26 [00:00<00:00, 43.88it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.88it/s] 88%|########8 | 23/26 [00:00<00:00, 48.86it/s]100%|##########| 26/26 [00:00<00:00, 39.74it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.49)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.23 (  0.15)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.36 (  0.19)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.47 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.29 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.07it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.03 (  0.03)
Overall Timing[ 33/  1]	epoch_time 0.0507 (0.0425)	validation_time 0.0004 (0.0006)	train_time 0.0503 (0.0418)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.496900009483099, 0.49800002574920654)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.12it/s] 12%|#1        | 3/26 [00:00<00:02,  9.15it/s] 19%|#9        | 5/26 [00:00<00:01, 12.05it/s] 27%|##6       | 7/26 [00:00<00:01, 13.72it/s] 35%|###4      | 9/26 [00:00<00:01, 14.79it/s] 42%|####2     | 11/26 [00:00<00:00, 15.43it/s] 50%|#####     | 13/26 [00:00<00:00, 15.80it/s] 58%|#####7    | 15/26 [00:01<00:00, 15.86it/s] 65%|######5   | 17/26 [00:01<00:00, 16.06it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.23it/s] 81%|########  | 21/26 [00:01<00:00, 16.43it/s] 88%|########8 | 23/26 [00:01<00:00, 16.56it/s] 96%|#########6| 25/26 [00:01<00:00, 16.55it/s]100%|##########| 26/26 [00:01<00:00, 14.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.50 (  0.50)	train_minacc   0.47 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 15.2634 (15.2544)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 19%|#9        | 5/26 [00:00<00:00, 44.21it/s]                                               19%|#9        | 5/26 [00:00<00:00, 44.21it/s] 42%|####2     | 11/26 [00:00<00:00, 46.42it/s] 65%|######5   | 17/26 [00:00<00:00, 51.36it/s]                                                65%|######5   | 17/26 [00:00<00:00, 51.36it/s] 88%|########8 | 23/26 [00:00<00:00, 50.17it/s]100%|##########| 26/26 [00:00<00:00, 45.74it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.48)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.48)	test_corr_d   0.19 (  0.12)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.50)	test_minacc   0.46 (  0.50)	test_majacc   0.55 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.55 (  0.49)	test_corr_d   0.33 (  0.15)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.47 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.25 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.74it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.05 (  0.05)
Overall Timing[ 34/  1]	epoch_time 0.0508 (0.0428)	validation_time 0.0004 (0.0006)	train_time 0.0504 (0.0420)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.4959000132381916, 0.4970000088214874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.78it/s] 12%|#1        | 3/26 [00:00<00:02, 10.93it/s] 19%|#9        | 5/26 [00:00<00:01, 12.84it/s] 27%|##6       | 7/26 [00:00<00:01, 14.23it/s] 35%|###4      | 9/26 [00:00<00:01, 15.10it/s] 42%|####2     | 11/26 [00:00<00:00, 15.58it/s] 50%|#####     | 13/26 [00:00<00:00, 15.77it/s] 58%|#####7    | 15/26 [00:01<00:00, 15.97it/s] 65%|######5   | 17/26 [00:01<00:00, 16.31it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.48it/s] 81%|########  | 21/26 [00:01<00:00, 16.42it/s] 88%|########8 | 23/26 [00:01<00:00, 16.54it/s] 96%|#########6| 25/26 [00:01<00:00, 16.60it/s]100%|##########| 26/26 [00:01<00:00, 14.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.50 (  0.50)	train_minacc   0.47 (  0.50)	train_majacc   0.51 (  0.49)	train_corr   0.00 (  0.00)	l1 15.2793 (15.2712)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.78it/s] 27%|##6       | 7/26 [00:00<00:00, 32.86it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.86it/s] 50%|#####     | 13/26 [00:00<00:00, 40.63it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.02it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.02it/s] 92%|#########2| 24/26 [00:00<00:00, 46.49it/s]100%|##########| 26/26 [00:00<00:00, 38.50it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.49 (  0.48)	test_majacc   0.47 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.49 (  0.48)	test_majacc_d   0.47 (  0.48)	test_corr_d   0.16 (  0.10)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.49)	test_minacc   0.46 (  0.50)	test_majacc   0.55 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.49)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.55 (  0.49)	test_corr_d   0.30 (  0.13)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.47 (  0.50)	test_majacc   0.51 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.51 (  0.49)	test_corr_d   0.21 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.03it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.06 (  0.06)
Overall Timing[ 35/  1]	epoch_time 0.0499 (0.0430)	validation_time 0.0004 (0.0006)	train_time 0.0495 (0.0422)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.4950000121295452, 0.4960000216960907)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.31it/s] 12%|#1        | 3/26 [00:00<00:01, 12.08it/s] 19%|#9        | 5/26 [00:00<00:01, 13.86it/s] 27%|##6       | 7/26 [00:00<00:01, 14.41it/s] 35%|###4      | 9/26 [00:00<00:01, 15.21it/s] 42%|####2     | 11/26 [00:00<00:00, 15.69it/s] 50%|#####     | 13/26 [00:00<00:00, 16.03it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.21it/s] 65%|######5   | 17/26 [00:01<00:00, 16.46it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.63it/s] 81%|########  | 21/26 [00:01<00:00, 16.66it/s] 88%|########8 | 23/26 [00:01<00:00, 16.65it/s] 96%|#########6| 25/26 [00:01<00:00, 16.74it/s]100%|##########| 26/26 [00:01<00:00, 15.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.50 (  0.49)	train_minacc   0.47 (  0.50)	train_majacc   0.50 (  0.49)	train_corr   0.00 (  0.00)	l1 15.2934 (15.2862)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.40it/s] 23%|##3       | 6/26 [00:00<00:00, 31.74it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.74it/s] 42%|####2     | 11/26 [00:00<00:00, 39.79it/s] 65%|######5   | 17/26 [00:00<00:00, 46.27it/s]                                                65%|######5   | 17/26 [00:00<00:00, 46.27it/s] 85%|########4 | 22/26 [00:00<00:00, 45.97it/s]100%|##########| 26/26 [00:00<00:00, 40.15it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.48)	test_corr_d   0.13 (  0.08)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.49)	test_minacc   0.46 (  0.50)	test_majacc   0.55 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.49)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.55 (  0.49)	test_corr_d   0.27 (  0.11)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.18 (  0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.30it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.07 (  0.07)
Overall Timing[ 36/  1]	epoch_time 0.0506 (0.0432)	validation_time 0.0003 (0.0006)	train_time 0.0502 (0.0424)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.4940000096559525, 0.49400001764297485)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.11it/s] 12%|#1        | 3/26 [00:00<00:02, 11.23it/s] 19%|#9        | 5/26 [00:00<00:01, 13.48it/s] 27%|##6       | 7/26 [00:00<00:01, 14.71it/s] 35%|###4      | 9/26 [00:00<00:01, 15.46it/s] 42%|####2     | 11/26 [00:00<00:00, 15.96it/s] 50%|#####     | 13/26 [00:00<00:00, 16.22it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.48it/s] 65%|######5   | 17/26 [00:01<00:00, 16.64it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.64it/s] 81%|########  | 21/26 [00:01<00:00, 16.59it/s] 88%|########8 | 23/26 [00:01<00:00, 16.43it/s] 96%|#########6| 25/26 [00:01<00:00, 16.22it/s]100%|##########| 26/26 [00:01<00:00, 14.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.49 (  0.49)	train_minacc   0.44 (  0.50)	train_majacc   0.50 (  0.49)	train_corr   0.00 (  0.00)	l1 15.3058 (15.2995)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.52it/s] 31%|###       | 8/26 [00:00<00:00, 41.91it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.91it/s] 50%|#####     | 13/26 [00:00<00:00, 41.62it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.23it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.23it/s] 96%|#########6| 25/26 [00:00<00:00, 47.73it/s]100%|##########| 26/26 [00:00<00:00, 41.16it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.49 (  0.49)	test_majacc   0.46 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.46 (  0.48)	test_corr_d   0.11 (  0.06)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.49)	test_minacc   0.46 (  0.50)	test_majacc   0.55 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.49)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.55 (  0.49)	test_corr_d   0.25 (  0.09)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.44 (  0.50)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.16 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.78it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.07 (  0.07)
Overall Timing[ 37/  1]	epoch_time 0.0512 (0.0434)	validation_time 0.0006 (0.0006)	train_time 0.0506 (0.0426)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.49280000826716425, 0.4930000305175781)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.48it/s] 12%|#1        | 3/26 [00:00<00:02, 11.29it/s] 19%|#9        | 5/26 [00:00<00:01, 13.42it/s] 27%|##6       | 7/26 [00:00<00:01, 14.64it/s] 35%|###4      | 9/26 [00:00<00:01, 15.22it/s] 42%|####2     | 11/26 [00:00<00:00, 15.58it/s] 50%|#####     | 13/26 [00:00<00:00, 15.90it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.09it/s] 65%|######5   | 17/26 [00:01<00:00, 16.19it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.45it/s] 81%|########  | 21/26 [00:01<00:00, 16.39it/s] 88%|########8 | 23/26 [00:01<00:00, 16.49it/s] 96%|#########6| 25/26 [00:01<00:00, 16.62it/s]100%|##########| 26/26 [00:01<00:00, 15.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.48 (  0.49)	train_minacc   0.44 (  0.49)	train_majacc   0.49 (  0.49)	train_corr   0.00 (  0.00)	l1 15.3165 (15.3111)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.99it/s] 27%|##6       | 7/26 [00:00<00:00, 36.56it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.56it/s] 50%|#####     | 13/26 [00:00<00:00, 41.79it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.72it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.72it/s] 96%|#########6| 25/26 [00:00<00:00, 48.16it/s]100%|##########| 26/26 [00:00<00:00, 40.59it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.48)	test_minacc   0.49 (  0.48)	test_majacc   0.46 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.49 (  0.48)	test_majacc_d   0.46 (  0.48)	test_corr_d   0.10 (  0.05)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.49)	test_minacc   0.46 (  0.49)	test_majacc   0.55 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.49)	test_minacc_d   0.46 (  0.49)	test_majacc_d   0.55 (  0.49)	test_corr_d   0.23 (  0.08)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.44 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.44 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.14 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.97it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.08 (  0.08)
Overall Timing[ 38/  1]	epoch_time 0.0496 (0.0435)	validation_time 0.0004 (0.0006)	train_time 0.0492 (0.0428)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.49030000472068785, 0.492000013589859)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.39it/s] 12%|#1        | 3/26 [00:00<00:02, 10.49it/s] 19%|#9        | 5/26 [00:00<00:01, 12.83it/s] 27%|##6       | 7/26 [00:00<00:01, 14.17it/s] 35%|###4      | 9/26 [00:00<00:01, 15.01it/s] 42%|####2     | 11/26 [00:00<00:00, 15.61it/s] 50%|#####     | 13/26 [00:00<00:00, 15.95it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.19it/s] 65%|######5   | 17/26 [00:01<00:00, 16.40it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.55it/s] 81%|########  | 21/26 [00:01<00:00, 16.51it/s] 88%|########8 | 23/26 [00:01<00:00, 16.60it/s] 96%|#########6| 25/26 [00:01<00:00, 16.54it/s]100%|##########| 26/26 [00:01<00:00, 14.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.48 (  0.49)	train_minacc   0.44 (  0.49)	train_majacc   0.49 (  0.49)	train_corr   0.00 (  0.00)	l1 15.3258 (15.3211)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.60it/s] 23%|##3       | 6/26 [00:00<00:00, 31.36it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.36it/s] 42%|####2     | 11/26 [00:00<00:00, 39.03it/s] 62%|######1   | 16/26 [00:00<00:00, 41.79it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.79it/s] 85%|########4 | 22/26 [00:00<00:00, 47.10it/s]100%|##########| 26/26 [00:00<00:00, 38.79it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.48)	test_minacc   0.49 (  0.48)	test_majacc   0.46 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.49 (  0.48)	test_majacc_d   0.46 (  0.48)	test_corr_d   0.09 (  0.05)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.49)	test_minacc   0.45 (  0.49)	test_majacc   0.55 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.49)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.55 (  0.49)	test_corr_d   0.22 (  0.07)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.44 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.44 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.13 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.06it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.08 (  0.08)
Overall Timing[ 39/  1]	epoch_time 0.0515 (0.0437)	validation_time 0.0004 (0.0006)	train_time 0.0511 (0.0430)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.4888000080883503, 0.4930000305175781)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.36it/s] 12%|#1        | 3/26 [00:00<00:02, 10.75it/s] 19%|#9        | 5/26 [00:00<00:01, 12.98it/s] 27%|##6       | 7/26 [00:00<00:01, 14.37it/s] 35%|###4      | 9/26 [00:00<00:01, 15.16it/s] 42%|####2     | 11/26 [00:00<00:00, 15.76it/s] 50%|#####     | 13/26 [00:00<00:00, 16.03it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.19it/s] 65%|######5   | 17/26 [00:01<00:00, 16.17it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.16it/s] 81%|########  | 21/26 [00:01<00:00, 16.34it/s] 88%|########8 | 23/26 [00:01<00:00, 16.40it/s] 96%|#########6| 25/26 [00:01<00:00, 16.49it/s]100%|##########| 26/26 [00:01<00:00, 14.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.48 (  0.49)	train_minacc   0.44 (  0.49)	train_majacc   0.49 (  0.49)	train_corr   0.00 (  0.00)	l1 15.3338 (15.3298)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.86it/s] 27%|##6       | 7/26 [00:00<00:00, 35.27it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.27it/s] 46%|####6     | 12/26 [00:00<00:00, 40.50it/s] 69%|######9   | 18/26 [00:00<00:00, 46.70it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.70it/s] 92%|#########2| 24/26 [00:00<00:00, 47.20it/s]100%|##########| 26/26 [00:00<00:00, 39.93it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.48 (  0.48)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.49 (  0.47)	test_majacc   0.45 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.49 (  0.47)	test_majacc_d   0.45 (  0.47)	test_corr_d   0.08 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.49)	test_minacc   0.45 (  0.48)	test_majacc   0.55 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.49)	test_minacc_d   0.45 (  0.48)	test_majacc_d   0.55 (  0.49)	test_corr_d   0.21 (  0.07)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.44 (  0.48)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.44 (  0.48)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.12 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.53it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.09 (  0.09)
Overall Timing[ 40/  1]	epoch_time 0.0501 (0.0439)	validation_time 0.0006 (0.0006)	train_time 0.0495 (0.0432)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.4851000083088875, 0.49400001764297485)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.29it/s] 12%|#1        | 3/26 [00:00<00:01, 12.00it/s] 19%|#9        | 5/26 [00:00<00:01, 14.01it/s] 27%|##6       | 7/26 [00:00<00:01, 15.03it/s] 35%|###4      | 9/26 [00:00<00:01, 15.57it/s] 42%|####2     | 11/26 [00:00<00:00, 15.88it/s] 50%|#####     | 13/26 [00:00<00:00, 16.04it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.16it/s] 65%|######5   | 17/26 [00:01<00:00, 16.37it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.51it/s] 81%|########  | 21/26 [00:01<00:00, 16.45it/s] 88%|########8 | 23/26 [00:01<00:00, 16.46it/s] 96%|#########6| 25/26 [00:01<00:00, 16.52it/s]100%|##########| 26/26 [00:01<00:00, 15.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.48 (  0.48)	train_minacc   0.44 (  0.49)	train_majacc   0.49 (  0.48)	train_corr   0.00 (  0.00)	l1 15.3405 (15.3371)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.85it/s] 27%|##6       | 7/26 [00:00<00:00, 31.75it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.75it/s] 50%|#####     | 13/26 [00:00<00:00, 37.68it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.75it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.75it/s] 96%|#########6| 25/26 [00:00<00:00, 45.96it/s]100%|##########| 26/26 [00:00<00:00, 37.54it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.49 (  0.49)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.49 (  0.47)	test_majacc   0.45 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.49 (  0.47)	test_majacc_d   0.45 (  0.47)	test_corr_d   0.07 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.48)	test_minacc   0.45 (  0.48)	test_majacc   0.55 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.48)	test_minacc_d   0.45 (  0.48)	test_majacc_d   0.55 (  0.48)	test_corr_d   0.20 (  0.07)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.44 (  0.49)	test_majacc   0.49 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.44 (  0.49)	test_majacc_d   0.49 (  0.48)	test_corr_d   0.12 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.66it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.09 (  0.09)
Overall Timing[ 41/  1]	epoch_time 0.0513 (0.0441)	validation_time 0.0005 (0.0006)	train_time 0.0508 (0.0434)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.4830000061094761, 0.49400001764297485)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.41it/s] 12%|#1        | 3/26 [00:00<00:02, 11.04it/s] 19%|#9        | 5/26 [00:00<00:01, 13.27it/s] 27%|##6       | 7/26 [00:00<00:01, 14.60it/s] 35%|###4      | 9/26 [00:00<00:01, 15.23it/s] 42%|####2     | 11/26 [00:00<00:00, 15.52it/s] 50%|#####     | 13/26 [00:00<00:00, 15.78it/s] 58%|#####7    | 15/26 [00:01<00:00, 15.99it/s] 65%|######5   | 17/26 [00:01<00:00, 16.17it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.23it/s] 81%|########  | 21/26 [00:01<00:00, 16.41it/s] 88%|########8 | 23/26 [00:01<00:00, 16.41it/s] 96%|#########6| 25/26 [00:01<00:00, 16.39it/s]100%|##########| 26/26 [00:01<00:00, 14.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.47 (  0.48)	train_minacc   0.42 (  0.48)	train_majacc   0.48 (  0.48)	train_corr   0.00 (  0.00)	l1 15.3462 (15.3433)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.94it/s] 27%|##6       | 7/26 [00:00<00:00, 34.48it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.48it/s] 50%|#####     | 13/26 [00:00<00:00, 40.01it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.20it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.20it/s] 96%|#########6| 25/26 [00:00<00:00, 46.89it/s]100%|##########| 26/26 [00:00<00:00, 38.87it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.49 (  0.49)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.51 (  0.47)	test_majacc   0.45 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.51 (  0.47)	test_majacc_d   0.45 (  0.47)	test_corr_d   0.07 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.48)	test_minacc   0.46 (  0.48)	test_majacc   0.55 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.48)	test_minacc_d   0.46 (  0.48)	test_majacc_d   0.55 (  0.48)	test_corr_d   0.20 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.42 (  0.48)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.42 (  0.48)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.11 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.35it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.09 (  0.09)
Overall Timing[ 42/  1]	epoch_time 0.0502 (0.0442)	validation_time 0.0006 (0.0006)	train_time 0.0496 (0.0435)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.47960000547766685, 0.49500003457069397)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.16it/s] 12%|#1        | 3/26 [00:00<00:01, 12.19it/s] 19%|#9        | 5/26 [00:00<00:01, 14.05it/s] 27%|##6       | 7/26 [00:00<00:01, 15.03it/s] 35%|###4      | 9/26 [00:00<00:01, 15.66it/s] 42%|####2     | 11/26 [00:00<00:00, 15.58it/s] 50%|#####     | 13/26 [00:00<00:00, 15.86it/s] 58%|#####7    | 15/26 [00:00<00:00, 15.98it/s] 65%|######5   | 17/26 [00:01<00:00, 16.17it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.28it/s] 81%|########  | 21/26 [00:01<00:00, 16.30it/s] 88%|########8 | 23/26 [00:01<00:00, 16.37it/s] 96%|#########6| 25/26 [00:01<00:00, 16.51it/s]100%|##########| 26/26 [00:01<00:00, 15.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.47 (  0.48)	train_minacc   0.44 (  0.49)	train_majacc   0.48 (  0.48)	train_corr   0.00 (  0.00)	l1 15.3509 (15.3486)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.65it/s] 27%|##6       | 7/26 [00:00<00:00, 36.80it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.80it/s] 50%|#####     | 13/26 [00:00<00:00, 42.67it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.57it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.57it/s] 96%|#########6| 25/26 [00:00<00:00, 48.70it/s]100%|##########| 26/26 [00:00<00:00, 40.52it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.49 (  0.49)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.51 (  0.47)	test_majacc   0.45 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.51 (  0.47)	test_majacc_d   0.45 (  0.47)	test_corr_d   0.07 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.48)	test_minacc   0.46 (  0.49)	test_majacc   0.54 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.48)	test_minacc_d   0.46 (  0.49)	test_majacc_d   0.54 (  0.48)	test_corr_d   0.19 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.44 (  0.49)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.44 (  0.49)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.11 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.16it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.09 (  0.09)
Overall Timing[ 43/  1]	epoch_time 0.0491 (0.0443)	validation_time 0.0004 (0.0006)	train_time 0.0487 (0.0436)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.4775000032782555, 0.49500003457069397)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.27it/s] 12%|#1        | 3/26 [00:00<00:01, 12.61it/s] 19%|#9        | 5/26 [00:00<00:01, 14.56it/s] 27%|##6       | 7/26 [00:00<00:01, 15.59it/s] 35%|###4      | 9/26 [00:00<00:01, 16.12it/s] 42%|####2     | 11/26 [00:00<00:00, 16.46it/s] 50%|#####     | 13/26 [00:00<00:00, 16.45it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.52it/s] 65%|######5   | 17/26 [00:01<00:00, 16.60it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.57it/s] 81%|########  | 21/26 [00:01<00:00, 16.64it/s] 88%|########8 | 23/26 [00:01<00:00, 16.74it/s] 96%|#########6| 25/26 [00:01<00:00, 16.79it/s]100%|##########| 26/26 [00:01<00:00, 15.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.47 (  0.48)	train_minacc   0.44 (  0.49)	train_majacc   0.47 (  0.47)	train_corr   0.00 (  0.00)	l1 15.3549 (15.3529)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.60it/s] 23%|##3       | 6/26 [00:00<00:00, 29.50it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.50it/s] 46%|####6     | 12/26 [00:00<00:00, 40.23it/s] 65%|######5   | 17/26 [00:00<00:00, 43.11it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.11it/s] 88%|########8 | 23/26 [00:00<00:00, 47.87it/s]100%|##########| 26/26 [00:00<00:00, 38.21it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.49 (  0.49)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.47)	test_minacc   0.51 (  0.48)	test_majacc   0.44 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.47)	test_minacc_d   0.51 (  0.48)	test_majacc_d   0.44 (  0.46)	test_corr_d   0.07 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.47)	test_minacc   0.46 (  0.48)	test_majacc   0.53 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.47)	test_minacc_d   0.46 (  0.48)	test_majacc_d   0.53 (  0.47)	test_corr_d   0.19 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.44 (  0.48)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.44 (  0.48)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.11 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.90it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.09 (  0.09)
Overall Timing[ 44/  1]	epoch_time 0.0510 (0.0445)	validation_time 0.0006 (0.0006)	train_time 0.0504 (0.0438)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.47330000331997873, 0.4970000088214874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.01it/s] 12%|#1        | 3/26 [00:00<00:02, 11.24it/s] 19%|#9        | 5/26 [00:00<00:01, 13.56it/s] 27%|##6       | 7/26 [00:00<00:01, 14.89it/s] 35%|###4      | 9/26 [00:00<00:01, 15.53it/s] 42%|####2     | 11/26 [00:00<00:00, 16.11it/s] 50%|#####     | 13/26 [00:00<00:00, 16.31it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.32it/s] 65%|######5   | 17/26 [00:01<00:00, 16.45it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.50it/s] 81%|########  | 21/26 [00:01<00:00, 16.61it/s] 88%|########8 | 23/26 [00:01<00:00, 16.81it/s] 96%|#########6| 25/26 [00:01<00:00, 16.87it/s]100%|##########| 26/26 [00:01<00:00, 15.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.47 (  0.47)	train_minacc   0.44 (  0.48)	train_majacc   0.47 (  0.47)	train_corr   0.00 (  0.00)	l1 15.3582 (15.3566)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.90it/s] 31%|###       | 8/26 [00:00<00:00, 37.25it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.25it/s] 54%|#####3    | 14/26 [00:00<00:00, 44.69it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.65it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.65it/s]100%|##########| 26/26 [00:00<00:00, 50.00it/s]100%|##########| 26/26 [00:00<00:00, 41.49it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.51 (  0.51)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.47)	test_minacc   0.49 (  0.48)	test_majacc   0.43 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.47)	test_minacc_d   0.49 (  0.48)	test_majacc_d   0.43 (  0.46)	test_corr_d   0.07 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.47)	test_minacc   0.46 (  0.49)	test_majacc   0.53 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.47)	test_minacc_d   0.46 (  0.49)	test_majacc_d   0.53 (  0.47)	test_corr_d   0.19 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.44 (  0.48)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.44 (  0.48)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.11 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.20it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.09 (  0.09)
Overall Timing[ 45/  1]	epoch_time 0.0511 (0.0446)	validation_time 0.0003 (0.0006)	train_time 0.0508 (0.0439)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.4746000044047832, 0.5040000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.97it/s] 12%|#1        | 3/26 [00:00<00:02, 10.03it/s] 19%|#9        | 5/26 [00:00<00:01, 12.70it/s] 27%|##6       | 7/26 [00:00<00:01, 14.28it/s] 35%|###4      | 9/26 [00:00<00:01, 15.21it/s] 42%|####2     | 11/26 [00:00<00:00, 15.73it/s] 50%|#####     | 13/26 [00:00<00:00, 15.92it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.23it/s] 65%|######5   | 17/26 [00:01<00:00, 16.24it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.39it/s] 81%|########  | 21/26 [00:01<00:00, 16.39it/s] 88%|########8 | 23/26 [00:01<00:00, 16.59it/s] 96%|#########6| 25/26 [00:01<00:00, 16.71it/s]100%|##########| 26/26 [00:01<00:00, 14.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.48 (  0.48)	train_minacc   0.44 (  0.48)	train_majacc   0.49 (  0.48)	train_corr   0.00 (  0.00)	l1 15.3609 (15.3596)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.83it/s] 27%|##6       | 7/26 [00:00<00:00, 32.33it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.33it/s] 50%|#####     | 13/26 [00:00<00:00, 38.07it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.74it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.74it/s] 96%|#########6| 25/26 [00:00<00:00, 45.97it/s]100%|##########| 26/26 [00:00<00:00, 37.69it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.54 (  0.54)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.48)	test_minacc   0.49 (  0.48)	test_majacc   0.46 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.49 (  0.48)	test_majacc_d   0.46 (  0.48)	test_corr_d   0.07 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.42 (  0.48)	test_majacc   0.53 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.42 (  0.48)	test_majacc_d   0.53 (  0.49)	test_corr_d   0.19 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.44 (  0.48)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.44 (  0.48)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.10 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.19it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.09 (  0.09)
Overall Timing[ 46/  1]	epoch_time 0.0514 (0.0448)	validation_time 0.0004 (0.0006)	train_time 0.0510 (0.0441)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.4843000083565712, 0.5060000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.08it/s] 12%|#1        | 3/26 [00:00<00:01, 12.16it/s] 19%|#9        | 5/26 [00:00<00:01, 14.07it/s] 27%|##6       | 7/26 [00:00<00:01, 15.07it/s] 35%|###4      | 9/26 [00:00<00:01, 15.55it/s] 42%|####2     | 11/26 [00:00<00:00, 15.99it/s] 50%|#####     | 13/26 [00:00<00:00, 16.18it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.25it/s] 65%|######5   | 17/26 [00:01<00:00, 16.30it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.44it/s] 81%|########  | 21/26 [00:01<00:00, 16.47it/s] 88%|########8 | 23/26 [00:01<00:00, 16.07it/s] 96%|#########6| 25/26 [00:01<00:00, 16.29it/s]100%|##########| 26/26 [00:01<00:00, 15.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.48 (  0.49)	train_minacc   0.44 (  0.48)	train_majacc   0.48 (  0.49)	train_corr   0.00 (  0.00)	l1 15.3631 (15.3620)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.43it/s] 27%|##6       | 7/26 [00:00<00:00, 33.84it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.84it/s] 50%|#####     | 13/26 [00:00<00:00, 39.77it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.32it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.32it/s] 96%|#########6| 25/26 [00:00<00:00, 47.13it/s]100%|##########| 26/26 [00:00<00:00, 39.01it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.44 (  0.47)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.44 (  0.47)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.07 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.43 (  0.48)	test_majacc   0.54 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.43 (  0.48)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.19 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.44 (  0.48)	test_majacc   0.48 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.44 (  0.48)	test_majacc_d   0.48 (  0.51)	test_corr_d   0.10 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.77it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.09 (  0.09)
Overall Timing[ 47/  1]	epoch_time 0.0512 (0.0449)	validation_time 0.0004 (0.0006)	train_time 0.0507 (0.0442)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.5013000129461288, 0.5070000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.29it/s] 12%|#1        | 3/26 [00:00<00:01, 12.01it/s] 19%|#9        | 5/26 [00:00<00:01, 14.08it/s] 27%|##6       | 7/26 [00:00<00:01, 15.15it/s] 35%|###4      | 9/26 [00:00<00:01, 15.80it/s] 42%|####2     | 11/26 [00:00<00:00, 16.04it/s] 50%|#####     | 13/26 [00:00<00:00, 16.34it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.49it/s] 65%|######5   | 17/26 [00:01<00:00, 16.69it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.73it/s] 81%|########  | 21/26 [00:01<00:00, 16.71it/s] 88%|########8 | 23/26 [00:01<00:00, 16.85it/s] 96%|#########6| 25/26 [00:01<00:00, 16.94it/s]100%|##########| 26/26 [00:01<00:00, 15.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.51 (  0.51)	train_minacc   0.44 (  0.47)	train_majacc   0.52 (  0.52)	train_corr   0.00 (  0.00)	l1 15.3650 (15.3641)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.38it/s] 27%|##6       | 7/26 [00:00<00:00, 33.63it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.63it/s] 50%|#####     | 13/26 [00:00<00:00, 40.80it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.87it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.87it/s] 96%|#########6| 25/26 [00:00<00:00, 47.58it/s]100%|##########| 26/26 [00:00<00:00, 39.00it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.51 (  0.51)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.51)	test_minacc   0.44 (  0.47)	test_majacc   0.49 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.44 (  0.47)	test_majacc_d   0.49 (  0.52)	test_corr_d   0.07 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.40 (  0.47)	test_majacc   0.57 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.40 (  0.47)	test_majacc_d   0.57 (  0.53)	test_corr_d   0.18 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.44 (  0.47)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.44 (  0.47)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.10 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.31it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.09 (  0.09)
Overall Timing[ 48/  1]	epoch_time 0.0500 (0.0450)	validation_time 0.0004 (0.0006)	train_time 0.0496 (0.0443)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.5210000144839286, 0.5110000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.91it/s] 12%|#1        | 3/26 [00:00<00:01, 11.83it/s] 19%|#9        | 5/26 [00:00<00:01, 13.85it/s] 27%|##6       | 7/26 [00:00<00:01, 14.87it/s] 35%|###4      | 9/26 [00:00<00:01, 15.43it/s] 42%|####2     | 11/26 [00:00<00:00, 15.79it/s] 50%|#####     | 13/26 [00:00<00:00, 16.13it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.33it/s] 65%|######5   | 17/26 [00:01<00:00, 16.46it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.59it/s] 81%|########  | 21/26 [00:01<00:00, 16.65it/s] 88%|########8 | 23/26 [00:01<00:00, 16.78it/s] 96%|#########6| 25/26 [00:01<00:00, 16.90it/s]100%|##########| 26/26 [00:01<00:00, 15.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.17 (  0.17)	train_acc   0.52 (  0.53)	train_minacc   0.39 (  0.47)	train_majacc   0.55 (  0.54)	train_corr   0.00 (  0.00)	l1 15.3664 (15.3657)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.77it/s] 23%|##3       | 6/26 [00:00<00:00, 28.40it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.40it/s] 46%|####6     | 12/26 [00:00<00:00, 40.38it/s] 65%|######5   | 17/26 [00:00<00:00, 41.85it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.85it/s] 88%|########8 | 23/26 [00:00<00:00, 47.46it/s]100%|##########| 26/26 [00:00<00:00, 37.62it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.54)	test_minacc   0.44 (  0.46)	test_majacc   0.52 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.54)	test_minacc_d   0.44 (  0.46)	test_majacc_d   0.52 (  0.55)	test_corr_d   0.07 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.40 (  0.46)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.40 (  0.46)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.18 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.54)	test_minacc   0.39 (  0.46)	test_majacc   0.55 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.39 (  0.46)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.10 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.98it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.59 (  0.59)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.59 (  0.59)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.09 (  0.09)
Overall Timing[ 49/  1]	epoch_time 0.0505 (0.0451)	validation_time 0.0003 (0.0006)	train_time 0.0502 (0.0444)
record: (train_acc, test_acc) (0.6753000260591507, 0.5420000553131104)
last accs (train_acc, test_acc) (0.5430000101923943, 0.5190000534057617)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.156 MB of 0.156 MB uploadedwandb: \ 0.156 MB of 0.156 MB uploadedwandb: | 0.156 MB of 0.156 MB uploadedwandb: / 0.156 MB of 0.156 MB uploadedwandb: - 0.178 MB of 0.186 MB uploaded (0.003 MB deduped)wandb: \ 0.516 MB of 0.516 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/diagnostics/epoch_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▃▄▄▄▄▄▄▄▄▄▄▄▃▄▄▄▃▄▄▄▄
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/diagnostics/train_time_val █▁▁▂▁▁▁▂▁▂▁▁▂▁▂▂▂▁▁▄▄▅▅▅▅▅▅▅▄▅▅▄▄▅▄▄▅▅▅▅
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/Loss_avg ▆▆▇▇█▆▆▅▆▅▅▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/Loss_d_avg ▆▆▇▇█▆▆▅▆▅▅▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/Loss_d_val ▆▆▇▇█▆▆▅▆▅▅▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/Loss_val ▆▆▇▇█▆▆▅▆▅▅▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/test_acc_avg ▁▁▁▃▂▄▃▅▂▄▄▅▇█▇▇███▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/test_acc_d_avg ▁▁▁▃▂▄▃▅▂▄▄▅▇█▇▇███▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/test_acc_d_val ▁▁▁▃▂▄▃▅▂▄▄▅▇█▇▇███▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/test_acc_val ▁▁▁▃▂▄▃▅▂▄▄▅▇█▇▇███▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/test_corr_d_avg ███▇█▆▇▆▇▆▆▆▃▁▁▂▁▁▁▁▂▂▂▂▂▂▂▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/test_corr_d_val ███▇█▆▇▆▇▆▆▆▃▁▁▂▁▁▁▁▂▂▂▂▂▂▂▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/test_majacc_avg ███▇█▇▇▇▇▇▇▇▄▃▂▂▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/test_majacc_d_avg ███▇█▇▇▇▇▇▇▇▄▃▂▂▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▃
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/test_majacc_d_val ███▇█▇▇▇▇▇▇▇▄▃▂▂▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/test_majacc_val ███▇█▇▇▇▇▇▇▇▄▃▂▂▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/test_minacc_avg ▁▁▁▃▁▄▃▄▂▄▄▄▇█▇▇███▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/test_minacc_d_avg ▁▁▁▃▁▄▃▄▂▄▄▄▇█▇▇███▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/test_minacc_d_val ▁▁▁▃▁▄▃▄▂▄▄▄▇█▇▇███▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/test_minacc_val ▁▁▁▃▁▄▃▄▂▄▄▄▇█▇▇███▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/Loss_avg █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/Loss_val █▅▃▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/l1_avg ▃▂▁▁▁▂▃▃▅▆▆▇███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/l1_val ▂▂▁▁▂▂▃▄▅▆▇████████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/train_acc_avg ▇███████████▇▃▂▂▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/train_acc_val █▇▇█████████▄▂▂▂▁▁▁▁▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/train_majacc_avg ████████████▆▂▂▂▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/train_majacc_val ██▇█▇█████▇▇▄▂▂▂▂▁▁▁▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/train_minacc_avg ▁▁▂▁▂▂▂▂▃▃▃▃▆█▇▇▇▆▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/train_minacc_val ▂▁▂▁▄▁▂▂▃▁▄▇▆█▇▇▆▆█▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▅▆▆▆▆▅
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/train_nll_avg ▄▂▂▂▂▁▁▁▁▁▁▁▃▇██████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/train_nll_val ▃▃▃▂▂▁▁▁▁▂▁▁▇███████████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/train_penalty_avg █▃▃▃▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/train_penalty_val ▆▅▄█▃▃▃▃▃▄▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/weight_norm_avg █▄▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/weight_norm_val █▄▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/diagnostics/epoch_time_val 0.05052
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/diagnostics/train_time_val 0.05017
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/diagnostics/validation_time_val 0.00033
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/Loss_avg 0.69331
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/Loss_d_avg 0.69331
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/Loss_d_val 0.69331
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/Loss_val 0.69331
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/test_acc_avg 0.519
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/test_acc_d_avg 0.519
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/test_acc_d_val 0.519
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/test_acc_val 0.519
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/test_corr_d_avg 0.08835
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/test_corr_d_val 0.08835
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/test_majacc_avg 0.59
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/test_majacc_d_avg 0.59
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/test_majacc_d_val 0.59
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/test_majacc_val 0.59
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/test_minacc_avg 0.51111
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/test_minacc_d_avg 0.51111
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/test_minacc_d_val 0.51111
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/test/test_minacc_val 0.51111
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/Loss_avg 9e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/Loss_val 9e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/l1_avg 15.36571
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/l1_val 15.36644
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/train_acc_avg 0.5299
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/train_acc_val 0.524
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/train_majacc_avg 0.54083
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/train_majacc_val 0.54673
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/train_minacc_avg 0.4667
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/train_minacc_val 0.38889
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/train_nll_avg 0.6931
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/train_nll_val 0.69312
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/weight_norm_avg 0.16724
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/56/logs/train/weight_norm_val 0.16708
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/pqapgnfb
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_120038-pqapgnfb/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: - Waiting for wandb.init()...wandb: \ Waiting for wandb.init()...wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_120328-ghb0p1lx
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/ghb0p1lx
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=15.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1220
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6034, 3, 32, 32) (5966, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:42,  1.70s/it] 19%|#9        | 5/26 [00:01<00:05,  3.60it/s] 35%|###4      | 9/26 [00:01<00:02,  7.09it/s] 50%|#####     | 13/26 [00:02<00:01, 10.89it/s] 65%|######5   | 17/26 [00:02<00:00, 14.74it/s] 81%|########  | 21/26 [00:02<00:00, 18.50it/s] 96%|#########6| 25/26 [00:02<00:00, 21.73it/s]100%|##########| 26/26 [00:02<00:00,  9.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 9.419 (12.162)	train_nll   0.39 (  0.52)	train_penalty   0.03 (  0.22)	weight_norm   9.02 ( 11.64)	train_acc   0.86 (  0.81)	train_minacc   0.03 (  0.06)	train_majacc   1.00 (  0.94)	train_corr   0.00 (  0.00)	l1 7.4593 (7.8645)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.22it/s] 23%|##3       | 6/26 [00:00<00:00, 24.04it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.04it/s] 42%|####2     | 11/26 [00:00<00:00, 33.79it/s] 65%|######5   | 17/26 [00:00<00:00, 39.64it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.64it/s] 88%|########8 | 23/26 [00:00<00:00, 44.48it/s]100%|##########| 26/26 [00:00<00:00, 34.81it/s]
Test: [   0/  26]	Loss 0.407 (0.407)	test_acc   0.86 (  0.86)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.407 (0.407)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.415 (0.427)	test_acc   0.85 (  0.84)	test_minacc   0.02 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.415 (0.427)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.02 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.406 (0.417)	test_acc   0.86 (  0.85)	test_minacc   0.04 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.406 (0.417)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.04 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.366 (0.415)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.366 (0.415)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.56it/s]100%|##########| 1/1 [00:00<00:00,  2.56it/s]
Test: [  0/  1]	Loss 1.798 (1.798)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.798 (1.798)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.798 (1.798)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.798 (1.798)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/57/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0784 (0.0784)	validation_time 0.0068 (0.0068)	train_time 0.0660 (0.0660)
record: (train_acc, test_acc) (0.8465000232458114, 0.11000000685453415)
last accs (train_acc, test_acc) (0.8465000232458114, 0.11000000685453415)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.31it/s] 19%|#9        | 5/26 [00:00<00:01, 19.80it/s] 35%|###4      | 9/26 [00:00<00:00, 25.36it/s] 50%|#####     | 13/26 [00:00<00:00, 28.67it/s] 65%|######5   | 17/26 [00:00<00:00, 30.63it/s] 81%|########  | 21/26 [00:00<00:00, 32.16it/s] 96%|#########6| 25/26 [00:00<00:00, 33.26it/s]100%|##########| 26/26 [00:00<00:00, 27.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 4.823 (6.781)	train_nll   0.36 (  0.42)	train_penalty   0.05 (  0.06)	weight_norm   4.46 (  6.36)	train_acc   0.86 (  0.85)	train_minacc   0.03 (  0.02)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 6.5585 (7.1208)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.27it/s] 27%|##6       | 7/26 [00:00<00:00, 31.84it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.84it/s] 50%|#####     | 13/26 [00:00<00:00, 41.37it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.68it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.68it/s] 96%|#########6| 25/26 [00:00<00:00, 49.12it/s]100%|##########| 26/26 [00:00<00:00, 40.06it/s]
Test: [   0/  26]	Loss 0.400 (0.400)	test_acc   0.86 (  0.86)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.400 (0.400)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.404 (0.416)	test_acc   0.85 (  0.84)	test_minacc   0.03 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.404 (0.416)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.03 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.411 (0.405)	test_acc   0.86 (  0.85)	test_minacc   0.04 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.411 (0.405)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.04 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.96)
Test: [  26/  26]	Loss 0.345 (0.402)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.345 (0.402)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.63it/s]
Test: [  0/  1]	Loss 1.965 (1.965)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.965 (1.965)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Test: [  1/  1]	Loss 1.965 (1.965)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.965 (1.965)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/57/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0365 (0.0575)	validation_time 0.0003 (0.0035)	train_time 0.0362 (0.0511)
record: (train_acc, test_acc) (0.8468000220656395, 0.11900000274181366)
last accs (train_acc, test_acc) (0.8468000220656395, 0.11900000274181366)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.82it/s] 23%|##3       | 6/26 [00:00<00:00, 25.32it/s] 38%|###8      | 10/26 [00:00<00:00, 28.55it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.56it/s] 69%|######9   | 18/26 [00:00<00:00, 31.14it/s] 85%|########4 | 22/26 [00:00<00:00, 32.09it/s]100%|##########| 26/26 [00:00<00:00, 32.82it/s]100%|##########| 26/26 [00:00<00:00, 28.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 2.919 (3.766)	train_nll   0.35 (  0.40)	train_penalty   0.03 (  0.05)	weight_norm   2.56 (  3.36)	train_acc   0.87 (  0.85)	train_minacc   0.09 (  0.04)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 4.8707 (5.6050)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.12it/s] 27%|##6       | 7/26 [00:00<00:00, 34.12it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.12it/s] 46%|####6     | 12/26 [00:00<00:00, 38.63it/s] 69%|######9   | 18/26 [00:00<00:00, 45.50it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.50it/s] 92%|#########2| 24/26 [00:00<00:00, 46.63it/s]100%|##########| 26/26 [00:00<00:00, 39.36it/s]
Test: [   0/  26]	Loss 0.358 (0.358)	test_acc   0.86 (  0.86)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.358 (0.358)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.384 (0.393)	test_acc   0.85 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.384 (0.393)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.96)
Test: [  20/  26]	Loss 0.374 (0.383)	test_acc   0.86 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.374 (0.383)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.330 (0.380)	test_acc   0.87 (  0.85)	test_minacc   0.06 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.330 (0.380)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.06 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.96it/s]
Test: [  0/  1]	Loss 1.809 (1.809)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.809 (1.809)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.809 (1.809)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.809 (1.809)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Overall Timing[  2/  1]	epoch_time 0.0369 (0.0506)	validation_time 0.0004 (0.0025)	train_time 0.0364 (0.0462)
record: (train_acc, test_acc) (0.8468000220656395, 0.11900000274181366)
last accs (train_acc, test_acc) (0.8496000246405602, 0.10600000619888306)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.80it/s] 19%|#9        | 5/26 [00:00<00:00, 23.05it/s] 35%|###4      | 9/26 [00:00<00:00, 27.38it/s] 50%|#####     | 13/26 [00:00<00:00, 29.90it/s] 65%|######5   | 17/26 [00:00<00:00, 31.32it/s] 81%|########  | 21/26 [00:00<00:00, 32.43it/s] 96%|#########6| 25/26 [00:00<00:00, 32.93it/s]100%|##########| 26/26 [00:00<00:00, 28.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 1.948 (2.420)	train_nll   0.33 (  0.38)	train_penalty   0.03 (  0.04)	weight_norm   1.62 (  2.04)	train_acc   0.87 (  0.85)	train_minacc   0.09 (  0.07)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 4.6514 (4.5990)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.44it/s] 35%|###4      | 9/26 [00:00<00:00, 41.39it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.39it/s] 54%|#####3    | 14/26 [00:00<00:00, 44.15it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.71it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.71it/s]100%|##########| 26/26 [00:00<00:00, 52.31it/s]100%|##########| 26/26 [00:00<00:00, 43.58it/s]
Test: [   0/  26]	Loss 0.357 (0.357)	test_acc   0.85 (  0.85)	test_minacc   0.06 (  0.06)	test_majacc   0.98 (  0.98)	Loss_d 0.357 (0.357)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.375 (0.384)	test_acc   0.85 (  0.84)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.98)	Loss_d 0.375 (0.384)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.92 (  0.93)
Test: [  20/  26]	Loss 0.337 (0.369)	test_acc   0.87 (  0.85)	test_minacc   0.11 (  0.09)	test_majacc   1.00 (  0.99)	Loss_d 0.337 (0.369)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.11 (  0.09)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.93)
Test: [  26/  26]	Loss 0.317 (0.365)	test_acc   0.89 (  0.85)	test_minacc   0.29 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.317 (0.365)	test_acc_d   0.89 (  0.85)	test_minacc_d   0.29 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.42it/s]
Test: [  0/  1]	Loss 1.778 (1.778)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   1.00 (  1.00)	Loss_d 1.778 (1.778)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.87 (  0.87)
Test: [  1/  1]	Loss 1.778 (1.778)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   1.00 (  1.00)	Loss_d 1.778 (1.778)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.87 (  0.87)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/57/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0375 (0.0473)	validation_time 0.0004 (0.0020)	train_time 0.0371 (0.0439)
record: (train_acc, test_acc) (0.8516000266075134, 0.164000004529953)
last accs (train_acc, test_acc) (0.8516000266075134, 0.164000004529953)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.11it/s] 19%|#9        | 5/26 [00:00<00:00, 21.23it/s] 35%|###4      | 9/26 [00:00<00:00, 26.79it/s] 50%|#####     | 13/26 [00:00<00:00, 30.02it/s] 65%|######5   | 17/26 [00:00<00:00, 31.26it/s] 81%|########  | 21/26 [00:00<00:00, 32.30it/s] 96%|#########6| 25/26 [00:00<00:00, 32.95it/s]100%|##########| 26/26 [00:00<00:00, 27.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.416 (1.682)	train_nll   0.36 (  0.38)	train_penalty   0.02 (  0.04)	weight_norm   1.05 (  1.31)	train_acc   0.85 (  0.85)	train_minacc   0.17 (  0.08)	train_majacc   0.96 (  0.98)	train_corr   0.00 (  0.00)	l1 5.0031 (4.6241)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.49it/s] 27%|##6       | 7/26 [00:00<00:00, 36.41it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.41it/s] 50%|#####     | 13/26 [00:00<00:00, 41.63it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.96it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.96it/s] 96%|#########6| 25/26 [00:00<00:00, 47.71it/s]100%|##########| 26/26 [00:00<00:00, 40.48it/s]
Test: [   0/  26]	Loss 0.368 (0.368)	test_acc   0.86 (  0.86)	test_minacc   0.19 (  0.19)	test_majacc   0.97 (  0.97)	Loss_d 0.368 (0.368)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.85 (  0.85)
Test: [  10/  26]	Loss 0.388 (0.380)	test_acc   0.83 (  0.84)	test_minacc   0.12 (  0.19)	test_majacc   0.95 (  0.96)	Loss_d 0.388 (0.380)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.12 (  0.19)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.84 (  0.83)
Test: [  20/  26]	Loss 0.337 (0.370)	test_acc   0.88 (  0.85)	test_minacc   0.30 (  0.20)	test_majacc   0.98 (  0.97)	Loss_d 0.337 (0.370)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.30 (  0.20)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.83 (  0.84)
Test: [  26/  26]	Loss 0.337 (0.367)	test_acc   0.86 (  0.85)	test_minacc   0.17 (  0.20)	test_majacc   0.98 (  0.97)	Loss_d 0.337 (0.367)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.17 (  0.20)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.84 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.34it/s]
Test: [  0/  1]	Loss 1.456 (1.456)	test_acc   0.25 (  0.25)	test_minacc   0.16 (  0.16)	test_majacc   0.97 (  0.97)	Loss_d 1.456 (1.456)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.61 (  0.61)
Test: [  1/  1]	Loss 1.456 (1.456)	test_acc   0.25 (  0.25)	test_minacc   0.16 (  0.16)	test_majacc   0.97 (  0.97)	Loss_d 1.456 (1.456)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.61 (  0.61)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/57/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0367 (0.0452)	validation_time 0.0003 (0.0016)	train_time 0.0364 (0.0424)
record: (train_acc, test_acc) (0.8512000254988671, 0.24500000476837158)
last accs (train_acc, test_acc) (0.8512000254988671, 0.24500000476837158)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.32it/s] 19%|#9        | 5/26 [00:00<00:00, 24.23it/s] 35%|###4      | 9/26 [00:00<00:00, 27.99it/s] 50%|#####     | 13/26 [00:00<00:00, 31.06it/s] 65%|######5   | 17/26 [00:00<00:00, 33.02it/s] 81%|########  | 21/26 [00:00<00:00, 33.86it/s] 96%|#########6| 25/26 [00:00<00:00, 33.63it/s]100%|##########| 26/26 [00:00<00:00, 29.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.054 (1.251)	train_nll   0.34 (  0.37)	train_penalty   0.03 (  0.04)	weight_norm   0.71 (  0.88)	train_acc   0.86 (  0.85)	train_minacc   0.11 (  0.14)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 6.4210 (5.5250)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.93it/s] 19%|#9        | 5/26 [00:00<00:00, 25.12it/s] 38%|###8      | 10/26 [00:00<00:00, 35.81it/s]                                                38%|###8      | 10/26 [00:00<00:00, 35.81it/s] 58%|#####7    | 15/26 [00:00<00:00, 41.07it/s] 77%|#######6  | 20/26 [00:00<00:00, 43.34it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 43.34it/s]100%|##########| 26/26 [00:00<00:00, 48.66it/s]100%|##########| 26/26 [00:00<00:00, 37.88it/s]
Test: [   0/  26]	Loss 0.359 (0.359)	test_acc   0.86 (  0.86)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.359 (0.359)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.364 (0.373)	test_acc   0.85 (  0.84)	test_minacc   0.02 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.364 (0.373)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.02 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  20/  26]	Loss 0.359 (0.362)	test_acc   0.87 (  0.85)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 0.359 (0.362)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.92)
Test: [  26/  26]	Loss 0.317 (0.359)	test_acc   0.86 (  0.85)	test_minacc   0.06 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.317 (0.359)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.06 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.99it/s]
Test: [  0/  1]	Loss 1.699 (1.699)	test_acc   0.14 (  0.14)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 1.699 (1.699)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.85 (  0.85)
Test: [  1/  1]	Loss 1.699 (1.699)	test_acc   0.14 (  0.14)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 1.699 (1.699)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.85 (  0.85)
Overall Timing[  5/  1]	epoch_time 0.0353 (0.0436)	validation_time 0.0004 (0.0014)	train_time 0.0349 (0.0412)
record: (train_acc, test_acc) (0.8512000254988671, 0.24500000476837158)
last accs (train_acc, test_acc) (0.8520000240802765, 0.1380000114440918)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.81it/s] 19%|#9        | 5/26 [00:00<00:00, 23.20it/s] 35%|###4      | 9/26 [00:00<00:00, 27.03it/s] 50%|#####     | 13/26 [00:00<00:00, 30.22it/s] 65%|######5   | 17/26 [00:00<00:00, 31.91it/s] 81%|########  | 21/26 [00:00<00:00, 33.18it/s] 96%|#########6| 25/26 [00:00<00:00, 33.98it/s]100%|##########| 26/26 [00:00<00:00, 28.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.778 (0.928)	train_nll   0.32 (  0.36)	train_penalty   0.02 (  0.03)	weight_norm   0.46 (  0.57)	train_acc   0.88 (  0.85)	train_minacc   0.14 (  0.14)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 7.3739 (6.6456)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.11it/s] 23%|##3       | 6/26 [00:00<00:00, 29.93it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.93it/s] 46%|####6     | 12/26 [00:00<00:00, 41.17it/s] 65%|######5   | 17/26 [00:00<00:00, 42.32it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.32it/s] 88%|########8 | 23/26 [00:00<00:00, 47.62it/s]100%|##########| 26/26 [00:00<00:00, 38.58it/s]
Test: [   0/  26]	Loss 0.351 (0.351)	test_acc   0.86 (  0.86)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.351 (0.351)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.354 (0.377)	test_acc   0.86 (  0.84)	test_minacc   0.05 (  0.03)	test_majacc   1.00 (  0.99)	Loss_d 0.354 (0.377)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.05 (  0.03)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.96)
Test: [  20/  26]	Loss 0.332 (0.363)	test_acc   0.87 (  0.85)	test_minacc   0.06 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 0.332 (0.363)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.06 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.313 (0.361)	test_acc   0.88 (  0.85)	test_minacc   0.17 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.313 (0.361)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.17 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.82it/s]
Test: [  0/  1]	Loss 1.996 (1.996)	test_acc   0.12 (  0.12)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 1.996 (1.996)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  1/  1]	Loss 1.996 (1.996)	test_acc   0.12 (  0.12)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 1.996 (1.996)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Overall Timing[  6/  1]	epoch_time 0.0374 (0.0427)	validation_time 0.0006 (0.0013)	train_time 0.0367 (0.0405)
record: (train_acc, test_acc) (0.8512000254988671, 0.24500000476837158)
last accs (train_acc, test_acc) (0.8511000228524208, 0.12400000542402267)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.45it/s] 19%|#9        | 5/26 [00:00<00:00, 21.91it/s] 35%|###4      | 9/26 [00:00<00:00, 27.27it/s] 50%|#####     | 13/26 [00:00<00:00, 30.05it/s] 65%|######5   | 17/26 [00:00<00:00, 31.08it/s] 81%|########  | 21/26 [00:00<00:00, 32.00it/s] 96%|#########6| 25/26 [00:00<00:00, 32.68it/s]100%|##########| 26/26 [00:00<00:00, 28.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.646 (0.738)	train_nll   0.32 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.33 (  0.38)	train_acc   0.87 (  0.85)	train_minacc   0.17 (  0.14)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 8.8299 (7.9482)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.62it/s] 27%|##6       | 7/26 [00:00<00:00, 36.54it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.54it/s] 50%|#####     | 13/26 [00:00<00:00, 42.01it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.58it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.58it/s] 96%|#########6| 25/26 [00:00<00:00, 47.79it/s]100%|##########| 26/26 [00:00<00:00, 40.33it/s]
Test: [   0/  26]	Loss 0.345 (0.345)	test_acc   0.86 (  0.86)	test_minacc   0.07 (  0.07)	test_majacc   0.98 (  0.98)	Loss_d 0.345 (0.345)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.342 (0.362)	test_acc   0.86 (  0.84)	test_minacc   0.14 (  0.09)	test_majacc   0.98 (  0.98)	Loss_d 0.342 (0.362)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.14 (  0.09)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.93)
Test: [  20/  26]	Loss 0.335 (0.349)	test_acc   0.88 (  0.85)	test_minacc   0.17 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 0.335 (0.349)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.17 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  26/  26]	Loss 0.296 (0.345)	test_acc   0.88 (  0.85)	test_minacc   0.20 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 0.296 (0.345)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.20 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.63it/s]
Test: [  0/  1]	Loss 1.745 (1.745)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 1.745 (1.745)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.83 (  0.83)
Test: [  1/  1]	Loss 1.745 (1.745)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 1.745 (1.745)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.83 (  0.83)
Overall Timing[  7/  1]	epoch_time 0.0369 (0.0419)	validation_time 0.0004 (0.0012)	train_time 0.0364 (0.0400)
record: (train_acc, test_acc) (0.8512000254988671, 0.24500000476837158)
last accs (train_acc, test_acc) (0.8542000247836113, 0.19700001180171967)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.89it/s] 19%|#9        | 5/26 [00:00<00:00, 22.95it/s] 35%|###4      | 9/26 [00:00<00:00, 27.54it/s] 50%|#####     | 13/26 [00:00<00:00, 29.84it/s] 65%|######5   | 17/26 [00:00<00:00, 31.53it/s] 81%|########  | 21/26 [00:00<00:00, 32.72it/s] 96%|#########6| 25/26 [00:00<00:00, 33.48it/s]100%|##########| 26/26 [00:00<00:00, 28.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.552 (0.614)	train_nll   0.32 (  0.34)	train_penalty   0.02 (  0.03)	weight_norm   0.23 (  0.27)	train_acc   0.85 (  0.85)	train_minacc   0.14 (  0.16)	train_majacc   0.97 (  0.97)	train_corr   0.00 (  0.00)	l1 10.6575 (9.5679)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.04it/s] 27%|##6       | 7/26 [00:00<00:00, 30.69it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.69it/s] 42%|####2     | 11/26 [00:00<00:00, 30.37it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.00it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.00it/s] 96%|#########6| 25/26 [00:00<00:00, 49.62it/s]100%|##########| 26/26 [00:00<00:00, 38.20it/s]
Test: [   0/  26]	Loss 0.325 (0.325)	test_acc   0.85 (  0.85)	test_minacc   0.19 (  0.19)	test_majacc   0.96 (  0.96)	Loss_d 0.325 (0.325)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.349 (0.350)	test_acc   0.83 (  0.84)	test_minacc   0.17 (  0.15)	test_majacc   0.94 (  0.96)	Loss_d 0.349 (0.350)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.17 (  0.15)	test_majacc_d   0.94 (  0.96)	test_corr_d   0.88 (  0.89)
Test: [  20/  26]	Loss 0.319 (0.338)	test_acc   0.87 (  0.85)	test_minacc   0.28 (  0.16)	test_majacc   0.97 (  0.97)	Loss_d 0.319 (0.338)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.28 (  0.16)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.88 (  0.89)
Test: [  26/  26]	Loss 0.288 (0.335)	test_acc   0.86 (  0.85)	test_minacc   0.17 (  0.16)	test_majacc   0.98 (  0.97)	Loss_d 0.288 (0.335)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.17 (  0.16)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.90 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.48it/s]
Test: [  0/  1]	Loss 1.610 (1.610)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.97 (  0.97)	Loss_d 1.610 (1.610)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.74 (  0.74)
Test: [  1/  1]	Loss 1.610 (1.610)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.97 (  0.97)	Loss_d 1.610 (1.610)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.74 (  0.74)
Overall Timing[  8/  1]	epoch_time 0.0372 (0.0414)	validation_time 0.0006 (0.0011)	train_time 0.0366 (0.0396)
record: (train_acc, test_acc) (0.8512000254988671, 0.24500000476837158)
last accs (train_acc, test_acc) (0.8471000245809555, 0.23000000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.97it/s] 19%|#9        | 5/26 [00:00<00:00, 24.94it/s] 35%|###4      | 9/26 [00:00<00:00, 30.01it/s] 50%|#####     | 13/26 [00:00<00:00, 32.46it/s] 65%|######5   | 17/26 [00:00<00:00, 33.74it/s] 81%|########  | 21/26 [00:00<00:00, 34.06it/s] 96%|#########6| 25/26 [00:00<00:00, 34.05it/s]100%|##########| 26/26 [00:00<00:00, 29.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.496 (0.549)	train_nll   0.32 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.18 (  0.20)	train_acc   0.86 (  0.85)	train_minacc   0.11 (  0.16)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 12.4016 (11.4212)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.61it/s] 27%|##6       | 7/26 [00:00<00:00, 29.47it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.47it/s] 50%|#####     | 13/26 [00:00<00:00, 38.00it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.06it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.06it/s] 96%|#########6| 25/26 [00:00<00:00, 45.90it/s]100%|##########| 26/26 [00:00<00:00, 36.80it/s]
Test: [   0/  26]	Loss 0.310 (0.310)	test_acc   0.86 (  0.86)	test_minacc   0.06 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.310 (0.310)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.340 (0.343)	test_acc   0.84 (  0.84)	test_minacc   0.09 (  0.07)	test_majacc   0.97 (  0.99)	Loss_d 0.340 (0.343)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.09 (  0.07)	test_majacc_d   0.97 (  0.99)	test_corr_d   0.91 (  0.92)
Test: [  20/  26]	Loss 0.304 (0.333)	test_acc   0.88 (  0.85)	test_minacc   0.15 (  0.08)	test_majacc   1.00 (  0.99)	Loss_d 0.304 (0.333)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.15 (  0.08)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.91 (  0.92)
Test: [  26/  26]	Loss 0.294 (0.330)	test_acc   0.86 (  0.85)	test_minacc   0.06 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.294 (0.330)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.06 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.28it/s]
Test: [  0/  1]	Loss 1.700 (1.700)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.98 (  0.98)	Loss_d 1.700 (1.700)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.82 (  0.82)
Test: [  1/  1]	Loss 1.700 (1.700)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.98 (  0.98)	Loss_d 1.700 (1.700)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.82 (  0.82)
Overall Timing[  9/  1]	epoch_time 0.0364 (0.0409)	validation_time 0.0004 (0.0011)	train_time 0.0360 (0.0393)
record: (train_acc, test_acc) (0.8512000254988671, 0.24500000476837158)
last accs (train_acc, test_acc) (0.8518000217676163, 0.15700000524520874)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.94it/s] 19%|#9        | 5/26 [00:00<00:01, 17.65it/s] 35%|###4      | 9/26 [00:00<00:00, 24.00it/s] 50%|#####     | 13/26 [00:00<00:00, 27.93it/s] 65%|######5   | 17/26 [00:00<00:00, 30.37it/s] 81%|########  | 21/26 [00:00<00:00, 32.00it/s] 96%|#########6| 25/26 [00:00<00:00, 32.71it/s]100%|##########| 26/26 [00:00<00:00, 26.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.450 (0.489)	train_nll   0.31 (  0.34)	train_penalty   0.02 (  0.02)	weight_norm   0.14 (  0.15)	train_acc   0.86 (  0.85)	train_minacc   0.14 (  0.20)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 14.0416 (13.1391)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.04it/s] 31%|###       | 8/26 [00:00<00:00, 39.20it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.20it/s] 50%|#####     | 13/26 [00:00<00:00, 40.58it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.22it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.22it/s] 96%|#########6| 25/26 [00:00<00:00, 47.53it/s]100%|##########| 26/26 [00:00<00:00, 40.62it/s]
Test: [   0/  26]	Loss 0.329 (0.329)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   0.98 (  0.98)	Loss_d 0.329 (0.329)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.346 (0.349)	test_acc   0.86 (  0.84)	test_minacc   0.03 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.346 (0.349)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.03 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.93 (  0.92)
Test: [  20/  26]	Loss 0.307 (0.337)	test_acc   0.87 (  0.85)	test_minacc   0.06 (  0.06)	test_majacc   1.00 (  0.99)	Loss_d 0.307 (0.337)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.06 (  0.06)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.92 (  0.93)
Test: [  26/  26]	Loss 0.289 (0.334)	test_acc   0.88 (  0.85)	test_minacc   0.20 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.289 (0.334)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.20 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.32it/s]
Test: [  0/  1]	Loss 1.659 (1.659)	test_acc   0.15 (  0.15)	test_minacc   0.05 (  0.05)	test_majacc   1.00 (  1.00)	Loss_d 1.659 (1.659)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.05 (  0.05)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.85 (  0.85)
Test: [  1/  1]	Loss 1.659 (1.659)	test_acc   0.15 (  0.15)	test_minacc   0.05 (  0.05)	test_majacc   1.00 (  1.00)	Loss_d 1.659 (1.659)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.05 (  0.05)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.85 (  0.85)
Overall Timing[ 10/  1]	epoch_time 0.0359 (0.0405)	validation_time 0.0003 (0.0010)	train_time 0.0356 (0.0389)
record: (train_acc, test_acc) (0.8512000254988671, 0.24500000476837158)
last accs (train_acc, test_acc) (0.8516000272631645, 0.1469999998807907)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.84it/s] 19%|#9        | 5/26 [00:00<00:00, 21.52it/s] 35%|###4      | 9/26 [00:00<00:00, 27.09it/s] 50%|#####     | 13/26 [00:00<00:00, 29.41it/s] 65%|######5   | 17/26 [00:00<00:00, 31.30it/s] 81%|########  | 21/26 [00:00<00:00, 32.52it/s] 96%|#########6| 25/26 [00:00<00:00, 33.27it/s]100%|##########| 26/26 [00:00<00:00, 28.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.411 (0.463)	train_nll   0.29 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.12 (  0.13)	train_acc   0.88 (  0.85)	train_minacc   0.26 (  0.22)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 15.7304 (14.9263)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.51it/s] 27%|##6       | 7/26 [00:00<00:00, 36.55it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.55it/s] 46%|####6     | 12/26 [00:00<00:00, 40.92it/s] 65%|######5   | 17/26 [00:00<00:00, 43.22it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.22it/s] 88%|########8 | 23/26 [00:00<00:00, 47.92it/s]100%|##########| 26/26 [00:00<00:00, 39.11it/s]
Test: [   0/  26]	Loss 0.309 (0.309)	test_acc   0.87 (  0.87)	test_minacc   0.17 (  0.17)	test_majacc   0.98 (  0.98)	Loss_d 0.309 (0.309)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.346 (0.338)	test_acc   0.84 (  0.85)	test_minacc   0.12 (  0.18)	test_majacc   0.96 (  0.97)	Loss_d 0.346 (0.338)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.12 (  0.18)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  20/  26]	Loss 0.298 (0.327)	test_acc   0.89 (  0.86)	test_minacc   0.33 (  0.20)	test_majacc   0.99 (  0.98)	Loss_d 0.298 (0.327)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.33 (  0.20)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  26/  26]	Loss 0.275 (0.322)	test_acc   0.89 (  0.86)	test_minacc   0.40 (  0.22)	test_majacc   0.97 (  0.98)	Loss_d 0.275 (0.322)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.40 (  0.22)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.89 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.18it/s]
Test: [  0/  1]	Loss 1.557 (1.557)	test_acc   0.23 (  0.23)	test_minacc   0.14 (  0.14)	test_majacc   0.98 (  0.98)	Loss_d 1.557 (1.557)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.77 (  0.77)
Test: [  1/  1]	Loss 1.557 (1.557)	test_acc   0.23 (  0.23)	test_minacc   0.14 (  0.14)	test_majacc   0.98 (  0.98)	Loss_d 1.557 (1.557)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.77 (  0.77)
Overall Timing[ 11/  1]	epoch_time 0.0383 (0.0403)	validation_time 0.0004 (0.0009)	train_time 0.0379 (0.0389)
record: (train_acc, test_acc) (0.8512000254988671, 0.24500000476837158)
last accs (train_acc, test_acc) (0.861200023829937, 0.22700001299381256)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.22it/s] 19%|#9        | 5/26 [00:00<00:00, 21.29it/s] 35%|###4      | 9/26 [00:00<00:00, 26.55it/s] 50%|#####     | 13/26 [00:00<00:00, 29.50it/s] 65%|######5   | 17/26 [00:00<00:00, 31.47it/s] 81%|########  | 21/26 [00:00<00:00, 32.66it/s] 96%|#########6| 25/26 [00:00<00:00, 33.57it/s]100%|##########| 26/26 [00:00<00:00, 28.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.422 (0.458)	train_nll   0.31 (  0.34)	train_penalty   0.02 (  0.03)	weight_norm   0.11 (  0.11)	train_acc   0.86 (  0.85)	train_minacc   0.11 (  0.21)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 16.9880 (16.2595)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.80it/s] 27%|##6       | 7/26 [00:00<00:00, 33.95it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.95it/s] 50%|#####     | 13/26 [00:00<00:00, 39.73it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.27it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.27it/s] 96%|#########6| 25/26 [00:00<00:00, 47.50it/s]100%|##########| 26/26 [00:00<00:00, 39.30it/s]
Test: [   0/  26]	Loss 0.346 (0.346)	test_acc   0.85 (  0.85)	test_minacc   0.43 (  0.43)	test_majacc   0.92 (  0.92)	Loss_d 0.346 (0.346)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.363 (0.352)	test_acc   0.83 (  0.84)	test_minacc   0.43 (  0.44)	test_majacc   0.89 (  0.92)	Loss_d 0.363 (0.352)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.43 (  0.44)	test_majacc_d   0.89 (  0.92)	test_corr_d   0.81 (  0.84)
Test: [  20/  26]	Loss 0.326 (0.342)	test_acc   0.87 (  0.85)	test_minacc   0.54 (  0.45)	test_majacc   0.93 (  0.92)	Loss_d 0.326 (0.342)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.54 (  0.45)	test_majacc_d   0.93 (  0.92)	test_corr_d   0.81 (  0.84)
Test: [  26/  26]	Loss 0.281 (0.336)	test_acc   0.90 (  0.85)	test_minacc   0.57 (  0.46)	test_majacc   0.95 (  0.92)	Loss_d 0.281 (0.336)	test_acc_d   0.90 (  0.85)	test_minacc_d   0.57 (  0.46)	test_majacc_d   0.95 (  0.92)	test_corr_d   0.84 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.30it/s]
Test: [  0/  1]	Loss 1.355 (1.355)	test_acc   0.45 (  0.45)	test_minacc   0.39 (  0.39)	test_majacc   0.93 (  0.93)	Loss_d 1.355 (1.355)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.51 (  0.51)
Test: [  1/  1]	Loss 1.355 (1.355)	test_acc   0.45 (  0.45)	test_minacc   0.39 (  0.39)	test_majacc   0.93 (  0.93)	Loss_d 1.355 (1.355)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.51 (  0.51)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/57/checkpoints/model_best.pth
Overall Timing[ 12/  1]	epoch_time 0.0378 (0.0401)	validation_time 0.0004 (0.0009)	train_time 0.0374 (0.0387)
record: (train_acc, test_acc) (0.8525000267624855, 0.445000022649765)
last accs (train_acc, test_acc) (0.8525000267624855, 0.445000022649765)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.47it/s] 19%|#9        | 5/26 [00:00<00:01, 20.19it/s] 35%|###4      | 9/26 [00:00<00:00, 25.64it/s] 50%|#####     | 13/26 [00:00<00:00, 28.34it/s] 65%|######5   | 17/26 [00:00<00:00, 30.67it/s] 81%|########  | 21/26 [00:00<00:00, 32.10it/s] 96%|#########6| 25/26 [00:00<00:00, 33.04it/s]100%|##########| 26/26 [00:00<00:00, 27.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.384 (0.437)	train_nll   0.29 (  0.34)	train_penalty   0.02 (  0.02)	weight_norm   0.09 (  0.10)	train_acc   0.88 (  0.85)	train_minacc   0.31 (  0.27)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 18.1004 (17.5084)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.71it/s] 31%|###       | 8/26 [00:00<00:00, 37.46it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.46it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.14it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.54it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.54it/s]100%|##########| 26/26 [00:00<00:00, 51.14it/s]100%|##########| 26/26 [00:00<00:00, 41.49it/s]
Test: [   0/  26]	Loss 0.355 (0.355)	test_acc   0.85 (  0.85)	test_minacc   0.31 (  0.31)	test_majacc   0.93 (  0.93)	Loss_d 0.355 (0.355)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.377 (0.360)	test_acc   0.82 (  0.84)	test_minacc   0.31 (  0.31)	test_majacc   0.91 (  0.94)	Loss_d 0.377 (0.360)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.91 (  0.94)	test_corr_d   0.86 (  0.88)
Test: [  20/  26]	Loss 0.321 (0.349)	test_acc   0.89 (  0.85)	test_minacc   0.50 (  0.33)	test_majacc   0.95 (  0.94)	Loss_d 0.321 (0.349)	test_acc_d   0.89 (  0.85)	test_minacc_d   0.50 (  0.33)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.86 (  0.87)
Test: [  26/  26]	Loss 0.280 (0.344)	test_acc   0.88 (  0.85)	test_minacc   0.40 (  0.34)	test_majacc   0.96 (  0.94)	Loss_d 0.280 (0.344)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.40 (  0.34)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.87 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.55it/s]
Test: [  0/  1]	Loss 1.521 (1.521)	test_acc   0.31 (  0.31)	test_minacc   0.24 (  0.24)	test_majacc   0.97 (  0.97)	Loss_d 1.521 (1.521)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.68 (  0.68)
Test: [  1/  1]	Loss 1.521 (1.521)	test_acc   0.31 (  0.31)	test_minacc   0.24 (  0.24)	test_majacc   0.97 (  0.97)	Loss_d 1.521 (1.521)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.68 (  0.68)
Overall Timing[ 13/  1]	epoch_time 0.0381 (0.0399)	validation_time 0.0004 (0.0009)	train_time 0.0377 (0.0387)
record: (train_acc, test_acc) (0.8525000267624855, 0.445000022649765)
last accs (train_acc, test_acc) (0.8524000239372254, 0.3140000104904175)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.33it/s] 15%|#5        | 4/26 [00:00<00:01, 16.37it/s] 31%|###       | 8/26 [00:00<00:00, 23.52it/s] 46%|####6     | 12/26 [00:00<00:00, 27.56it/s] 62%|######1   | 16/26 [00:00<00:00, 29.88it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.44it/s] 92%|#########2| 24/26 [00:00<00:00, 32.30it/s]100%|##########| 26/26 [00:00<00:00, 26.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.369 (0.414)	train_nll   0.29 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.08 (  0.09)	train_acc   0.88 (  0.86)	train_minacc   0.31 (  0.29)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 18.9494 (18.4118)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.17it/s] 31%|###       | 8/26 [00:00<00:00, 41.39it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.39it/s] 50%|#####     | 13/26 [00:00<00:00, 43.56it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.91it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.91it/s] 96%|#########6| 25/26 [00:00<00:00, 49.05it/s]100%|##########| 26/26 [00:00<00:00, 42.46it/s]
Test: [   0/  26]	Loss 0.316 (0.316)	test_acc   0.86 (  0.86)	test_minacc   0.44 (  0.44)	test_majacc   0.93 (  0.93)	Loss_d 0.316 (0.316)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.348 (0.329)	test_acc   0.84 (  0.85)	test_minacc   0.40 (  0.40)	test_majacc   0.91 (  0.93)	Loss_d 0.348 (0.329)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.91 (  0.93)	test_corr_d   0.83 (  0.85)
Test: [  20/  26]	Loss 0.291 (0.314)	test_acc   0.89 (  0.86)	test_minacc   0.54 (  0.42)	test_majacc   0.94 (  0.94)	Loss_d 0.291 (0.314)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.54 (  0.42)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.83 (  0.85)
Test: [  26/  26]	Loss 0.260 (0.309)	test_acc   0.90 (  0.86)	test_minacc   0.51 (  0.43)	test_majacc   0.96 (  0.94)	Loss_d 0.260 (0.309)	test_acc_d   0.90 (  0.86)	test_minacc_d   0.51 (  0.43)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.86 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.24it/s]
Test: [  0/  1]	Loss 1.409 (1.409)	test_acc   0.41 (  0.41)	test_minacc   0.35 (  0.35)	test_majacc   0.95 (  0.95)	Loss_d 1.409 (1.409)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.54 (  0.54)
Test: [  1/  1]	Loss 1.409 (1.409)	test_acc   0.41 (  0.41)	test_minacc   0.35 (  0.35)	test_majacc   0.95 (  0.95)	Loss_d 1.409 (1.409)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.54 (  0.54)
Overall Timing[ 14/  1]	epoch_time 0.0351 (0.0396)	validation_time 0.0004 (0.0008)	train_time 0.0346 (0.0384)
record: (train_acc, test_acc) (0.8525000267624855, 0.445000022649765)
last accs (train_acc, test_acc) (0.8631000168323517, 0.40800002217292786)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.36it/s] 19%|#9        | 5/26 [00:00<00:00, 23.39it/s] 35%|###4      | 9/26 [00:00<00:00, 28.13it/s] 50%|#####     | 13/26 [00:00<00:00, 29.82it/s] 65%|######5   | 17/26 [00:00<00:00, 31.38it/s] 81%|########  | 21/26 [00:00<00:00, 32.42it/s] 96%|#########6| 25/26 [00:00<00:00, 32.58it/s]100%|##########| 26/26 [00:00<00:00, 28.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.004 (0.170)	train_nll   0.48 (  0.41)	train_penalty   0.00 (  0.01)	weight_norm   0.12 (  0.10)	train_acc   0.76 (  0.81)	train_minacc   0.80 (  0.52)	train_majacc   0.75 (  0.87)	train_corr   0.00 (  0.00)	l1 18.8162 (19.0045)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.32it/s] 27%|##6       | 7/26 [00:00<00:00, 31.01it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.01it/s] 46%|####6     | 12/26 [00:00<00:00, 38.38it/s] 65%|######5   | 17/26 [00:00<00:00, 42.18it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.18it/s] 88%|########8 | 23/26 [00:00<00:00, 47.55it/s]100%|##########| 26/26 [00:00<00:00, 37.40it/s]
Test: [   0/  26]	Loss 0.591 (0.591)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.70 (  0.70)	Loss_d 0.591 (0.591)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.41 (  0.41)
Test: [  10/  26]	Loss 0.571 (0.550)	test_acc   0.71 (  0.73)	test_minacc   0.71 (  0.72)	test_majacc   0.71 (  0.73)	Loss_d 0.571 (0.550)	test_acc_d   0.71 (  0.73)	test_minacc_d   0.71 (  0.72)	test_majacc_d   0.71 (  0.73)	test_corr_d   0.41 (  0.42)
Test: [  20/  26]	Loss 0.541 (0.548)	test_acc   0.73 (  0.73)	test_minacc   0.74 (  0.73)	test_majacc   0.73 (  0.73)	Loss_d 0.541 (0.548)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.74 (  0.73)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.43 (  0.42)
Test: [  26/  26]	Loss 0.490 (0.545)	test_acc   0.76 (  0.73)	test_minacc   0.80 (  0.74)	test_majacc   0.75 (  0.73)	Loss_d 0.490 (0.545)	test_acc_d   0.76 (  0.73)	test_minacc_d   0.80 (  0.74)	test_majacc_d   0.75 (  0.73)	test_corr_d   0.48 (  0.42)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.38it/s]
Test: [  0/  1]	Loss 0.647 (0.647)	test_acc   0.68 (  0.68)	test_minacc   0.67 (  0.67)	test_majacc   0.82 (  0.82)	Loss_d 0.647 (0.647)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.82 (  0.82)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.647 (0.647)	test_acc   0.68 (  0.68)	test_minacc   0.67 (  0.67)	test_majacc   0.82 (  0.82)	Loss_d 0.647 (0.647)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.82 (  0.82)	test_corr_d  -0.24 ( -0.24)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/57/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0372 (0.0395)	validation_time 0.0004 (0.0008)	train_time 0.0368 (0.0383)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.82it/s] 23%|##3       | 6/26 [00:00<00:00, 25.78it/s] 38%|###8      | 10/26 [00:00<00:00, 29.75it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.65it/s] 69%|######9   | 18/26 [00:00<00:00, 32.61it/s] 85%|########4 | 22/26 [00:00<00:00, 33.55it/s]100%|##########| 26/26 [00:00<00:00, 33.69it/s]100%|##########| 26/26 [00:00<00:00, 29.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.002 (0.001)	train_nll   0.56 (  0.57)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.14)	train_acc   0.70 (  0.70)	train_minacc   0.74 (  0.70)	train_majacc   0.70 (  0.70)	train_corr   0.00 (  0.00)	l1 18.5600 (18.6593)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.30it/s] 19%|#9        | 5/26 [00:00<00:00, 25.98it/s] 38%|###8      | 10/26 [00:00<00:00, 36.30it/s]                                                38%|###8      | 10/26 [00:00<00:00, 36.30it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.38it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 38.38it/s] 81%|########  | 21/26 [00:00<00:00, 43.57it/s]100%|##########| 26/26 [00:00<00:00, 37.30it/s]
Test: [   0/  26]	Loss 0.611 (0.611)	test_acc   0.66 (  0.66)	test_minacc   0.63 (  0.63)	test_majacc   0.67 (  0.67)	Loss_d 0.611 (0.611)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.35 (  0.35)
Test: [  10/  26]	Loss 0.602 (0.595)	test_acc   0.67 (  0.68)	test_minacc   0.67 (  0.66)	test_majacc   0.67 (  0.68)	Loss_d 0.602 (0.595)	test_acc_d   0.67 (  0.68)	test_minacc_d   0.67 (  0.66)	test_majacc_d   0.67 (  0.68)	test_corr_d   0.34 (  0.34)
Test: [  20/  26]	Loss 0.589 (0.594)	test_acc   0.69 (  0.68)	test_minacc   0.72 (  0.67)	test_majacc   0.68 (  0.68)	Loss_d 0.589 (0.594)	test_acc_d   0.69 (  0.68)	test_minacc_d   0.72 (  0.67)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.36 (  0.34)
Test: [  26/  26]	Loss 0.565 (0.593)	test_acc   0.70 (  0.68)	test_minacc   0.74 (  0.68)	test_majacc   0.69 (  0.68)	Loss_d 0.565 (0.593)	test_acc_d   0.70 (  0.68)	test_minacc_d   0.74 (  0.68)	test_majacc_d   0.69 (  0.68)	test_corr_d   0.34 (  0.34)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.82it/s]
Test: [  0/  1]	Loss 0.670 (0.670)	test_acc   0.66 (  0.66)	test_minacc   0.64 (  0.64)	test_majacc   0.77 (  0.77)	Loss_d 0.670 (0.670)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.77 (  0.77)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.670 (0.670)	test_acc   0.66 (  0.66)	test_minacc   0.64 (  0.64)	test_majacc   0.77 (  0.77)	Loss_d 0.670 (0.670)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.77 (  0.77)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 16/  1]	epoch_time 0.0368 (0.0393)	validation_time 0.0003 (0.0008)	train_time 0.0365 (0.0382)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.6800000326037406, 0.6570000052452087)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.52it/s] 19%|#9        | 5/26 [00:00<00:01, 19.97it/s] 35%|###4      | 9/26 [00:00<00:00, 25.85it/s] 50%|#####     | 13/26 [00:00<00:00, 29.16it/s] 65%|######5   | 17/26 [00:00<00:00, 31.21it/s] 81%|########  | 21/26 [00:00<00:00, 32.53it/s] 96%|#########6| 25/26 [00:00<00:00, 33.37it/s]100%|##########| 26/26 [00:00<00:00, 27.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.61 (  0.61)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.66 (  0.66)	train_minacc   0.77 (  0.70)	train_majacc   0.64 (  0.66)	train_corr   0.00 (  0.00)	l1 18.5122 (18.5300)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.38it/s] 19%|#9        | 5/26 [00:00<00:00, 23.00it/s] 38%|###8      | 10/26 [00:00<00:00, 31.53it/s]                                                38%|###8      | 10/26 [00:00<00:00, 31.53it/s] 62%|######1   | 16/26 [00:00<00:00, 40.56it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.56it/s] 85%|########4 | 22/26 [00:00<00:00, 43.54it/s]100%|##########| 26/26 [00:00<00:00, 36.33it/s]
Test: [   0/  26]	Loss 0.638 (0.638)	test_acc   0.65 (  0.65)	test_minacc   0.69 (  0.69)	test_majacc   0.65 (  0.65)	Loss_d 0.638 (0.638)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.29 (  0.29)
Test: [  10/  26]	Loss 0.632 (0.625)	test_acc   0.64 (  0.65)	test_minacc   0.66 (  0.66)	test_majacc   0.63 (  0.65)	Loss_d 0.632 (0.625)	test_acc_d   0.64 (  0.65)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.63 (  0.65)	test_corr_d   0.28 (  0.28)
Test: [  20/  26]	Loss 0.624 (0.625)	test_acc   0.65 (  0.65)	test_minacc   0.72 (  0.67)	test_majacc   0.64 (  0.65)	Loss_d 0.624 (0.625)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.72 (  0.67)	test_majacc_d   0.64 (  0.65)	test_corr_d   0.30 (  0.28)
Test: [  26/  26]	Loss 0.607 (0.624)	test_acc   0.66 (  0.65)	test_minacc   0.77 (  0.68)	test_majacc   0.64 (  0.64)	Loss_d 0.607 (0.624)	test_acc_d   0.66 (  0.65)	test_minacc_d   0.77 (  0.68)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.25 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.40it/s]
Test: [  0/  1]	Loss 0.672 (0.672)	test_acc   0.65 (  0.65)	test_minacc   0.63 (  0.63)	test_majacc   0.74 (  0.74)	Loss_d 0.672 (0.672)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.74 (  0.74)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.672 (0.672)	test_acc   0.65 (  0.65)	test_minacc   0.63 (  0.63)	test_majacc   0.74 (  0.74)	Loss_d 0.672 (0.672)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.74 (  0.74)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 17/  1]	epoch_time 0.0367 (0.0392)	validation_time 0.0004 (0.0008)	train_time 0.0362 (0.0381)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.6481000164747238, 0.6450000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.08it/s] 19%|#9        | 5/26 [00:00<00:00, 21.62it/s] 35%|###4      | 9/26 [00:00<00:00, 27.86it/s] 50%|#####     | 13/26 [00:00<00:00, 31.03it/s] 65%|######5   | 17/26 [00:00<00:00, 32.91it/s] 81%|########  | 21/26 [00:00<00:00, 34.00it/s] 96%|#########6| 25/26 [00:00<00:00, 34.88it/s]100%|##########| 26/26 [00:00<00:00, 29.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.62 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.65 (  0.64)	train_minacc   0.71 (  0.67)	train_majacc   0.64 (  0.64)	train_corr   0.00 (  0.00)	l1 18.4776 (18.4879)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.93it/s] 27%|##6       | 7/26 [00:00<00:00, 31.79it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.79it/s] 50%|#####     | 13/26 [00:00<00:00, 38.34it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.22it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.22it/s] 96%|#########6| 25/26 [00:00<00:00, 46.03it/s]100%|##########| 26/26 [00:00<00:00, 37.98it/s]
Test: [   0/  26]	Loss 0.644 (0.644)	test_acc   0.66 (  0.66)	test_minacc   0.72 (  0.72)	test_majacc   0.65 (  0.65)	Loss_d 0.644 (0.644)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.29 (  0.29)
Test: [  10/  26]	Loss 0.644 (0.636)	test_acc   0.61 (  0.63)	test_minacc   0.67 (  0.65)	test_majacc   0.60 (  0.63)	Loss_d 0.644 (0.636)	test_acc_d   0.61 (  0.63)	test_minacc_d   0.67 (  0.65)	test_majacc_d   0.60 (  0.63)	test_corr_d   0.26 (  0.26)
Test: [  20/  26]	Loss 0.637 (0.636)	test_acc   0.60 (  0.63)	test_minacc   0.69 (  0.66)	test_majacc   0.59 (  0.62)	Loss_d 0.637 (0.636)	test_acc_d   0.60 (  0.63)	test_minacc_d   0.69 (  0.66)	test_majacc_d   0.59 (  0.62)	test_corr_d   0.29 (  0.26)
Test: [  26/  26]	Loss 0.620 (0.635)	test_acc   0.63 (  0.63)	test_minacc   0.71 (  0.66)	test_majacc   0.62 (  0.62)	Loss_d 0.620 (0.635)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.71 (  0.66)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.24 (  0.26)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.30it/s]
Test: [  0/  1]	Loss 0.680 (0.680)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.69 (  0.69)	Loss_d 0.680 (0.680)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.680 (0.680)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.69 (  0.69)	Loss_d 0.680 (0.680)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 18/  1]	epoch_time 0.0366 (0.0390)	validation_time 0.0003 (0.0007)	train_time 0.0363 (0.0380)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.6293000094890594, 0.6270000338554382)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.44it/s] 19%|#9        | 5/26 [00:00<00:00, 22.24it/s] 35%|###4      | 9/26 [00:00<00:00, 26.86it/s] 50%|#####     | 13/26 [00:00<00:00, 29.35it/s] 65%|######5   | 17/26 [00:00<00:00, 31.02it/s] 81%|########  | 21/26 [00:00<00:00, 32.01it/s] 96%|#########6| 25/26 [00:00<00:00, 32.75it/s]100%|##########| 26/26 [00:00<00:00, 27.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.62 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.65 (  0.63)	train_minacc   0.77 (  0.67)	train_majacc   0.63 (  0.62)	train_corr   0.00 (  0.00)	l1 18.4606 (18.4674)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.22it/s] 15%|#5        | 4/26 [00:00<00:01, 19.84it/s] 38%|###8      | 10/26 [00:00<00:00, 36.85it/s]                                                38%|###8      | 10/26 [00:00<00:00, 36.85it/s] 62%|######1   | 16/26 [00:00<00:00, 41.36it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.36it/s] 88%|########8 | 23/26 [00:00<00:00, 48.34it/s]100%|##########| 26/26 [00:00<00:00, 38.34it/s]
Test: [   0/  26]	Loss 0.642 (0.642)	test_acc   0.64 (  0.64)	test_minacc   0.69 (  0.69)	test_majacc   0.64 (  0.64)	Loss_d 0.642 (0.642)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.28 (  0.28)
Test: [  10/  26]	Loss 0.644 (0.637)	test_acc   0.61 (  0.63)	test_minacc   0.67 (  0.64)	test_majacc   0.60 (  0.62)	Loss_d 0.644 (0.637)	test_acc_d   0.61 (  0.63)	test_minacc_d   0.67 (  0.64)	test_majacc_d   0.60 (  0.62)	test_corr_d   0.24 (  0.25)
Test: [  20/  26]	Loss 0.633 (0.637)	test_acc   0.62 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.61 (  0.62)	Loss_d 0.633 (0.637)	test_acc_d   0.62 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.61 (  0.62)	test_corr_d   0.29 (  0.25)
Test: [  26/  26]	Loss 0.625 (0.636)	test_acc   0.64 (  0.63)	test_minacc   0.77 (  0.66)	test_majacc   0.62 (  0.62)	Loss_d 0.625 (0.636)	test_acc_d   0.64 (  0.63)	test_minacc_d   0.77 (  0.66)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.22 (  0.25)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.87it/s]
Test: [  0/  1]	Loss 0.681 (0.681)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.69 (  0.69)	Loss_d 0.681 (0.681)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.681 (0.681)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.69 (  0.69)	Loss_d 0.681 (0.681)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 19/  1]	epoch_time 0.0375 (0.0390)	validation_time 0.0006 (0.0007)	train_time 0.0369 (0.0379)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.6262000126242637, 0.6230000257492065)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.51it/s] 19%|#9        | 5/26 [00:00<00:00, 23.43it/s] 35%|###4      | 9/26 [00:00<00:00, 27.96it/s] 50%|#####     | 13/26 [00:00<00:00, 30.53it/s] 65%|######5   | 17/26 [00:00<00:00, 31.98it/s] 81%|########  | 21/26 [00:00<00:00, 33.08it/s] 96%|#########6| 25/26 [00:00<00:00, 33.62it/s]100%|##########| 26/26 [00:00<00:00, 28.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.64 (  0.62)	train_minacc   0.77 (  0.66)	train_majacc   0.62 (  0.61)	train_corr   0.00 (  0.00)	l1 18.4567 (18.4582)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.79it/s] 23%|##3       | 6/26 [00:00<00:00, 31.93it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.93it/s] 42%|####2     | 11/26 [00:00<00:00, 39.58it/s] 62%|######1   | 16/26 [00:00<00:00, 41.56it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.56it/s] 85%|########4 | 22/26 [00:00<00:00, 46.99it/s]100%|##########| 26/26 [00:00<00:00, 39.57it/s]
Test: [   0/  26]	Loss 0.646 (0.646)	test_acc   0.63 (  0.63)	test_minacc   0.69 (  0.69)	test_majacc   0.62 (  0.62)	Loss_d 0.646 (0.646)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.26 (  0.26)
Test: [  10/  26]	Loss 0.650 (0.642)	test_acc   0.60 (  0.62)	test_minacc   0.66 (  0.64)	test_majacc   0.59 (  0.61)	Loss_d 0.650 (0.642)	test_acc_d   0.60 (  0.62)	test_minacc_d   0.66 (  0.64)	test_majacc_d   0.59 (  0.61)	test_corr_d   0.23 (  0.23)
Test: [  20/  26]	Loss 0.637 (0.642)	test_acc   0.61 (  0.62)	test_minacc   0.65 (  0.65)	test_majacc   0.61 (  0.61)	Loss_d 0.637 (0.642)	test_acc_d   0.61 (  0.62)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.28 (  0.23)
Test: [  26/  26]	Loss 0.635 (0.641)	test_acc   0.64 (  0.62)	test_minacc   0.77 (  0.66)	test_majacc   0.62 (  0.61)	Loss_d 0.635 (0.641)	test_acc_d   0.64 (  0.62)	test_minacc_d   0.77 (  0.66)	test_majacc_d   0.62 (  0.61)	test_corr_d   0.19 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.96it/s]
Test: [  0/  1]	Loss 0.683 (0.683)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.65 (  0.65)	Loss_d 0.683 (0.683)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.683 (0.683)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.65 (  0.65)	Loss_d 0.683 (0.683)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 20/  1]	epoch_time 0.0370 (0.0389)	validation_time 0.0003 (0.0007)	train_time 0.0367 (0.0379)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.6173000106215477, 0.6150000095367432)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.76it/s] 15%|#5        | 4/26 [00:00<00:01, 17.92it/s] 27%|##6       | 7/26 [00:00<00:00, 22.61it/s] 42%|####2     | 11/26 [00:00<00:00, 26.26it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.32it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.87it/s] 88%|########8 | 23/26 [00:00<00:00, 32.05it/s]100%|##########| 26/26 [00:00<00:00, 26.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.65 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.63 (  0.61)	train_minacc   0.80 (  0.66)	train_majacc   0.60 (  0.60)	train_corr   0.00 (  0.00)	l1 18.4509 (18.4513)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.98it/s] 23%|##3       | 6/26 [00:00<00:00, 33.33it/s]                                               23%|##3       | 6/26 [00:00<00:00, 33.33it/s] 42%|####2     | 11/26 [00:00<00:00, 39.37it/s] 65%|######5   | 17/26 [00:00<00:00, 43.68it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.68it/s] 88%|########8 | 23/26 [00:00<00:00, 48.23it/s]100%|##########| 26/26 [00:00<00:00, 39.84it/s]
Test: [   0/  26]	Loss 0.654 (0.654)	test_acc   0.63 (  0.63)	test_minacc   0.70 (  0.70)	test_majacc   0.62 (  0.62)	Loss_d 0.654 (0.654)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.659 (0.651)	test_acc   0.58 (  0.60)	test_minacc   0.62 (  0.64)	test_majacc   0.57 (  0.60)	Loss_d 0.659 (0.651)	test_acc_d   0.58 (  0.60)	test_minacc_d   0.62 (  0.64)	test_majacc_d   0.57 (  0.60)	test_corr_d   0.21 (  0.21)
Test: [  20/  26]	Loss 0.648 (0.650)	test_acc   0.59 (  0.60)	test_minacc   0.65 (  0.64)	test_majacc   0.58 (  0.59)	Loss_d 0.648 (0.650)	test_acc_d   0.59 (  0.60)	test_minacc_d   0.65 (  0.64)	test_majacc_d   0.58 (  0.59)	test_corr_d   0.26 (  0.21)
Test: [  26/  26]	Loss 0.646 (0.650)	test_acc   0.63 (  0.60)	test_minacc   0.80 (  0.65)	test_majacc   0.60 (  0.59)	Loss_d 0.646 (0.650)	test_acc_d   0.63 (  0.60)	test_minacc_d   0.80 (  0.65)	test_majacc_d   0.60 (  0.59)	test_corr_d   0.16 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.16it/s]
Test: [  0/  1]	Loss 0.683 (0.683)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.65 (  0.65)	Loss_d 0.683 (0.683)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.683 (0.683)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.65 (  0.65)	Loss_d 0.683 (0.683)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 21/  1]	epoch_time 0.0370 (0.0388)	validation_time 0.0004 (0.0007)	train_time 0.0365 (0.0378)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.602200008571148, 0.6150000095367432)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.27it/s] 15%|#5        | 4/26 [00:00<00:01, 14.28it/s] 31%|###       | 8/26 [00:00<00:00, 22.04it/s] 46%|####6     | 12/26 [00:00<00:00, 26.41it/s] 62%|######1   | 16/26 [00:00<00:00, 28.51it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.31it/s] 92%|#########2| 24/26 [00:00<00:00, 32.03it/s]100%|##########| 26/26 [00:01<00:00, 25.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.66 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.61 (  0.60)	train_minacc   0.80 (  0.65)	train_majacc   0.58 (  0.59)	train_corr   0.00 (  0.00)	l1 18.4450 (18.4451)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.48it/s] 35%|###4      | 9/26 [00:00<00:00, 37.86it/s]                                               35%|###4      | 9/26 [00:00<00:00, 37.86it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.44it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.44it/s] 81%|########  | 21/26 [00:00<00:00, 46.25it/s]100%|##########| 26/26 [00:00<00:00, 41.61it/s]
Test: [   0/  26]	Loss 0.660 (0.660)	test_acc   0.63 (  0.63)	test_minacc   0.72 (  0.72)	test_majacc   0.61 (  0.61)	Loss_d 0.660 (0.660)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.667 (0.658)	test_acc   0.57 (  0.59)	test_minacc   0.60 (  0.63)	test_majacc   0.57 (  0.59)	Loss_d 0.667 (0.658)	test_acc_d   0.57 (  0.59)	test_minacc_d   0.60 (  0.63)	test_majacc_d   0.57 (  0.59)	test_corr_d   0.19 (  0.19)
Test: [  20/  26]	Loss 0.656 (0.657)	test_acc   0.58 (  0.59)	test_minacc   0.69 (  0.64)	test_majacc   0.57 (  0.58)	Loss_d 0.656 (0.657)	test_acc_d   0.58 (  0.59)	test_minacc_d   0.69 (  0.64)	test_majacc_d   0.57 (  0.58)	test_corr_d   0.24 (  0.19)
Test: [  26/  26]	Loss 0.655 (0.657)	test_acc   0.61 (  0.59)	test_minacc   0.80 (  0.65)	test_majacc   0.58 (  0.58)	Loss_d 0.655 (0.657)	test_acc_d   0.61 (  0.59)	test_minacc_d   0.80 (  0.65)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.14 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.23it/s]
Test: [  0/  1]	Loss 0.685 (0.685)	test_acc   0.61 (  0.61)	test_minacc   0.61 (  0.61)	test_majacc   0.61 (  0.61)	Loss_d 0.685 (0.685)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.685 (0.685)	test_acc   0.61 (  0.61)	test_minacc   0.61 (  0.61)	test_majacc   0.61 (  0.61)	Loss_d 0.685 (0.685)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 22/  1]	epoch_time 0.0374 (0.0387)	validation_time 0.0003 (0.0007)	train_time 0.0371 (0.0378)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.5930000097751618, 0.6080000400543213)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.50it/s] 15%|#5        | 4/26 [00:00<00:01, 15.20it/s] 31%|###       | 8/26 [00:00<00:00, 23.02it/s] 46%|####6     | 12/26 [00:00<00:00, 27.57it/s] 62%|######1   | 16/26 [00:00<00:00, 30.29it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.60it/s] 92%|#########2| 24/26 [00:00<00:00, 32.40it/s]100%|##########| 26/26 [00:00<00:00, 26.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 344 tensor(-0.0200, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
Epoch: [23][  26/  26]	Loss 0.000 (0.017)	train_nll   0.65 (  0.68)	train_penalty   0.00 (  0.02)	weight_norm   0.27 (  0.20)	train_acc   0.57 (  0.57)	train_minacc   0.63 (  0.57)	train_majacc   0.56 (  0.57)	train_corr   0.00 (  0.00)	l1 14.3619 (15.3375)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.83it/s] 31%|###       | 8/26 [00:00<00:00, 40.03it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.03it/s] 50%|#####     | 13/26 [00:00<00:00, 42.66it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.03it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.03it/s] 96%|#########6| 25/26 [00:00<00:00, 49.12it/s]100%|##########| 26/26 [00:00<00:00, 42.10it/s]
Test: [   0/  26]	Loss 0.643 (0.643)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.60 (  0.60)	Loss_d 0.643 (0.643)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.33 (  0.33)
Test: [  10/  26]	Loss 0.639 (0.647)	test_acc   0.63 (  0.59)	test_minacc   0.59 (  0.55)	test_majacc   0.64 (  0.60)	Loss_d 0.639 (0.647)	test_acc_d   0.63 (  0.59)	test_minacc_d   0.59 (  0.55)	test_majacc_d   0.64 (  0.60)	test_corr_d   0.37 (  0.38)
Test: [  20/  26]	Loss 0.626 (0.644)	test_acc   0.65 (  0.60)	test_minacc   0.59 (  0.57)	test_majacc   0.66 (  0.61)	Loss_d 0.626 (0.644)	test_acc_d   0.65 (  0.60)	test_minacc_d   0.59 (  0.57)	test_majacc_d   0.66 (  0.61)	test_corr_d   0.44 (  0.40)
Test: [  26/  26]	Loss 0.646 (0.645)	test_acc   0.59 (  0.60)	test_minacc   0.63 (  0.57)	test_majacc   0.59 (  0.60)	Loss_d 0.646 (0.645)	test_acc_d   0.59 (  0.60)	test_minacc_d   0.63 (  0.57)	test_majacc_d   0.59 (  0.60)	test_corr_d   0.42 (  0.39)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.59it/s]
Test: [  0/  1]	Loss 0.666 (0.666)	test_acc   0.58 (  0.58)	test_minacc   0.57 (  0.57)	test_majacc   0.64 (  0.64)	Loss_d 0.666 (0.666)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.666 (0.666)	test_acc   0.58 (  0.58)	test_minacc   0.57 (  0.57)	test_majacc   0.64 (  0.64)	Loss_d 0.666 (0.666)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.31 ( -0.31)
Overall Timing[ 23/  1]	epoch_time 0.0363 (0.0386)	validation_time 0.0006 (0.0007)	train_time 0.0357 (0.0377)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.5985000084042549, 0.578000009059906)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.29it/s] 19%|#9        | 5/26 [00:00<00:00, 22.12it/s] 35%|###4      | 9/26 [00:00<00:00, 27.85it/s] 50%|#####     | 13/26 [00:00<00:00, 30.77it/s] 65%|######5   | 17/26 [00:00<00:00, 32.44it/s] 81%|########  | 21/26 [00:00<00:00, 33.61it/s] 96%|#########6| 25/26 [00:00<00:00, 33.85it/s]100%|##########| 26/26 [00:00<00:00, 28.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.001)	train_nll   0.67 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm   0.31 (  0.30)	train_acc   0.50 (  0.57)	train_minacc   0.60 (  0.54)	train_majacc   0.48 (  0.58)	train_corr   0.00 (  0.00)	l1 13.9132 (14.0272)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.64it/s] 27%|##6       | 7/26 [00:00<00:00, 36.99it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.99it/s] 46%|####6     | 12/26 [00:00<00:00, 41.12it/s] 65%|######5   | 17/26 [00:00<00:00, 43.80it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.80it/s] 88%|########8 | 23/26 [00:00<00:00, 48.06it/s]100%|##########| 26/26 [00:00<00:00, 40.10it/s]
Test: [   0/  26]	Loss 0.669 (0.669)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.669 (0.669)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.26 (  0.26)
Test: [  10/  26]	Loss 0.666 (0.674)	test_acc   0.52 (  0.50)	test_minacc   0.48 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.666 (0.674)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.30 (  0.31)
Test: [  20/  26]	Loss 0.659 (0.672)	test_acc   0.54 (  0.51)	test_minacc   0.44 (  0.50)	test_majacc   0.55 (  0.51)	Loss_d 0.659 (0.672)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.36 (  0.32)
Test: [  26/  26]	Loss 0.674 (0.674)	test_acc   0.50 (  0.50)	test_minacc   0.60 (  0.50)	test_majacc   0.48 (  0.50)	Loss_d 0.674 (0.674)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.60 (  0.50)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.35 (  0.32)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.60it/s]
Test: [  0/  1]	Loss 0.680 (0.680)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.680 (0.680)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.680 (0.680)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.680 (0.680)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.31 ( -0.31)
Overall Timing[ 24/  1]	epoch_time 0.0364 (0.0385)	validation_time 0.0003 (0.0007)	train_time 0.0360 (0.0376)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.5026000120043754, 0.49800002574920654)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.24it/s] 19%|#9        | 5/26 [00:00<00:00, 23.52it/s] 35%|###4      | 9/26 [00:00<00:00, 26.91it/s] 50%|#####     | 13/26 [00:00<00:00, 28.86it/s] 65%|######5   | 17/26 [00:00<00:00, 30.42it/s] 81%|########  | 21/26 [00:00<00:00, 32.23it/s] 96%|#########6| 25/26 [00:00<00:00, 32.46it/s]100%|##########| 26/26 [00:00<00:00, 28.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.31 (  0.31)	train_acc   0.50 (  0.50)	train_minacc   0.60 (  0.50)	train_majacc   0.48 (  0.51)	train_corr   0.00 (  0.00)	l1 13.7612 (13.8164)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.86it/s] 27%|##6       | 7/26 [00:00<00:00, 37.24it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.24it/s] 50%|#####     | 13/26 [00:00<00:00, 42.46it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.72it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.72it/s] 96%|#########6| 25/26 [00:00<00:00, 48.25it/s]100%|##########| 26/26 [00:00<00:00, 41.00it/s]
Test: [   0/  26]	Loss 0.670 (0.670)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.670 (0.670)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.26 (  0.26)
Test: [  10/  26]	Loss 0.667 (0.674)	test_acc   0.52 (  0.50)	test_minacc   0.48 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.667 (0.674)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.30 (  0.31)
Test: [  20/  26]	Loss 0.662 (0.672)	test_acc   0.54 (  0.51)	test_minacc   0.44 (  0.50)	test_majacc   0.55 (  0.51)	Loss_d 0.662 (0.672)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.36 (  0.32)
Test: [  26/  26]	Loss 0.674 (0.673)	test_acc   0.50 (  0.50)	test_minacc   0.60 (  0.50)	test_majacc   0.48 (  0.50)	Loss_d 0.674 (0.673)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.60 (  0.50)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.34 (  0.32)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.43it/s]
Test: [  0/  1]	Loss 0.677 (0.677)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.677 (0.677)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.677 (0.677)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.677 (0.677)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.31 ( -0.31)
Overall Timing[ 25/  1]	epoch_time 0.0377 (0.0385)	validation_time 0.0004 (0.0007)	train_time 0.0373 (0.0376)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.5028000108301639, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.83it/s] 19%|#9        | 5/26 [00:00<00:00, 23.89it/s] 35%|###4      | 9/26 [00:00<00:00, 28.18it/s] 50%|#####     | 13/26 [00:00<00:00, 30.42it/s] 65%|######5   | 17/26 [00:00<00:00, 31.21it/s] 81%|########  | 21/26 [00:00<00:00, 31.87it/s] 96%|#########6| 25/26 [00:00<00:00, 32.44it/s]100%|##########| 26/26 [00:00<00:00, 28.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.31 (  0.31)	train_acc   0.50 (  0.50)	train_minacc   0.60 (  0.50)	train_majacc   0.48 (  0.50)	train_corr   0.00 (  0.00)	l1 13.7117 (13.7321)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.09it/s] 23%|##3       | 6/26 [00:00<00:00, 30.28it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.28it/s] 46%|####6     | 12/26 [00:00<00:00, 39.27it/s] 69%|######9   | 18/26 [00:00<00:00, 46.18it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.18it/s] 92%|#########2| 24/26 [00:00<00:00, 46.88it/s]100%|##########| 26/26 [00:00<00:00, 39.45it/s]
Test: [   0/  26]	Loss 0.677 (0.677)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.677 (0.677)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.675 (0.681)	test_acc   0.52 (  0.50)	test_minacc   0.48 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.675 (0.681)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.28 (  0.29)
Test: [  20/  26]	Loss 0.671 (0.680)	test_acc   0.54 (  0.50)	test_minacc   0.44 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.671 (0.680)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.33 (  0.30)
Test: [  26/  26]	Loss 0.681 (0.680)	test_acc   0.50 (  0.50)	test_minacc   0.60 (  0.50)	test_majacc   0.48 (  0.50)	Loss_d 0.681 (0.680)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.60 (  0.50)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.31 (  0.29)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.98it/s]
Test: [  0/  1]	Loss 0.683 (0.683)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.683 (0.683)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.30 ( -0.30)
Test: [  1/  1]	Loss 0.683 (0.683)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.683 (0.683)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.30 ( -0.30)
Overall Timing[ 26/  1]	epoch_time 0.0366 (0.0384)	validation_time 0.0004 (0.0006)	train_time 0.0361 (0.0376)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.5005000086426735, 0.49900001287460327)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.29it/s] 19%|#9        | 5/26 [00:00<00:00, 23.87it/s] 35%|###4      | 9/26 [00:00<00:00, 28.49it/s] 50%|#####     | 13/26 [00:00<00:00, 30.32it/s] 65%|######5   | 17/26 [00:00<00:00, 31.96it/s] 81%|########  | 21/26 [00:00<00:00, 33.16it/s] 96%|#########6| 25/26 [00:00<00:00, 33.88it/s]100%|##########| 26/26 [00:00<00:00, 29.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.31 (  0.31)	train_acc   0.50 (  0.50)	train_minacc   0.60 (  0.50)	train_majacc   0.48 (  0.50)	train_corr   0.00 (  0.00)	l1 13.6719 (13.6884)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.68it/s] 35%|###4      | 9/26 [00:00<00:00, 39.57it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.57it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.55it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.55it/s] 81%|########  | 21/26 [00:00<00:00, 47.45it/s]100%|##########| 26/26 [00:00<00:00, 41.41it/s]
Test: [   0/  26]	Loss 0.680 (0.680)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.680 (0.680)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.678 (0.683)	test_acc   0.52 (  0.50)	test_minacc   0.48 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.678 (0.683)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.27 (  0.28)
Test: [  20/  26]	Loss 0.675 (0.682)	test_acc   0.54 (  0.50)	test_minacc   0.44 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.675 (0.682)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.32 (  0.29)
Test: [  26/  26]	Loss 0.684 (0.683)	test_acc   0.50 (  0.50)	test_minacc   0.60 (  0.50)	test_majacc   0.48 (  0.50)	Loss_d 0.684 (0.683)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.60 (  0.50)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.30 (  0.29)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.47it/s]
Test: [  0/  1]	Loss 0.685 (0.685)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.685 (0.685)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.29 ( -0.29)
Test: [  1/  1]	Loss 0.685 (0.685)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.685 (0.685)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.29 ( -0.29)
Overall Timing[ 27/  1]	epoch_time 0.0349 (0.0383)	validation_time 0.0003 (0.0006)	train_time 0.0345 (0.0374)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.500400008648634, 0.49900001287460327)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.18it/s] 19%|#9        | 5/26 [00:00<00:00, 23.96it/s] 35%|###4      | 9/26 [00:00<00:00, 28.54it/s] 50%|#####     | 13/26 [00:00<00:00, 30.67it/s] 65%|######5   | 17/26 [00:00<00:00, 31.98it/s] 81%|########  | 21/26 [00:00<00:00, 32.58it/s] 96%|#########6| 25/26 [00:00<00:00, 32.86it/s]100%|##########| 26/26 [00:00<00:00, 28.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.31 (  0.31)	train_acc   0.50 (  0.50)	train_minacc   0.60 (  0.50)	train_majacc   0.48 (  0.50)	train_corr   0.00 (  0.00)	l1 13.6444 (13.6561)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.64it/s] 23%|##3       | 6/26 [00:00<00:00, 32.02it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.02it/s] 46%|####6     | 12/26 [00:00<00:00, 39.02it/s] 69%|######9   | 18/26 [00:00<00:00, 45.85it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.85it/s] 92%|#########2| 24/26 [00:00<00:00, 46.42it/s]100%|##########| 26/26 [00:00<00:00, 39.82it/s]
Test: [   0/  26]	Loss 0.682 (0.682)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.682 (0.682)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.681 (0.686)	test_acc   0.52 (  0.50)	test_minacc   0.48 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.681 (0.686)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.26 (  0.27)
Test: [  20/  26]	Loss 0.678 (0.685)	test_acc   0.54 (  0.50)	test_minacc   0.44 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.678 (0.685)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.31 (  0.28)
Test: [  26/  26]	Loss 0.686 (0.686)	test_acc   0.50 (  0.50)	test_minacc   0.60 (  0.50)	test_majacc   0.48 (  0.50)	Loss_d 0.686 (0.686)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.60 (  0.50)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.29 (  0.28)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.32it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.687 (0.687)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.28 ( -0.28)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.687 (0.687)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.28 ( -0.28)
Overall Timing[ 28/  1]	epoch_time 0.0371 (0.0383)	validation_time 0.0004 (0.0006)	train_time 0.0366 (0.0374)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.5002000074982643, 0.49900001287460327)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.61it/s] 15%|#5        | 4/26 [00:00<00:01, 18.91it/s] 31%|###       | 8/26 [00:00<00:00, 25.90it/s] 46%|####6     | 12/26 [00:00<00:00, 29.36it/s] 62%|######1   | 16/26 [00:00<00:00, 31.34it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.25it/s] 92%|#########2| 24/26 [00:00<00:00, 32.57it/s]100%|##########| 26/26 [00:00<00:00, 27.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.31 (  0.31)	train_acc   0.50 (  0.50)	train_minacc   0.60 (  0.50)	train_majacc   0.48 (  0.50)	train_corr   0.00 (  0.00)	l1 13.6237 (13.6326)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.00it/s] 31%|###       | 8/26 [00:00<00:00, 38.50it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.50it/s] 50%|#####     | 13/26 [00:00<00:00, 42.01it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.78it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.78it/s] 96%|#########6| 25/26 [00:00<00:00, 50.32it/s]100%|##########| 26/26 [00:00<00:00, 42.33it/s]
Test: [   0/  26]	Loss 0.684 (0.684)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.684 (0.684)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.683 (0.688)	test_acc   0.52 (  0.50)	test_minacc   0.48 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.683 (0.688)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.26 (  0.27)
Test: [  20/  26]	Loss 0.681 (0.687)	test_acc   0.54 (  0.50)	test_minacc   0.44 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.681 (0.687)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.30 (  0.28)
Test: [  26/  26]	Loss 0.688 (0.687)	test_acc   0.50 (  0.50)	test_minacc   0.60 (  0.50)	test_majacc   0.48 (  0.50)	Loss_d 0.688 (0.687)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.60 (  0.50)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.29 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.27it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.688 (0.688)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.27 ( -0.27)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.688 (0.688)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.27 ( -0.27)
Overall Timing[ 29/  1]	epoch_time 0.0362 (0.0382)	validation_time 0.0004 (0.0006)	train_time 0.0358 (0.0374)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.5002000074982643, 0.49900001287460327)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.64it/s] 19%|#9        | 5/26 [00:00<00:00, 21.54it/s] 35%|###4      | 9/26 [00:00<00:00, 26.89it/s] 50%|#####     | 13/26 [00:00<00:00, 29.57it/s] 65%|######5   | 17/26 [00:00<00:00, 31.23it/s] 81%|########  | 21/26 [00:00<00:00, 32.38it/s] 96%|#########6| 25/26 [00:00<00:00, 33.14it/s]100%|##########| 26/26 [00:00<00:00, 28.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.31 (  0.31)	train_acc   0.50 (  0.50)	train_minacc   0.60 (  0.50)	train_majacc   0.48 (  0.50)	train_corr   0.00 (  0.00)	l1 13.6085 (13.6150)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.42it/s] 31%|###       | 8/26 [00:00<00:00, 30.66it/s]                                               31%|###       | 8/26 [00:00<00:00, 30.66it/s] 50%|#####     | 13/26 [00:00<00:00, 37.53it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.77it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.77it/s] 96%|#########6| 25/26 [00:00<00:00, 46.41it/s]100%|##########| 26/26 [00:00<00:00, 36.94it/s]
Test: [   0/  26]	Loss 0.686 (0.686)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.686 (0.686)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.685 (0.689)	test_acc   0.52 (  0.50)	test_minacc   0.48 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.685 (0.689)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.25 (  0.26)
Test: [  20/  26]	Loss 0.683 (0.688)	test_acc   0.54 (  0.50)	test_minacc   0.44 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.683 (0.688)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.30 (  0.27)
Test: [  26/  26]	Loss 0.689 (0.689)	test_acc   0.50 (  0.50)	test_minacc   0.60 (  0.50)	test_majacc   0.48 (  0.50)	Loss_d 0.689 (0.689)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.60 (  0.50)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.28 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.64it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 30/  1]	epoch_time 0.0376 (0.0382)	validation_time 0.0004 (0.0006)	train_time 0.0372 (0.0374)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.5002000074982643, 0.49900001287460327)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.27it/s] 15%|#5        | 4/26 [00:00<00:01, 19.94it/s] 31%|###       | 8/26 [00:00<00:00, 26.02it/s] 46%|####6     | 12/26 [00:00<00:00, 28.85it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.64it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.62it/s] 88%|########8 | 23/26 [00:00<00:00, 31.63it/s]100%|##########| 26/26 [00:00<00:00, 27.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.31 (  0.31)	train_acc   0.50 (  0.50)	train_minacc   0.60 (  0.50)	train_majacc   0.48 (  0.50)	train_corr   0.00 (  0.00)	l1 13.5973 (13.6021)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.79it/s] 23%|##3       | 6/26 [00:00<00:00, 32.70it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.70it/s] 46%|####6     | 12/26 [00:00<00:00, 42.67it/s] 65%|######5   | 17/26 [00:00<00:00, 43.71it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.71it/s] 88%|########8 | 23/26 [00:00<00:00, 48.76it/s]100%|##########| 26/26 [00:00<00:00, 40.07it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.687 (0.687)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.686 (0.690)	test_acc   0.52 (  0.50)	test_minacc   0.48 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.686 (0.690)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.25 (  0.26)
Test: [  20/  26]	Loss 0.684 (0.689)	test_acc   0.54 (  0.50)	test_minacc   0.44 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.684 (0.689)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.29 (  0.27)
Test: [  26/  26]	Loss 0.690 (0.689)	test_acc   0.50 (  0.50)	test_minacc   0.60 (  0.50)	test_majacc   0.48 (  0.50)	Loss_d 0.690 (0.689)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.60 (  0.50)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.27 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.38it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 31/  1]	epoch_time 0.0377 (0.0382)	validation_time 0.0004 (0.0006)	train_time 0.0373 (0.0374)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.5002000074982643, 0.49900001287460327)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.84it/s] 15%|#5        | 4/26 [00:00<00:01, 20.05it/s] 31%|###       | 8/26 [00:00<00:00, 25.70it/s] 46%|####6     | 12/26 [00:00<00:00, 28.93it/s] 62%|######1   | 16/26 [00:00<00:00, 30.70it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.42it/s] 92%|#########2| 24/26 [00:00<00:00, 32.25it/s]100%|##########| 26/26 [00:00<00:00, 27.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.31 (  0.31)	train_acc   0.50 (  0.50)	train_minacc   0.60 (  0.50)	train_majacc   0.48 (  0.50)	train_corr   0.00 (  0.00)	l1 13.5891 (13.5926)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.71it/s] 31%|###       | 8/26 [00:00<00:00, 42.08it/s]                                               31%|###       | 8/26 [00:00<00:00, 42.08it/s] 50%|#####     | 13/26 [00:00<00:00, 43.18it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.16it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.16it/s] 96%|#########6| 25/26 [00:00<00:00, 48.79it/s]100%|##########| 26/26 [00:00<00:00, 41.92it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.688 (0.688)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.687 (0.690)	test_acc   0.52 (  0.50)	test_minacc   0.48 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.687 (0.690)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.24 (  0.26)
Test: [  20/  26]	Loss 0.685 (0.690)	test_acc   0.54 (  0.50)	test_minacc   0.44 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.685 (0.690)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.29 (  0.27)
Test: [  26/  26]	Loss 0.691 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.60 (  0.50)	test_majacc   0.48 (  0.50)	Loss_d 0.691 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.60 (  0.50)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.26 (  0.26)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.89it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 32/  1]	epoch_time 0.0363 (0.0381)	validation_time 0.0003 (0.0006)	train_time 0.0360 (0.0373)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.5002000074982643, 0.5010000467300415)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.75it/s] 19%|#9        | 5/26 [00:00<00:00, 23.63it/s] 35%|###4      | 9/26 [00:00<00:00, 27.64it/s] 50%|#####     | 13/26 [00:00<00:00, 30.48it/s] 65%|######5   | 17/26 [00:00<00:00, 31.36it/s] 81%|########  | 21/26 [00:00<00:00, 32.06it/s] 96%|#########6| 25/26 [00:00<00:00, 32.34it/s]100%|##########| 26/26 [00:00<00:00, 28.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.31 (  0.31)	train_acc   0.50 (  0.50)	train_minacc   0.60 (  0.50)	train_majacc   0.48 (  0.50)	train_corr   0.00 (  0.00)	l1 13.5833 (13.5858)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.75it/s] 27%|##6       | 7/26 [00:00<00:00, 32.98it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.98it/s] 50%|#####     | 13/26 [00:00<00:00, 38.87it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.13it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.13it/s] 96%|#########6| 25/26 [00:00<00:00, 46.02it/s]100%|##########| 26/26 [00:00<00:00, 38.39it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.689 (0.689)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.688 (0.691)	test_acc   0.52 (  0.50)	test_minacc   0.48 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.688 (0.691)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.24 (  0.25)
Test: [  20/  26]	Loss 0.686 (0.690)	test_acc   0.54 (  0.50)	test_minacc   0.44 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.686 (0.690)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.28 (  0.26)
Test: [  26/  26]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.60 (  0.50)	test_majacc   0.48 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.60 (  0.50)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.25 (  0.26)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.04it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 33/  1]	epoch_time 0.0371 (0.0381)	validation_time 0.0003 (0.0006)	train_time 0.0368 (0.0373)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.5003000063300133, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.71it/s] 15%|#5        | 4/26 [00:00<00:01, 17.45it/s] 31%|###       | 8/26 [00:00<00:00, 24.36it/s] 46%|####6     | 12/26 [00:00<00:00, 27.86it/s] 62%|######1   | 16/26 [00:00<00:00, 30.08it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.37it/s] 92%|#########2| 24/26 [00:00<00:00, 31.83it/s]100%|##########| 26/26 [00:00<00:00, 26.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.31 (  0.31)	train_acc   0.50 (  0.50)	train_minacc   0.60 (  0.50)	train_majacc   0.48 (  0.50)	train_corr   0.00 (  0.00)	l1 13.5793 (13.5809)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.60it/s] 27%|##6       | 7/26 [00:00<00:00, 35.67it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.67it/s] 50%|#####     | 13/26 [00:00<00:00, 40.96it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.15it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.15it/s] 96%|#########6| 25/26 [00:00<00:00, 47.36it/s]100%|##########| 26/26 [00:00<00:00, 39.83it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.689 (0.689)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.689 (0.691)	test_acc   0.52 (  0.50)	test_minacc   0.48 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.689 (0.691)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.23 (  0.24)
Test: [  20/  26]	Loss 0.687 (0.691)	test_acc   0.54 (  0.50)	test_minacc   0.44 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.687 (0.691)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.27 (  0.25)
Test: [  26/  26]	Loss 0.692 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.60 (  0.50)	test_majacc   0.48 (  0.50)	Loss_d 0.692 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.60 (  0.50)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.24 (  0.25)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.83it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 34/  1]	epoch_time 0.0370 (0.0380)	validation_time 0.0006 (0.0006)	train_time 0.0364 (0.0373)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.5003000086545945, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.30it/s] 19%|#9        | 5/26 [00:00<00:00, 22.76it/s] 35%|###4      | 9/26 [00:00<00:00, 28.08it/s] 50%|#####     | 13/26 [00:00<00:00, 30.92it/s] 65%|######5   | 17/26 [00:00<00:00, 32.62it/s] 81%|########  | 21/26 [00:00<00:00, 33.71it/s] 96%|#########6| 25/26 [00:00<00:00, 34.10it/s]100%|##########| 26/26 [00:00<00:00, 29.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.31 (  0.31)	train_acc   0.50 (  0.50)	train_minacc   0.60 (  0.50)	train_majacc   0.48 (  0.50)	train_corr   0.00 (  0.00)	l1 13.5765 (13.5776)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.80it/s] 27%|##6       | 7/26 [00:00<00:00, 36.84it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.84it/s] 50%|#####     | 13/26 [00:00<00:00, 42.14it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.39it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.39it/s] 96%|#########6| 25/26 [00:00<00:00, 48.46it/s]100%|##########| 26/26 [00:00<00:00, 40.95it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.689 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.48 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.689 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.22 (  0.24)
Test: [  20/  26]	Loss 0.688 (0.691)	test_acc   0.54 (  0.50)	test_minacc   0.44 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.688 (0.691)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.25 (  0.24)
Test: [  26/  26]	Loss 0.692 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.60 (  0.50)	test_majacc   0.48 (  0.50)	Loss_d 0.692 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.60 (  0.50)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.23 (  0.24)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.42it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 35/  1]	epoch_time 0.0365 (0.0380)	validation_time 0.0004 (0.0006)	train_time 0.0361 (0.0372)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.5007000086307526, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.46it/s] 19%|#9        | 5/26 [00:00<00:00, 22.41it/s] 31%|###       | 8/26 [00:00<00:00, 25.11it/s] 42%|####2     | 11/26 [00:00<00:00, 26.24it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.15it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.16it/s] 88%|########8 | 23/26 [00:00<00:00, 31.02it/s]100%|##########| 26/26 [00:00<00:00, 26.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.31 (  0.31)	train_acc   0.50 (  0.50)	train_minacc   0.60 (  0.50)	train_majacc   0.48 (  0.50)	train_corr   0.00 (  0.00)	l1 13.5748 (13.5755)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.70it/s] 23%|##3       | 6/26 [00:00<00:00, 27.65it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.65it/s] 46%|####6     | 12/26 [00:00<00:00, 39.18it/s] 69%|######9   | 18/26 [00:00<00:00, 43.19it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.19it/s] 92%|#########2| 24/26 [00:00<00:00, 47.97it/s]100%|##########| 26/26 [00:00<00:00, 38.79it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.689 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.48 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.689 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.22 (  0.23)
Test: [  20/  26]	Loss 0.688 (0.691)	test_acc   0.54 (  0.50)	test_minacc   0.44 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.688 (0.691)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.24 (  0.23)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.60 (  0.50)	test_majacc   0.48 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.60 (  0.50)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.22 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.77it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 36/  1]	epoch_time 0.0372 (0.0380)	validation_time 0.0004 (0.0006)	train_time 0.0368 (0.0372)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.5009000097811223, 0.5010000467300415)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.17it/s] 19%|#9        | 5/26 [00:00<00:00, 23.66it/s] 35%|###4      | 9/26 [00:00<00:00, 29.00it/s] 50%|#####     | 13/26 [00:00<00:00, 31.70it/s] 65%|######5   | 17/26 [00:00<00:00, 32.51it/s] 81%|########  | 21/26 [00:00<00:00, 32.87it/s] 96%|#########6| 25/26 [00:00<00:00, 32.83it/s]100%|##########| 26/26 [00:00<00:00, 28.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.31 (  0.31)	train_acc   0.50 (  0.50)	train_minacc   0.60 (  0.50)	train_majacc   0.48 (  0.50)	train_corr   0.00 (  0.00)	l1 13.5740 (13.5742)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.00it/s] 27%|##6       | 7/26 [00:00<00:00, 33.20it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.20it/s] 50%|#####     | 13/26 [00:00<00:00, 39.39it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.35it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.35it/s] 96%|#########6| 25/26 [00:00<00:00, 47.21it/s]100%|##########| 26/26 [00:00<00:00, 38.35it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.48 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.21 (  0.22)
Test: [  20/  26]	Loss 0.689 (0.692)	test_acc   0.53 (  0.50)	test_minacc   0.44 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.689 (0.692)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.22 (  0.22)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.60 (  0.50)	test_majacc   0.48 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.60 (  0.50)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.21 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.06it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 37/  1]	epoch_time 0.0375 (0.0380)	validation_time 0.0004 (0.0006)	train_time 0.0371 (0.0372)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.5007000132799149, 0.5020000338554382)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.92it/s] 19%|#9        | 5/26 [00:00<00:01, 17.50it/s] 35%|###4      | 9/26 [00:00<00:00, 23.90it/s] 50%|#####     | 13/26 [00:00<00:00, 27.73it/s] 65%|######5   | 17/26 [00:00<00:00, 30.05it/s] 81%|########  | 21/26 [00:00<00:00, 31.31it/s] 96%|#########6| 25/26 [00:00<00:00, 32.14it/s]100%|##########| 26/26 [00:01<00:00, 25.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.31 (  0.31)	train_acc   0.50 (  0.50)	train_minacc   0.60 (  0.50)	train_majacc   0.48 (  0.50)	train_corr   0.00 (  0.00)	l1 13.5737 (13.5737)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.04it/s] 27%|##6       | 7/26 [00:00<00:00, 36.36it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.36it/s] 50%|#####     | 13/26 [00:00<00:00, 43.33it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.96it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.96it/s] 96%|#########6| 25/26 [00:00<00:00, 48.41it/s]100%|##########| 26/26 [00:00<00:00, 40.76it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.48 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.19 (  0.20)
Test: [  20/  26]	Loss 0.689 (0.692)	test_acc   0.54 (  0.50)	test_minacc   0.44 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.689 (0.692)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.20 (  0.20)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.60 (  0.50)	test_majacc   0.48 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.60 (  0.50)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.19 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.57it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 38/  1]	epoch_time 0.0366 (0.0379)	validation_time 0.0004 (0.0006)	train_time 0.0361 (0.0372)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.500800011575222, 0.5020000338554382)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.05it/s] 19%|#9        | 5/26 [00:00<00:00, 23.31it/s] 35%|###4      | 9/26 [00:00<00:00, 27.17it/s] 50%|#####     | 13/26 [00:00<00:00, 28.93it/s] 65%|######5   | 17/26 [00:00<00:00, 29.98it/s] 81%|########  | 21/26 [00:00<00:00, 31.82it/s] 96%|#########6| 25/26 [00:00<00:00, 32.62it/s]100%|##########| 26/26 [00:00<00:00, 28.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.31 (  0.31)	train_acc   0.50 (  0.50)	train_minacc   0.60 (  0.50)	train_majacc   0.48 (  0.50)	train_corr   0.00 (  0.00)	l1 13.5740 (13.5738)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.21it/s] 27%|##6       | 7/26 [00:00<00:00, 30.75it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.75it/s] 50%|#####     | 13/26 [00:00<00:00, 39.45it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.19it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.19it/s] 96%|#########6| 25/26 [00:00<00:00, 46.71it/s]100%|##########| 26/26 [00:00<00:00, 37.91it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.15 (  0.15)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.18 (  0.19)
Test: [  20/  26]	Loss 0.689 (0.692)	test_acc   0.54 (  0.50)	test_minacc   0.44 (  0.51)	test_majacc   0.55 (  0.50)	Loss_d 0.689 (0.692)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.44 (  0.51)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.18 (  0.19)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.60 (  0.50)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.60 (  0.50)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.18 (  0.18)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.33it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 39/  1]	epoch_time 0.0370 (0.0379)	validation_time 0.0004 (0.0006)	train_time 0.0366 (0.0372)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.5014000103771686, 0.503000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.49it/s] 23%|##3       | 6/26 [00:00<00:00, 25.12it/s] 38%|###8      | 10/26 [00:00<00:00, 29.43it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.14it/s] 69%|######9   | 18/26 [00:00<00:00, 32.62it/s] 85%|########4 | 22/26 [00:00<00:00, 33.67it/s]100%|##########| 26/26 [00:00<00:00, 34.20it/s]100%|##########| 26/26 [00:00<00:00, 29.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.30 (  0.30)	train_acc   0.50 (  0.50)	train_minacc   0.60 (  0.50)	train_majacc   0.48 (  0.50)	train_corr   0.00 (  0.00)	l1 13.5748 (13.5743)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.31it/s] 27%|##6       | 7/26 [00:00<00:00, 35.40it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.40it/s] 50%|#####     | 13/26 [00:00<00:00, 41.47it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.53it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.53it/s] 96%|#########6| 25/26 [00:00<00:00, 47.90it/s]100%|##########| 26/26 [00:00<00:00, 40.68it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.53 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.17 (  0.17)
Test: [  20/  26]	Loss 0.690 (0.692)	test_acc   0.54 (  0.50)	test_minacc   0.44 (  0.51)	test_majacc   0.55 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.44 (  0.51)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.16 (  0.17)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.60 (  0.50)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.60 (  0.50)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.16 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.63it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 40/  1]	epoch_time 0.0349 (0.0378)	validation_time 0.0004 (0.0006)	train_time 0.0345 (0.0371)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.5016000103652477, 0.503000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.81it/s] 19%|#9        | 5/26 [00:00<00:00, 23.39it/s] 35%|###4      | 9/26 [00:00<00:00, 28.07it/s] 50%|#####     | 13/26 [00:00<00:00, 30.52it/s] 65%|######5   | 17/26 [00:00<00:00, 31.58it/s] 81%|########  | 21/26 [00:00<00:00, 32.45it/s] 96%|#########6| 25/26 [00:00<00:00, 33.10it/s]100%|##########| 26/26 [00:00<00:00, 28.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.30 (  0.30)	train_acc   0.50 (  0.50)	train_minacc   0.60 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 13.5758 (13.5752)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.15it/s] 27%|##6       | 7/26 [00:00<00:00, 36.36it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.36it/s] 46%|####6     | 12/26 [00:00<00:00, 42.28it/s] 65%|######5   | 17/26 [00:00<00:00, 44.93it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.93it/s] 88%|########8 | 23/26 [00:00<00:00, 49.49it/s]100%|##########| 26/26 [00:00<00:00, 40.92it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.52 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.53 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.16 (  0.16)
Test: [  20/  26]	Loss 0.690 (0.692)	test_acc   0.54 (  0.50)	test_minacc   0.44 (  0.50)	test_majacc   0.55 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.14 (  0.16)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.60 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.60 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.15 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.30it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 41/  1]	epoch_time 0.0358 (0.0378)	validation_time 0.0003 (0.0006)	train_time 0.0355 (0.0371)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.5019000082314015, 0.503000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.51it/s] 15%|#5        | 4/26 [00:00<00:01, 18.43it/s] 27%|##6       | 7/26 [00:00<00:00, 23.15it/s] 42%|####2     | 11/26 [00:00<00:00, 26.96it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.33it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.81it/s] 88%|########8 | 23/26 [00:00<00:00, 31.80it/s]100%|##########| 26/26 [00:00<00:00, 26.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.30 (  0.30)	train_acc   0.51 (  0.50)	train_minacc   0.60 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 13.5771 (13.5764)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.84it/s] 27%|##6       | 7/26 [00:00<00:00, 32.30it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.30it/s] 42%|####2     | 11/26 [00:00<00:00, 34.49it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.46it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.46it/s] 96%|#########6| 25/26 [00:00<00:00, 48.49it/s]100%|##########| 26/26 [00:00<00:00, 38.97it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.13 (  0.13)
Test: [  10/  26]	Loss 0.691 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.15 (  0.14)
Test: [  20/  26]	Loss 0.690 (0.692)	test_acc   0.54 (  0.50)	test_minacc   0.44 (  0.51)	test_majacc   0.55 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.44 (  0.51)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.13 (  0.14)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.51 (  0.50)	test_minacc   0.60 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.60 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.14 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.22it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 42/  1]	epoch_time 0.0366 (0.0378)	validation_time 0.0004 (0.0006)	train_time 0.0362 (0.0371)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.5022000084221363, 0.503000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.60it/s] 15%|#5        | 4/26 [00:00<00:01, 19.06it/s] 31%|###       | 8/26 [00:00<00:00, 25.08it/s] 46%|####6     | 12/26 [00:00<00:00, 28.06it/s] 62%|######1   | 16/26 [00:00<00:00, 29.70it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.88it/s] 92%|#########2| 24/26 [00:00<00:00, 32.02it/s]100%|##########| 26/26 [00:00<00:00, 27.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.30 (  0.30)	train_acc   0.51 (  0.50)	train_minacc   0.60 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 13.5786 (13.5778)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.41it/s] 27%|##6       | 7/26 [00:00<00:00, 34.44it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.44it/s] 50%|#####     | 13/26 [00:00<00:00, 42.82it/s] 69%|######9   | 18/26 [00:00<00:00, 44.72it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.72it/s] 92%|#########2| 24/26 [00:00<00:00, 49.17it/s]100%|##########| 26/26 [00:00<00:00, 40.96it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.13 (  0.13)
Test: [  10/  26]	Loss 0.691 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.14 (  0.13)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.54 (  0.50)	test_minacc   0.44 (  0.51)	test_majacc   0.56 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.44 (  0.51)	test_majacc_d   0.56 (  0.50)	test_corr_d   0.11 (  0.12)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.60 (  0.51)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.60 (  0.51)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.12 (  0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.93it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 43/  1]	epoch_time 0.0373 (0.0377)	validation_time 0.0006 (0.0006)	train_time 0.0367 (0.0370)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.503000007212162, 0.503000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.63it/s] 15%|#5        | 4/26 [00:00<00:01, 20.15it/s] 31%|###       | 8/26 [00:00<00:00, 25.34it/s] 42%|####2     | 11/26 [00:00<00:00, 26.64it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.36it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.98it/s] 88%|########8 | 23/26 [00:00<00:00, 31.49it/s]100%|##########| 26/26 [00:00<00:00, 26.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.30 (  0.30)	train_acc   0.51 (  0.50)	train_minacc   0.60 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 13.5803 (13.5794)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.80it/s] 27%|##6       | 7/26 [00:00<00:00, 37.40it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.40it/s] 50%|#####     | 13/26 [00:00<00:00, 42.64it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.06it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.06it/s] 96%|#########6| 25/26 [00:00<00:00, 48.59it/s]100%|##########| 26/26 [00:00<00:00, 41.21it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.691 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.53 (  0.50)	Loss_d 0.691 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.13 (  0.12)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.54 (  0.50)	test_minacc   0.44 (  0.51)	test_majacc   0.55 (  0.51)	Loss_d 0.691 (0.692)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.44 (  0.51)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.09 (  0.11)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.60 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.60 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.11 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.16it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 44/  1]	epoch_time 0.0383 (0.0378)	validation_time 0.0003 (0.0006)	train_time 0.0379 (0.0371)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.5034000118374824, 0.5020000338554382)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.17it/s] 19%|#9        | 5/26 [00:00<00:00, 22.34it/s] 35%|###4      | 9/26 [00:00<00:00, 27.74it/s] 50%|#####     | 13/26 [00:00<00:00, 30.42it/s] 65%|######5   | 17/26 [00:00<00:00, 31.94it/s] 81%|########  | 21/26 [00:00<00:00, 33.04it/s] 96%|#########6| 25/26 [00:00<00:00, 33.61it/s]100%|##########| 26/26 [00:00<00:00, 28.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.30 (  0.30)	train_acc   0.50 (  0.50)	train_minacc   0.60 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 13.5820 (13.5811)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.22it/s] 23%|##3       | 6/26 [00:00<00:00, 31.50it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.50it/s] 46%|####6     | 12/26 [00:00<00:00, 39.82it/s] 69%|######9   | 18/26 [00:00<00:00, 46.73it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.73it/s] 92%|#########2| 24/26 [00:00<00:00, 46.65it/s]100%|##########| 26/26 [00:00<00:00, 39.74it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.691 (0.693)	test_acc   0.53 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.53 (  0.50)	Loss_d 0.691 (0.693)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.12 (  0.10)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.54 (  0.50)	test_minacc   0.44 (  0.51)	test_majacc   0.55 (  0.50)	Loss_d 0.691 (0.693)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.44 (  0.51)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.07 (  0.10)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.60 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.60 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.10 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.23it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 45/  1]	epoch_time 0.0352 (0.0377)	validation_time 0.0004 (0.0005)	train_time 0.0348 (0.0370)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.5036000081300736, 0.5040000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.81it/s] 19%|#9        | 5/26 [00:00<00:00, 23.44it/s] 35%|###4      | 9/26 [00:00<00:00, 28.64it/s] 50%|#####     | 13/26 [00:00<00:00, 30.63it/s] 65%|######5   | 17/26 [00:00<00:00, 31.71it/s] 81%|########  | 21/26 [00:00<00:00, 32.53it/s] 96%|#########6| 25/26 [00:00<00:00, 33.03it/s]100%|##########| 26/26 [00:00<00:00, 28.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.30 (  0.30)	train_acc   0.51 (  0.50)	train_minacc   0.60 (  0.51)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 13.5838 (13.5829)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.55it/s] 35%|###4      | 9/26 [00:00<00:00, 38.16it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.16it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.37it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.37it/s] 81%|########  | 21/26 [00:00<00:00, 46.88it/s]100%|##########| 26/26 [00:00<00:00, 41.71it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.691 (0.693)	test_acc   0.53 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.53 (  0.50)	Loss_d 0.691 (0.693)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.11 (  0.09)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.54 (  0.50)	test_minacc   0.44 (  0.51)	test_majacc   0.55 (  0.50)	Loss_d 0.691 (0.693)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.44 (  0.51)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.06 (  0.09)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.60 (  0.51)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.60 (  0.51)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.09 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.88it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.00 (  0.00)
Overall Timing[ 46/  1]	epoch_time 0.0356 (0.0377)	validation_time 0.0004 (0.0005)	train_time 0.0352 (0.0370)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.503600010663271, 0.5070000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.69it/s] 19%|#9        | 5/26 [00:00<00:01, 17.15it/s] 35%|###4      | 9/26 [00:00<00:00, 23.62it/s] 50%|#####     | 13/26 [00:00<00:00, 27.38it/s] 65%|######5   | 17/26 [00:00<00:00, 29.76it/s] 81%|########  | 21/26 [00:00<00:00, 31.41it/s] 96%|#########6| 25/26 [00:00<00:00, 32.52it/s]100%|##########| 26/26 [00:01<00:00, 25.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.30 (  0.30)	train_acc   0.50 (  0.50)	train_minacc   0.57 (  0.51)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 13.5856 (13.5847)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.04it/s] 31%|###       | 8/26 [00:00<00:00, 39.86it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.86it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.60it/s] 77%|#######6  | 20/26 [00:00<00:00, 49.12it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 49.12it/s]100%|##########| 26/26 [00:00<00:00, 52.25it/s]100%|##########| 26/26 [00:00<00:00, 42.57it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.691 (0.693)	test_acc   0.53 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.53 (  0.50)	Loss_d 0.691 (0.693)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.10 (  0.08)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.54 (  0.50)	test_minacc   0.44 (  0.51)	test_majacc   0.55 (  0.50)	Loss_d 0.691 (0.693)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.44 (  0.51)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.05 (  0.08)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.57 (  0.51)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.57 (  0.51)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.08 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.30it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.01 (  0.01)
Overall Timing[ 47/  1]	epoch_time 0.0362 (0.0376)	validation_time 0.0003 (0.0005)	train_time 0.0358 (0.0370)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.5023000093698502, 0.5060000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.57it/s] 19%|#9        | 5/26 [00:00<00:01, 20.66it/s] 35%|###4      | 9/26 [00:00<00:00, 25.78it/s] 50%|#####     | 13/26 [00:00<00:00, 28.87it/s] 62%|######1   | 16/26 [00:00<00:00, 28.76it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.74it/s] 88%|########8 | 23/26 [00:00<00:00, 30.62it/s]100%|##########| 26/26 [00:00<00:00, 26.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.30 (  0.30)	train_acc   0.50 (  0.50)	train_minacc   0.57 (  0.51)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 13.5874 (13.5865)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.49it/s] 27%|##6       | 7/26 [00:00<00:00, 34.44it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.44it/s] 50%|#####     | 13/26 [00:00<00:00, 40.91it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.23it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.23it/s] 96%|#########6| 25/26 [00:00<00:00, 47.00it/s]100%|##########| 26/26 [00:00<00:00, 39.36it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.53 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.10 (  0.08)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.50)	test_minacc   0.44 (  0.51)	test_majacc   0.55 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.44 (  0.51)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.04 (  0.07)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.57 (  0.51)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.57 (  0.51)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.07 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.23it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.02 (  0.02)
Overall Timing[ 48/  1]	epoch_time 0.0373 (0.0376)	validation_time 0.0003 (0.0005)	train_time 0.0370 (0.0370)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.5019000105559825, 0.5080000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.87it/s] 19%|#9        | 5/26 [00:00<00:01, 20.63it/s] 35%|###4      | 9/26 [00:00<00:00, 26.16it/s] 50%|#####     | 13/26 [00:00<00:00, 29.27it/s] 65%|######5   | 17/26 [00:00<00:00, 30.71it/s] 81%|########  | 21/26 [00:00<00:00, 31.78it/s] 96%|#########6| 25/26 [00:00<00:00, 32.35it/s]100%|##########| 26/26 [00:00<00:00, 27.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.30 (  0.30)	train_acc   0.50 (  0.50)	train_minacc   0.60 (  0.51)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 13.5892 (13.5883)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.19it/s] 31%|###       | 8/26 [00:00<00:00, 41.87it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.87it/s] 50%|#####     | 13/26 [00:00<00:00, 44.38it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.85it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.85it/s] 96%|#########6| 25/26 [00:00<00:00, 49.77it/s]100%|##########| 26/26 [00:00<00:00, 42.06it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.46 (  0.46)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.53 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.09 (  0.07)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.50)	test_minacc   0.46 (  0.51)	test_majacc   0.55 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.46 (  0.51)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.03 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.60 (  0.51)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.60 (  0.51)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.06 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.42it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.02 (  0.02)
Overall Timing[ 49/  1]	epoch_time 0.0366 (0.0376)	validation_time 0.0004 (0.0005)	train_time 0.0361 (0.0369)
record: (train_acc, test_acc) (0.7324000270962715, 0.6820000410079956)
last accs (train_acc, test_acc) (0.5018000140488148, 0.5120000243186951)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.096 MB of 0.096 MB uploadedwandb: \ 0.096 MB of 0.096 MB uploadedwandb: | 0.118 MB of 0.124 MB uploaded (0.003 MB deduped)wandb: / 0.495 MB of 0.495 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/diagnostics/epoch_time_val █▁▁▁▁▁▁▁▁▂▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/diagnostics/train_time_val █▁▁▂▁▂▁▁▁▂▂▂▂▁▁▁▁▁▂▁▂▁▁▁▂▂▁▂▁▂▂▁▁▁▁▁▁▁▁▁
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/Loss_avg ▇█▇▇▆█▇▆▆▆▅▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/Loss_d_avg ▇█▇▇▆█▇▆▆▆▅▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/Loss_d_val ▇█▇▇▆█▇▆▆▆▅▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/Loss_val ▇█▇▇▆█▇▆▆▆▅▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/test_acc_avg ▁▁▁▂▁▁▂▃▁▂▅▄███▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/test_acc_d_avg ▁▁▁▂▁▁▂▃▁▂▅▄███▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/test_acc_d_val ▁▁▁▂▁▁▂▃▁▂▅▄███▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/test_acc_val ▁▁▁▂▁▁▂▃▁▂▅▄███▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/test_corr_d_avg ███▇▇█▇▇▇▇▅▆▁▂▂▂▂▂▂▁▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/test_corr_d_val ███▇▇█▇▇▇▇▅▆▁▂▂▂▂▂▂▁▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/test_majacc_avg ██████████▇█▅▅▄▄▃▃▃▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/test_majacc_d_avg ██████████▇█▅▅▄▄▃▃▃▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/test_majacc_d_val ██████████▇█▅▅▄▄▃▃▃▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/test_majacc_val ██████████▇█▅▅▄▄▃▃▃▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/test_minacc_avg ▁▁▁▂▁▁▂▂▁▂▅▃████▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/test_minacc_d_avg ▁▁▁▂▁▁▂▂▁▂▅▃████▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/test_minacc_d_val ▁▁▁▂▁▁▂▂▁▂▅▃████▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/test_minacc_val ▁▁▁▂▁▁▂▂▁▂▅▃████▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/Loss_avg █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/Loss_val █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/l1_avg ▃▂▁▁▁▂▃▃▅▆▇▇███████▆▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/l1_val ▂▂▁▁▂▂▃▄▆▆▇████████▆▆▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/train_acc_avg ▇███████████▇▅▄▄▃▃▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/train_acc_val ███████▇██▇█▆▅▄▄▄▃▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/train_majacc_avg ▇██████████▇▆▄▃▃▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/train_majacc_val ████████████▅▄▃▃▃▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/train_minacc_avg ▁▁▁▂▂▂▂▂▃▃▃▄▆██████▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/train_minacc_val ▁▁▂▂▂▂▂▂▂▃▂▄█▇█▇███▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/train_nll_avg ▅▃▂▂▂▁▁▁▁▁▁▁▂▆▆▇▇▇▇█████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/train_nll_val ▃▂▂▂▂▁▂▂▁▁▁▁▄▆▇▇▇▇▇▇████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/train_penalty_avg █▃▃▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/train_penalty_val ▆█▆▅▄▄▄▄▄▄▄▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/weight_norm_avg █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/weight_norm_val █▄▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/diagnostics/epoch_time_val 0.03655
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/diagnostics/train_time_val 0.03613
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/diagnostics/validation_time_val 0.00039
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/Loss_avg 0.69291
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/Loss_d_avg 0.69291
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/Loss_d_val 0.69291
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/Loss_val 0.69291
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/test_acc_avg 0.512
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/test_acc_d_avg 0.512
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/test_acc_d_val 0.512
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/test_acc_val 0.512
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/test_corr_d_avg 0.02354
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/test_corr_d_val 0.02354
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/test_majacc_avg 0.54
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/test_majacc_d_avg 0.54
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/test_majacc_d_val 0.54
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/test_majacc_val 0.54
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/test_minacc_avg 0.50889
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/test_minacc_d_avg 0.50889
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/test_minacc_d_val 0.50889
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/test/test_minacc_val 0.50889
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/Loss_avg 0.0001
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/Loss_val 0.0001
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/l1_avg 13.58832
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/l1_val 13.58922
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/train_acc_avg 0.5028
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/train_acc_val 0.504
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/train_majacc_avg 0.50221
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/train_majacc_val 0.48837
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/train_minacc_avg 0.50823
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/train_minacc_val 0.6
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/train_nll_avg 0.69282
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/train_nll_val 0.69297
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/weight_norm_avg 0.29996
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/57/logs/train/weight_norm_val 0.29968
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/ghb0p1lx
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_120328-ghb0p1lx/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_120556-3s7hy47m
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/3s7hy47m
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=15.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1168
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6070, 3, 32, 32) (5930, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:41,  1.64s/it] 19%|#9        | 5/26 [00:01<00:05,  3.69it/s] 35%|###4      | 9/26 [00:01<00:02,  7.24it/s] 50%|#####     | 13/26 [00:01<00:01, 11.10it/s] 65%|######5   | 17/26 [00:02<00:00, 14.88it/s] 81%|########  | 21/26 [00:02<00:00, 18.35it/s] 96%|#########6| 25/26 [00:02<00:00, 21.72it/s]100%|##########| 26/26 [00:02<00:00,  9.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 9.875 (12.492)	train_nll   0.43 (  0.58)	train_penalty   0.06 (  0.31)	weight_norm   9.45 ( 11.91)	train_acc   0.83 (  0.78)	train_minacc   0.05 (  0.11)	train_majacc   0.99 (  0.90)	train_corr   0.00 (  0.00)	l1 8.9872 (8.2530)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.23it/s] 27%|##6       | 7/26 [00:00<00:00, 37.68it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.68it/s] 50%|#####     | 13/26 [00:00<00:00, 42.64it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.27it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.27it/s] 96%|#########6| 25/26 [00:00<00:00, 47.70it/s]100%|##########| 26/26 [00:00<00:00, 41.06it/s]
Test: [   0/  26]	Loss 0.420 (0.420)	test_acc   0.85 (  0.85)	test_minacc   0.05 (  0.05)	test_majacc   0.98 (  0.98)	Loss_d 0.420 (0.420)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.442 (0.434)	test_acc   0.83 (  0.85)	test_minacc   0.03 (  0.03)	test_majacc   0.98 (  0.99)	Loss_d 0.442 (0.434)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.462 (0.450)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.462 (0.450)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.434 (0.447)	test_acc   0.83 (  0.84)	test_minacc   0.02 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.434 (0.447)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.02 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.55it/s]100%|##########| 1/1 [00:00<00:00,  2.55it/s]
Test: [  0/  1]	Loss 1.929 (1.929)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.929 (1.929)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.929 (1.929)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.929 (1.929)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/58/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0736 (0.0736)	validation_time 0.0067 (0.0067)	train_time 0.0645 (0.0645)
record: (train_acc, test_acc) (0.844600025832653, 0.11300000548362732)
last accs (train_acc, test_acc) (0.844600025832653, 0.11300000548362732)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.45it/s] 19%|#9        | 5/26 [00:00<00:00, 21.30it/s] 35%|###4      | 9/26 [00:00<00:00, 26.47it/s] 50%|#####     | 13/26 [00:00<00:00, 27.58it/s] 65%|######5   | 17/26 [00:00<00:00, 29.10it/s] 81%|########  | 21/26 [00:00<00:00, 30.71it/s] 96%|#########6| 25/26 [00:00<00:00, 31.56it/s]100%|##########| 26/26 [00:00<00:00, 27.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 5.171 (7.145)	train_nll   0.43 (  0.42)	train_penalty   0.06 (  0.07)	weight_norm   4.75 (  6.72)	train_acc   0.84 (  0.85)	train_minacc   0.02 (  0.03)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 8.6256 (9.0412)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.96it/s] 27%|##6       | 7/26 [00:00<00:00, 36.78it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.78it/s] 46%|####6     | 12/26 [00:00<00:00, 42.71it/s] 69%|######9   | 18/26 [00:00<00:00, 44.41it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.41it/s] 92%|#########2| 24/26 [00:00<00:00, 49.00it/s]100%|##########| 26/26 [00:00<00:00, 42.41it/s]
Test: [   0/  26]	Loss 0.391 (0.391)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.391 (0.391)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.408 (0.404)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.408 (0.404)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.98)
Test: [  20/  26]	Loss 0.418 (0.416)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.418 (0.416)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.411 (0.414)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.411 (0.414)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.98it/s]
Test: [  0/  1]	Loss 1.815 (1.815)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.815 (1.815)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.815 (1.815)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.815 (1.815)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Overall Timing[  1/  1]	epoch_time 0.0372 (0.0554)	validation_time 0.0003 (0.0035)	train_time 0.0368 (0.0507)
record: (train_acc, test_acc) (0.844600025832653, 0.11300000548362732)
last accs (train_acc, test_acc) (0.8475000224709511, 0.11100000888109207)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.23it/s] 19%|#9        | 5/26 [00:00<00:01, 20.90it/s] 35%|###4      | 9/26 [00:00<00:00, 27.28it/s] 50%|#####     | 13/26 [00:00<00:00, 30.56it/s] 65%|######5   | 17/26 [00:00<00:00, 32.32it/s] 81%|########  | 21/26 [00:00<00:00, 33.26it/s] 96%|#########6| 25/26 [00:00<00:00, 34.00it/s]100%|##########| 26/26 [00:00<00:00, 28.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 3.169 (4.001)	train_nll   0.41 (  0.40)	train_penalty   0.07 (  0.05)	weight_norm   2.76 (  3.60)	train_acc   0.84 (  0.85)	train_minacc   0.02 (  0.04)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 7.3038 (7.9860)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.97it/s] 23%|##3       | 6/26 [00:00<00:00, 32.64it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.64it/s] 46%|####6     | 12/26 [00:00<00:00, 39.43it/s] 69%|######9   | 18/26 [00:00<00:00, 46.18it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.18it/s] 92%|#########2| 24/26 [00:00<00:00, 46.53it/s]100%|##########| 26/26 [00:00<00:00, 39.68it/s]
Test: [   0/  26]	Loss 0.362 (0.362)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.362 (0.362)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.383 (0.387)	test_acc   0.84 (  0.86)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.383 (0.387)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.98)
Test: [  20/  26]	Loss 0.396 (0.399)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.396 (0.399)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.386 (0.396)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.386 (0.396)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.18it/s]
Test: [  0/  1]	Loss 2.046 (2.046)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 2.046 (2.046)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 2.046 (2.046)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 2.046 (2.046)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Overall Timing[  2/  1]	epoch_time 0.0351 (0.0486)	validation_time 0.0004 (0.0025)	train_time 0.0347 (0.0453)
record: (train_acc, test_acc) (0.844600025832653, 0.11300000548362732)
last accs (train_acc, test_acc) (0.8492000235319137, 0.10400000214576721)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.14it/s] 19%|#9        | 5/26 [00:00<00:00, 21.16it/s] 35%|###4      | 9/26 [00:00<00:00, 26.23it/s] 50%|#####     | 13/26 [00:00<00:00, 28.60it/s] 65%|######5   | 17/26 [00:00<00:00, 30.42it/s] 81%|########  | 21/26 [00:00<00:00, 31.45it/s] 96%|#########6| 25/26 [00:00<00:00, 32.57it/s]100%|##########| 26/26 [00:00<00:00, 27.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 2.193 (2.594)	train_nll   0.42 (  0.40)	train_penalty   0.08 (  0.05)	weight_norm   1.77 (  2.20)	train_acc   0.84 (  0.85)	train_minacc   0.02 (  0.06)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 6.0989 (6.6365)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.60it/s] 23%|##3       | 6/26 [00:00<00:00, 31.35it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.35it/s] 42%|####2     | 11/26 [00:00<00:00, 39.07it/s] 65%|######5   | 17/26 [00:00<00:00, 40.92it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.92it/s] 88%|########8 | 23/26 [00:00<00:00, 45.69it/s]100%|##########| 26/26 [00:00<00:00, 38.41it/s]
Test: [   0/  26]	Loss 0.376 (0.376)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.376 (0.376)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.409 (0.401)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.409 (0.401)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.419 (0.414)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.419 (0.414)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.99 (  0.98)
Test: [  26/  26]	Loss 0.404 (0.411)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.404 (0.411)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.90it/s]
Test: [  0/  1]	Loss 2.029 (2.029)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 2.029 (2.029)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 2.029 (2.029)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 2.029 (2.029)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Overall Timing[  3/  1]	epoch_time 0.0370 (0.0457)	validation_time 0.0003 (0.0019)	train_time 0.0367 (0.0432)
record: (train_acc, test_acc) (0.844600025832653, 0.11300000548362732)
last accs (train_acc, test_acc) (0.8475000247955322, 0.11000000685453415)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.96it/s] 19%|#9        | 5/26 [00:00<00:00, 22.25it/s] 35%|###4      | 9/26 [00:00<00:00, 27.14it/s] 50%|#####     | 13/26 [00:00<00:00, 29.84it/s] 65%|######5   | 17/26 [00:00<00:00, 31.38it/s] 81%|########  | 21/26 [00:00<00:00, 32.60it/s] 96%|#########6| 25/26 [00:00<00:00, 32.93it/s]100%|##########| 26/26 [00:00<00:00, 28.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.549 (1.828)	train_nll   0.38 (  0.38)	train_penalty   0.06 (  0.04)	weight_norm   1.16 (  1.45)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.09)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 5.9949 (6.0697)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.56it/s] 27%|##6       | 7/26 [00:00<00:00, 35.38it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.38it/s] 50%|#####     | 13/26 [00:00<00:00, 41.54it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.24it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.24it/s] 96%|#########6| 25/26 [00:00<00:00, 47.15it/s]100%|##########| 26/26 [00:00<00:00, 40.88it/s]
Test: [   0/  26]	Loss 0.330 (0.330)	test_acc   0.86 (  0.86)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.330 (0.330)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.349 (0.349)	test_acc   0.84 (  0.86)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.349 (0.349)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.357 (0.362)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.357 (0.362)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.345 (0.362)	test_acc   0.84 (  0.85)	test_minacc   0.05 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.345 (0.362)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.05 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.80it/s]
Test: [  0/  1]	Loss 1.892 (1.892)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.892 (1.892)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Test: [  1/  1]	Loss 1.892 (1.892)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.892 (1.892)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Overall Timing[  4/  1]	epoch_time 0.0374 (0.0441)	validation_time 0.0004 (0.0016)	train_time 0.0370 (0.0419)
record: (train_acc, test_acc) (0.844600025832653, 0.11300000548362732)
last accs (train_acc, test_acc) (0.8496000281572342, 0.11300000548362732)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.30it/s] 19%|#9        | 5/26 [00:00<00:01, 20.65it/s] 35%|###4      | 9/26 [00:00<00:00, 26.15it/s] 50%|#####     | 13/26 [00:00<00:00, 29.25it/s] 65%|######5   | 17/26 [00:00<00:00, 31.40it/s] 81%|########  | 21/26 [00:00<00:00, 32.92it/s] 96%|#########6| 25/26 [00:00<00:00, 33.99it/s]100%|##########| 26/26 [00:00<00:00, 28.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.167 (1.317)	train_nll   0.39 (  0.36)	train_penalty   0.07 (  0.03)	weight_norm   0.77 (  0.95)	train_acc   0.84 (  0.85)	train_minacc   0.02 (  0.11)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 6.3234 (6.1387)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.62it/s] 27%|##6       | 7/26 [00:00<00:00, 35.56it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.56it/s] 50%|#####     | 13/26 [00:00<00:00, 40.47it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.46it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.46it/s] 96%|#########6| 25/26 [00:00<00:00, 47.69it/s]100%|##########| 26/26 [00:00<00:00, 40.06it/s]
Test: [   0/  26]	Loss 0.337 (0.337)	test_acc   0.86 (  0.86)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.337 (0.337)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.367 (0.351)	test_acc   0.84 (  0.86)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.367 (0.351)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.361 (0.363)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.361 (0.363)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.97)
Test: [  26/  26]	Loss 0.367 (0.363)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.367 (0.363)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.05it/s]
Test: [  0/  1]	Loss 2.018 (2.018)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 2.018 (2.018)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 2.018 (2.018)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 2.018 (2.018)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Overall Timing[  5/  1]	epoch_time 0.0353 (0.0426)	validation_time 0.0004 (0.0014)	train_time 0.0348 (0.0407)
record: (train_acc, test_acc) (0.844600025832653, 0.11300000548362732)
last accs (train_acc, test_acc) (0.8495000279545784, 0.10500000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.62it/s] 19%|#9        | 5/26 [00:00<00:00, 22.96it/s] 35%|###4      | 9/26 [00:00<00:00, 27.13it/s] 50%|#####     | 13/26 [00:00<00:00, 29.27it/s] 65%|######5   | 17/26 [00:00<00:00, 31.01it/s] 81%|########  | 21/26 [00:00<00:00, 32.09it/s] 96%|#########6| 25/26 [00:00<00:00, 33.03it/s]100%|##########| 26/26 [00:00<00:00, 28.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.880 (0.983)	train_nll   0.37 (  0.35)	train_penalty   0.05 (  0.03)	weight_norm   0.51 (  0.63)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.13)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 6.9157 (6.6750)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.39it/s] 31%|###       | 8/26 [00:00<00:00, 39.81it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.81it/s] 50%|#####     | 13/26 [00:00<00:00, 41.60it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.66it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.66it/s] 96%|#########6| 25/26 [00:00<00:00, 47.78it/s]100%|##########| 26/26 [00:00<00:00, 41.42it/s]
Test: [   0/  26]	Loss 0.329 (0.329)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.329 (0.329)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.346 (0.340)	test_acc   0.84 (  0.86)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.346 (0.340)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.363 (0.351)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.363 (0.351)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.97)
Test: [  26/  26]	Loss 0.342 (0.350)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.342 (0.350)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.37it/s]
Test: [  0/  1]	Loss 1.887 (1.887)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.887 (1.887)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.887 (1.887)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.887 (1.887)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Overall Timing[  6/  1]	epoch_time 0.0352 (0.0415)	validation_time 0.0004 (0.0013)	train_time 0.0349 (0.0399)
record: (train_acc, test_acc) (0.844600025832653, 0.11300000548362732)
last accs (train_acc, test_acc) (0.8498000267744065, 0.10400000214576721)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.26it/s] 19%|#9        | 5/26 [00:00<00:00, 23.26it/s] 35%|###4      | 9/26 [00:00<00:00, 27.59it/s] 50%|#####     | 13/26 [00:00<00:00, 29.03it/s] 65%|######5   | 17/26 [00:00<00:00, 30.07it/s] 81%|########  | 21/26 [00:00<00:00, 31.23it/s] 96%|#########6| 25/26 [00:00<00:00, 32.24it/s]100%|##########| 26/26 [00:00<00:00, 27.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.731 (0.773)	train_nll   0.38 (  0.35)	train_penalty   0.07 (  0.03)	weight_norm   0.35 (  0.42)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.10)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 8.2615 (7.7351)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.70it/s] 15%|#5        | 4/26 [00:00<00:01, 14.44it/s] 35%|###4      | 9/26 [00:00<00:00, 26.49it/s]                                               35%|###4      | 9/26 [00:00<00:00, 26.49it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.15it/s] 77%|#######6  | 20/26 [00:00<00:00, 41.30it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 41.30it/s]100%|##########| 26/26 [00:00<00:00, 46.83it/s]100%|##########| 26/26 [00:00<00:00, 32.59it/s]
Test: [   0/  26]	Loss 0.335 (0.335)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.335 (0.335)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.359 (0.351)	test_acc   0.84 (  0.86)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.359 (0.351)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.97)
Test: [  20/  26]	Loss 0.379 (0.364)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.379 (0.364)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.352 (0.363)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.352 (0.363)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.96it/s]
Test: [  0/  1]	Loss 1.969 (1.969)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.969 (1.969)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  1/  1]	Loss 1.969 (1.969)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.969 (1.969)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Overall Timing[  7/  1]	epoch_time 0.0376 (0.0410)	validation_time 0.0004 (0.0012)	train_time 0.0372 (0.0396)
record: (train_acc, test_acc) (0.844600025832653, 0.11300000548362732)
last accs (train_acc, test_acc) (0.8489000266194343, 0.10500000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.74it/s] 19%|#9        | 5/26 [00:00<00:01, 21.00it/s] 35%|###4      | 9/26 [00:00<00:00, 26.00it/s] 50%|#####     | 13/26 [00:00<00:00, 28.82it/s] 65%|######5   | 17/26 [00:00<00:00, 30.46it/s] 81%|########  | 21/26 [00:00<00:00, 31.42it/s] 96%|#########6| 25/26 [00:00<00:00, 32.31it/s]100%|##########| 26/26 [00:00<00:00, 27.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.597 (0.646)	train_nll   0.35 (  0.34)	train_penalty   0.04 (  0.03)	weight_norm   0.25 (  0.30)	train_acc   0.83 (  0.85)	train_minacc   0.00 (  0.16)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 9.9059 (9.1534)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.67it/s] 31%|###       | 8/26 [00:00<00:00, 40.10it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.10it/s] 50%|#####     | 13/26 [00:00<00:00, 42.90it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.37it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.37it/s] 96%|#########6| 25/26 [00:00<00:00, 47.82it/s]100%|##########| 26/26 [00:00<00:00, 41.62it/s]
Test: [   0/  26]	Loss 0.314 (0.314)	test_acc   0.86 (  0.86)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.314 (0.314)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.330 (0.331)	test_acc   0.84 (  0.86)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.330 (0.331)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.351 (0.343)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.351 (0.343)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.94)
Test: [  26/  26]	Loss 0.317 (0.342)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.317 (0.342)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.71it/s]
Test: [  0/  1]	Loss 1.857 (1.857)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.857 (1.857)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
Test: [  1/  1]	Loss 1.857 (1.857)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.857 (1.857)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
Overall Timing[  8/  1]	epoch_time 0.0357 (0.0404)	validation_time 0.0004 (0.0011)	train_time 0.0353 (0.0391)
record: (train_acc, test_acc) (0.844600025832653, 0.11300000548362732)
last accs (train_acc, test_acc) (0.8503000209331513, 0.10400000214576721)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.22it/s] 19%|#9        | 5/26 [00:00<00:01, 18.72it/s] 35%|###4      | 9/26 [00:00<00:00, 24.72it/s] 50%|#####     | 13/26 [00:00<00:00, 27.99it/s] 65%|######5   | 17/26 [00:00<00:00, 29.85it/s] 81%|########  | 21/26 [00:00<00:00, 31.43it/s] 96%|#########6| 25/26 [00:00<00:00, 32.10it/s]100%|##########| 26/26 [00:00<00:00, 26.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.541 (0.559)	train_nll   0.35 (  0.34)	train_penalty   0.04 (  0.03)	weight_norm   0.19 (  0.22)	train_acc   0.84 (  0.85)	train_minacc   0.05 (  0.19)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 11.4624 (10.9524)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.34it/s] 19%|#9        | 5/26 [00:00<00:00, 25.02it/s]                                               19%|#9        | 5/26 [00:00<00:00, 25.02it/s] 42%|####2     | 11/26 [00:00<00:00, 35.22it/s] 65%|######5   | 17/26 [00:00<00:00, 43.68it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.68it/s] 88%|########8 | 23/26 [00:00<00:00, 44.98it/s]100%|##########| 26/26 [00:00<00:00, 38.28it/s]
Test: [   0/  26]	Loss 0.314 (0.314)	test_acc   0.86 (  0.86)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.314 (0.314)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.342 (0.336)	test_acc   0.84 (  0.86)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  1.00)	Loss_d 0.342 (0.336)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.360 (0.351)	test_acc   0.85 (  0.85)	test_minacc   0.05 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.360 (0.351)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.05 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.94)
Test: [  26/  26]	Loss 0.327 (0.350)	test_acc   0.85 (  0.85)	test_minacc   0.10 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.327 (0.350)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.10 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.42it/s]
Test: [  0/  1]	Loss 1.807 (1.807)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 1.807 (1.807)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.89 (  0.89)
Test: [  1/  1]	Loss 1.807 (1.807)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 1.807 (1.807)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.89 (  0.89)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/58/checkpoints/model_best.pth
Overall Timing[  9/  1]	epoch_time 0.0375 (0.0402)	validation_time 0.0003 (0.0010)	train_time 0.0372 (0.0389)
record: (train_acc, test_acc) (0.851500022649765, 0.1340000033378601)
last accs (train_acc, test_acc) (0.851500022649765, 0.1340000033378601)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.06it/s] 19%|#9        | 5/26 [00:00<00:00, 22.97it/s] 35%|###4      | 9/26 [00:00<00:00, 27.29it/s] 46%|####6     | 12/26 [00:00<00:00, 27.64it/s] 62%|######1   | 16/26 [00:00<00:00, 30.07it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.69it/s] 92%|#########2| 24/26 [00:00<00:00, 32.91it/s]100%|##########| 26/26 [00:00<00:00, 28.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.513 (0.509)	train_nll   0.37 (  0.34)	train_penalty   0.05 (  0.02)	weight_norm   0.15 (  0.17)	train_acc   0.84 (  0.85)	train_minacc   0.05 (  0.14)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 13.3238 (12.5990)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.79it/s] 31%|###       | 8/26 [00:00<00:00, 40.80it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.80it/s] 50%|#####     | 13/26 [00:00<00:00, 41.75it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.80it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.80it/s] 96%|#########6| 25/26 [00:00<00:00, 47.54it/s]100%|##########| 26/26 [00:00<00:00, 40.61it/s]
Test: [   0/  26]	Loss 0.319 (0.319)	test_acc   0.86 (  0.86)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.319 (0.319)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.339 (0.329)	test_acc   0.84 (  0.86)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.339 (0.329)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  20/  26]	Loss 0.342 (0.342)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.342 (0.342)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.95)
Test: [  26/  26]	Loss 0.321 (0.340)	test_acc   0.84 (  0.85)	test_minacc   0.05 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.321 (0.340)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.05 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.09it/s]
Test: [  0/  1]	Loss 1.758 (1.758)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.758 (1.758)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
Test: [  1/  1]	Loss 1.758 (1.758)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.758 (1.758)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
Overall Timing[ 10/  1]	epoch_time 0.0367 (0.0398)	validation_time 0.0004 (0.0010)	train_time 0.0362 (0.0386)
record: (train_acc, test_acc) (0.851500022649765, 0.1340000033378601)
last accs (train_acc, test_acc) (0.8505000259876251, 0.1210000067949295)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.10it/s] 19%|#9        | 5/26 [00:00<00:01, 17.79it/s] 35%|###4      | 9/26 [00:00<00:00, 23.76it/s] 50%|#####     | 13/26 [00:00<00:00, 27.25it/s] 65%|######5   | 17/26 [00:00<00:00, 29.20it/s] 81%|########  | 21/26 [00:00<00:00, 30.73it/s] 96%|#########6| 25/26 [00:00<00:00, 31.70it/s]100%|##########| 26/26 [00:01<00:00, 25.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.436 (0.481)	train_nll   0.31 (  0.34)	train_penalty   0.02 (  0.03)	weight_norm   0.13 (  0.14)	train_acc   0.86 (  0.85)	train_minacc   0.17 (  0.16)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 14.5930 (14.1302)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 29.23it/s] 31%|###       | 8/26 [00:00<00:00, 40.85it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.85it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.38it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.44it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.44it/s]100%|##########| 26/26 [00:00<00:00, 50.61it/s]100%|##########| 26/26 [00:00<00:00, 43.06it/s]
Test: [   0/  26]	Loss 0.312 (0.312)	test_acc   0.86 (  0.86)	test_minacc   0.09 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.312 (0.312)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.331 (0.331)	test_acc   0.85 (  0.86)	test_minacc   0.13 (  0.11)	test_majacc   0.98 (  0.99)	Loss_d 0.331 (0.331)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.13 (  0.11)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.90 (  0.90)
Test: [  20/  26]	Loss 0.340 (0.340)	test_acc   0.85 (  0.85)	test_minacc   0.03 (  0.11)	test_majacc   1.00 (  0.99)	Loss_d 0.340 (0.340)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.03 (  0.11)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.92 (  0.90)
Test: [  26/  26]	Loss 0.281 (0.338)	test_acc   0.86 (  0.86)	test_minacc   0.15 (  0.11)	test_majacc   1.00 (  0.99)	Loss_d 0.281 (0.338)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.15 (  0.11)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.90 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.83it/s]
Test: [  0/  1]	Loss 1.551 (1.551)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 1.551 (1.551)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.71 (  0.71)
Test: [  1/  1]	Loss 1.551 (1.551)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 1.551 (1.551)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.71 (  0.71)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/58/checkpoints/model_best.pth
Overall Timing[ 11/  1]	epoch_time 0.0378 (0.0397)	validation_time 0.0004 (0.0009)	train_time 0.0373 (0.0385)
record: (train_acc, test_acc) (0.8560000215172767, 0.20000000298023224)
last accs (train_acc, test_acc) (0.8560000215172767, 0.20000000298023224)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.56it/s] 19%|#9        | 5/26 [00:00<00:01, 18.97it/s] 35%|###4      | 9/26 [00:00<00:00, 24.54it/s] 50%|#####     | 13/26 [00:00<00:00, 28.04it/s] 65%|######5   | 17/26 [00:00<00:00, 30.30it/s] 81%|########  | 21/26 [00:00<00:00, 32.01it/s] 96%|#########6| 25/26 [00:00<00:00, 33.10it/s]100%|##########| 26/26 [00:00<00:00, 27.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.412 (0.442)	train_nll   0.31 (  0.32)	train_penalty   0.02 (  0.02)	weight_norm   0.11 (  0.12)	train_acc   0.86 (  0.85)	train_minacc   0.20 (  0.23)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 16.3854 (15.7488)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.92it/s] 27%|##6       | 7/26 [00:00<00:00, 36.93it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.93it/s] 50%|#####     | 13/26 [00:00<00:00, 40.81it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.02it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.02it/s] 96%|#########6| 25/26 [00:00<00:00, 47.15it/s]100%|##########| 26/26 [00:00<00:00, 40.28it/s]
Test: [   0/  26]	Loss 0.289 (0.289)	test_acc   0.87 (  0.87)	test_minacc   0.20 (  0.20)	test_majacc   0.99 (  0.99)	Loss_d 0.289 (0.289)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.320 (0.315)	test_acc   0.84 (  0.87)	test_minacc   0.13 (  0.18)	test_majacc   0.98 (  0.98)	Loss_d 0.320 (0.315)	test_acc_d   0.84 (  0.87)	test_minacc_d   0.13 (  0.18)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.91)
Test: [  20/  26]	Loss 0.311 (0.326)	test_acc   0.86 (  0.86)	test_minacc   0.10 (  0.17)	test_majacc   0.99 (  0.98)	Loss_d 0.311 (0.326)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.10 (  0.17)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.92 (  0.91)
Test: [  26/  26]	Loss 0.269 (0.322)	test_acc   0.87 (  0.86)	test_minacc   0.22 (  0.16)	test_majacc   1.00 (  0.98)	Loss_d 0.269 (0.322)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.22 (  0.16)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.91 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.78it/s]
Test: [  0/  1]	Loss 1.597 (1.597)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.99 (  0.99)	Loss_d 1.597 (1.597)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.74 (  0.74)
Test: [  1/  1]	Loss 1.597 (1.597)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.99 (  0.99)	Loss_d 1.597 (1.597)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.74 (  0.74)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/58/checkpoints/model_best.pth
Overall Timing[ 12/  1]	epoch_time 0.0355 (0.0393)	validation_time 0.0004 (0.0009)	train_time 0.0350 (0.0383)
record: (train_acc, test_acc) (0.8608000239729882, 0.20500001311302185)
last accs (train_acc, test_acc) (0.8608000239729882, 0.20500001311302185)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.14it/s] 23%|##3       | 6/26 [00:00<00:00, 26.40it/s] 38%|###8      | 10/26 [00:00<00:00, 29.74it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.66it/s] 69%|######9   | 18/26 [00:00<00:00, 32.37it/s] 85%|########4 | 22/26 [00:00<00:00, 33.27it/s]100%|##########| 26/26 [00:00<00:00, 33.28it/s]100%|##########| 26/26 [00:00<00:00, 29.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.397 (0.418)	train_nll   0.31 (  0.32)	train_penalty   0.02 (  0.02)	weight_norm   0.09 (  0.10)	train_acc   0.86 (  0.85)	train_minacc   0.27 (  0.24)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 17.6194 (17.2029)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.96it/s] 27%|##6       | 7/26 [00:00<00:00, 33.11it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.11it/s] 50%|#####     | 13/26 [00:00<00:00, 37.95it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.92it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.92it/s] 96%|#########6| 25/26 [00:00<00:00, 46.16it/s]100%|##########| 26/26 [00:00<00:00, 38.72it/s]
Test: [   0/  26]	Loss 0.289 (0.289)	test_acc   0.87 (  0.87)	test_minacc   0.14 (  0.14)	test_majacc   0.99 (  0.99)	Loss_d 0.289 (0.289)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.298 (0.311)	test_acc   0.85 (  0.86)	test_minacc   0.17 (  0.14)	test_majacc   0.98 (  0.98)	Loss_d 0.298 (0.311)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.17 (  0.14)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.91)
Test: [  20/  26]	Loss 0.311 (0.322)	test_acc   0.85 (  0.86)	test_minacc   0.10 (  0.13)	test_majacc   0.99 (  0.99)	Loss_d 0.311 (0.322)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.10 (  0.13)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.92)
Test: [  26/  26]	Loss 0.276 (0.321)	test_acc   0.86 (  0.86)	test_minacc   0.22 (  0.13)	test_majacc   0.99 (  0.99)	Loss_d 0.276 (0.321)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.22 (  0.13)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.54it/s]
Test: [  0/  1]	Loss 1.606 (1.606)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 1.606 (1.606)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.75 (  0.75)
Test: [  1/  1]	Loss 1.606 (1.606)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 1.606 (1.606)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.75 (  0.75)
Overall Timing[ 13/  1]	epoch_time 0.0352 (0.0390)	validation_time 0.0004 (0.0008)	train_time 0.0347 (0.0380)
record: (train_acc, test_acc) (0.8608000239729882, 0.20500001311302185)
last accs (train_acc, test_acc) (0.8571000226140022, 0.20500001311302185)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.47it/s] 19%|#9        | 5/26 [00:00<00:00, 21.44it/s] 35%|###4      | 9/26 [00:00<00:00, 26.45it/s] 50%|#####     | 13/26 [00:00<00:00, 29.22it/s] 65%|######5   | 17/26 [00:00<00:00, 30.14it/s] 81%|########  | 21/26 [00:00<00:00, 31.81it/s] 96%|#########6| 25/26 [00:00<00:00, 31.99it/s]100%|##########| 26/26 [00:00<00:00, 27.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.386 (0.411)	train_nll   0.30 (  0.32)	train_penalty   0.02 (  0.02)	weight_norm   0.09 (  0.09)	train_acc   0.84 (  0.85)	train_minacc   0.05 (  0.25)	train_majacc   1.00 (  0.96)	train_corr   0.00 (  0.00)	l1 18.9065 (18.4181)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.70it/s] 23%|##3       | 6/26 [00:00<00:00, 27.15it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.15it/s] 46%|####6     | 12/26 [00:00<00:00, 36.52it/s] 69%|######9   | 18/26 [00:00<00:00, 44.27it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.27it/s] 92%|#########2| 24/26 [00:00<00:00, 45.63it/s]100%|##########| 26/26 [00:00<00:00, 37.79it/s]
Test: [   0/  26]	Loss 0.291 (0.291)	test_acc   0.87 (  0.87)	test_minacc   0.25 (  0.25)	test_majacc   0.97 (  0.97)	Loss_d 0.291 (0.291)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.320 (0.320)	test_acc   0.85 (  0.86)	test_minacc   0.17 (  0.17)	test_majacc   0.98 (  0.98)	Loss_d 0.320 (0.320)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.91)
Test: [  20/  26]	Loss 0.332 (0.330)	test_acc   0.86 (  0.86)	test_minacc   0.10 (  0.17)	test_majacc   1.00 (  0.98)	Loss_d 0.332 (0.330)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.10 (  0.17)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.93 (  0.91)
Test: [  26/  26]	Loss 0.274 (0.326)	test_acc   0.86 (  0.86)	test_minacc   0.17 (  0.16)	test_majacc   0.99 (  0.98)	Loss_d 0.274 (0.326)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.17 (  0.16)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.90 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.04it/s]
Test: [  0/  1]	Loss 1.575 (1.575)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.97 (  0.97)	Loss_d 1.575 (1.575)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.74 (  0.74)
Test: [  1/  1]	Loss 1.575 (1.575)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.97 (  0.97)	Loss_d 1.575 (1.575)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.74 (  0.74)
Overall Timing[ 14/  1]	epoch_time 0.0360 (0.0388)	validation_time 0.0003 (0.0008)	train_time 0.0356 (0.0379)
record: (train_acc, test_acc) (0.8608000239729882, 0.20500001311302185)
last accs (train_acc, test_acc) (0.8573000250458718, 0.18200001120567322)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.27it/s] 23%|##3       | 6/26 [00:00<00:00, 25.88it/s] 38%|###8      | 10/26 [00:00<00:00, 29.26it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.43it/s] 69%|######9   | 18/26 [00:00<00:00, 32.75it/s] 85%|########4 | 22/26 [00:00<00:00, 33.49it/s]100%|##########| 26/26 [00:00<00:00, 34.00it/s]100%|##########| 26/26 [00:00<00:00, 29.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.000 (0.157)	train_nll   0.63 (  0.44)	train_penalty   0.00 (  0.01)	weight_norm   0.12 (  0.10)	train_acc   0.67 (  0.78)	train_minacc   0.66 (  0.48)	train_majacc   0.67 (  0.83)	train_corr   0.00 (  0.00)	l1 19.0316 (19.2227)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.60it/s] 31%|###       | 8/26 [00:00<00:00, 37.97it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.97it/s] 50%|#####     | 13/26 [00:00<00:00, 41.82it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.80it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.80it/s] 96%|#########6| 25/26 [00:00<00:00, 47.54it/s]100%|##########| 26/26 [00:00<00:00, 40.46it/s]
Test: [   0/  26]	Loss 0.633 (0.633)	test_acc   0.64 (  0.64)	test_minacc   0.73 (  0.73)	test_majacc   0.62 (  0.62)	Loss_d 0.633 (0.633)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.614 (0.616)	test_acc   0.66 (  0.66)	test_minacc   0.84 (  0.74)	test_majacc   0.62 (  0.65)	Loss_d 0.614 (0.616)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.84 (  0.74)	test_majacc_d   0.62 (  0.65)	test_corr_d   0.21 (  0.26)
Test: [  20/  26]	Loss 0.604 (0.616)	test_acc   0.68 (  0.66)	test_minacc   0.75 (  0.71)	test_majacc   0.67 (  0.65)	Loss_d 0.604 (0.616)	test_acc_d   0.68 (  0.66)	test_minacc_d   0.75 (  0.71)	test_majacc_d   0.67 (  0.65)	test_corr_d   0.27 (  0.27)
Test: [  26/  26]	Loss 0.620 (0.617)	test_acc   0.68 (  0.66)	test_minacc   0.66 (  0.70)	test_majacc   0.68 (  0.66)	Loss_d 0.620 (0.617)	test_acc_d   0.68 (  0.66)	test_minacc_d   0.66 (  0.70)	test_majacc_d   0.68 (  0.66)	test_corr_d   0.32 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.60it/s]
Test: [  0/  1]	Loss 0.620 (0.620)	test_acc   0.69 (  0.69)	test_minacc   0.69 (  0.69)	test_majacc   0.63 (  0.63)	Loss_d 0.620 (0.620)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.30 ( -0.30)
Test: [  1/  1]	Loss 0.620 (0.620)	test_acc   0.69 (  0.69)	test_minacc   0.69 (  0.69)	test_majacc   0.63 (  0.63)	Loss_d 0.620 (0.620)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.30 ( -0.30)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/58/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0354 (0.0386)	validation_time 0.0004 (0.0008)	train_time 0.0350 (0.0377)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.73it/s] 19%|#9        | 5/26 [00:00<00:00, 24.91it/s] 35%|###4      | 9/26 [00:00<00:00, 28.24it/s] 50%|#####     | 13/26 [00:00<00:00, 30.88it/s] 65%|######5   | 17/26 [00:00<00:00, 32.48it/s] 81%|########  | 21/26 [00:00<00:00, 32.86it/s] 96%|#########6| 25/26 [00:00<00:00, 33.27it/s]100%|##########| 26/26 [00:00<00:00, 29.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.001)	train_nll   0.65 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.13)	train_acc   0.65 (  0.64)	train_minacc   0.46 (  0.67)	train_majacc   0.68 (  0.63)	train_corr   0.00 (  0.00)	l1 18.7923 (18.8721)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.69it/s] 27%|##6       | 7/26 [00:00<00:00, 31.73it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.73it/s] 50%|#####     | 13/26 [00:00<00:00, 41.58it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.00it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.00it/s] 96%|#########6| 25/26 [00:00<00:00, 48.46it/s]100%|##########| 26/26 [00:00<00:00, 40.94it/s]
Test: [   0/  26]	Loss 0.666 (0.666)	test_acc   0.58 (  0.58)	test_minacc   0.64 (  0.64)	test_majacc   0.57 (  0.57)	Loss_d 0.666 (0.666)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.15 (  0.15)
Test: [  10/  26]	Loss 0.654 (0.653)	test_acc   0.63 (  0.62)	test_minacc   0.81 (  0.67)	test_majacc   0.60 (  0.61)	Loss_d 0.654 (0.653)	test_acc_d   0.63 (  0.62)	test_minacc_d   0.81 (  0.67)	test_majacc_d   0.60 (  0.61)	test_corr_d   0.16 (  0.21)
Test: [  20/  26]	Loss 0.641 (0.652)	test_acc   0.62 (  0.61)	test_minacc   0.70 (  0.65)	test_majacc   0.60 (  0.61)	Loss_d 0.641 (0.652)	test_acc_d   0.62 (  0.61)	test_minacc_d   0.70 (  0.65)	test_majacc_d   0.60 (  0.61)	test_corr_d   0.21 (  0.21)
Test: [  26/  26]	Loss 0.656 (0.652)	test_acc   0.65 (  0.62)	test_minacc   0.46 (  0.64)	test_majacc   0.68 (  0.61)	Loss_d 0.656 (0.652)	test_acc_d   0.65 (  0.62)	test_minacc_d   0.46 (  0.64)	test_majacc_d   0.68 (  0.61)	test_corr_d   0.32 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.24it/s]
Test: [  0/  1]	Loss 0.654 (0.654)	test_acc   0.66 (  0.66)	test_minacc   0.67 (  0.67)	test_majacc   0.53 (  0.53)	Loss_d 0.654 (0.654)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.654 (0.654)	test_acc   0.66 (  0.66)	test_minacc   0.67 (  0.67)	test_majacc   0.53 (  0.53)	Loss_d 0.654 (0.654)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 16/  1]	epoch_time 0.0354 (0.0384)	validation_time 0.0004 (0.0008)	train_time 0.0350 (0.0375)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.6156000084877015, 0.659000039100647)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.53it/s] 23%|##3       | 6/26 [00:00<00:00, 24.95it/s] 38%|###8      | 10/26 [00:00<00:00, 27.63it/s] 54%|#####3    | 14/26 [00:00<00:00, 29.86it/s] 69%|######9   | 18/26 [00:00<00:00, 30.38it/s] 85%|########4 | 22/26 [00:00<00:00, 31.29it/s]100%|##########| 26/26 [00:00<00:00, 32.26it/s]100%|##########| 26/26 [00:00<00:00, 28.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.60 (  0.55)	train_minacc   0.37 (  0.64)	train_majacc   0.64 (  0.53)	train_corr   0.00 (  0.00)	l1 18.7478 (18.7699)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.37it/s] 27%|##6       | 7/26 [00:00<00:00, 33.00it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.00it/s] 50%|#####     | 13/26 [00:00<00:00, 38.93it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.85it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.85it/s] 96%|#########6| 25/26 [00:00<00:00, 46.19it/s]100%|##########| 26/26 [00:00<00:00, 39.24it/s]
Test: [   0/  26]	Loss 0.678 (0.678)	test_acc   0.58 (  0.58)	test_minacc   0.50 (  0.50)	test_majacc   0.59 (  0.59)	Loss_d 0.678 (0.678)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.674 (0.670)	test_acc   0.55 (  0.58)	test_minacc   0.62 (  0.51)	test_majacc   0.54 (  0.59)	Loss_d 0.674 (0.670)	test_acc_d   0.55 (  0.58)	test_minacc_d   0.62 (  0.51)	test_majacc_d   0.54 (  0.59)	test_corr_d   0.13 (  0.18)
Test: [  20/  26]	Loss 0.662 (0.669)	test_acc   0.62 (  0.58)	test_minacc   0.58 (  0.52)	test_majacc   0.63 (  0.60)	Loss_d 0.662 (0.669)	test_acc_d   0.62 (  0.58)	test_minacc_d   0.58 (  0.52)	test_majacc_d   0.63 (  0.60)	test_corr_d   0.19 (  0.18)
Test: [  26/  26]	Loss 0.675 (0.669)	test_acc   0.60 (  0.59)	test_minacc   0.37 (  0.50)	test_majacc   0.64 (  0.60)	Loss_d 0.675 (0.669)	test_acc_d   0.60 (  0.59)	test_minacc_d   0.37 (  0.50)	test_majacc_d   0.64 (  0.60)	test_corr_d   0.29 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.70it/s]
Test: [  0/  1]	Loss 0.672 (0.672)	test_acc   0.47 (  0.47)	test_minacc   0.47 (  0.47)	test_majacc   0.54 (  0.54)	Loss_d 0.672 (0.672)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.672 (0.672)	test_acc   0.47 (  0.47)	test_minacc   0.47 (  0.47)	test_majacc   0.54 (  0.54)	Loss_d 0.672 (0.672)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 17/  1]	epoch_time 0.0374 (0.0384)	validation_time 0.0004 (0.0007)	train_time 0.0370 (0.0375)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5858000140190125, 0.4740000367164612)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.21it/s] 19%|#9        | 5/26 [00:00<00:00, 24.51it/s] 35%|###4      | 9/26 [00:00<00:00, 28.87it/s] 50%|#####     | 13/26 [00:00<00:00, 31.25it/s] 65%|######5   | 17/26 [00:00<00:00, 32.61it/s] 81%|########  | 21/26 [00:00<00:00, 33.44it/s] 96%|#########6| 25/26 [00:00<00:00, 33.10it/s]100%|##########| 26/26 [00:00<00:00, 29.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.59 (  0.58)	train_minacc   0.32 (  0.48)	train_majacc   0.65 (  0.60)	train_corr   0.00 (  0.00)	l1 18.7228 (18.7341)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.91it/s] 23%|##3       | 6/26 [00:00<00:00, 31.94it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.94it/s] 42%|####2     | 11/26 [00:00<00:00, 39.43it/s] 65%|######5   | 17/26 [00:00<00:00, 43.26it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.26it/s] 88%|########8 | 23/26 [00:00<00:00, 47.76it/s]100%|##########| 26/26 [00:00<00:00, 39.92it/s]
Test: [   0/  26]	Loss 0.685 (0.685)	test_acc   0.58 (  0.58)	test_minacc   0.43 (  0.43)	test_majacc   0.60 (  0.60)	Loss_d 0.685 (0.685)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.685 (0.680)	test_acc   0.58 (  0.59)	test_minacc   0.54 (  0.44)	test_majacc   0.58 (  0.61)	Loss_d 0.685 (0.680)	test_acc_d   0.58 (  0.59)	test_minacc_d   0.54 (  0.44)	test_majacc_d   0.58 (  0.61)	test_corr_d   0.10 (  0.15)
Test: [  20/  26]	Loss 0.675 (0.679)	test_acc   0.64 (  0.59)	test_minacc   0.60 (  0.44)	test_majacc   0.65 (  0.61)	Loss_d 0.675 (0.679)	test_acc_d   0.64 (  0.59)	test_minacc_d   0.60 (  0.44)	test_majacc_d   0.65 (  0.61)	test_corr_d   0.16 (  0.15)
Test: [  26/  26]	Loss 0.683 (0.680)	test_acc   0.60 (  0.59)	test_minacc   0.32 (  0.43)	test_majacc   0.65 (  0.62)	Loss_d 0.683 (0.680)	test_acc_d   0.60 (  0.59)	test_minacc_d   0.32 (  0.43)	test_majacc_d   0.65 (  0.62)	test_corr_d   0.28 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.75it/s]
Test: [  0/  1]	Loss 0.684 (0.684)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.55 (  0.55)	Loss_d 0.684 (0.684)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.684 (0.684)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.55 (  0.55)	Loss_d 0.684 (0.684)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 18/  1]	epoch_time 0.0355 (0.0382)	validation_time 0.0003 (0.0007)	train_time 0.0351 (0.0374)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5872000092864037, 0.4400000274181366)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.87it/s] 19%|#9        | 5/26 [00:00<00:00, 22.54it/s] 35%|###4      | 9/26 [00:00<00:00, 28.17it/s] 50%|#####     | 13/26 [00:00<00:00, 31.02it/s] 65%|######5   | 17/26 [00:00<00:00, 31.50it/s] 81%|########  | 21/26 [00:00<00:00, 32.84it/s] 96%|#########6| 25/26 [00:00<00:00, 33.09it/s]100%|##########| 26/26 [00:00<00:00, 28.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.59 (  0.57)	train_minacc   0.32 (  0.45)	train_majacc   0.64 (  0.59)	train_corr   0.00 (  0.00)	l1 18.7024 (18.7110)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.58it/s] 27%|##6       | 7/26 [00:00<00:00, 31.17it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.17it/s] 50%|#####     | 13/26 [00:00<00:00, 37.64it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.46it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.46it/s] 96%|#########6| 25/26 [00:00<00:00, 45.36it/s]100%|##########| 26/26 [00:00<00:00, 37.61it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.55 (  0.55)	Loss_d 0.690 (0.690)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.691 (0.687)	test_acc   0.54 (  0.56)	test_minacc   0.54 (  0.47)	test_majacc   0.54 (  0.58)	Loss_d 0.691 (0.687)	test_acc_d   0.54 (  0.56)	test_minacc_d   0.54 (  0.47)	test_majacc_d   0.54 (  0.58)	test_corr_d   0.05 (  0.10)
Test: [  20/  26]	Loss 0.683 (0.686)	test_acc   0.62 (  0.56)	test_minacc   0.57 (  0.46)	test_majacc   0.62 (  0.58)	Loss_d 0.683 (0.686)	test_acc_d   0.62 (  0.56)	test_minacc_d   0.57 (  0.46)	test_majacc_d   0.62 (  0.58)	test_corr_d   0.11 (  0.10)
Test: [  26/  26]	Loss 0.686 (0.686)	test_acc   0.59 (  0.57)	test_minacc   0.32 (  0.45)	test_majacc   0.64 (  0.59)	Loss_d 0.686 (0.686)	test_acc_d   0.59 (  0.57)	test_minacc_d   0.32 (  0.45)	test_majacc_d   0.64 (  0.59)	test_corr_d   0.25 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.69it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.55 (  0.55)	Loss_d 0.688 (0.688)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.55 (  0.55)	Loss_d 0.688 (0.688)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 19/  1]	epoch_time 0.0372 (0.0382)	validation_time 0.0003 (0.0007)	train_time 0.0369 (0.0373)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5671000065803528, 0.4660000205039978)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.25it/s] 19%|#9        | 5/26 [00:00<00:01, 20.62it/s] 35%|###4      | 9/26 [00:00<00:00, 26.12it/s] 50%|#####     | 13/26 [00:00<00:00, 28.19it/s] 65%|######5   | 17/26 [00:00<00:00, 30.01it/s] 81%|########  | 21/26 [00:00<00:00, 31.55it/s] 96%|#########6| 25/26 [00:00<00:00, 32.21it/s]100%|##########| 26/26 [00:00<00:00, 27.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.58 (  0.56)	train_minacc   0.34 (  0.47)	train_majacc   0.63 (  0.57)	train_corr   0.00 (  0.00)	l1 18.6889 (18.6944)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.64it/s] 27%|##6       | 7/26 [00:00<00:00, 33.74it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.74it/s] 50%|#####     | 13/26 [00:00<00:00, 39.94it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.67it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.67it/s] 96%|#########6| 25/26 [00:00<00:00, 47.43it/s]100%|##########| 26/26 [00:00<00:00, 39.70it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.694 (0.691)	test_acc   0.51 (  0.54)	test_minacc   0.56 (  0.49)	test_majacc   0.50 (  0.55)	Loss_d 0.694 (0.691)	test_acc_d   0.51 (  0.54)	test_minacc_d   0.56 (  0.49)	test_majacc_d   0.50 (  0.55)	test_corr_d  -0.00 (  0.05)
Test: [  20/  26]	Loss 0.688 (0.691)	test_acc   0.60 (  0.55)	test_minacc   0.55 (  0.48)	test_majacc   0.61 (  0.56)	Loss_d 0.688 (0.691)	test_acc_d   0.60 (  0.55)	test_minacc_d   0.55 (  0.48)	test_majacc_d   0.61 (  0.56)	test_corr_d   0.06 (  0.06)
Test: [  26/  26]	Loss 0.688 (0.691)	test_acc   0.59 (  0.55)	test_minacc   0.34 (  0.48)	test_majacc   0.64 (  0.56)	Loss_d 0.688 (0.691)	test_acc_d   0.59 (  0.55)	test_minacc_d   0.34 (  0.48)	test_majacc_d   0.64 (  0.56)	test_corr_d   0.23 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.22it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 20/  1]	epoch_time 0.0369 (0.0381)	validation_time 0.0004 (0.0007)	train_time 0.0365 (0.0373)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5494000124931335, 0.4780000150203705)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.33it/s] 15%|#5        | 4/26 [00:00<00:01, 15.97it/s] 31%|###       | 8/26 [00:00<00:00, 23.33it/s] 46%|####6     | 12/26 [00:00<00:00, 27.37it/s] 62%|######1   | 16/26 [00:00<00:00, 29.23it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.30it/s] 92%|#########2| 24/26 [00:00<00:00, 32.54it/s]100%|##########| 26/26 [00:00<00:00, 26.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.58 (  0.54)	train_minacc   0.34 (  0.48)	train_majacc   0.62 (  0.56)	train_corr   0.00 (  0.00)	l1 18.6811 (18.6842)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.75it/s] 27%|##6       | 7/26 [00:00<00:00, 29.91it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.91it/s] 50%|#####     | 13/26 [00:00<00:00, 38.32it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.31it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.31it/s] 96%|#########6| 25/26 [00:00<00:00, 46.01it/s]100%|##########| 26/26 [00:00<00:00, 37.23it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.696 (0.693)	test_acc   0.49 (  0.53)	test_minacc   0.54 (  0.50)	test_majacc   0.48 (  0.53)	Loss_d 0.696 (0.693)	test_acc_d   0.49 (  0.53)	test_minacc_d   0.54 (  0.50)	test_majacc_d   0.48 (  0.53)	test_corr_d  -0.04 (  0.02)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.59 (  0.53)	test_minacc   0.53 (  0.49)	test_majacc   0.60 (  0.54)	Loss_d 0.691 (0.693)	test_acc_d   0.59 (  0.53)	test_minacc_d   0.53 (  0.49)	test_majacc_d   0.60 (  0.54)	test_corr_d   0.02 (  0.03)
Test: [  26/  26]	Loss 0.690 (0.693)	test_acc   0.58 (  0.54)	test_minacc   0.34 (  0.48)	test_majacc   0.62 (  0.55)	Loss_d 0.690 (0.693)	test_acc_d   0.58 (  0.54)	test_minacc_d   0.34 (  0.48)	test_majacc_d   0.62 (  0.55)	test_corr_d   0.23 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.31it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 21/  1]	epoch_time 0.0386 (0.0381)	validation_time 0.0003 (0.0007)	train_time 0.0383 (0.0373)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5351000128388405, 0.48900002241134644)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.50it/s] 19%|#9        | 5/26 [00:00<00:00, 22.60it/s] 35%|###4      | 9/26 [00:00<00:00, 27.39it/s] 50%|#####     | 13/26 [00:00<00:00, 29.97it/s] 65%|######5   | 17/26 [00:00<00:00, 31.69it/s] 81%|########  | 21/26 [00:00<00:00, 32.63it/s] 96%|#########6| 25/26 [00:00<00:00, 33.25it/s]100%|##########| 26/26 [00:00<00:00, 28.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.57 (  0.53)	train_minacc   0.34 (  0.48)	train_majacc   0.62 (  0.54)	train_corr   0.00 (  0.00)	l1 18.6765 (18.6783)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.64it/s] 23%|##3       | 6/26 [00:00<00:00, 32.35it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.35it/s] 46%|####6     | 12/26 [00:00<00:00, 43.33it/s] 65%|######5   | 17/26 [00:00<00:00, 43.49it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.49it/s] 88%|########8 | 23/26 [00:00<00:00, 47.03it/s]100%|##########| 26/26 [00:00<00:00, 40.25it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.48 (  0.48)	test_minacc   0.55 (  0.55)	test_majacc   0.46 (  0.46)	Loss_d 0.695 (0.695)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.07 ( -0.07)
Test: [  10/  26]	Loss 0.696 (0.694)	test_acc   0.46 (  0.51)	test_minacc   0.54 (  0.49)	test_majacc   0.45 (  0.51)	Loss_d 0.696 (0.694)	test_acc_d   0.46 (  0.51)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.45 (  0.51)	test_corr_d  -0.08 ( -0.00)
Test: [  20/  26]	Loss 0.692 (0.694)	test_acc   0.56 (  0.51)	test_minacc   0.57 (  0.49)	test_majacc   0.56 (  0.51)	Loss_d 0.692 (0.694)	test_acc_d   0.56 (  0.51)	test_minacc_d   0.57 (  0.49)	test_majacc_d   0.56 (  0.51)	test_corr_d  -0.02 (  0.00)
Test: [  26/  26]	Loss 0.691 (0.693)	test_acc   0.57 (  0.51)	test_minacc   0.34 (  0.48)	test_majacc   0.62 (  0.52)	Loss_d 0.691 (0.693)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.34 (  0.48)	test_majacc_d   0.62 (  0.52)	test_corr_d   0.22 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.02it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 22/  1]	epoch_time 0.0373 (0.0381)	validation_time 0.0004 (0.0007)	train_time 0.0369 (0.0373)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5139000138938427, 0.48600003123283386)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.87it/s] 15%|#5        | 4/26 [00:00<00:01, 15.15it/s] 31%|###       | 8/26 [00:00<00:00, 22.23it/s] 46%|####6     | 12/26 [00:00<00:00, 25.14it/s] 62%|######1   | 16/26 [00:00<00:00, 27.87it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.68it/s] 92%|#########2| 24/26 [00:00<00:00, 30.82it/s]100%|##########| 26/26 [00:01<00:00, 25.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 346 tensor(-0.0142, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
Epoch: [23][  26/  26]	Loss 0.000 (0.005)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.01)	weight_norm   0.19 (  0.16)	train_acc   0.60 (  0.56)	train_minacc   0.54 (  0.49)	train_majacc   0.61 (  0.58)	train_corr   0.00 (  0.00)	l1 14.3935 (15.2332)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.98it/s] 27%|##6       | 7/26 [00:00<00:00, 36.67it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.67it/s] 50%|#####     | 13/26 [00:00<00:00, 43.36it/s] 69%|######9   | 18/26 [00:00<00:00, 44.82it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.82it/s] 92%|#########2| 24/26 [00:00<00:00, 49.15it/s]100%|##########| 26/26 [00:00<00:00, 41.86it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.54 (  0.54)	test_minacc   0.59 (  0.59)	test_majacc   0.53 (  0.53)	Loss_d 0.688 (0.688)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.685 (0.691)	test_acc   0.56 (  0.53)	test_minacc   0.59 (  0.53)	test_majacc   0.56 (  0.53)	Loss_d 0.685 (0.691)	test_acc_d   0.56 (  0.53)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.56 (  0.53)	test_corr_d   0.13 (  0.06)
Test: [  20/  26]	Loss 0.692 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.42 (  0.52)	test_majacc   0.54 (  0.52)	Loss_d 0.692 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.42 (  0.52)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.07 (  0.05)
Test: [  26/  26]	Loss 0.682 (0.691)	test_acc   0.60 (  0.53)	test_minacc   0.54 (  0.52)	test_majacc   0.61 (  0.53)	Loss_d 0.682 (0.691)	test_acc_d   0.60 (  0.53)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.61 (  0.53)	test_corr_d   0.06 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.76it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.57 (  0.57)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.57 (  0.57)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 23/  1]	epoch_time 0.0373 (0.0381)	validation_time 0.0003 (0.0006)	train_time 0.0370 (0.0373)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.527400009572506, 0.5170000195503235)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.49it/s] 19%|#9        | 5/26 [00:00<00:01, 18.20it/s] 35%|###4      | 9/26 [00:00<00:00, 23.91it/s] 50%|#####     | 13/26 [00:00<00:00, 27.49it/s] 65%|######5   | 17/26 [00:00<00:00, 29.84it/s] 81%|########  | 21/26 [00:00<00:00, 31.21it/s] 96%|#########6| 25/26 [00:00<00:00, 32.27it/s]100%|##########| 26/26 [00:00<00:00, 26.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.58 (  0.52)	train_minacc   0.54 (  0.52)	train_majacc   0.59 (  0.52)	train_corr   0.00 (  0.00)	l1 14.2871 (14.3292)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.26it/s] 19%|#9        | 5/26 [00:00<00:00, 23.79it/s]                                               19%|#9        | 5/26 [00:00<00:00, 23.79it/s] 42%|####2     | 11/26 [00:00<00:00, 36.83it/s] 65%|######5   | 17/26 [00:00<00:00, 43.47it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.47it/s] 88%|########8 | 23/26 [00:00<00:00, 45.62it/s]100%|##########| 26/26 [00:00<00:00, 38.18it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.55 (  0.55)	test_minacc   0.59 (  0.59)	test_majacc   0.54 (  0.54)	Loss_d 0.687 (0.687)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.13 (  0.13)
Test: [  10/  26]	Loss 0.686 (0.691)	test_acc   0.55 (  0.52)	test_minacc   0.60 (  0.53)	test_majacc   0.54 (  0.52)	Loss_d 0.686 (0.691)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.60 (  0.53)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.17 (  0.11)
Test: [  20/  26]	Loss 0.692 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.42 (  0.52)	test_majacc   0.53 (  0.52)	Loss_d 0.692 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.42 (  0.52)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.10 (  0.10)
Test: [  26/  26]	Loss 0.682 (0.691)	test_acc   0.58 (  0.52)	test_minacc   0.54 (  0.52)	test_majacc   0.59 (  0.52)	Loss_d 0.682 (0.691)	test_acc_d   0.58 (  0.52)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.59 (  0.52)	test_corr_d   0.08 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.22it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.56 (  0.56)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.56 (  0.56)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 24/  1]	epoch_time 0.0371 (0.0380)	validation_time 0.0006 (0.0006)	train_time 0.0364 (0.0373)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.520000016272068, 0.51500004529953)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.21it/s] 19%|#9        | 5/26 [00:00<00:01, 19.27it/s] 35%|###4      | 9/26 [00:00<00:00, 25.16it/s] 50%|#####     | 13/26 [00:00<00:00, 28.06it/s] 65%|######5   | 17/26 [00:00<00:00, 29.55it/s] 81%|########  | 21/26 [00:00<00:00, 30.43it/s] 96%|#########6| 25/26 [00:00<00:00, 31.72it/s]100%|##########| 26/26 [00:00<00:00, 26.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.58 (  0.52)	train_minacc   0.54 (  0.52)	train_majacc   0.59 (  0.52)	train_corr   0.00 (  0.00)	l1 14.2571 (14.2687)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.86it/s] 35%|###4      | 9/26 [00:00<00:00, 40.25it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.25it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.42it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.42it/s] 81%|########  | 21/26 [00:00<00:00, 47.19it/s]100%|##########| 26/26 [00:00<00:00, 42.17it/s]
Test: [   0/  26]	Loss 0.686 (0.686)	test_acc   0.54 (  0.54)	test_minacc   0.59 (  0.59)	test_majacc   0.54 (  0.54)	Loss_d 0.686 (0.686)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.686 (0.690)	test_acc   0.55 (  0.52)	test_minacc   0.60 (  0.53)	test_majacc   0.54 (  0.52)	Loss_d 0.686 (0.690)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.60 (  0.53)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.21 (  0.15)
Test: [  20/  26]	Loss 0.691 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.42 (  0.52)	test_majacc   0.53 (  0.52)	Loss_d 0.691 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.42 (  0.52)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.13 (  0.14)
Test: [  26/  26]	Loss 0.681 (0.690)	test_acc   0.58 (  0.52)	test_minacc   0.54 (  0.52)	test_majacc   0.59 (  0.52)	Loss_d 0.681 (0.690)	test_acc_d   0.58 (  0.52)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.59 (  0.52)	test_corr_d   0.12 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.32it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.56 (  0.56)	Loss_d 0.695 (0.695)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.56 (  0.56)	Loss_d 0.695 (0.695)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.03 (  0.03)
Overall Timing[ 25/  1]	epoch_time 0.0366 (0.0380)	validation_time 0.0004 (0.0006)	train_time 0.0362 (0.0372)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5187000128626823, 0.5130000114440918)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.66it/s] 19%|#9        | 5/26 [00:00<00:01, 18.41it/s] 35%|###4      | 9/26 [00:00<00:00, 24.39it/s] 50%|#####     | 13/26 [00:00<00:00, 27.43it/s] 65%|######5   | 17/26 [00:00<00:00, 29.44it/s] 81%|########  | 21/26 [00:00<00:00, 30.87it/s] 96%|#########6| 25/26 [00:00<00:00, 31.37it/s]100%|##########| 26/26 [00:00<00:00, 26.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.58 (  0.52)	train_minacc   0.54 (  0.52)	train_majacc   0.58 (  0.52)	train_corr   0.00 (  0.00)	l1 14.2444 (14.2511)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.45it/s] 35%|###4      | 9/26 [00:00<00:00, 38.14it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.14it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.98it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.98it/s] 81%|########  | 21/26 [00:00<00:00, 45.82it/s]100%|##########| 26/26 [00:00<00:00, 41.49it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.54 (  0.54)	test_minacc   0.59 (  0.59)	test_majacc   0.53 (  0.53)	Loss_d 0.687 (0.687)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.687 (0.691)	test_acc   0.54 (  0.52)	test_minacc   0.60 (  0.53)	test_majacc   0.53 (  0.51)	Loss_d 0.687 (0.691)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.60 (  0.53)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.21 (  0.16)
Test: [  20/  26]	Loss 0.692 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.40 (  0.52)	test_majacc   0.53 (  0.51)	Loss_d 0.692 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.40 (  0.52)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.12 (  0.14)
Test: [  26/  26]	Loss 0.683 (0.691)	test_acc   0.58 (  0.52)	test_minacc   0.54 (  0.52)	test_majacc   0.58 (  0.52)	Loss_d 0.683 (0.691)	test_acc_d   0.58 (  0.52)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.58 (  0.52)	test_corr_d   0.11 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.67it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.04 (  0.04)
Overall Timing[ 26/  1]	epoch_time 0.0372 (0.0380)	validation_time 0.0004 (0.0006)	train_time 0.0367 (0.0372)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5164000139534474, 0.5110000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.16it/s] 23%|##3       | 6/26 [00:00<00:00, 25.97it/s] 38%|###8      | 10/26 [00:00<00:00, 28.63it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.73it/s] 69%|######9   | 18/26 [00:00<00:00, 31.54it/s] 85%|########4 | 22/26 [00:00<00:00, 32.65it/s]100%|##########| 26/26 [00:00<00:00, 33.10it/s]100%|##########| 26/26 [00:00<00:00, 29.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.58 (  0.52)	train_minacc   0.54 (  0.52)	train_majacc   0.59 (  0.52)	train_corr   0.00 (  0.00)	l1 14.2306 (14.2380)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.02it/s] 35%|###4      | 9/26 [00:00<00:00, 36.97it/s]                                               35%|###4      | 9/26 [00:00<00:00, 36.97it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.15it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.15it/s] 81%|########  | 21/26 [00:00<00:00, 45.65it/s]100%|##########| 26/26 [00:00<00:00, 41.20it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.54 (  0.54)	test_minacc   0.59 (  0.59)	test_majacc   0.53 (  0.53)	Loss_d 0.687 (0.687)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.688 (0.691)	test_acc   0.54 (  0.52)	test_minacc   0.59 (  0.53)	test_majacc   0.53 (  0.51)	Loss_d 0.688 (0.691)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.21 (  0.16)
Test: [  20/  26]	Loss 0.692 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.40 (  0.51)	test_majacc   0.53 (  0.51)	Loss_d 0.692 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.40 (  0.51)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.12 (  0.15)
Test: [  26/  26]	Loss 0.683 (0.691)	test_acc   0.58 (  0.52)	test_minacc   0.54 (  0.51)	test_majacc   0.59 (  0.52)	Loss_d 0.683 (0.691)	test_acc_d   0.58 (  0.52)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.59 (  0.52)	test_corr_d   0.11 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.30it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.695 (0.695)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.695 (0.695)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.05 (  0.05)
Overall Timing[ 27/  1]	epoch_time 0.0372 (0.0379)	validation_time 0.0003 (0.0006)	train_time 0.0368 (0.0372)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5152000130712986, 0.5110000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.55it/s] 19%|#9        | 5/26 [00:00<00:01, 18.20it/s] 35%|###4      | 9/26 [00:00<00:00, 24.42it/s] 50%|#####     | 13/26 [00:00<00:00, 27.93it/s] 65%|######5   | 17/26 [00:00<00:00, 29.77it/s] 81%|########  | 21/26 [00:00<00:00, 31.16it/s] 96%|#########6| 25/26 [00:00<00:00, 31.91it/s]100%|##########| 26/26 [00:00<00:00, 26.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.58 (  0.51)	train_minacc   0.54 (  0.51)	train_majacc   0.59 (  0.51)	train_corr   0.00 (  0.00)	l1 14.2178 (14.2247)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.28it/s] 27%|##6       | 7/26 [00:00<00:00, 35.02it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.02it/s] 50%|#####     | 13/26 [00:00<00:00, 41.17it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.47it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.47it/s] 96%|#########6| 25/26 [00:00<00:00, 47.33it/s]100%|##########| 26/26 [00:00<00:00, 41.10it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.54 (  0.54)	Loss_d 0.688 (0.688)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.689 (0.691)	test_acc   0.54 (  0.51)	test_minacc   0.59 (  0.53)	test_majacc   0.53 (  0.51)	Loss_d 0.689 (0.691)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.21 (  0.17)
Test: [  20/  26]	Loss 0.692 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.40 (  0.51)	test_majacc   0.53 (  0.51)	Loss_d 0.692 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.40 (  0.51)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.12 (  0.16)
Test: [  26/  26]	Loss 0.684 (0.691)	test_acc   0.58 (  0.51)	test_minacc   0.54 (  0.51)	test_majacc   0.59 (  0.51)	Loss_d 0.684 (0.691)	test_acc_d   0.58 (  0.51)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.59 (  0.51)	test_corr_d   0.11 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.14it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.695 (0.695)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.695 (0.695)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.06 (  0.06)
Overall Timing[ 28/  1]	epoch_time 0.0365 (0.0379)	validation_time 0.0004 (0.0006)	train_time 0.0361 (0.0372)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5135000120103359, 0.5100000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.91it/s] 19%|#9        | 5/26 [00:00<00:00, 24.00it/s] 35%|###4      | 9/26 [00:00<00:00, 28.79it/s] 50%|#####     | 13/26 [00:00<00:00, 31.09it/s] 65%|######5   | 17/26 [00:00<00:00, 32.17it/s] 81%|########  | 21/26 [00:00<00:00, 32.56it/s] 96%|#########6| 25/26 [00:00<00:00, 33.21it/s]100%|##########| 26/26 [00:00<00:00, 29.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.58 (  0.51)	train_minacc   0.54 (  0.51)	train_majacc   0.59 (  0.51)	train_corr   0.00 (  0.00)	l1 14.2060 (14.2125)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.11it/s] 31%|###       | 8/26 [00:00<00:00, 39.02it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.02it/s] 50%|#####     | 13/26 [00:00<00:00, 41.44it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.27it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.27it/s] 96%|#########6| 25/26 [00:00<00:00, 48.68it/s]100%|##########| 26/26 [00:00<00:00, 41.58it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.54 (  0.54)	Loss_d 0.688 (0.688)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.689 (0.691)	test_acc   0.53 (  0.51)	test_minacc   0.59 (  0.53)	test_majacc   0.52 (  0.51)	Loss_d 0.689 (0.691)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.20 (  0.17)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.40 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.40 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.12 (  0.16)
Test: [  26/  26]	Loss 0.684 (0.691)	test_acc   0.58 (  0.51)	test_minacc   0.54 (  0.51)	test_majacc   0.59 (  0.51)	Loss_d 0.684 (0.691)	test_acc_d   0.58 (  0.51)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.59 (  0.51)	test_corr_d   0.10 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.57it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.695 (0.695)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.695 (0.695)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.06 (  0.06)
Overall Timing[ 29/  1]	epoch_time 0.0354 (0.0378)	validation_time 0.0003 (0.0006)	train_time 0.0350 (0.0371)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5127000143826008, 0.5100000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.04it/s] 15%|#5        | 4/26 [00:00<00:01, 20.44it/s] 31%|###       | 8/26 [00:00<00:00, 26.30it/s] 46%|####6     | 12/26 [00:00<00:00, 29.12it/s] 62%|######1   | 16/26 [00:00<00:00, 31.02it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.16it/s] 92%|#########2| 24/26 [00:00<00:00, 32.93it/s]100%|##########| 26/26 [00:00<00:00, 28.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.58 (  0.51)	train_minacc   0.54 (  0.51)	train_majacc   0.59 (  0.51)	train_corr   0.00 (  0.00)	l1 14.1949 (14.2011)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.09it/s] 23%|##3       | 6/26 [00:00<00:00, 31.34it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.34it/s] 42%|####2     | 11/26 [00:00<00:00, 36.26it/s] 65%|######5   | 17/26 [00:00<00:00, 44.80it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.80it/s] 88%|########8 | 23/26 [00:00<00:00, 45.84it/s]100%|##########| 26/26 [00:00<00:00, 39.89it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.53 (  0.53)	Loss_d 0.688 (0.688)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.689 (0.691)	test_acc   0.53 (  0.51)	test_minacc   0.59 (  0.53)	test_majacc   0.52 (  0.51)	Loss_d 0.689 (0.691)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.19 (  0.17)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.40 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.40 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.12 (  0.16)
Test: [  26/  26]	Loss 0.685 (0.691)	test_acc   0.58 (  0.51)	test_minacc   0.54 (  0.51)	test_majacc   0.59 (  0.51)	Loss_d 0.685 (0.691)	test_acc_d   0.58 (  0.51)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.59 (  0.51)	test_corr_d   0.10 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.49it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.695 (0.695)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.695 (0.695)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.06 (  0.06)
Overall Timing[ 30/  1]	epoch_time 0.0359 (0.0377)	validation_time 0.0004 (0.0006)	train_time 0.0355 (0.0370)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5120000192821026, 0.5090000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.18it/s] 19%|#9        | 5/26 [00:00<00:00, 22.69it/s] 35%|###4      | 9/26 [00:00<00:00, 28.04it/s] 50%|#####     | 13/26 [00:00<00:00, 30.89it/s] 65%|######5   | 17/26 [00:00<00:00, 32.17it/s] 81%|########  | 21/26 [00:00<00:00, 33.33it/s] 96%|#########6| 25/26 [00:00<00:00, 33.56it/s]100%|##########| 26/26 [00:00<00:00, 28.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.58 (  0.51)	train_minacc   0.54 (  0.51)	train_majacc   0.59 (  0.51)	train_corr   0.00 (  0.00)	l1 14.1844 (14.1903)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.87it/s] 27%|##6       | 7/26 [00:00<00:00, 29.40it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.40it/s] 50%|#####     | 13/26 [00:00<00:00, 37.02it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.43it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.43it/s] 92%|#########2| 24/26 [00:00<00:00, 45.27it/s]100%|##########| 26/26 [00:00<00:00, 36.56it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.53 (  0.53)	Loss_d 0.688 (0.688)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.690 (0.691)	test_acc   0.53 (  0.51)	test_minacc   0.57 (  0.52)	test_majacc   0.52 (  0.51)	Loss_d 0.690 (0.691)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.19 (  0.17)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.40 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.40 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.11 (  0.16)
Test: [  26/  26]	Loss 0.685 (0.691)	test_acc   0.58 (  0.51)	test_minacc   0.54 (  0.51)	test_majacc   0.58 (  0.51)	Loss_d 0.685 (0.691)	test_acc_d   0.58 (  0.51)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.58 (  0.51)	test_corr_d   0.09 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.39it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.695 (0.695)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.695 (0.695)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.07 (  0.07)
Overall Timing[ 31/  1]	epoch_time 0.0369 (0.0377)	validation_time 0.0004 (0.0006)	train_time 0.0365 (0.0370)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5116000119149685, 0.5080000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.16it/s] 19%|#9        | 5/26 [00:00<00:00, 21.57it/s] 35%|###4      | 9/26 [00:00<00:00, 27.18it/s] 50%|#####     | 13/26 [00:00<00:00, 29.77it/s] 65%|######5   | 17/26 [00:00<00:00, 31.46it/s] 81%|########  | 21/26 [00:00<00:00, 32.63it/s] 96%|#########6| 25/26 [00:00<00:00, 32.96it/s]100%|##########| 26/26 [00:00<00:00, 28.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.58 (  0.51)	train_minacc   0.54 (  0.51)	train_majacc   0.58 (  0.51)	train_corr   0.00 (  0.00)	l1 14.1745 (14.1801)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.24it/s] 27%|##6       | 7/26 [00:00<00:00, 30.62it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.62it/s] 50%|#####     | 13/26 [00:00<00:00, 36.71it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.77it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.77it/s] 96%|#########6| 25/26 [00:00<00:00, 44.76it/s]100%|##########| 26/26 [00:00<00:00, 36.92it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.53 (  0.53)	Loss_d 0.689 (0.689)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.53 (  0.51)	test_minacc   0.57 (  0.52)	test_majacc   0.52 (  0.51)	Loss_d 0.690 (0.692)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.18 (  0.17)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.51)	test_minacc   0.40 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.40 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.10 (  0.16)
Test: [  26/  26]	Loss 0.686 (0.692)	test_acc   0.58 (  0.51)	test_minacc   0.54 (  0.51)	test_majacc   0.58 (  0.51)	Loss_d 0.686 (0.692)	test_acc_d   0.58 (  0.51)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.58 (  0.51)	test_corr_d   0.08 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.93it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.695 (0.695)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.695 (0.695)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.07 (  0.07)
Overall Timing[ 32/  1]	epoch_time 0.0368 (0.0377)	validation_time 0.0004 (0.0006)	train_time 0.0364 (0.0370)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.511000015437603, 0.5080000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.70it/s] 19%|#9        | 5/26 [00:00<00:01, 19.19it/s] 35%|###4      | 9/26 [00:00<00:00, 24.43it/s] 50%|#####     | 13/26 [00:00<00:00, 28.06it/s] 65%|######5   | 17/26 [00:00<00:00, 30.24it/s] 81%|########  | 21/26 [00:00<00:00, 31.52it/s] 96%|#########6| 25/26 [00:00<00:00, 31.78it/s]100%|##########| 26/26 [00:00<00:00, 26.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.57 (  0.51)	train_minacc   0.51 (  0.51)	train_majacc   0.58 (  0.51)	train_corr   0.00 (  0.00)	l1 14.1652 (14.1705)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.39it/s] 35%|###4      | 9/26 [00:00<00:00, 39.78it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.78it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.63it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.63it/s] 81%|########  | 21/26 [00:00<00:00, 46.92it/s]100%|##########| 26/26 [00:00<00:00, 42.07it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.53 (  0.53)	Loss_d 0.689 (0.689)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.53 (  0.51)	test_minacc   0.57 (  0.52)	test_majacc   0.52 (  0.51)	Loss_d 0.690 (0.692)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.17 (  0.16)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.51)	test_minacc   0.40 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.40 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.10 (  0.15)
Test: [  26/  26]	Loss 0.686 (0.692)	test_acc   0.57 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.58 (  0.51)	Loss_d 0.686 (0.692)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.58 (  0.51)	test_corr_d   0.06 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.56it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.695 (0.695)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.695 (0.695)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.07 (  0.07)
Overall Timing[ 33/  1]	epoch_time 0.0368 (0.0377)	validation_time 0.0003 (0.0006)	train_time 0.0364 (0.0370)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5107000117599965, 0.5080000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.59it/s] 19%|#9        | 5/26 [00:00<00:00, 22.45it/s] 35%|###4      | 9/26 [00:00<00:00, 27.85it/s] 50%|#####     | 13/26 [00:00<00:00, 30.35it/s] 65%|######5   | 17/26 [00:00<00:00, 31.42it/s] 81%|########  | 21/26 [00:00<00:00, 32.86it/s] 96%|#########6| 25/26 [00:00<00:00, 33.35it/s]100%|##########| 26/26 [00:00<00:00, 28.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.57 (  0.51)	train_minacc   0.51 (  0.51)	train_majacc   0.58 (  0.51)	train_corr   0.00 (  0.00)	l1 14.1565 (14.1616)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.36it/s] 27%|##6       | 7/26 [00:00<00:00, 30.75it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.75it/s] 50%|#####     | 13/26 [00:00<00:00, 37.68it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.91it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.91it/s] 96%|#########6| 25/26 [00:00<00:00, 46.16it/s]100%|##########| 26/26 [00:00<00:00, 38.04it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.53 (  0.53)	Loss_d 0.689 (0.689)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.53 (  0.51)	test_minacc   0.57 (  0.52)	test_majacc   0.52 (  0.51)	Loss_d 0.691 (0.692)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.16 (  0.16)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.51)	test_minacc   0.40 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.40 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.09 (  0.15)
Test: [  26/  26]	Loss 0.687 (0.692)	test_acc   0.57 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.58 (  0.51)	Loss_d 0.687 (0.692)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.58 (  0.51)	test_corr_d   0.05 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.40it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.695 (0.695)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.695 (0.695)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.06 (  0.06)
Overall Timing[ 34/  1]	epoch_time 0.0356 (0.0376)	validation_time 0.0003 (0.0006)	train_time 0.0353 (0.0369)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5105000117719174, 0.5080000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.51it/s] 19%|#9        | 5/26 [00:00<00:01, 20.34it/s] 35%|###4      | 9/26 [00:00<00:00, 26.41it/s] 50%|#####     | 13/26 [00:00<00:00, 29.45it/s] 65%|######5   | 17/26 [00:00<00:00, 31.51it/s] 81%|########  | 21/26 [00:00<00:00, 32.76it/s] 96%|#########6| 25/26 [00:00<00:00, 33.75it/s]100%|##########| 26/26 [00:00<00:00, 28.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.57 (  0.51)	train_minacc   0.51 (  0.51)	train_majacc   0.58 (  0.51)	train_corr   0.00 (  0.00)	l1 14.1483 (14.1531)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.42it/s] 27%|##6       | 7/26 [00:00<00:00, 35.27it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.27it/s] 50%|#####     | 13/26 [00:00<00:00, 41.56it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.70it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.70it/s] 96%|#########6| 25/26 [00:00<00:00, 47.77it/s]100%|##########| 26/26 [00:00<00:00, 40.82it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.53 (  0.53)	Loss_d 0.689 (0.689)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.53 (  0.51)	test_minacc   0.57 (  0.52)	test_majacc   0.52 (  0.51)	Loss_d 0.691 (0.692)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.15 (  0.16)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.51)	test_minacc   0.40 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.40 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.09 (  0.15)
Test: [  26/  26]	Loss 0.687 (0.692)	test_acc   0.57 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.58 (  0.51)	Loss_d 0.687 (0.692)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.58 (  0.51)	test_corr_d   0.04 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.33it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.695 (0.695)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.695 (0.695)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.06 (  0.06)
Overall Timing[ 35/  1]	epoch_time 0.0354 (0.0375)	validation_time 0.0004 (0.0006)	train_time 0.0349 (0.0369)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5100000129640102, 0.5070000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.83it/s] 19%|#9        | 5/26 [00:00<00:00, 21.32it/s] 35%|###4      | 9/26 [00:00<00:00, 26.16it/s] 50%|#####     | 13/26 [00:00<00:00, 28.69it/s] 65%|######5   | 17/26 [00:00<00:00, 30.66it/s] 81%|########  | 21/26 [00:00<00:00, 31.91it/s] 96%|#########6| 25/26 [00:00<00:00, 32.46it/s]100%|##########| 26/26 [00:00<00:00, 27.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.57 (  0.51)	train_minacc   0.51 (  0.51)	train_majacc   0.58 (  0.51)	train_corr   0.00 (  0.00)	l1 14.1405 (14.1451)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.58it/s] 27%|##6       | 7/26 [00:00<00:00, 34.61it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.61it/s] 50%|#####     | 13/26 [00:00<00:00, 41.91it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.61it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.61it/s] 92%|#########2| 24/26 [00:00<00:00, 47.97it/s]100%|##########| 26/26 [00:00<00:00, 40.25it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.53 (  0.53)	Loss_d 0.689 (0.689)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.53 (  0.51)	test_minacc   0.57 (  0.52)	test_majacc   0.52 (  0.51)	Loss_d 0.691 (0.692)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.13 (  0.15)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.51)	test_minacc   0.40 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.40 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.08 (  0.14)
Test: [  26/  26]	Loss 0.687 (0.692)	test_acc   0.57 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.58 (  0.51)	Loss_d 0.687 (0.692)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.58 (  0.51)	test_corr_d   0.03 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.89it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.695 (0.695)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.695 (0.695)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.06 (  0.06)
Overall Timing[ 36/  1]	epoch_time 0.0366 (0.0375)	validation_time 0.0006 (0.0006)	train_time 0.0360 (0.0369)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5095000118315219, 0.5080000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.41it/s] 15%|#5        | 4/26 [00:00<00:01, 18.24it/s] 31%|###       | 8/26 [00:00<00:00, 24.47it/s] 46%|####6     | 12/26 [00:00<00:00, 27.31it/s] 62%|######1   | 16/26 [00:00<00:00, 28.95it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.49it/s] 92%|#########2| 24/26 [00:00<00:00, 31.15it/s]100%|##########| 26/26 [00:00<00:00, 26.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.57 (  0.51)	train_minacc   0.51 (  0.51)	train_majacc   0.58 (  0.51)	train_corr   0.00 (  0.00)	l1 14.1331 (14.1375)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.39it/s] 27%|##6       | 7/26 [00:00<00:00, 34.91it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.91it/s] 50%|#####     | 13/26 [00:00<00:00, 39.42it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.75it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.75it/s] 96%|#########6| 25/26 [00:00<00:00, 45.89it/s]100%|##########| 26/26 [00:00<00:00, 39.15it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.53 (  0.51)	test_minacc   0.57 (  0.52)	test_majacc   0.52 (  0.51)	Loss_d 0.691 (0.692)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.12 (  0.15)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.51)	test_minacc   0.40 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.40 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.08 (  0.14)
Test: [  26/  26]	Loss 0.688 (0.692)	test_acc   0.57 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.58 (  0.51)	Loss_d 0.688 (0.692)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.58 (  0.51)	test_corr_d   0.02 (  0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.81it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.06 (  0.06)
Overall Timing[ 37/  1]	epoch_time 0.0374 (0.0375)	validation_time 0.0004 (0.0006)	train_time 0.0370 (0.0369)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5090000083744526, 0.5080000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.64it/s] 19%|#9        | 5/26 [00:00<00:00, 21.76it/s] 35%|###4      | 9/26 [00:00<00:00, 27.61it/s] 50%|#####     | 13/26 [00:00<00:00, 30.07it/s] 65%|######5   | 17/26 [00:00<00:00, 31.42it/s] 81%|########  | 21/26 [00:00<00:00, 32.00it/s] 96%|#########6| 25/26 [00:00<00:00, 32.08it/s]100%|##########| 26/26 [00:00<00:00, 28.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.57 (  0.51)	train_minacc   0.51 (  0.51)	train_majacc   0.58 (  0.51)	train_corr   0.00 (  0.00)	l1 14.1261 (14.1303)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.98it/s] 23%|##3       | 6/26 [00:00<00:00, 33.04it/s]                                               23%|##3       | 6/26 [00:00<00:00, 33.04it/s] 46%|####6     | 12/26 [00:00<00:00, 42.98it/s] 65%|######5   | 17/26 [00:00<00:00, 43.60it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.60it/s] 88%|########8 | 23/26 [00:00<00:00, 48.64it/s]100%|##########| 26/26 [00:00<00:00, 40.20it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.52 (  0.51)	test_minacc   0.57 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.691 (0.692)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.11 (  0.14)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.40 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.40 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.07 (  0.13)
Test: [  26/  26]	Loss 0.688 (0.692)	test_acc   0.57 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.58 (  0.51)	Loss_d 0.688 (0.692)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.58 (  0.51)	test_corr_d   0.01 (  0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.49it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.06 (  0.06)
Overall Timing[ 38/  1]	epoch_time 0.0371 (0.0375)	validation_time 0.0003 (0.0006)	train_time 0.0367 (0.0369)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5087000107169152, 0.5070000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.07it/s] 19%|#9        | 5/26 [00:00<00:00, 22.07it/s] 35%|###4      | 9/26 [00:00<00:00, 27.29it/s] 50%|#####     | 13/26 [00:00<00:00, 30.00it/s] 65%|######5   | 17/26 [00:00<00:00, 31.55it/s] 81%|########  | 21/26 [00:00<00:00, 32.50it/s] 96%|#########6| 25/26 [00:00<00:00, 33.20it/s]100%|##########| 26/26 [00:00<00:00, 28.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.57 (  0.51)	train_minacc   0.51 (  0.51)	train_majacc   0.58 (  0.51)	train_corr   0.00 (  0.00)	l1 14.1194 (14.1234)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.61it/s] 31%|###       | 8/26 [00:00<00:00, 41.27it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.27it/s] 50%|#####     | 13/26 [00:00<00:00, 42.53it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.70it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.70it/s] 96%|#########6| 25/26 [00:00<00:00, 47.35it/s]100%|##########| 26/26 [00:00<00:00, 41.73it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.51)	test_minacc   0.57 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.10 (  0.14)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.40 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.40 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.07 (  0.13)
Test: [  26/  26]	Loss 0.688 (0.692)	test_acc   0.57 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.58 (  0.51)	Loss_d 0.688 (0.692)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.58 (  0.51)	test_corr_d   0.00 (  0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.85it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.06 (  0.06)
Overall Timing[ 39/  1]	epoch_time 0.0365 (0.0375)	validation_time 0.0004 (0.0006)	train_time 0.0361 (0.0368)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5086000130474567, 0.5070000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.81it/s] 19%|#9        | 5/26 [00:00<00:00, 22.05it/s] 35%|###4      | 9/26 [00:00<00:00, 26.28it/s] 50%|#####     | 13/26 [00:00<00:00, 28.42it/s] 65%|######5   | 17/26 [00:00<00:00, 29.61it/s] 81%|########  | 21/26 [00:00<00:00, 31.07it/s] 96%|#########6| 25/26 [00:00<00:00, 31.89it/s]100%|##########| 26/26 [00:00<00:00, 27.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.57 (  0.51)	train_minacc   0.51 (  0.51)	train_majacc   0.58 (  0.51)	train_corr   0.00 (  0.00)	l1 14.1130 (14.1169)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.56it/s] 31%|###       | 8/26 [00:00<00:00, 34.36it/s]                                               31%|###       | 8/26 [00:00<00:00, 34.36it/s] 54%|#####3    | 14/26 [00:00<00:00, 39.73it/s] 77%|#######6  | 20/26 [00:00<00:00, 45.97it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 45.97it/s]100%|##########| 26/26 [00:00<00:00, 50.17it/s]100%|##########| 26/26 [00:00<00:00, 40.11it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.51)	test_minacc   0.59 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.09 (  0.14)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.40 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.40 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.06 (  0.12)
Test: [  26/  26]	Loss 0.689 (0.692)	test_acc   0.57 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.58 (  0.51)	Loss_d 0.689 (0.692)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.58 (  0.51)	test_corr_d  -0.01 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.21it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.06 (  0.06)
Overall Timing[ 40/  1]	epoch_time 0.0356 (0.0374)	validation_time 0.0003 (0.0005)	train_time 0.0353 (0.0368)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5086000130474567, 0.5070000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.89it/s] 15%|#5        | 4/26 [00:00<00:01, 16.88it/s] 27%|##6       | 7/26 [00:00<00:00, 21.80it/s] 42%|####2     | 11/26 [00:00<00:00, 26.13it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.49it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.02it/s] 88%|########8 | 23/26 [00:00<00:00, 31.31it/s]100%|##########| 26/26 [00:01<00:00, 25.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.57 (  0.51)	train_minacc   0.51 (  0.51)	train_majacc   0.58 (  0.51)	train_corr   0.00 (  0.00)	l1 14.1070 (14.1107)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.67it/s] 27%|##6       | 7/26 [00:00<00:00, 33.78it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.78it/s] 50%|#####     | 13/26 [00:00<00:00, 43.31it/s] 69%|######9   | 18/26 [00:00<00:00, 43.70it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.70it/s] 92%|#########2| 24/26 [00:00<00:00, 48.13it/s]100%|##########| 26/26 [00:00<00:00, 40.69it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.51)	test_minacc   0.59 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.08 (  0.13)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.40 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.40 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.06 (  0.12)
Test: [  26/  26]	Loss 0.689 (0.692)	test_acc   0.57 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.58 (  0.51)	Loss_d 0.689 (0.692)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.58 (  0.51)	test_corr_d  -0.01 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.44it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.06 (  0.06)
Overall Timing[ 41/  1]	epoch_time 0.0370 (0.0374)	validation_time 0.0006 (0.0006)	train_time 0.0363 (0.0368)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5087000130414963, 0.5070000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.74it/s] 15%|#5        | 4/26 [00:00<00:01, 18.01it/s] 31%|###       | 8/26 [00:00<00:00, 24.66it/s] 46%|####6     | 12/26 [00:00<00:00, 28.44it/s] 62%|######1   | 16/26 [00:00<00:00, 30.70it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.79it/s] 92%|#########2| 24/26 [00:00<00:00, 32.96it/s]100%|##########| 26/26 [00:00<00:00, 27.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.57 (  0.51)	train_minacc   0.51 (  0.51)	train_majacc   0.58 (  0.51)	train_corr   0.00 (  0.00)	l1 14.1012 (14.1048)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.91it/s] 27%|##6       | 7/26 [00:00<00:00, 37.09it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.09it/s] 50%|#####     | 13/26 [00:00<00:00, 43.79it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.40it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.40it/s] 96%|#########6| 25/26 [00:00<00:00, 49.22it/s]100%|##########| 26/26 [00:00<00:00, 41.75it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.51)	test_minacc   0.59 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.07 (  0.13)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.40 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.40 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.06 (  0.12)
Test: [  26/  26]	Loss 0.689 (0.692)	test_acc   0.57 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.58 (  0.51)	Loss_d 0.689 (0.692)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.58 (  0.51)	test_corr_d  -0.02 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.12it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.05 (  0.05)
Overall Timing[ 42/  1]	epoch_time 0.0371 (0.0374)	validation_time 0.0003 (0.0005)	train_time 0.0367 (0.0368)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.508200011909008, 0.5070000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.75it/s] 19%|#9        | 5/26 [00:00<00:00, 23.07it/s] 35%|###4      | 9/26 [00:00<00:00, 28.10it/s] 50%|#####     | 13/26 [00:00<00:00, 30.40it/s] 65%|######5   | 17/26 [00:00<00:00, 31.64it/s] 81%|########  | 21/26 [00:00<00:00, 32.72it/s] 96%|#########6| 25/26 [00:00<00:00, 33.18it/s]100%|##########| 26/26 [00:00<00:00, 28.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.57 (  0.51)	train_minacc   0.51 (  0.51)	train_majacc   0.58 (  0.51)	train_corr   0.00 (  0.00)	l1 14.0957 (14.0991)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.35it/s] 27%|##6       | 7/26 [00:00<00:00, 31.64it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.64it/s] 46%|####6     | 12/26 [00:00<00:00, 38.78it/s] 65%|######5   | 17/26 [00:00<00:00, 41.03it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.03it/s] 88%|########8 | 23/26 [00:00<00:00, 44.67it/s]100%|##########| 26/26 [00:00<00:00, 37.62it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.54 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.51)	test_minacc   0.59 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.07 (  0.12)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.40 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.40 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.05 (  0.11)
Test: [  26/  26]	Loss 0.689 (0.692)	test_acc   0.57 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.58 (  0.51)	Loss_d 0.689 (0.692)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.58 (  0.51)	test_corr_d  -0.03 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.92it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.05 (  0.05)
Overall Timing[ 43/  1]	epoch_time 0.0374 (0.0374)	validation_time 0.0004 (0.0005)	train_time 0.0370 (0.0368)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.50790001308918, 0.5060000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.65it/s] 19%|#9        | 5/26 [00:00<00:01, 19.25it/s] 35%|###4      | 9/26 [00:00<00:00, 25.15it/s] 50%|#####     | 13/26 [00:00<00:00, 28.42it/s] 65%|######5   | 17/26 [00:00<00:00, 30.22it/s] 81%|########  | 21/26 [00:00<00:00, 31.47it/s] 96%|#########6| 25/26 [00:00<00:00, 32.28it/s]100%|##########| 26/26 [00:00<00:00, 26.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.57 (  0.51)	train_minacc   0.51 (  0.51)	train_majacc   0.58 (  0.51)	train_corr   0.00 (  0.00)	l1 14.0904 (14.0938)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.49it/s] 27%|##6       | 7/26 [00:00<00:00, 36.55it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.55it/s] 50%|#####     | 13/26 [00:00<00:00, 42.57it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.53it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.53it/s] 92%|#########2| 24/26 [00:00<00:00, 47.09it/s]100%|##########| 26/26 [00:00<00:00, 40.65it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.53 (  0.53)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.51)	test_minacc   0.59 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.06 (  0.12)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.40 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.40 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.05 (  0.11)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.57 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.58 (  0.51)	Loss_d 0.690 (0.692)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.58 (  0.51)	test_corr_d  -0.04 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.81it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.05 (  0.05)
Overall Timing[ 44/  1]	epoch_time 0.0364 (0.0374)	validation_time 0.0004 (0.0005)	train_time 0.0360 (0.0368)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5080000107586384, 0.5060000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.24it/s] 19%|#9        | 5/26 [00:00<00:00, 21.99it/s] 35%|###4      | 9/26 [00:00<00:00, 27.46it/s] 50%|#####     | 13/26 [00:00<00:00, 30.61it/s] 65%|######5   | 17/26 [00:00<00:00, 31.85it/s] 81%|########  | 21/26 [00:00<00:00, 32.89it/s] 96%|#########6| 25/26 [00:00<00:00, 33.29it/s]100%|##########| 26/26 [00:00<00:00, 28.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.57 (  0.51)	train_minacc   0.51 (  0.51)	train_majacc   0.58 (  0.51)	train_corr   0.00 (  0.00)	l1 14.0853 (14.0886)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.18it/s] 35%|###4      | 9/26 [00:00<00:00, 37.77it/s]                                               35%|###4      | 9/26 [00:00<00:00, 37.77it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.67it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.67it/s] 81%|########  | 21/26 [00:00<00:00, 46.69it/s]100%|##########| 26/26 [00:00<00:00, 42.20it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.51)	test_minacc   0.59 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.05 (  0.12)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.40 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.40 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.05 (  0.10)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.57 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.58 (  0.51)	Loss_d 0.690 (0.692)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.58 (  0.51)	test_corr_d  -0.04 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.36it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.05 (  0.05)
Overall Timing[ 45/  1]	epoch_time 0.0351 (0.0373)	validation_time 0.0003 (0.0005)	train_time 0.0347 (0.0367)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5079000107645989, 0.5060000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.20it/s] 19%|#9        | 5/26 [00:00<00:00, 22.70it/s] 35%|###4      | 9/26 [00:00<00:00, 27.78it/s] 50%|#####     | 13/26 [00:00<00:00, 30.64it/s] 65%|######5   | 17/26 [00:00<00:00, 31.59it/s] 81%|########  | 21/26 [00:00<00:00, 32.37it/s] 96%|#########6| 25/26 [00:00<00:00, 33.31it/s]100%|##########| 26/26 [00:00<00:00, 28.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.57 (  0.51)	train_minacc   0.51 (  0.51)	train_majacc   0.58 (  0.51)	train_corr   0.00 (  0.00)	l1 14.0805 (14.0836)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.81it/s] 27%|##6       | 7/26 [00:00<00:00, 34.31it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.31it/s] 50%|#####     | 13/26 [00:00<00:00, 39.90it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.47it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.47it/s] 96%|#########6| 25/26 [00:00<00:00, 46.69it/s]100%|##########| 26/26 [00:00<00:00, 39.21it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.51)	test_minacc   0.59 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.04 (  0.11)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.40 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.40 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.04 (  0.10)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.57 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.58 (  0.51)	Loss_d 0.690 (0.692)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.58 (  0.51)	test_corr_d  -0.05 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.58it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.05 (  0.05)
Overall Timing[ 46/  1]	epoch_time 0.0361 (0.0373)	validation_time 0.0004 (0.0005)	train_time 0.0357 (0.0367)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5079000107645989, 0.5049999952316284)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.95it/s] 15%|#5        | 4/26 [00:00<00:01, 19.50it/s] 31%|###       | 8/26 [00:00<00:00, 25.73it/s] 46%|####6     | 12/26 [00:00<00:00, 28.53it/s] 62%|######1   | 16/26 [00:00<00:00, 30.39it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.97it/s] 92%|#########2| 24/26 [00:00<00:00, 32.82it/s]100%|##########| 26/26 [00:00<00:00, 27.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.57 (  0.51)	train_minacc   0.51 (  0.51)	train_majacc   0.58 (  0.51)	train_corr   0.00 (  0.00)	l1 14.0758 (14.0789)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.70it/s] 23%|##3       | 6/26 [00:00<00:00, 26.74it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.74it/s] 46%|####6     | 12/26 [00:00<00:00, 38.27it/s] 65%|######5   | 17/26 [00:00<00:00, 40.59it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.59it/s] 88%|########8 | 23/26 [00:00<00:00, 46.20it/s]100%|##########| 26/26 [00:00<00:00, 37.36it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.53 (  0.51)	test_minacc   0.59 (  0.53)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.03 (  0.11)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.40 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.40 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.04 (  0.10)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.57 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.58 (  0.51)	Loss_d 0.690 (0.692)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.58 (  0.51)	test_corr_d  -0.06 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.34it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.04 (  0.04)
Overall Timing[ 47/  1]	epoch_time 0.0382 (0.0373)	validation_time 0.0003 (0.0005)	train_time 0.0378 (0.0367)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5078000119328498, 0.5049999952316284)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.82it/s] 23%|##3       | 6/26 [00:00<00:00, 25.40it/s] 38%|###8      | 10/26 [00:00<00:00, 28.76it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.67it/s] 69%|######9   | 18/26 [00:00<00:00, 31.84it/s] 85%|########4 | 22/26 [00:00<00:00, 32.34it/s]100%|##########| 26/26 [00:00<00:00, 33.18it/s]100%|##########| 26/26 [00:00<00:00, 28.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.57 (  0.51)	train_minacc   0.51 (  0.51)	train_majacc   0.58 (  0.51)	train_corr   0.00 (  0.00)	l1 14.0714 (14.0743)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.31it/s] 27%|##6       | 7/26 [00:00<00:00, 37.32it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.32it/s] 50%|#####     | 13/26 [00:00<00:00, 40.12it/s] 77%|#######6  | 20/26 [00:00<00:00, 49.17it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 49.17it/s] 96%|#########6| 25/26 [00:00<00:00, 47.07it/s]100%|##########| 26/26 [00:00<00:00, 40.61it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.59 (  0.53)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.03 (  0.11)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.40 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.40 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.04 (  0.09)
Test: [  26/  26]	Loss 0.690 (0.693)	test_acc   0.57 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.58 (  0.51)	Loss_d 0.690 (0.693)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.58 (  0.51)	test_corr_d  -0.06 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.22it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.04 (  0.04)
Overall Timing[ 48/  1]	epoch_time 0.0366 (0.0373)	validation_time 0.0004 (0.0005)	train_time 0.0362 (0.0367)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5077000119388103, 0.5049999952316284)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.38it/s] 19%|#9        | 5/26 [00:00<00:01, 19.37it/s] 35%|###4      | 9/26 [00:00<00:00, 24.07it/s] 50%|#####     | 13/26 [00:00<00:00, 26.77it/s] 65%|######5   | 17/26 [00:00<00:00, 29.13it/s] 81%|########  | 21/26 [00:00<00:00, 30.37it/s] 96%|#########6| 25/26 [00:00<00:00, 31.15it/s]100%|##########| 26/26 [00:00<00:00, 26.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.57 (  0.51)	train_minacc   0.51 (  0.51)	train_majacc   0.58 (  0.51)	train_corr   0.00 (  0.00)	l1 14.0671 (14.0700)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.68it/s] 27%|##6       | 7/26 [00:00<00:00, 33.77it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.77it/s] 50%|#####     | 13/26 [00:00<00:00, 39.47it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.12it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.12it/s] 96%|#########6| 25/26 [00:00<00:00, 45.93it/s]100%|##########| 26/26 [00:00<00:00, 38.95it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.59 (  0.53)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.02 (  0.10)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.40 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.40 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.03 (  0.09)
Test: [  26/  26]	Loss 0.690 (0.693)	test_acc   0.57 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.58 (  0.51)	Loss_d 0.690 (0.693)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.58 (  0.51)	test_corr_d  -0.07 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.38it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.04 (  0.04)
Overall Timing[ 49/  1]	epoch_time 0.0379 (0.0373)	validation_time 0.0007 (0.0005)	train_time 0.0372 (0.0367)
record: (train_acc, test_acc) (0.6634000268578529, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5077000119388103, 0.5049999952316284)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.097 MB of 0.097 MB uploadedwandb: \ 0.097 MB of 0.097 MB uploadedwandb: | 0.097 MB of 0.097 MB uploadedwandb: / 0.097 MB of 0.097 MB uploadedwandb: - 0.119 MB of 0.131 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/diagnostics/epoch_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/diagnostics/train_time_val █▂▁▁▁▁▂▁▁▂▁▁▁▁▂▁▁▂▂▂▁▁▂▁▁▁▁▁▁▁▂▁▁▁▁▂▁▁▂▂
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/Loss_avg ▇▇███▇█▇▇▆▆▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/Loss_d_avg ▇▇███▇█▇▇▆▆▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/Loss_d_val ▇▇███▇█▇▇▆▆▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/Loss_val ▇▇███▇█▇▇▆▆▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/test_acc_avg ▁▁▁▁▁▁▁▁▁▂▂▂██▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/test_acc_d_avg ▁▁▁▁▁▁▁▁▁▂▂▂██▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/test_acc_d_val ▁▁▁▁▁▁▁▁▁▂▂▂██▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/test_acc_val ▁▁▁▁▁▁▁▁▁▂▂▂██▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/test_corr_d_avg █████████▇▇▇▁▁▂▂▂▂▂▂▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/test_corr_d_val █████████▇▇▇▁▁▂▂▂▂▂▂▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/test_majacc_avg ████████████▃▁▂▂▂▁▁▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/test_majacc_d_avg ████████████▃▁▂▂▂▁▁▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/test_majacc_d_val ████████████▃▁▂▂▂▁▁▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/test_majacc_val ████████████▃▁▂▂▂▁▁▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/test_minacc_avg ▁▁▁▁▁▁▁▁▁▂▂▂██▆▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/test_minacc_d_avg ▁▁▁▁▁▁▁▁▁▂▂▂██▆▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/test_minacc_d_val ▁▁▁▁▁▁▁▁▁▂▂▂██▆▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/test_minacc_val ▁▁▁▁▁▁▁▁▁▂▂▂██▆▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/Loss_avg █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/Loss_val █▅▃▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/l1_avg ▂▃▂▁▁▁▂▃▄▅▆▇███████▆▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/l1_val ▃▂▂▁▁▁▂▃▅▆▇▇███████▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/train_acc_avg ▇███████████▆▄▂▂▂▂▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/train_acc_val ▇███▇▇▇▇████▃▃▂▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/train_majacc_avg ▇███████████▆▃▁▂▂▂▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/train_majacc_val ████████████▃▃▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/train_minacc_avg ▂▁▁▁▂▂▂▂▂▂▃▃▆██▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/train_minacc_val ▂▁▁▁▁▁▁▁▂▃▃▄█▆▅▄▅▅▅▇▇▇▇▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/train_nll_avg ▆▃▃▂▂▂▂▁▁▁▁▁▃▇██████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/train_nll_val ▃▃▃▃▃▂▂▂▂▁▁▁▇▇██████████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/train_penalty_avg █▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/train_penalty_val ▆▆▇█▇▆▇▄▆▃▃▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/weight_norm_avg █▅▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/weight_norm_val █▄▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/diagnostics/epoch_time_val 0.03791
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/diagnostics/train_time_val 0.03719
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/diagnostics/validation_time_val 0.00071
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/Loss_avg 0.69361
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/Loss_d_avg 0.69361
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/Loss_d_val 0.69361
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/Loss_val 0.69361
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/test_acc_avg 0.505
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/test_acc_d_avg 0.505
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/test_acc_d_val 0.505
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/test_acc_val 0.505
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/test_corr_d_avg 0.03936
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/test_corr_d_val 0.03936
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/test_majacc_avg 0.52
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/test_majacc_d_avg 0.52
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/test_majacc_d_val 0.52
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/test_majacc_val 0.52
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/test_minacc_avg 0.50333
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/test_minacc_d_avg 0.50333
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/test_minacc_d_val 0.50333
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/test/test_minacc_val 0.50333
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/Loss_avg 9e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/Loss_val 9e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/l1_avg 14.06996
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/l1_val 14.06711
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/train_acc_avg 0.5075
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/train_acc_val 0.572
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/train_majacc_avg 0.50771
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/train_majacc_val 0.58373
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/train_minacc_avg 0.50675
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/train_minacc_val 0.5122
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/train_nll_avg 0.69261
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/train_nll_val 0.69041
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/train_penalty_val 1e-05
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/weight_norm_avg 0.19677
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/58/logs/train/weight_norm_val 0.19662
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/3s7hy47m
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_120556-3s7hy47m/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_120821-8tamxqf2
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/8tamxqf2
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=15.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1199
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5991, 3, 32, 32) (6009, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:40,  1.61s/it] 19%|#9        | 5/26 [00:01<00:05,  3.76it/s] 35%|###4      | 9/26 [00:01<00:02,  7.29it/s] 50%|#####     | 13/26 [00:01<00:01, 11.20it/s] 65%|######5   | 17/26 [00:02<00:00, 15.18it/s] 81%|########  | 21/26 [00:02<00:00, 18.91it/s] 96%|#########6| 25/26 [00:02<00:00, 22.24it/s]100%|##########| 26/26 [00:02<00:00,  9.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 10.278 (12.699)	train_nll   0.40 (  0.58)	train_penalty   0.06 (  0.31)	weight_norm   9.88 ( 12.12)	train_acc   0.86 (  0.80)	train_minacc   0.00 (  0.07)	train_majacc   1.00 (  0.93)	train_corr   0.00 (  0.00)	l1 7.0765 (8.0351)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.76it/s] 27%|##6       | 7/26 [00:00<00:00, 34.41it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.41it/s] 50%|#####     | 13/26 [00:00<00:00, 41.68it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.52it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.52it/s] 96%|#########6| 25/26 [00:00<00:00, 47.74it/s]100%|##########| 26/26 [00:00<00:00, 39.60it/s]
Test: [   0/  26]	Loss 0.410 (0.410)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.410 (0.410)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.391 (0.429)	test_acc   0.85 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.391 (0.429)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.426 (0.420)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.426 (0.420)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.399 (0.418)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.399 (0.418)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.56it/s]100%|##########| 1/1 [00:00<00:00,  2.56it/s]
Test: [  0/  1]	Loss 1.740 (1.740)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.740 (1.740)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.740 (1.740)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.740 (1.740)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/59/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0764 (0.0764)	validation_time 0.0067 (0.0067)	train_time 0.0654 (0.0654)
record: (train_acc, test_acc) (0.8473000255227089, 0.10900000482797623)
last accs (train_acc, test_acc) (0.8473000255227089, 0.10900000482797623)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.24it/s] 19%|#9        | 5/26 [00:00<00:01, 20.33it/s] 35%|###4      | 9/26 [00:00<00:00, 25.97it/s] 50%|#####     | 13/26 [00:00<00:00, 29.15it/s] 65%|######5   | 17/26 [00:00<00:00, 30.94it/s] 81%|########  | 21/26 [00:00<00:00, 32.35it/s] 96%|#########6| 25/26 [00:00<00:00, 33.20it/s]100%|##########| 26/26 [00:00<00:00, 27.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 5.488 (7.555)	train_nll   0.41 (  0.42)	train_penalty   0.07 (  0.06)	weight_norm   5.08 (  7.14)	train_acc   0.86 (  0.85)	train_minacc   0.00 (  0.01)	train_majacc   1.00 (  1.00)	train_corr   0.00 (  0.00)	l1 6.5681 (6.8468)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.99it/s] 31%|###       | 8/26 [00:00<00:00, 41.96it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.96it/s] 50%|#####     | 13/26 [00:00<00:00, 42.23it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.09it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.09it/s] 96%|#########6| 25/26 [00:00<00:00, 46.61it/s]100%|##########| 26/26 [00:00<00:00, 40.90it/s]
Test: [   0/  26]	Loss 0.400 (0.400)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.400 (0.400)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.376 (0.422)	test_acc   0.86 (  0.84)	test_minacc   0.04 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.376 (0.422)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.04 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.420 (0.416)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.420 (0.416)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.398 (0.412)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.398 (0.412)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.25it/s]
Test: [  0/  1]	Loss 1.997 (1.997)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.997 (1.997)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.997 (1.997)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.997 (1.997)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Overall Timing[  1/  1]	epoch_time 0.0377 (0.0570)	validation_time 0.0004 (0.0036)	train_time 0.0372 (0.0513)
record: (train_acc, test_acc) (0.8473000255227089, 0.10900000482797623)
last accs (train_acc, test_acc) (0.8489000254273414, 0.10200000554323196)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.67it/s] 19%|#9        | 5/26 [00:00<00:00, 23.75it/s] 35%|###4      | 9/26 [00:00<00:00, 29.13it/s] 50%|#####     | 13/26 [00:00<00:00, 31.72it/s] 65%|######5   | 17/26 [00:00<00:00, 33.13it/s] 81%|########  | 21/26 [00:00<00:00, 33.91it/s] 96%|#########6| 25/26 [00:00<00:00, 33.90it/s]100%|##########| 26/26 [00:00<00:00, 29.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 3.315 (4.233)	train_nll   0.41 (  0.41)	train_penalty   0.07 (  0.06)	weight_norm   2.91 (  3.82)	train_acc   0.86 (  0.85)	train_minacc   0.03 (  0.02)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.6481 (6.0524)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.81it/s] 31%|###       | 8/26 [00:00<00:00, 41.51it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.51it/s] 50%|#####     | 13/26 [00:00<00:00, 43.68it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.55it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.55it/s] 96%|#########6| 25/26 [00:00<00:00, 48.84it/s]100%|##########| 26/26 [00:00<00:00, 42.46it/s]
Test: [   0/  26]	Loss 0.376 (0.376)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.376 (0.376)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.381 (0.408)	test_acc   0.85 (  0.84)	test_minacc   0.04 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.381 (0.408)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.04 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.97)
Test: [  20/  26]	Loss 0.409 (0.402)	test_acc   0.83 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   0.98 (  0.99)	Loss_d 0.409 (0.402)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.96 (  0.97)
Test: [  26/  26]	Loss 0.394 (0.397)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.394 (0.397)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.04it/s]
Test: [  0/  1]	Loss 1.782 (1.782)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.782 (1.782)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.782 (1.782)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.782 (1.782)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/59/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0351 (0.0497)	validation_time 0.0005 (0.0025)	train_time 0.0346 (0.0458)
record: (train_acc, test_acc) (0.845000028192997, 0.11000000685453415)
last accs (train_acc, test_acc) (0.845000028192997, 0.11000000685453415)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.47it/s] 19%|#9        | 5/26 [00:00<00:01, 19.62it/s] 35%|###4      | 9/26 [00:00<00:00, 25.02it/s] 50%|#####     | 13/26 [00:00<00:00, 28.56it/s] 65%|######5   | 17/26 [00:00<00:00, 31.06it/s] 81%|########  | 21/26 [00:00<00:00, 32.96it/s] 96%|#########6| 25/26 [00:00<00:00, 33.66it/s]100%|##########| 26/26 [00:00<00:00, 27.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 2.208 (2.682)	train_nll   0.39 (  0.39)	train_penalty   0.06 (  0.04)	weight_norm   1.82 (  2.29)	train_acc   0.86 (  0.85)	train_minacc   0.00 (  0.04)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.1271 (5.3019)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.46it/s] 27%|##6       | 7/26 [00:00<00:00, 32.95it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.95it/s] 50%|#####     | 13/26 [00:00<00:00, 42.78it/s] 69%|######9   | 18/26 [00:00<00:00, 44.00it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.00it/s] 92%|#########2| 24/26 [00:00<00:00, 48.17it/s]100%|##########| 26/26 [00:00<00:00, 40.07it/s]
Test: [   0/  26]	Loss 0.375 (0.375)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.375 (0.375)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.359 (0.395)	test_acc   0.86 (  0.84)	test_minacc   0.02 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.359 (0.395)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.02 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.386 (0.387)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.386 (0.387)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.98)
Test: [  26/  26]	Loss 0.355 (0.383)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.355 (0.383)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.55it/s]
Test: [  0/  1]	Loss 1.971 (1.971)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.971 (1.971)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.971 (1.971)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.971 (1.971)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Overall Timing[  3/  1]	epoch_time 0.0364 (0.0464)	validation_time 0.0004 (0.0020)	train_time 0.0360 (0.0433)
record: (train_acc, test_acc) (0.845000028192997, 0.11000000685453415)
last accs (train_acc, test_acc) (0.8488000265955925, 0.10500000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.04it/s] 19%|#9        | 5/26 [00:00<00:00, 22.13it/s] 35%|###4      | 9/26 [00:00<00:00, 27.49it/s] 50%|#####     | 13/26 [00:00<00:00, 30.49it/s] 65%|######5   | 17/26 [00:00<00:00, 32.20it/s] 81%|########  | 21/26 [00:00<00:00, 32.94it/s] 96%|#########6| 25/26 [00:00<00:00, 33.30it/s]100%|##########| 26/26 [00:00<00:00, 28.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.608 (1.857)	train_nll   0.41 (  0.38)	train_penalty   0.06 (  0.04)	weight_norm   1.20 (  1.48)	train_acc   0.86 (  0.84)	train_minacc   0.00 (  0.07)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 4.9901 (4.9837)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.85it/s] 31%|###       | 8/26 [00:00<00:00, 37.40it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.40it/s] 54%|#####3    | 14/26 [00:00<00:00, 41.75it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.85it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.85it/s]100%|##########| 26/26 [00:00<00:00, 50.54it/s]100%|##########| 26/26 [00:00<00:00, 40.50it/s]
Test: [   0/  26]	Loss 0.361 (0.361)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.361 (0.361)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.362 (0.388)	test_acc   0.86 (  0.84)	test_minacc   0.02 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.362 (0.388)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.02 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.388 (0.384)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.388 (0.384)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.386 (0.380)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.386 (0.380)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.63it/s]
Test: [  0/  1]	Loss 1.747 (1.747)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.747 (1.747)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.747 (1.747)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.747 (1.747)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Overall Timing[  4/  1]	epoch_time 0.0378 (0.0447)	validation_time 0.0003 (0.0017)	train_time 0.0375 (0.0422)
record: (train_acc, test_acc) (0.845000028192997, 0.11000000685453415)
last accs (train_acc, test_acc) (0.8487000207901001, 0.10500000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.09it/s] 19%|#9        | 5/26 [00:00<00:00, 22.88it/s] 35%|###4      | 9/26 [00:00<00:00, 27.86it/s] 50%|#####     | 13/26 [00:00<00:00, 30.75it/s] 65%|######5   | 17/26 [00:00<00:00, 32.32it/s] 81%|########  | 21/26 [00:00<00:00, 33.26it/s] 96%|#########6| 25/26 [00:00<00:00, 33.70it/s]100%|##########| 26/26 [00:00<00:00, 28.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.167 (1.350)	train_nll   0.38 (  0.37)	train_penalty   0.06 (  0.04)	weight_norm   0.79 (  0.98)	train_acc   0.86 (  0.84)	train_minacc   0.00 (  0.05)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.6780 (5.2570)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.35it/s] 27%|##6       | 7/26 [00:00<00:00, 36.07it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.07it/s] 50%|#####     | 13/26 [00:00<00:00, 41.61it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.51it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.51it/s] 96%|#########6| 25/26 [00:00<00:00, 47.03it/s]100%|##########| 26/26 [00:00<00:00, 39.65it/s]
Test: [   0/  26]	Loss 0.330 (0.330)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.330 (0.330)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.337 (0.362)	test_acc   0.85 (  0.84)	test_minacc   0.02 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.337 (0.362)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.02 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  20/  26]	Loss 0.356 (0.357)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.356 (0.357)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.95)
Test: [  26/  26]	Loss 0.362 (0.353)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.362 (0.353)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.00it/s]
Test: [  0/  1]	Loss 1.841 (1.841)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.841 (1.841)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.92)
Test: [  1/  1]	Loss 1.841 (1.841)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.841 (1.841)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.92)
Overall Timing[  5/  1]	epoch_time 0.0371 (0.0434)	validation_time 0.0004 (0.0014)	train_time 0.0367 (0.0412)
record: (train_acc, test_acc) (0.845000028192997, 0.11000000685453415)
last accs (train_acc, test_acc) (0.8487000231146813, 0.10300000756978989)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.49it/s] 15%|#5        | 4/26 [00:00<00:01, 14.20it/s] 31%|###       | 8/26 [00:00<00:00, 21.38it/s] 46%|####6     | 12/26 [00:00<00:00, 26.18it/s] 62%|######1   | 16/26 [00:00<00:00, 28.92it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.88it/s] 92%|#########2| 24/26 [00:00<00:00, 32.24it/s]100%|##########| 26/26 [00:01<00:00, 25.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.883 (0.999)	train_nll   0.36 (  0.36)	train_penalty   0.03 (  0.03)	weight_norm   0.52 (  0.64)	train_acc   0.84 (  0.85)	train_minacc   0.09 (  0.11)	train_majacc   0.96 (  0.98)	train_corr   0.00 (  0.00)	l1 6.6785 (6.0862)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.69it/s] 27%|##6       | 7/26 [00:00<00:00, 38.56it/s]                                               27%|##6       | 7/26 [00:00<00:00, 38.56it/s] 50%|#####     | 13/26 [00:00<00:00, 42.99it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.37it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.37it/s] 96%|#########6| 25/26 [00:00<00:00, 47.81it/s]100%|##########| 26/26 [00:00<00:00, 40.57it/s]
Test: [   0/  26]	Loss 0.345 (0.345)	test_acc   0.85 (  0.85)	test_minacc   0.04 (  0.04)	test_majacc   0.98 (  0.98)	Loss_d 0.345 (0.345)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.328 (0.364)	test_acc   0.86 (  0.85)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.328 (0.364)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.93)
Test: [  20/  26]	Loss 0.341 (0.355)	test_acc   0.85 (  0.85)	test_minacc   0.07 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.341 (0.355)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.07 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  26/  26]	Loss 0.360 (0.351)	test_acc   0.87 (  0.85)	test_minacc   0.09 (  0.08)	test_majacc   1.00 (  0.99)	Loss_d 0.360 (0.351)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.09 (  0.08)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.93 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.16it/s]
Test: [  0/  1]	Loss 1.776 (1.776)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.98 (  0.98)	Loss_d 1.776 (1.776)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.80 (  0.80)
Test: [  1/  1]	Loss 1.776 (1.776)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.98 (  0.98)	Loss_d 1.776 (1.776)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.80 (  0.80)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/59/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0375 (0.0426)	validation_time 0.0004 (0.0013)	train_time 0.0371 (0.0407)
record: (train_acc, test_acc) (0.8523000256419182, 0.1730000078678131)
last accs (train_acc, test_acc) (0.8523000256419182, 0.1730000078678131)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.59it/s] 19%|#9        | 5/26 [00:00<00:00, 21.43it/s] 35%|###4      | 9/26 [00:00<00:00, 27.02it/s] 50%|#####     | 13/26 [00:00<00:00, 29.73it/s] 65%|######5   | 17/26 [00:00<00:00, 31.47it/s] 81%|########  | 21/26 [00:00<00:00, 32.47it/s] 96%|#########6| 25/26 [00:00<00:00, 32.93it/s]100%|##########| 26/26 [00:00<00:00, 28.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.722 (0.785)	train_nll   0.36 (  0.35)	train_penalty   0.04 (  0.03)	weight_norm   0.36 (  0.43)	train_acc   0.84 (  0.85)	train_minacc   0.09 (  0.15)	train_majacc   0.96 (  0.97)	train_corr   0.00 (  0.00)	l1 7.8097 (7.1835)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.26it/s] 27%|##6       | 7/26 [00:00<00:00, 36.49it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.49it/s] 50%|#####     | 13/26 [00:00<00:00, 41.86it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.13it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.13it/s] 96%|#########6| 25/26 [00:00<00:00, 48.29it/s]100%|##########| 26/26 [00:00<00:00, 40.71it/s]
Test: [   0/  26]	Loss 0.319 (0.319)	test_acc   0.85 (  0.85)	test_minacc   0.19 (  0.19)	test_majacc   0.96 (  0.96)	Loss_d 0.319 (0.319)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.329 (0.355)	test_acc   0.86 (  0.85)	test_minacc   0.30 (  0.19)	test_majacc   0.95 (  0.97)	Loss_d 0.329 (0.355)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.30 (  0.19)	test_majacc_d   0.95 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  20/  26]	Loss 0.344 (0.351)	test_acc   0.86 (  0.85)	test_minacc   0.23 (  0.20)	test_majacc   0.98 (  0.97)	Loss_d 0.344 (0.351)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.23 (  0.20)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  26/  26]	Loss 0.338 (0.346)	test_acc   0.84 (  0.85)	test_minacc   0.06 (  0.20)	test_majacc   0.97 (  0.97)	Loss_d 0.338 (0.346)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.06 (  0.20)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.11it/s]
Test: [  0/  1]	Loss 1.719 (1.719)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.98 (  0.98)	Loss_d 1.719 (1.719)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.80 (  0.80)
Test: [  1/  1]	Loss 1.719 (1.719)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.98 (  0.98)	Loss_d 1.719 (1.719)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.80 (  0.80)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/59/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0366 (0.0418)	validation_time 0.0004 (0.0012)	train_time 0.0362 (0.0401)
record: (train_acc, test_acc) (0.8539000267386436, 0.18200001120567322)
last accs (train_acc, test_acc) (0.8539000267386436, 0.18200001120567322)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.26it/s] 19%|#9        | 5/26 [00:00<00:00, 22.02it/s] 35%|###4      | 9/26 [00:00<00:00, 27.56it/s] 50%|#####     | 13/26 [00:00<00:00, 30.07it/s] 65%|######5   | 17/26 [00:00<00:00, 31.90it/s] 81%|########  | 21/26 [00:00<00:00, 33.05it/s] 96%|#########6| 25/26 [00:00<00:00, 33.27it/s]100%|##########| 26/26 [00:00<00:00, 28.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.645 (0.652)	train_nll   0.39 (  0.35)	train_penalty   0.04 (  0.03)	weight_norm   0.26 (  0.30)	train_acc   0.83 (  0.85)	train_minacc   0.09 (  0.16)	train_majacc   0.95 (  0.97)	train_corr   0.00 (  0.00)	l1 9.4669 (8.5678)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.24it/s] 27%|##6       | 7/26 [00:00<00:00, 36.02it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.02it/s] 50%|#####     | 13/26 [00:00<00:00, 39.33it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.97it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.97it/s] 96%|#########6| 25/26 [00:00<00:00, 46.15it/s]100%|##########| 26/26 [00:00<00:00, 38.85it/s]
Test: [   0/  26]	Loss 0.329 (0.329)	test_acc   0.85 (  0.85)	test_minacc   0.25 (  0.25)	test_majacc   0.95 (  0.95)	Loss_d 0.329 (0.329)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.333 (0.356)	test_acc   0.85 (  0.85)	test_minacc   0.33 (  0.29)	test_majacc   0.94 (  0.96)	Loss_d 0.333 (0.356)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.33 (  0.29)	test_majacc_d   0.94 (  0.96)	test_corr_d   0.89 (  0.88)
Test: [  20/  26]	Loss 0.339 (0.351)	test_acc   0.85 (  0.85)	test_minacc   0.23 (  0.28)	test_majacc   0.96 (  0.96)	Loss_d 0.339 (0.351)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.23 (  0.28)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  26/  26]	Loss 0.348 (0.347)	test_acc   0.85 (  0.86)	test_minacc   0.11 (  0.28)	test_majacc   0.97 (  0.96)	Loss_d 0.348 (0.347)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.11 (  0.28)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.89 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.81it/s]
Test: [  0/  1]	Loss 1.559 (1.559)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.98 (  0.98)	Loss_d 1.559 (1.559)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.74 (  0.74)
Test: [  1/  1]	Loss 1.559 (1.559)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.98 (  0.98)	Loss_d 1.559 (1.559)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.74 (  0.74)
Overall Timing[  8/  1]	epoch_time 0.0372 (0.0413)	validation_time 0.0003 (0.0011)	train_time 0.0368 (0.0397)
record: (train_acc, test_acc) (0.8539000267386436, 0.18200001120567322)
last accs (train_acc, test_acc) (0.8562000225782395, 0.1730000078678131)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.89it/s] 23%|##3       | 6/26 [00:00<00:00, 26.20it/s] 38%|###8      | 10/26 [00:00<00:00, 30.32it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.58it/s] 69%|######9   | 18/26 [00:00<00:00, 33.36it/s] 85%|########4 | 22/26 [00:00<00:00, 34.03it/s]100%|##########| 26/26 [00:00<00:00, 34.60it/s]100%|##########| 26/26 [00:00<00:00, 30.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.571 (0.577)	train_nll   0.37 (  0.35)	train_penalty   0.04 (  0.03)	weight_norm   0.20 (  0.23)	train_acc   0.84 (  0.85)	train_minacc   0.06 (  0.17)	train_majacc   0.97 (  0.97)	train_corr   0.00 (  0.00)	l1 10.9287 (10.1845)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.64it/s] 27%|##6       | 7/26 [00:00<00:00, 34.33it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.33it/s] 50%|#####     | 13/26 [00:00<00:00, 41.26it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.55it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.55it/s] 96%|#########6| 25/26 [00:00<00:00, 48.21it/s]100%|##########| 26/26 [00:00<00:00, 39.74it/s]
Test: [   0/  26]	Loss 0.312 (0.312)	test_acc   0.87 (  0.87)	test_minacc   0.18 (  0.18)	test_majacc   0.99 (  0.99)	Loss_d 0.312 (0.312)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.308 (0.344)	test_acc   0.86 (  0.86)	test_minacc   0.18 (  0.17)	test_majacc   0.98 (  0.98)	Loss_d 0.308 (0.344)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.18 (  0.17)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  20/  26]	Loss 0.327 (0.341)	test_acc   0.85 (  0.86)	test_minacc   0.13 (  0.16)	test_majacc   0.98 (  0.98)	Loss_d 0.327 (0.341)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.13 (  0.16)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.322 (0.336)	test_acc   0.84 (  0.86)	test_minacc   0.06 (  0.16)	test_majacc   0.97 (  0.98)	Loss_d 0.322 (0.336)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.06 (  0.16)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.92 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.76it/s]
Test: [  0/  1]	Loss 1.733 (1.733)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 1.733 (1.733)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.83 (  0.83)
Test: [  1/  1]	Loss 1.733 (1.733)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 1.733 (1.733)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.83 (  0.83)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/59/checkpoints/model_best.pth
Overall Timing[  9/  1]	epoch_time 0.0356 (0.0407)	validation_time 0.0003 (0.0010)	train_time 0.0352 (0.0393)
record: (train_acc, test_acc) (0.8581000195145607, 0.1980000138282776)
last accs (train_acc, test_acc) (0.8581000195145607, 0.1980000138282776)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.41it/s] 19%|#9        | 5/26 [00:00<00:00, 23.29it/s] 35%|###4      | 9/26 [00:00<00:00, 28.97it/s] 50%|#####     | 13/26 [00:00<00:00, 31.59it/s] 65%|######5   | 17/26 [00:00<00:00, 33.11it/s] 81%|########  | 21/26 [00:00<00:00, 33.98it/s] 96%|#########6| 25/26 [00:00<00:00, 34.29it/s]100%|##########| 26/26 [00:00<00:00, 29.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.515 (0.522)	train_nll   0.35 (  0.34)	train_penalty   0.03 (  0.02)	weight_norm   0.17 (  0.18)	train_acc   0.84 (  0.85)	train_minacc   0.09 (  0.23)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 12.8158 (12.0185)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.81it/s] 35%|###4      | 9/26 [00:00<00:00, 40.10it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.10it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.81it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.81it/s] 81%|########  | 21/26 [00:00<00:00, 47.71it/s]100%|##########| 26/26 [00:00<00:00, 41.94it/s]
Test: [   0/  26]	Loss 0.317 (0.317)	test_acc   0.87 (  0.87)	test_minacc   0.25 (  0.25)	test_majacc   0.97 (  0.97)	Loss_d 0.317 (0.317)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.298 (0.333)	test_acc   0.86 (  0.86)	test_minacc   0.28 (  0.26)	test_majacc   0.96 (  0.97)	Loss_d 0.298 (0.333)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.28 (  0.26)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  20/  26]	Loss 0.309 (0.328)	test_acc   0.86 (  0.86)	test_minacc   0.26 (  0.26)	test_majacc   0.98 (  0.97)	Loss_d 0.309 (0.328)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  26/  26]	Loss 0.308 (0.323)	test_acc   0.85 (  0.86)	test_minacc   0.06 (  0.26)	test_majacc   0.98 (  0.97)	Loss_d 0.308 (0.323)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.06 (  0.26)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.93 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.85it/s]
Test: [  0/  1]	Loss 1.788 (1.788)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   0.98 (  0.98)	Loss_d 1.788 (1.788)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.81 (  0.81)
Test: [  1/  1]	Loss 1.788 (1.788)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   0.98 (  0.98)	Loss_d 1.788 (1.788)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.81 (  0.81)
Overall Timing[ 10/  1]	epoch_time 0.0352 (0.0402)	validation_time 0.0004 (0.0010)	train_time 0.0348 (0.0389)
record: (train_acc, test_acc) (0.8581000195145607, 0.1980000138282776)
last accs (train_acc, test_acc) (0.8626000291705131, 0.19700001180171967)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.73it/s] 19%|#9        | 5/26 [00:00<00:00, 22.84it/s] 35%|###4      | 9/26 [00:00<00:00, 28.16it/s] 50%|#####     | 13/26 [00:00<00:00, 30.19it/s] 65%|######5   | 17/26 [00:00<00:00, 31.60it/s] 81%|########  | 21/26 [00:00<00:00, 32.49it/s] 96%|#########6| 25/26 [00:00<00:00, 33.14it/s]100%|##########| 26/26 [00:00<00:00, 28.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.469 (0.482)	train_nll   0.34 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.13 (  0.15)	train_acc   0.84 (  0.85)	train_minacc   0.23 (  0.27)	train_majacc   0.93 (  0.96)	train_corr   0.00 (  0.00)	l1 14.4748 (13.6333)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.51it/s] 31%|###       | 8/26 [00:00<00:00, 40.77it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.77it/s] 50%|#####     | 13/26 [00:00<00:00, 43.26it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.76it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.76it/s] 96%|#########6| 25/26 [00:00<00:00, 48.54it/s]100%|##########| 26/26 [00:00<00:00, 41.72it/s]
Test: [   0/  26]	Loss 0.307 (0.307)	test_acc   0.85 (  0.85)	test_minacc   0.07 (  0.07)	test_majacc   0.98 (  0.98)	Loss_d 0.307 (0.307)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.320 (0.342)	test_acc   0.86 (  0.85)	test_minacc   0.16 (  0.10)	test_majacc   0.98 (  0.99)	Loss_d 0.320 (0.342)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.16 (  0.10)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.91 (  0.92)
Test: [  20/  26]	Loss 0.311 (0.332)	test_acc   0.84 (  0.85)	test_minacc   0.07 (  0.10)	test_majacc   0.98 (  0.99)	Loss_d 0.311 (0.332)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.07 (  0.10)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.91 (  0.92)
Test: [  26/  26]	Loss 0.323 (0.329)	test_acc   0.86 (  0.86)	test_minacc   0.03 (  0.10)	test_majacc   1.00 (  0.99)	Loss_d 0.323 (0.329)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.03 (  0.10)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.93 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.40it/s]
Test: [  0/  1]	Loss 1.727 (1.727)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   1.00 (  1.00)	Loss_d 1.727 (1.727)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.85 (  0.85)
Test: [  1/  1]	Loss 1.727 (1.727)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   1.00 (  1.00)	Loss_d 1.727 (1.727)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.85 (  0.85)
Overall Timing[ 11/  1]	epoch_time 0.0368 (0.0399)	validation_time 0.0004 (0.0009)	train_time 0.0364 (0.0387)
record: (train_acc, test_acc) (0.8581000195145607, 0.1980000138282776)
last accs (train_acc, test_acc) (0.8561000226736069, 0.1600000113248825)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.95it/s] 19%|#9        | 5/26 [00:00<00:00, 23.27it/s] 31%|###       | 8/26 [00:00<00:00, 25.96it/s] 46%|####6     | 12/26 [00:00<00:00, 29.27it/s] 62%|######1   | 16/26 [00:00<00:00, 29.98it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.23it/s] 92%|#########2| 24/26 [00:00<00:00, 32.34it/s]100%|##########| 26/26 [00:00<00:00, 27.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.477 (0.454)	train_nll   0.36 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.12 (  0.12)	train_acc   0.85 (  0.86)	train_minacc   0.23 (  0.26)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 16.0498 (15.3028)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.67it/s] 27%|##6       | 7/26 [00:00<00:00, 34.29it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.29it/s] 50%|#####     | 13/26 [00:00<00:00, 40.43it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.78it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.78it/s] 96%|#########6| 25/26 [00:00<00:00, 47.60it/s]100%|##########| 26/26 [00:00<00:00, 39.25it/s]
Test: [   0/  26]	Loss 0.309 (0.309)	test_acc   0.84 (  0.84)	test_minacc   0.25 (  0.25)	test_majacc   0.94 (  0.94)	Loss_d 0.309 (0.309)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.325 (0.340)	test_acc   0.83 (  0.85)	test_minacc   0.28 (  0.26)	test_majacc   0.92 (  0.96)	Loss_d 0.325 (0.340)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.28 (  0.26)	test_majacc_d   0.92 (  0.96)	test_corr_d   0.88 (  0.90)
Test: [  20/  26]	Loss 0.310 (0.335)	test_acc   0.85 (  0.85)	test_minacc   0.23 (  0.25)	test_majacc   0.97 (  0.95)	Loss_d 0.310 (0.335)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.23 (  0.25)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.91 (  0.90)
Test: [  26/  26]	Loss 0.314 (0.329)	test_acc   0.85 (  0.85)	test_minacc   0.11 (  0.26)	test_majacc   0.97 (  0.95)	Loss_d 0.314 (0.329)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.11 (  0.26)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.93 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.30it/s]
Test: [  0/  1]	Loss 1.705 (1.705)	test_acc   0.24 (  0.24)	test_minacc   0.15 (  0.15)	test_majacc   0.99 (  0.99)	Loss_d 1.705 (1.705)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.77 (  0.77)
Test: [  1/  1]	Loss 1.705 (1.705)	test_acc   0.24 (  0.24)	test_minacc   0.15 (  0.15)	test_majacc   0.99 (  0.99)	Loss_d 1.705 (1.705)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.77 (  0.77)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/59/checkpoints/model_best.pth
Overall Timing[ 12/  1]	epoch_time 0.0376 (0.0398)	validation_time 0.0003 (0.0009)	train_time 0.0373 (0.0386)
record: (train_acc, test_acc) (0.8501000264286995, 0.23500001430511475)
last accs (train_acc, test_acc) (0.8501000264286995, 0.23500001430511475)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.41it/s] 19%|#9        | 5/26 [00:00<00:00, 22.60it/s] 35%|###4      | 9/26 [00:00<00:00, 28.30it/s] 50%|#####     | 13/26 [00:00<00:00, 30.24it/s] 65%|######5   | 17/26 [00:00<00:00, 32.10it/s] 81%|########  | 21/26 [00:00<00:00, 33.25it/s] 96%|#########6| 25/26 [00:00<00:00, 33.34it/s]100%|##########| 26/26 [00:00<00:00, 28.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.422 (0.449)	train_nll   0.31 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.11 (  0.12)	train_acc   0.86 (  0.85)	train_minacc   0.14 (  0.26)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 17.1973 (16.6750)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.20it/s] 35%|###4      | 9/26 [00:00<00:00, 41.73it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.73it/s] 58%|#####7    | 15/26 [00:00<00:00, 44.71it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 44.71it/s] 81%|########  | 21/26 [00:00<00:00, 49.16it/s]100%|##########| 26/26 [00:00<00:00, 42.74it/s]
Test: [   0/  26]	Loss 0.289 (0.289)	test_acc   0.88 (  0.88)	test_minacc   0.33 (  0.33)	test_majacc   0.97 (  0.97)	Loss_d 0.289 (0.289)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.276 (0.323)	test_acc   0.88 (  0.86)	test_minacc   0.35 (  0.31)	test_majacc   0.97 (  0.96)	Loss_d 0.276 (0.323)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.35 (  0.31)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.89 (  0.88)
Test: [  20/  26]	Loss 0.296 (0.319)	test_acc   0.88 (  0.86)	test_minacc   0.41 (  0.33)	test_majacc   0.97 (  0.96)	Loss_d 0.296 (0.319)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.41 (  0.33)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  26/  26]	Loss 0.288 (0.314)	test_acc   0.88 (  0.86)	test_minacc   0.31 (  0.34)	test_majacc   0.97 (  0.96)	Loss_d 0.288 (0.314)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.31 (  0.34)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.90 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.44it/s]
Test: [  0/  1]	Loss 1.444 (1.444)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.96 (  0.96)	Loss_d 1.444 (1.444)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.65 (  0.65)
Test: [  1/  1]	Loss 1.444 (1.444)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.96 (  0.96)	Loss_d 1.444 (1.444)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.65 (  0.65)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/59/checkpoints/model_best.pth
Overall Timing[ 13/  1]	epoch_time 0.0358 (0.0395)	validation_time 0.0004 (0.0008)	train_time 0.0354 (0.0383)
record: (train_acc, test_acc) (0.864800024151802, 0.3370000123977661)
last accs (train_acc, test_acc) (0.864800024151802, 0.3370000123977661)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.23it/s] 19%|#9        | 5/26 [00:00<00:00, 22.59it/s] 35%|###4      | 9/26 [00:00<00:00, 27.71it/s] 50%|#####     | 13/26 [00:00<00:00, 30.33it/s] 65%|######5   | 17/26 [00:00<00:00, 31.24it/s] 81%|########  | 21/26 [00:00<00:00, 32.27it/s] 96%|#########6| 25/26 [00:00<00:00, 33.08it/s]100%|##########| 26/26 [00:00<00:00, 28.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.415 (0.434)	train_nll   0.31 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.10 (  0.11)	train_acc   0.85 (  0.86)	train_minacc   0.26 (  0.29)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 18.2845 (17.7592)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.17it/s] 27%|##6       | 7/26 [00:00<00:00, 36.04it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.04it/s] 50%|#####     | 13/26 [00:00<00:00, 41.61it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.66it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.66it/s] 96%|#########6| 25/26 [00:00<00:00, 48.14it/s]100%|##########| 26/26 [00:00<00:00, 40.38it/s]
Test: [   0/  26]	Loss 0.290 (0.290)	test_acc   0.85 (  0.85)	test_minacc   0.26 (  0.26)	test_majacc   0.95 (  0.95)	Loss_d 0.290 (0.290)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.268 (0.314)	test_acc   0.87 (  0.86)	test_minacc   0.39 (  0.34)	test_majacc   0.95 (  0.96)	Loss_d 0.268 (0.314)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.39 (  0.34)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.87 (  0.87)
Test: [  20/  26]	Loss 0.290 (0.308)	test_acc   0.86 (  0.86)	test_minacc   0.34 (  0.34)	test_majacc   0.96 (  0.96)	Loss_d 0.290 (0.308)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  26/  26]	Loss 0.287 (0.303)	test_acc   0.88 (  0.87)	test_minacc   0.37 (  0.35)	test_majacc   0.96 (  0.96)	Loss_d 0.287 (0.303)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.37 (  0.35)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.20it/s]
Test: [  0/  1]	Loss 1.454 (1.454)	test_acc   0.39 (  0.39)	test_minacc   0.33 (  0.33)	test_majacc   0.94 (  0.94)	Loss_d 1.454 (1.454)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.60 (  0.60)
Test: [  1/  1]	Loss 1.454 (1.454)	test_acc   0.39 (  0.39)	test_minacc   0.33 (  0.33)	test_majacc   0.94 (  0.94)	Loss_d 1.454 (1.454)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.60 (  0.60)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/59/checkpoints/model_best.pth
Overall Timing[ 14/  1]	epoch_time 0.0381 (0.0394)	validation_time 0.0003 (0.0008)	train_time 0.0377 (0.0383)
record: (train_acc, test_acc) (0.8660000240802765, 0.3920000195503235)
last accs (train_acc, test_acc) (0.8660000240802765, 0.3920000195503235)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.41it/s] 19%|#9        | 5/26 [00:00<00:01, 18.46it/s] 35%|###4      | 9/26 [00:00<00:00, 24.79it/s] 50%|#####     | 13/26 [00:00<00:00, 28.41it/s] 65%|######5   | 17/26 [00:00<00:00, 30.80it/s] 81%|########  | 21/26 [00:00<00:00, 32.23it/s] 96%|#########6| 25/26 [00:00<00:00, 33.02it/s]100%|##########| 26/26 [00:00<00:00, 26.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.001 (0.173)	train_nll   0.65 (  0.44)	train_penalty   0.00 (  0.01)	weight_norm   0.15 (  0.11)	train_acc   0.61 (  0.79)	train_minacc   0.69 (  0.48)	train_majacc   0.60 (  0.84)	train_corr   0.00 (  0.00)	l1 18.2941 (18.5934)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.71it/s] 27%|##6       | 7/26 [00:00<00:00, 34.57it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.57it/s] 50%|#####     | 13/26 [00:00<00:00, 42.85it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.87it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.87it/s] 96%|#########6| 25/26 [00:00<00:00, 48.53it/s]100%|##########| 26/26 [00:00<00:00, 40.40it/s]
Test: [   0/  26]	Loss 0.589 (0.589)	test_acc   0.71 (  0.71)	test_minacc   0.81 (  0.81)	test_majacc   0.69 (  0.69)	Loss_d 0.589 (0.589)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.81 (  0.81)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.26 (  0.26)
Test: [  10/  26]	Loss 0.612 (0.619)	test_acc   0.64 (  0.65)	test_minacc   0.72 (  0.72)	test_majacc   0.62 (  0.64)	Loss_d 0.612 (0.619)	test_acc_d   0.64 (  0.65)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.62 (  0.64)	test_corr_d   0.22 (  0.22)
Test: [  20/  26]	Loss 0.632 (0.624)	test_acc   0.64 (  0.65)	test_minacc   0.72 (  0.71)	test_majacc   0.63 (  0.64)	Loss_d 0.632 (0.624)	test_acc_d   0.64 (  0.65)	test_minacc_d   0.72 (  0.71)	test_majacc_d   0.63 (  0.64)	test_corr_d   0.19 (  0.22)
Test: [  26/  26]	Loss 0.658 (0.623)	test_acc   0.60 (  0.66)	test_minacc   0.66 (  0.70)	test_majacc   0.60 (  0.65)	Loss_d 0.658 (0.623)	test_acc_d   0.60 (  0.66)	test_minacc_d   0.66 (  0.70)	test_majacc_d   0.60 (  0.65)	test_corr_d   0.20 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.02it/s]
Test: [  0/  1]	Loss 0.633 (0.633)	test_acc   0.66 (  0.66)	test_minacc   0.65 (  0.65)	test_majacc   0.72 (  0.72)	Loss_d 0.633 (0.633)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.72 (  0.72)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.633 (0.633)	test_acc   0.66 (  0.66)	test_minacc   0.65 (  0.65)	test_majacc   0.72 (  0.72)	Loss_d 0.633 (0.633)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.72 (  0.72)	test_corr_d  -0.25 ( -0.25)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/59/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0370 (0.0392)	validation_time 0.0003 (0.0008)	train_time 0.0366 (0.0382)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.52it/s] 19%|#9        | 5/26 [00:00<00:01, 18.76it/s] 35%|###4      | 9/26 [00:00<00:00, 25.67it/s] 50%|#####     | 13/26 [00:00<00:00, 29.30it/s] 65%|######5   | 17/26 [00:00<00:00, 31.48it/s] 81%|########  | 21/26 [00:00<00:00, 32.89it/s] 96%|#########6| 25/26 [00:00<00:00, 33.67it/s]100%|##########| 26/26 [00:00<00:00, 27.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.001 (0.001)	train_nll   0.69 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.18)	train_acc   0.53 (  0.63)	train_minacc   0.63 (  0.69)	train_majacc   0.52 (  0.61)	train_corr   0.00 (  0.00)	l1 17.9774 (18.0636)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.84it/s] 31%|###       | 8/26 [00:00<00:00, 42.81it/s]                                               31%|###       | 8/26 [00:00<00:00, 42.81it/s] 50%|#####     | 13/26 [00:00<00:00, 42.82it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.51it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.51it/s] 96%|#########6| 25/26 [00:00<00:00, 48.53it/s]100%|##########| 26/26 [00:00<00:00, 42.16it/s]
Test: [   0/  26]	Loss 0.645 (0.645)	test_acc   0.63 (  0.63)	test_minacc   0.79 (  0.79)	test_majacc   0.60 (  0.60)	Loss_d 0.645 (0.645)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.655 (0.661)	test_acc   0.59 (  0.60)	test_minacc   0.70 (  0.71)	test_majacc   0.57 (  0.58)	Loss_d 0.655 (0.661)	test_acc_d   0.59 (  0.60)	test_minacc_d   0.70 (  0.71)	test_majacc_d   0.57 (  0.58)	test_corr_d   0.10 (  0.10)
Test: [  20/  26]	Loss 0.676 (0.665)	test_acc   0.56 (  0.60)	test_minacc   0.67 (  0.69)	test_majacc   0.54 (  0.58)	Loss_d 0.676 (0.665)	test_acc_d   0.56 (  0.60)	test_minacc_d   0.67 (  0.69)	test_majacc_d   0.54 (  0.58)	test_corr_d   0.05 (  0.10)
Test: [  26/  26]	Loss 0.689 (0.664)	test_acc   0.53 (  0.60)	test_minacc   0.63 (  0.69)	test_majacc   0.52 (  0.58)	Loss_d 0.689 (0.664)	test_acc_d   0.53 (  0.60)	test_minacc_d   0.63 (  0.69)	test_majacc_d   0.52 (  0.58)	test_corr_d   0.07 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.88it/s]
Test: [  0/  1]	Loss 0.639 (0.639)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.64 (  0.64)	Loss_d 0.639 (0.639)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.27 ( -0.27)
Test: [  1/  1]	Loss 0.639 (0.639)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.64 (  0.64)	Loss_d 0.639 (0.639)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.27 ( -0.27)
Overall Timing[ 16/  1]	epoch_time 0.0364 (0.0391)	validation_time 0.0003 (0.0007)	train_time 0.0361 (0.0381)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.5965000048875809, 0.6450000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.34it/s] 23%|##3       | 6/26 [00:00<00:00, 26.06it/s] 38%|###8      | 10/26 [00:00<00:00, 29.16it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.92it/s] 69%|######9   | 18/26 [00:00<00:00, 32.07it/s] 85%|########4 | 22/26 [00:00<00:00, 33.01it/s]100%|##########| 26/26 [00:00<00:00, 34.00it/s]100%|##########| 26/26 [00:00<00:00, 29.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.55 (  0.60)	train_minacc   0.60 (  0.67)	train_majacc   0.54 (  0.59)	train_corr   0.00 (  0.00)	l1 17.9201 (17.9387)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.14it/s] 31%|###       | 8/26 [00:00<00:00, 41.61it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.61it/s] 50%|#####     | 13/26 [00:00<00:00, 43.67it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.34it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.34it/s] 96%|#########6| 25/26 [00:00<00:00, 48.41it/s]100%|##########| 26/26 [00:00<00:00, 41.74it/s]
Test: [   0/  26]	Loss 0.653 (0.653)	test_acc   0.62 (  0.62)	test_minacc   0.77 (  0.77)	test_majacc   0.60 (  0.60)	Loss_d 0.653 (0.653)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.666 (0.664)	test_acc   0.58 (  0.60)	test_minacc   0.67 (  0.68)	test_majacc   0.56 (  0.59)	Loss_d 0.666 (0.664)	test_acc_d   0.58 (  0.60)	test_minacc_d   0.67 (  0.68)	test_majacc_d   0.56 (  0.59)	test_corr_d   0.12 (  0.11)
Test: [  20/  26]	Loss 0.678 (0.668)	test_acc   0.56 (  0.60)	test_minacc   0.59 (  0.66)	test_majacc   0.55 (  0.59)	Loss_d 0.678 (0.668)	test_acc_d   0.56 (  0.60)	test_minacc_d   0.59 (  0.66)	test_majacc_d   0.55 (  0.59)	test_corr_d   0.06 (  0.11)
Test: [  26/  26]	Loss 0.682 (0.667)	test_acc   0.55 (  0.60)	test_minacc   0.60 (  0.66)	test_majacc   0.54 (  0.59)	Loss_d 0.682 (0.667)	test_acc_d   0.55 (  0.60)	test_minacc_d   0.60 (  0.66)	test_majacc_d   0.54 (  0.59)	test_corr_d   0.09 (  0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.56it/s]
Test: [  0/  1]	Loss 0.652 (0.652)	test_acc   0.63 (  0.63)	test_minacc   0.63 (  0.63)	test_majacc   0.60 (  0.60)	Loss_d 0.652 (0.652)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.652 (0.652)	test_acc   0.63 (  0.63)	test_minacc   0.63 (  0.63)	test_majacc   0.60 (  0.60)	Loss_d 0.652 (0.652)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.24 ( -0.24)
Overall Timing[ 17/  1]	epoch_time 0.0368 (0.0389)	validation_time 0.0004 (0.0007)	train_time 0.0364 (0.0380)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.598700010240078, 0.6270000338554382)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.80it/s] 19%|#9        | 5/26 [00:00<00:01, 20.74it/s] 35%|###4      | 9/26 [00:00<00:00, 26.32it/s] 50%|#####     | 13/26 [00:00<00:00, 29.41it/s] 65%|######5   | 17/26 [00:00<00:00, 31.33it/s] 81%|########  | 21/26 [00:00<00:00, 32.76it/s] 96%|#########6| 25/26 [00:00<00:00, 33.00it/s]100%|##########| 26/26 [00:00<00:00, 27.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.55 (  0.59)	train_minacc   0.57 (  0.65)	train_majacc   0.54 (  0.58)	train_corr   0.00 (  0.00)	l1 17.8798 (17.9047)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.14it/s] 19%|#9        | 5/26 [00:00<00:00, 25.05it/s]                                               19%|#9        | 5/26 [00:00<00:00, 25.05it/s] 42%|####2     | 11/26 [00:00<00:00, 38.33it/s] 62%|######1   | 16/26 [00:00<00:00, 40.95it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.95it/s] 85%|########4 | 22/26 [00:00<00:00, 46.78it/s]100%|##########| 26/26 [00:00<00:00, 38.13it/s]
Test: [   0/  26]	Loss 0.661 (0.661)	test_acc   0.63 (  0.63)	test_minacc   0.77 (  0.77)	test_majacc   0.61 (  0.61)	Loss_d 0.661 (0.661)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.669 (0.668)	test_acc   0.58 (  0.60)	test_minacc   0.65 (  0.68)	test_majacc   0.57 (  0.59)	Loss_d 0.669 (0.668)	test_acc_d   0.58 (  0.60)	test_minacc_d   0.65 (  0.68)	test_majacc_d   0.57 (  0.59)	test_corr_d   0.11 (  0.11)
Test: [  20/  26]	Loss 0.680 (0.671)	test_acc   0.54 (  0.60)	test_minacc   0.57 (  0.65)	test_majacc   0.53 (  0.58)	Loss_d 0.680 (0.671)	test_acc_d   0.54 (  0.60)	test_minacc_d   0.57 (  0.65)	test_majacc_d   0.53 (  0.58)	test_corr_d   0.06 (  0.11)
Test: [  26/  26]	Loss 0.682 (0.671)	test_acc   0.55 (  0.60)	test_minacc   0.57 (  0.65)	test_majacc   0.54 (  0.59)	Loss_d 0.682 (0.671)	test_acc_d   0.55 (  0.60)	test_minacc_d   0.57 (  0.65)	test_majacc_d   0.54 (  0.59)	test_corr_d   0.08 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.72it/s]
Test: [  0/  1]	Loss 0.659 (0.659)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.60 (  0.60)	Loss_d 0.659 (0.659)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.659 (0.659)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.60 (  0.60)	Loss_d 0.659 (0.659)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 18/  1]	epoch_time 0.0364 (0.0388)	validation_time 0.0004 (0.0007)	train_time 0.0360 (0.0379)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.5955000104308128, 0.6190000176429749)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.58it/s] 19%|#9        | 5/26 [00:00<00:00, 23.24it/s] 35%|###4      | 9/26 [00:00<00:00, 27.99it/s] 50%|#####     | 13/26 [00:00<00:00, 29.93it/s] 65%|######5   | 17/26 [00:00<00:00, 31.72it/s] 81%|########  | 21/26 [00:00<00:00, 32.73it/s] 96%|#########6| 25/26 [00:00<00:00, 33.53it/s]100%|##########| 26/26 [00:00<00:00, 28.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.52 (  0.57)	train_minacc   0.57 (  0.66)	train_majacc   0.51 (  0.56)	train_corr   0.00 (  0.00)	l1 17.8572 (17.8731)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.16it/s] 31%|###       | 8/26 [00:00<00:00, 35.72it/s]                                               31%|###       | 8/26 [00:00<00:00, 35.72it/s] 54%|#####3    | 14/26 [00:00<00:00, 44.09it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.13it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.13it/s]100%|##########| 26/26 [00:00<00:00, 39.89it/s]
Test: [   0/  26]	Loss 0.675 (0.675)	test_acc   0.61 (  0.61)	test_minacc   0.75 (  0.75)	test_majacc   0.59 (  0.59)	Loss_d 0.675 (0.675)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.679 (0.678)	test_acc   0.57 (  0.58)	test_minacc   0.68 (  0.67)	test_majacc   0.55 (  0.56)	Loss_d 0.679 (0.678)	test_acc_d   0.57 (  0.58)	test_minacc_d   0.68 (  0.67)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.06 (  0.05)
Test: [  20/  26]	Loss 0.687 (0.681)	test_acc   0.53 (  0.57)	test_minacc   0.59 (  0.65)	test_majacc   0.52 (  0.56)	Loss_d 0.687 (0.681)	test_acc_d   0.53 (  0.57)	test_minacc_d   0.59 (  0.65)	test_majacc_d   0.52 (  0.56)	test_corr_d   0.01 (  0.05)
Test: [  26/  26]	Loss 0.689 (0.680)	test_acc   0.52 (  0.57)	test_minacc   0.57 (  0.65)	test_majacc   0.51 (  0.56)	Loss_d 0.689 (0.680)	test_acc_d   0.52 (  0.57)	test_minacc_d   0.57 (  0.65)	test_majacc_d   0.51 (  0.56)	test_corr_d   0.02 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.39it/s]
Test: [  0/  1]	Loss 0.665 (0.665)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.59 (  0.59)	Loss_d 0.665 (0.665)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.665 (0.665)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.59 (  0.59)	Loss_d 0.665 (0.665)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.24 ( -0.24)
Overall Timing[ 19/  1]	epoch_time 0.0373 (0.0387)	validation_time 0.0003 (0.0007)	train_time 0.0369 (0.0378)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.574900005877018, 0.6190000176429749)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.42it/s] 19%|#9        | 5/26 [00:00<00:00, 23.12it/s] 35%|###4      | 9/26 [00:00<00:00, 28.28it/s] 50%|#####     | 13/26 [00:00<00:00, 30.93it/s] 65%|######5   | 17/26 [00:00<00:00, 32.39it/s] 81%|########  | 21/26 [00:00<00:00, 33.22it/s] 96%|#########6| 25/26 [00:00<00:00, 33.85it/s]100%|##########| 26/26 [00:00<00:00, 29.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.50 (  0.55)	train_minacc   0.66 (  0.67)	train_majacc   0.47 (  0.53)	train_corr   0.00 (  0.00)	l1 17.8455 (17.8511)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.67it/s] 27%|##6       | 7/26 [00:00<00:00, 31.55it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.55it/s] 50%|#####     | 13/26 [00:00<00:00, 38.09it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.10it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.10it/s] 96%|#########6| 25/26 [00:00<00:00, 46.16it/s]100%|##########| 26/26 [00:00<00:00, 37.82it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.57 (  0.57)	test_minacc   0.74 (  0.74)	test_majacc   0.54 (  0.54)	Loss_d 0.687 (0.687)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.688 (0.688)	test_acc   0.55 (  0.55)	test_minacc   0.68 (  0.68)	test_majacc   0.52 (  0.53)	Loss_d 0.688 (0.688)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.52 (  0.53)	test_corr_d  -0.01 ( -0.02)
Test: [  20/  26]	Loss 0.692 (0.689)	test_acc   0.52 (  0.54)	test_minacc   0.64 (  0.66)	test_majacc   0.49 (  0.52)	Loss_d 0.692 (0.689)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.64 (  0.66)	test_majacc_d   0.49 (  0.52)	test_corr_d  -0.06 ( -0.02)
Test: [  26/  26]	Loss 0.694 (0.689)	test_acc   0.50 (  0.54)	test_minacc   0.66 (  0.66)	test_majacc   0.47 (  0.52)	Loss_d 0.694 (0.689)	test_acc_d   0.50 (  0.54)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.47 (  0.52)	test_corr_d  -0.06 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.38it/s]
Test: [  0/  1]	Loss 0.673 (0.673)	test_acc   0.61 (  0.61)	test_minacc   0.62 (  0.62)	test_majacc   0.57 (  0.57)	Loss_d 0.673 (0.673)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.673 (0.673)	test_acc   0.61 (  0.61)	test_minacc   0.62 (  0.62)	test_majacc   0.57 (  0.57)	Loss_d 0.673 (0.673)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 20/  1]	epoch_time 0.0361 (0.0386)	validation_time 0.0003 (0.0007)	train_time 0.0357 (0.0377)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.5438000083863735, 0.6140000224113464)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.29it/s] 19%|#9        | 5/26 [00:00<00:00, 23.78it/s] 35%|###4      | 9/26 [00:00<00:00, 28.58it/s] 50%|#####     | 13/26 [00:00<00:00, 30.50it/s] 65%|######5   | 17/26 [00:00<00:00, 31.65it/s] 81%|########  | 21/26 [00:00<00:00, 32.81it/s] 96%|#########6| 25/26 [00:00<00:00, 33.08it/s]100%|##########| 26/26 [00:00<00:00, 28.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.48 (  0.52)	train_minacc   0.60 (  0.65)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 17.8414 (17.8427)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.59it/s] 27%|##6       | 7/26 [00:00<00:00, 33.14it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.14it/s] 50%|#####     | 13/26 [00:00<00:00, 39.84it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.13it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.13it/s] 96%|#########6| 25/26 [00:00<00:00, 46.60it/s]100%|##########| 26/26 [00:00<00:00, 38.97it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.74 (  0.74)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.07)
Test: [  10/  26]	Loss 0.690 (0.691)	test_acc   0.52 (  0.53)	test_minacc   0.65 (  0.67)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.691)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.65 (  0.67)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.05)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.51 (  0.52)	test_minacc   0.64 (  0.65)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.64 (  0.65)	test_majacc_d   0.49 (  0.50)	test_corr_d  -0.08 ( -0.05)
Test: [  26/  26]	Loss 0.695 (0.692)	test_acc   0.49 (  0.52)	test_minacc   0.60 (  0.65)	test_majacc   0.47 (  0.50)	Loss_d 0.695 (0.692)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.60 (  0.65)	test_majacc_d   0.47 (  0.50)	test_corr_d  -0.10 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.79it/s]
Test: [  0/  1]	Loss 0.680 (0.680)	test_acc   0.62 (  0.62)	test_minacc   0.63 (  0.63)	test_majacc   0.53 (  0.53)	Loss_d 0.680 (0.680)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.680 (0.680)	test_acc   0.62 (  0.62)	test_minacc   0.63 (  0.63)	test_majacc   0.53 (  0.53)	Loss_d 0.680 (0.680)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 21/  1]	epoch_time 0.0377 (0.0386)	validation_time 0.0004 (0.0006)	train_time 0.0373 (0.0377)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.5228000134527683, 0.6170000433921814)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.66it/s] 19%|#9        | 5/26 [00:00<00:00, 23.57it/s] 35%|###4      | 9/26 [00:00<00:00, 28.00it/s] 50%|#####     | 13/26 [00:00<00:00, 30.49it/s] 65%|######5   | 17/26 [00:00<00:00, 31.76it/s] 81%|########  | 21/26 [00:00<00:00, 32.77it/s] 96%|#########6| 25/26 [00:00<00:00, 32.96it/s]100%|##########| 26/26 [00:00<00:00, 28.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.47 (  0.51)	train_minacc   0.57 (  0.65)	train_majacc   0.45 (  0.49)	train_corr   0.00 (  0.00)	l1 17.8414 (17.8412)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.15it/s] 27%|##6       | 7/26 [00:00<00:00, 34.52it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.52it/s] 50%|#####     | 13/26 [00:00<00:00, 41.34it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.35it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.35it/s] 96%|#########6| 25/26 [00:00<00:00, 47.62it/s]100%|##########| 26/26 [00:00<00:00, 39.82it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.70 (  0.70)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.07)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.61 (  0.64)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.61 (  0.64)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.02 ( -0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.62 (  0.60)	test_majacc   0.46 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.62 (  0.60)	test_majacc_d   0.46 (  0.50)	test_corr_d  -0.09 ( -0.04)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.52)	test_minacc   0.60 (  0.61)	test_majacc   0.45 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.52)	test_minacc_d   0.60 (  0.61)	test_majacc_d   0.45 (  0.50)	test_corr_d  -0.11 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.58it/s]
Test: [  0/  1]	Loss 0.685 (0.685)	test_acc   0.62 (  0.62)	test_minacc   0.63 (  0.63)	test_majacc   0.53 (  0.53)	Loss_d 0.685 (0.685)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.685 (0.685)	test_acc   0.62 (  0.62)	test_minacc   0.63 (  0.63)	test_majacc   0.53 (  0.53)	Loss_d 0.685 (0.685)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 22/  1]	epoch_time 0.0368 (0.0385)	validation_time 0.0003 (0.0006)	train_time 0.0364 (0.0376)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.5155000112652779, 0.6170000433921814)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.90it/s] 15%|#5        | 4/26 [00:00<00:01, 20.12it/s] 27%|##6       | 7/26 [00:00<00:00, 22.88it/s] 38%|###8      | 10/26 [00:00<00:00, 20.49it/s] 50%|#####     | 13/26 [00:00<00:00, 19.14it/s] 58%|#####7    | 15/26 [00:00<00:00, 18.66it/s] 65%|######5   | 17/26 [00:00<00:00, 18.27it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.93it/s] 81%|########  | 21/26 [00:01<00:00, 17.44it/s] 88%|########8 | 23/26 [00:01<00:00, 17.43it/s] 96%|#########6| 25/26 [00:01<00:00, 17.39it/s]100%|##########| 26/26 [00:01<00:00, 17.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 347 tensor(-0.0237, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
rho, theta 406 tensor(-0.0021, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
rho, theta 460 tensor(-0.0007, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
rho, theta 465 tensor(-0.0006, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
rho, theta 469 tensor(-0.0005, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
rho, theta 475 tensor(-0.0004, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
rho, theta 485 tensor(-0.0004, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
rho, theta 489 tensor(-0.0004, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
rho, theta 495 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
rho, theta 500 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
rho, theta 504 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
rho, theta 507 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
rho, theta 509 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
rho, theta 510 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
rho, theta 510 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
rho, theta 501 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
rho, theta 507 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
rho, theta 510 tensor(-0.0002, device='cuda:0')
Epoch: [23][  26/  26]	Loss 0.000 (0.008)	train_nll   0.69 (  0.70)	train_penalty   0.00 (  0.01)	weight_norm   0.22 (  0.20)	train_acc   0.52 (  0.54)	train_minacc   0.43 (  0.52)	train_majacc   0.53 (  0.54)	train_corr   0.00 (  0.00)	l1 15.0508 (15.4733)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.04it/s] 23%|##3       | 6/26 [00:00<00:00, 28.49it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.49it/s] 42%|####2     | 11/26 [00:00<00:00, 37.42it/s] 62%|######1   | 16/26 [00:00<00:00, 41.06it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.06it/s] 85%|########4 | 22/26 [00:00<00:00, 46.92it/s]100%|##########| 26/26 [00:00<00:00, 38.51it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.696 (0.692)	test_acc   0.45 (  0.51)	test_minacc   0.42 (  0.54)	test_majacc   0.45 (  0.51)	Loss_d 0.696 (0.692)	test_acc_d   0.45 (  0.51)	test_minacc_d   0.42 (  0.54)	test_majacc_d   0.45 (  0.51)	test_corr_d   0.06 (  0.16)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.44 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.13 (  0.16)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.43 (  0.51)	test_majacc   0.53 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.18 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.71it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 23/  1]	epoch_time 0.0461 (0.0388)	validation_time 0.0004 (0.0006)	train_time 0.0457 (0.0380)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.5064000087976456, 0.5090000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.88it/s] 12%|#1        | 3/26 [00:00<00:02, 11.21it/s] 19%|#9        | 5/26 [00:00<00:01, 13.54it/s] 27%|##6       | 7/26 [00:00<00:01, 14.96it/s] 35%|###4      | 9/26 [00:00<00:01, 15.77it/s] 42%|####2     | 11/26 [00:00<00:00, 16.32it/s] 50%|#####     | 13/26 [00:00<00:00, 16.35it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.35it/s] 65%|######5   | 17/26 [00:01<00:00, 16.56it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.55it/s] 81%|########  | 21/26 [00:01<00:00, 16.57it/s] 88%|########8 | 23/26 [00:01<00:00, 16.68it/s] 96%|#########6| 25/26 [00:01<00:00, 16.60it/s]100%|##########| 26/26 [00:01<00:00, 15.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
rho, theta 510 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
rho, theta 510 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
rho, theta 510 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
rho, theta 510 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.23 (  0.23)	train_acc   0.52 (  0.50)	train_minacc   0.43 (  0.50)	train_majacc   0.53 (  0.50)	train_corr   0.00 (  0.00)	l1 15.0301 (15.0364)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.35it/s] 35%|###4      | 9/26 [00:00<00:00, 41.36it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.36it/s] 58%|#####7    | 15/26 [00:00<00:00, 48.65it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.70it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.70it/s]100%|##########| 26/26 [00:00<00:00, 51.58it/s]100%|##########| 26/26 [00:00<00:00, 43.18it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.697 (0.692)	test_acc   0.44 (  0.51)	test_minacc   0.42 (  0.53)	test_majacc   0.44 (  0.50)	Loss_d 0.697 (0.692)	test_acc_d   0.44 (  0.51)	test_minacc_d   0.42 (  0.53)	test_majacc_d   0.44 (  0.50)	test_corr_d   0.07 (  0.16)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.43 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.43 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.15 (  0.17)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.53 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.19 (  0.18)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.88it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 24/  1]	epoch_time 0.0479 (0.0392)	validation_time 0.0003 (0.0006)	train_time 0.0475 (0.0384)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.5007000172734261, 0.503000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.07it/s] 12%|#1        | 3/26 [00:00<00:01, 11.99it/s] 19%|#9        | 5/26 [00:00<00:01, 14.16it/s] 27%|##6       | 7/26 [00:00<00:01, 15.28it/s] 35%|###4      | 9/26 [00:00<00:01, 15.96it/s] 42%|####2     | 11/26 [00:00<00:00, 16.37it/s] 50%|#####     | 13/26 [00:00<00:00, 16.62it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.73it/s] 65%|######5   | 17/26 [00:01<00:00, 16.72it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.71it/s] 81%|########  | 21/26 [00:01<00:00, 16.89it/s] 88%|########8 | 23/26 [00:01<00:00, 16.81it/s] 96%|#########6| 25/26 [00:01<00:00, 16.84it/s]100%|##########| 26/26 [00:01<00:00, 15.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.23 (  0.23)	train_acc   0.52 (  0.50)	train_minacc   0.43 (  0.50)	train_majacc   0.53 (  0.50)	train_corr   0.00 (  0.00)	l1 15.0103 (15.0211)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.48it/s] 27%|##6       | 7/26 [00:00<00:00, 35.00it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.00it/s] 50%|#####     | 13/26 [00:00<00:00, 40.92it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.44it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.44it/s] 96%|#########6| 25/26 [00:00<00:00, 47.85it/s]100%|##########| 26/26 [00:00<00:00, 40.10it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.697 (0.692)	test_acc   0.44 (  0.51)	test_minacc   0.42 (  0.53)	test_majacc   0.44 (  0.50)	Loss_d 0.697 (0.692)	test_acc_d   0.44 (  0.51)	test_minacc_d   0.42 (  0.53)	test_majacc_d   0.44 (  0.50)	test_corr_d   0.09 (  0.19)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.43 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.43 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.18 (  0.20)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.53 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.22 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.85it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 25/  1]	epoch_time 0.0498 (0.0396)	validation_time 0.0004 (0.0006)	train_time 0.0494 (0.0388)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.5007000172734261, 0.5040000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.86it/s] 12%|#1        | 3/26 [00:00<00:02,  8.52it/s] 19%|#9        | 5/26 [00:00<00:01, 11.42it/s] 27%|##6       | 7/26 [00:00<00:01, 13.24it/s] 35%|###4      | 9/26 [00:00<00:01, 14.50it/s] 42%|####2     | 11/26 [00:00<00:00, 15.29it/s] 50%|#####     | 13/26 [00:00<00:00, 15.75it/s] 58%|#####7    | 15/26 [00:01<00:00, 15.97it/s] 73%|#######3  | 19/26 [00:01<00:00, 21.50it/s] 88%|########8 | 23/26 [00:01<00:00, 25.29it/s]100%|##########| 26/26 [00:01<00:00, 17.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.23 (  0.23)	train_acc   0.52 (  0.50)	train_minacc   0.43 (  0.50)	train_majacc   0.53 (  0.50)	train_corr   0.00 (  0.00)	l1 14.9964 (15.0022)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.46it/s] 31%|###       | 8/26 [00:00<00:00, 40.90it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.90it/s] 50%|#####     | 13/26 [00:00<00:00, 42.41it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.66it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.66it/s] 96%|#########6| 25/26 [00:00<00:00, 48.07it/s]100%|##########| 26/26 [00:00<00:00, 39.75it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.696 (0.692)	test_acc   0.44 (  0.51)	test_minacc   0.42 (  0.54)	test_majacc   0.44 (  0.50)	Loss_d 0.696 (0.692)	test_acc_d   0.44 (  0.51)	test_minacc_d   0.42 (  0.54)	test_majacc_d   0.44 (  0.50)	test_corr_d   0.10 (  0.21)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.43 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.43 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.19 (  0.21)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.53 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.23 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.09it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 26/  1]	epoch_time 0.0456 (0.0398)	validation_time 0.0004 (0.0006)	train_time 0.0452 (0.0390)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.5014000172317028, 0.5049999952316284)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.63it/s] 19%|#9        | 5/26 [00:00<00:00, 23.40it/s] 35%|###4      | 9/26 [00:00<00:00, 28.51it/s] 50%|#####     | 13/26 [00:00<00:00, 30.70it/s] 65%|######5   | 17/26 [00:00<00:00, 29.48it/s] 77%|#######6  | 20/26 [00:00<00:00, 24.43it/s] 88%|########8 | 23/26 [00:00<00:00, 21.62it/s]100%|##########| 26/26 [00:01<00:00, 20.15it/s]100%|##########| 26/26 [00:01<00:00, 21.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.23 (  0.23)	train_acc   0.52 (  0.50)	train_minacc   0.43 (  0.50)	train_majacc   0.53 (  0.50)	train_corr   0.00 (  0.00)	l1 15.0067 (14.9994)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.26it/s] 31%|###       | 8/26 [00:00<00:00, 41.15it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.15it/s] 50%|#####     | 13/26 [00:00<00:00, 41.09it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.88it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.88it/s] 96%|#########6| 25/26 [00:00<00:00, 47.73it/s]100%|##########| 26/26 [00:00<00:00, 40.83it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.696 (0.692)	test_acc   0.44 (  0.51)	test_minacc   0.42 (  0.54)	test_majacc   0.45 (  0.51)	Loss_d 0.696 (0.692)	test_acc_d   0.44 (  0.51)	test_minacc_d   0.42 (  0.54)	test_majacc_d   0.45 (  0.51)	test_corr_d   0.10 (  0.21)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.43 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.43 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.19 (  0.21)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.53 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.23 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.03it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 27/  1]	epoch_time 0.0421 (0.0399)	validation_time 0.0003 (0.0006)	train_time 0.0417 (0.0391)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.5018000160455703, 0.5060000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.98it/s] 12%|#1        | 3/26 [00:00<00:02,  8.85it/s] 19%|#9        | 5/26 [00:00<00:01, 11.74it/s] 27%|##6       | 7/26 [00:00<00:01, 13.51it/s] 35%|###4      | 9/26 [00:00<00:01, 14.66it/s] 42%|####2     | 11/26 [00:00<00:00, 15.45it/s] 50%|#####     | 13/26 [00:00<00:00, 15.94it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.13it/s] 65%|######5   | 17/26 [00:01<00:00, 16.23it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.53it/s] 81%|########  | 21/26 [00:01<00:00, 16.46it/s] 88%|########8 | 23/26 [00:01<00:00, 16.58it/s] 96%|#########6| 25/26 [00:01<00:00, 16.60it/s]100%|##########| 26/26 [00:01<00:00, 14.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.23 (  0.23)	train_acc   0.52 (  0.50)	train_minacc   0.43 (  0.50)	train_majacc   0.53 (  0.50)	train_corr   0.00 (  0.00)	l1 15.0261 (15.0158)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.30it/s] 31%|###       | 8/26 [00:00<00:00, 40.88it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.88it/s] 50%|#####     | 13/26 [00:00<00:00, 41.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.49it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.49it/s] 96%|#########6| 25/26 [00:00<00:00, 47.52it/s]100%|##########| 26/26 [00:00<00:00, 40.82it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.696 (0.692)	test_acc   0.44 (  0.51)	test_minacc   0.42 (  0.54)	test_majacc   0.45 (  0.51)	Loss_d 0.696 (0.692)	test_acc_d   0.44 (  0.51)	test_minacc_d   0.42 (  0.54)	test_majacc_d   0.45 (  0.51)	test_corr_d   0.09 (  0.20)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.43 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.43 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.18 (  0.20)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.53 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.22 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.91it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 28/  1]	epoch_time 0.0508 (0.0403)	validation_time 0.0004 (0.0006)	train_time 0.0504 (0.0395)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.5022000183463097, 0.5060000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.08it/s] 12%|#1        | 3/26 [00:00<00:01, 12.28it/s] 19%|#9        | 5/26 [00:00<00:01, 14.38it/s] 27%|##6       | 7/26 [00:00<00:01, 15.43it/s] 35%|###4      | 9/26 [00:00<00:01, 16.01it/s] 42%|####2     | 11/26 [00:00<00:00, 16.20it/s] 50%|#####     | 13/26 [00:00<00:00, 16.49it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.57it/s] 65%|######5   | 17/26 [00:01<00:00, 16.74it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.78it/s] 81%|########  | 21/26 [00:01<00:00, 16.90it/s] 88%|########8 | 23/26 [00:01<00:00, 16.91it/s] 96%|#########6| 25/26 [00:01<00:00, 16.99it/s]100%|##########| 26/26 [00:01<00:00, 15.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.23 (  0.23)	train_acc   0.52 (  0.50)	train_minacc   0.43 (  0.50)	train_majacc   0.53 (  0.50)	train_corr   0.00 (  0.00)	l1 15.0449 (15.0350)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.31it/s] 27%|##6       | 7/26 [00:00<00:00, 37.63it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.63it/s] 46%|####6     | 12/26 [00:00<00:00, 42.97it/s] 69%|######9   | 18/26 [00:00<00:00, 47.39it/s]                                                69%|######9   | 18/26 [00:00<00:00, 47.39it/s] 92%|#########2| 24/26 [00:00<00:00, 49.19it/s]100%|##########| 26/26 [00:00<00:00, 41.00it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.696 (0.692)	test_acc   0.44 (  0.51)	test_minacc   0.42 (  0.54)	test_majacc   0.45 (  0.51)	Loss_d 0.696 (0.692)	test_acc_d   0.44 (  0.51)	test_minacc_d   0.42 (  0.54)	test_majacc_d   0.45 (  0.51)	test_corr_d   0.08 (  0.18)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.43 (  0.49)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.43 (  0.49)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.16 (  0.19)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.53 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.20 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.13it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 29/  1]	epoch_time 0.0492 (0.0406)	validation_time 0.0004 (0.0006)	train_time 0.0489 (0.0398)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.5024000158011913, 0.5080000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.36it/s] 12%|#1        | 3/26 [00:00<00:01, 12.45it/s] 19%|#9        | 5/26 [00:00<00:01, 14.33it/s] 27%|##6       | 7/26 [00:00<00:01, 15.38it/s] 35%|###4      | 9/26 [00:00<00:01, 15.96it/s] 42%|####2     | 11/26 [00:00<00:00, 16.49it/s] 50%|#####     | 13/26 [00:00<00:00, 16.67it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.77it/s] 65%|######5   | 17/26 [00:01<00:00, 16.86it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.03it/s] 81%|########  | 21/26 [00:01<00:00, 16.98it/s] 88%|########8 | 23/26 [00:01<00:00, 17.13it/s] 96%|#########6| 25/26 [00:01<00:00, 17.29it/s]100%|##########| 26/26 [00:01<00:00, 15.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.23 (  0.23)	train_acc   0.52 (  0.50)	train_minacc   0.43 (  0.50)	train_majacc   0.53 (  0.50)	train_corr   0.00 (  0.00)	l1 15.0628 (15.0534)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.43it/s] 31%|###       | 8/26 [00:00<00:00, 33.95it/s]                                               31%|###       | 8/26 [00:00<00:00, 33.95it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.78it/s] 77%|#######6  | 20/26 [00:00<00:00, 45.47it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 45.47it/s]100%|##########| 26/26 [00:00<00:00, 49.59it/s]100%|##########| 26/26 [00:00<00:00, 41.16it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.696 (0.692)	test_acc   0.44 (  0.51)	test_minacc   0.42 (  0.54)	test_majacc   0.45 (  0.51)	Loss_d 0.696 (0.692)	test_acc_d   0.44 (  0.51)	test_minacc_d   0.42 (  0.54)	test_majacc_d   0.45 (  0.51)	test_corr_d   0.06 (  0.17)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.14 (  0.17)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.53 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.19 (  0.18)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.70it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 30/  1]	epoch_time 0.0503 (0.0409)	validation_time 0.0004 (0.0006)	train_time 0.0499 (0.0401)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.5027000134587288, 0.5080000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.66it/s] 12%|#1        | 3/26 [00:00<00:01, 12.81it/s] 19%|#9        | 5/26 [00:00<00:01, 14.66it/s] 27%|##6       | 7/26 [00:00<00:01, 15.55it/s] 35%|###4      | 9/26 [00:00<00:01, 15.91it/s] 42%|####2     | 11/26 [00:00<00:00, 15.97it/s] 50%|#####     | 13/26 [00:00<00:00, 16.35it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.53it/s] 65%|######5   | 17/26 [00:01<00:00, 16.75it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.87it/s] 81%|########  | 21/26 [00:01<00:00, 16.65it/s] 88%|########8 | 23/26 [00:01<00:00, 16.78it/s] 96%|#########6| 25/26 [00:01<00:00, 16.94it/s]100%|##########| 26/26 [00:01<00:00, 15.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.23 (  0.23)	train_acc   0.52 (  0.50)	train_minacc   0.43 (  0.50)	train_majacc   0.53 (  0.50)	train_corr   0.00 (  0.00)	l1 15.0801 (15.0711)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.94it/s] 27%|##6       | 7/26 [00:00<00:00, 33.58it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.58it/s] 46%|####6     | 12/26 [00:00<00:00, 40.08it/s] 69%|######9   | 18/26 [00:00<00:00, 43.75it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.75it/s] 92%|#########2| 24/26 [00:00<00:00, 47.85it/s]100%|##########| 26/26 [00:00<00:00, 39.54it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.695 (0.692)	test_acc   0.44 (  0.51)	test_minacc   0.42 (  0.54)	test_majacc   0.45 (  0.51)	Loss_d 0.695 (0.692)	test_acc_d   0.44 (  0.51)	test_minacc_d   0.42 (  0.54)	test_majacc_d   0.45 (  0.51)	test_corr_d   0.05 (  0.15)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.13 (  0.15)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.53 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.17 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.06it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 31/  1]	epoch_time 0.0502 (0.0412)	validation_time 0.0004 (0.0006)	train_time 0.0499 (0.0405)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.5029000134468079, 0.5080000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.44it/s] 12%|#1        | 3/26 [00:00<00:02, 10.71it/s] 19%|#9        | 5/26 [00:00<00:01, 13.32it/s] 27%|##6       | 7/26 [00:00<00:01, 14.79it/s] 35%|###4      | 9/26 [00:00<00:01, 15.47it/s] 42%|####2     | 11/26 [00:00<00:00, 15.58it/s] 50%|#####     | 13/26 [00:00<00:00, 16.01it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.29it/s] 65%|######5   | 17/26 [00:01<00:00, 16.55it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.70it/s] 81%|########  | 21/26 [00:01<00:00, 16.87it/s] 88%|########8 | 23/26 [00:01<00:00, 16.94it/s] 96%|#########6| 25/26 [00:01<00:00, 16.93it/s]100%|##########| 26/26 [00:01<00:00, 15.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.23 (  0.23)	train_acc   0.52 (  0.50)	train_minacc   0.43 (  0.50)	train_majacc   0.53 (  0.50)	train_corr   0.00 (  0.00)	l1 15.0967 (15.0881)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.95it/s] 27%|##6       | 7/26 [00:00<00:00, 35.03it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.03it/s] 50%|#####     | 13/26 [00:00<00:00, 40.60it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.83it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.83it/s] 96%|#########6| 25/26 [00:00<00:00, 46.55it/s]100%|##########| 26/26 [00:00<00:00, 39.43it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.695 (0.692)	test_acc   0.44 (  0.51)	test_minacc   0.42 (  0.54)	test_majacc   0.45 (  0.51)	Loss_d 0.695 (0.692)	test_acc_d   0.44 (  0.51)	test_minacc_d   0.42 (  0.54)	test_majacc_d   0.45 (  0.51)	test_corr_d   0.03 (  0.13)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.11 (  0.14)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.53 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.15 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.76it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 32/  1]	epoch_time 0.0497 (0.0414)	validation_time 0.0003 (0.0006)	train_time 0.0494 (0.0407)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.5032000134289265, 0.5090000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.85it/s] 12%|#1        | 3/26 [00:00<00:01, 11.95it/s] 19%|#9        | 5/26 [00:00<00:01, 14.17it/s] 27%|##6       | 7/26 [00:00<00:01, 15.06it/s] 35%|###4      | 9/26 [00:00<00:01, 15.71it/s] 42%|####2     | 11/26 [00:00<00:00, 16.01it/s] 50%|#####     | 13/26 [00:00<00:00, 16.20it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.41it/s] 65%|######5   | 17/26 [00:01<00:00, 16.46it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.60it/s] 81%|########  | 21/26 [00:01<00:00, 16.71it/s] 88%|########8 | 23/26 [00:01<00:00, 16.73it/s] 96%|#########6| 25/26 [00:01<00:00, 16.64it/s]100%|##########| 26/26 [00:01<00:00, 15.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.23 (  0.23)	train_acc   0.52 (  0.50)	train_minacc   0.43 (  0.50)	train_majacc   0.53 (  0.50)	train_corr   0.00 (  0.00)	l1 15.1128 (15.1045)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.93it/s] 27%|##6       | 7/26 [00:00<00:00, 37.23it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.23it/s] 50%|#####     | 13/26 [00:00<00:00, 42.20it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.16it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.16it/s] 96%|#########6| 25/26 [00:00<00:00, 47.66it/s]100%|##########| 26/26 [00:00<00:00, 40.21it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.695 (0.692)	test_acc   0.44 (  0.51)	test_minacc   0.42 (  0.54)	test_majacc   0.45 (  0.51)	Loss_d 0.695 (0.692)	test_acc_d   0.44 (  0.51)	test_minacc_d   0.42 (  0.54)	test_majacc_d   0.45 (  0.51)	test_corr_d   0.02 (  0.12)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.09 (  0.12)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.53 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.14 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.38it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 33/  1]	epoch_time 0.0500 (0.0417)	validation_time 0.0003 (0.0005)	train_time 0.0497 (0.0410)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.5042000122070313, 0.5090000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.46it/s] 12%|#1        | 3/26 [00:00<00:01, 11.55it/s] 19%|#9        | 5/26 [00:00<00:01, 13.71it/s] 27%|##6       | 7/26 [00:00<00:01, 14.89it/s] 35%|###4      | 9/26 [00:00<00:01, 15.58it/s] 42%|####2     | 11/26 [00:00<00:00, 16.04it/s] 50%|#####     | 13/26 [00:00<00:00, 16.10it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.08it/s] 65%|######5   | 17/26 [00:01<00:00, 16.32it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.60it/s] 81%|########  | 21/26 [00:01<00:00, 16.51it/s] 88%|########8 | 23/26 [00:01<00:00, 16.52it/s] 96%|#########6| 25/26 [00:01<00:00, 16.65it/s]100%|##########| 26/26 [00:01<00:00, 15.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.23 (  0.23)	train_acc   0.52 (  0.50)	train_minacc   0.43 (  0.50)	train_majacc   0.53 (  0.50)	train_corr   0.00 (  0.00)	l1 15.1282 (15.1203)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.45it/s] 27%|##6       | 7/26 [00:00<00:00, 31.19it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.19it/s] 50%|#####     | 13/26 [00:00<00:00, 38.34it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.56it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.56it/s] 96%|#########6| 25/26 [00:00<00:00, 46.59it/s]100%|##########| 26/26 [00:00<00:00, 37.83it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.695 (0.692)	test_acc   0.44 (  0.51)	test_minacc   0.42 (  0.54)	test_majacc   0.45 (  0.51)	Loss_d 0.695 (0.692)	test_acc_d   0.44 (  0.51)	test_minacc_d   0.42 (  0.54)	test_majacc_d   0.45 (  0.51)	test_corr_d   0.01 (  0.10)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.08 (  0.11)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.53 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.12 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.20it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 34/  1]	epoch_time 0.0497 (0.0419)	validation_time 0.0004 (0.0005)	train_time 0.0493 (0.0412)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.5046000110208988, 0.5110000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.63it/s] 12%|#1        | 3/26 [00:00<00:01, 12.24it/s] 19%|#9        | 5/26 [00:00<00:01, 14.50it/s] 27%|##6       | 7/26 [00:00<00:01, 15.41it/s] 35%|###4      | 9/26 [00:00<00:01, 16.11it/s] 42%|####2     | 11/26 [00:00<00:00, 16.54it/s] 50%|#####     | 13/26 [00:00<00:00, 16.69it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.72it/s] 65%|######5   | 17/26 [00:01<00:00, 16.71it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.81it/s] 81%|########  | 21/26 [00:01<00:00, 16.88it/s] 88%|########8 | 23/26 [00:01<00:00, 16.93it/s] 96%|#########6| 25/26 [00:01<00:00, 17.01it/s]100%|##########| 26/26 [00:01<00:00, 15.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.23 (  0.23)	train_acc   0.52 (  0.50)	train_minacc   0.43 (  0.50)	train_majacc   0.53 (  0.50)	train_corr   0.00 (  0.00)	l1 15.1430 (15.1354)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.69it/s] 27%|##6       | 7/26 [00:00<00:00, 33.79it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.79it/s] 50%|#####     | 13/26 [00:00<00:00, 41.52it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.01it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.01it/s] 92%|#########2| 24/26 [00:00<00:00, 46.18it/s]100%|##########| 26/26 [00:00<00:00, 39.25it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.695 (0.692)	test_acc   0.45 (  0.51)	test_minacc   0.42 (  0.54)	test_majacc   0.45 (  0.51)	Loss_d 0.695 (0.692)	test_acc_d   0.45 (  0.51)	test_minacc_d   0.42 (  0.54)	test_majacc_d   0.45 (  0.51)	test_corr_d  -0.01 (  0.09)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.07 (  0.09)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.43 (  0.51)	test_majacc   0.53 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.11 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.22it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 35/  1]	epoch_time 0.0488 (0.0421)	validation_time 0.0004 (0.0005)	train_time 0.0484 (0.0414)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.505500009804964, 0.5110000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.12it/s] 12%|#1        | 3/26 [00:00<00:02, 10.20it/s] 19%|#9        | 5/26 [00:00<00:01, 12.80it/s] 27%|##6       | 7/26 [00:00<00:01, 13.84it/s] 35%|###4      | 9/26 [00:00<00:01, 14.67it/s] 42%|####2     | 11/26 [00:00<00:00, 15.28it/s] 50%|#####     | 13/26 [00:00<00:00, 15.80it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.33it/s] 65%|######5   | 17/26 [00:01<00:00, 16.63it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.94it/s] 81%|########  | 21/26 [00:01<00:00, 17.12it/s] 88%|########8 | 23/26 [00:01<00:00, 17.31it/s] 96%|#########6| 25/26 [00:01<00:00, 17.39it/s]100%|##########| 26/26 [00:01<00:00, 15.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.23 (  0.23)	train_acc   0.52 (  0.51)	train_minacc   0.43 (  0.51)	train_majacc   0.53 (  0.50)	train_corr   0.00 (  0.00)	l1 15.1572 (15.1500)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.51it/s] 27%|##6       | 7/26 [00:00<00:00, 33.66it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.66it/s] 50%|#####     | 13/26 [00:00<00:00, 39.90it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.17it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.17it/s] 96%|#########6| 25/26 [00:00<00:00, 47.13it/s]100%|##########| 26/26 [00:00<00:00, 39.30it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.53 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.695 (0.693)	test_acc   0.45 (  0.51)	test_minacc   0.44 (  0.54)	test_majacc   0.45 (  0.51)	Loss_d 0.695 (0.693)	test_acc_d   0.45 (  0.51)	test_minacc_d   0.44 (  0.54)	test_majacc_d   0.45 (  0.51)	test_corr_d  -0.02 (  0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.44 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.05 (  0.08)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.43 (  0.51)	test_majacc   0.53 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.09 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.00it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 36/  1]	epoch_time 0.0505 (0.0423)	validation_time 0.0003 (0.0005)	train_time 0.0502 (0.0417)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.5059000074565411, 0.5110000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.37it/s] 12%|#1        | 3/26 [00:00<00:01, 11.71it/s] 19%|#9        | 5/26 [00:00<00:01, 13.88it/s] 27%|##6       | 7/26 [00:00<00:01, 15.34it/s] 35%|###4      | 9/26 [00:00<00:01, 16.05it/s] 42%|####2     | 11/26 [00:00<00:00, 16.62it/s] 50%|#####     | 13/26 [00:00<00:00, 16.83it/s] 58%|#####7    | 15/26 [00:00<00:00, 17.06it/s] 65%|######5   | 17/26 [00:01<00:00, 17.17it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.32it/s] 81%|########  | 21/26 [00:01<00:00, 17.42it/s] 88%|########8 | 23/26 [00:01<00:00, 17.50it/s] 96%|#########6| 25/26 [00:01<00:00, 17.39it/s]100%|##########| 26/26 [00:01<00:00, 15.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.23 (  0.23)	train_acc   0.52 (  0.51)	train_minacc   0.43 (  0.51)	train_majacc   0.53 (  0.51)	train_corr   0.00 (  0.00)	l1 15.1709 (15.1639)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.87it/s] 27%|##6       | 7/26 [00:00<00:00, 33.00it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.00it/s] 50%|#####     | 13/26 [00:00<00:00, 39.67it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.29it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.29it/s] 96%|#########6| 25/26 [00:00<00:00, 46.92it/s]100%|##########| 26/26 [00:00<00:00, 39.10it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.695 (0.693)	test_acc   0.45 (  0.51)	test_minacc   0.44 (  0.54)	test_majacc   0.45 (  0.51)	Loss_d 0.695 (0.693)	test_acc_d   0.45 (  0.51)	test_minacc_d   0.44 (  0.54)	test_majacc_d   0.45 (  0.51)	test_corr_d  -0.03 (  0.07)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.44 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.04 (  0.07)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.43 (  0.51)	test_majacc   0.53 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.08 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.95it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 37/  1]	epoch_time 0.0487 (0.0425)	validation_time 0.0004 (0.0005)	train_time 0.0484 (0.0418)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.5062000111341477, 0.5120000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.71it/s] 12%|#1        | 3/26 [00:00<00:02, 11.47it/s] 19%|#9        | 5/26 [00:00<00:01, 13.74it/s] 27%|##6       | 7/26 [00:00<00:01, 15.04it/s] 35%|###4      | 9/26 [00:00<00:01, 15.65it/s] 42%|####2     | 11/26 [00:00<00:00, 16.13it/s] 50%|#####     | 13/26 [00:00<00:00, 16.40it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.42it/s] 65%|######5   | 17/26 [00:01<00:00, 16.63it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.70it/s] 81%|########  | 21/26 [00:01<00:00, 16.78it/s] 88%|########8 | 23/26 [00:01<00:00, 16.82it/s] 96%|#########6| 25/26 [00:01<00:00, 16.99it/s]100%|##########| 26/26 [00:01<00:00, 15.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.23 (  0.23)	train_acc   0.52 (  0.51)	train_minacc   0.43 (  0.51)	train_majacc   0.53 (  0.51)	train_corr   0.00 (  0.00)	l1 15.1839 (15.1773)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.54it/s] 27%|##6       | 7/26 [00:00<00:00, 33.27it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.27it/s] 50%|#####     | 13/26 [00:00<00:00, 40.05it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.78it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.78it/s] 96%|#########6| 25/26 [00:00<00:00, 47.57it/s]100%|##########| 26/26 [00:00<00:00, 39.18it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.695 (0.693)	test_acc   0.45 (  0.51)	test_minacc   0.44 (  0.54)	test_majacc   0.45 (  0.51)	Loss_d 0.695 (0.693)	test_acc_d   0.45 (  0.51)	test_minacc_d   0.44 (  0.54)	test_majacc_d   0.45 (  0.51)	test_corr_d  -0.04 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.44 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.03 (  0.06)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.43 (  0.51)	test_majacc   0.53 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.07 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.46it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 38/  1]	epoch_time 0.0497 (0.0427)	validation_time 0.0004 (0.0005)	train_time 0.0493 (0.0420)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.5063000132441521, 0.5120000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.79it/s] 12%|#1        | 3/26 [00:00<00:02, 11.02it/s] 19%|#9        | 5/26 [00:00<00:01, 13.49it/s] 27%|##6       | 7/26 [00:00<00:01, 14.83it/s] 35%|###4      | 9/26 [00:00<00:01, 15.69it/s] 42%|####2     | 11/26 [00:00<00:00, 16.22it/s] 50%|#####     | 13/26 [00:00<00:00, 16.61it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.77it/s] 65%|######5   | 17/26 [00:01<00:00, 17.01it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.03it/s] 81%|########  | 21/26 [00:01<00:00, 17.16it/s] 88%|########8 | 23/26 [00:01<00:00, 17.31it/s] 96%|#########6| 25/26 [00:01<00:00, 17.15it/s]100%|##########| 26/26 [00:01<00:00, 15.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.23 (  0.23)	train_acc   0.52 (  0.51)	train_minacc   0.43 (  0.51)	train_majacc   0.53 (  0.51)	train_corr   0.00 (  0.00)	l1 15.1964 (15.1901)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.82it/s] 23%|##3       | 6/26 [00:00<00:00, 30.53it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.53it/s] 46%|####6     | 12/26 [00:00<00:00, 42.00it/s] 65%|######5   | 17/26 [00:00<00:00, 44.70it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.70it/s] 88%|########8 | 23/26 [00:00<00:00, 48.05it/s]100%|##########| 26/26 [00:00<00:00, 40.16it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.695 (0.693)	test_acc   0.45 (  0.51)	test_minacc   0.44 (  0.54)	test_majacc   0.45 (  0.51)	Loss_d 0.695 (0.693)	test_acc_d   0.45 (  0.51)	test_minacc_d   0.44 (  0.54)	test_majacc_d   0.45 (  0.51)	test_corr_d  -0.05 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.44 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.02 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.43 (  0.51)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.06 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.22it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 39/  1]	epoch_time 0.0489 (0.0428)	validation_time 0.0003 (0.0005)	train_time 0.0486 (0.0422)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.507100012242794, 0.5120000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.15it/s] 12%|#1        | 3/26 [00:00<00:02, 10.10it/s] 19%|#9        | 5/26 [00:00<00:01, 12.77it/s] 27%|##6       | 7/26 [00:00<00:01, 14.44it/s] 35%|###4      | 9/26 [00:00<00:01, 15.44it/s] 42%|####2     | 11/26 [00:00<00:00, 16.08it/s] 50%|#####     | 13/26 [00:00<00:00, 16.44it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.65it/s] 65%|######5   | 17/26 [00:01<00:00, 16.63it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.62it/s] 81%|########  | 21/26 [00:01<00:00, 16.51it/s] 88%|########8 | 23/26 [00:01<00:00, 16.64it/s] 96%|#########6| 25/26 [00:01<00:00, 16.72it/s]100%|##########| 26/26 [00:01<00:00, 14.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.23 (  0.23)	train_acc   0.52 (  0.51)	train_minacc   0.43 (  0.51)	train_majacc   0.54 (  0.51)	train_corr   0.00 (  0.00)	l1 15.2083 (15.2023)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.96it/s] 19%|#9        | 5/26 [00:00<00:00, 24.94it/s]                                               19%|#9        | 5/26 [00:00<00:00, 24.94it/s] 42%|####2     | 11/26 [00:00<00:00, 39.74it/s] 62%|######1   | 16/26 [00:00<00:00, 42.32it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.32it/s] 85%|########4 | 22/26 [00:00<00:00, 48.16it/s]100%|##########| 26/26 [00:00<00:00, 39.13it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.52)	test_minacc   0.44 (  0.55)	test_majacc   0.45 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.52)	test_minacc_d   0.44 (  0.55)	test_majacc_d   0.45 (  0.51)	test_corr_d  -0.06 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.44 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.01 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.43 (  0.51)	test_majacc   0.54 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.04 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.03it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 40/  1]	epoch_time 0.0499 (0.0430)	validation_time 0.0004 (0.0005)	train_time 0.0495 (0.0424)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.508000010073185, 0.5130000114440918)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.87it/s] 12%|#1        | 3/26 [00:00<00:01, 12.04it/s] 19%|#9        | 5/26 [00:00<00:01, 14.15it/s] 27%|##6       | 7/26 [00:00<00:01, 15.38it/s] 35%|###4      | 9/26 [00:00<00:01, 15.98it/s] 42%|####2     | 11/26 [00:00<00:00, 16.32it/s] 50%|#####     | 13/26 [00:00<00:00, 16.48it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.64it/s] 65%|######5   | 17/26 [00:01<00:00, 16.78it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.90it/s] 81%|########  | 21/26 [00:01<00:00, 17.05it/s] 88%|########8 | 23/26 [00:01<00:00, 17.06it/s] 96%|#########6| 25/26 [00:01<00:00, 17.04it/s]100%|##########| 26/26 [00:01<00:00, 15.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.23 (  0.23)	train_acc   0.53 (  0.51)	train_minacc   0.43 (  0.51)	train_majacc   0.54 (  0.51)	train_corr   0.00 (  0.00)	l1 15.2195 (15.2139)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.52it/s] 19%|#9        | 5/26 [00:00<00:00, 23.22it/s]                                               19%|#9        | 5/26 [00:00<00:00, 23.22it/s] 42%|####2     | 11/26 [00:00<00:00, 37.72it/s] 62%|######1   | 16/26 [00:00<00:00, 41.20it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.20it/s] 85%|########4 | 22/26 [00:00<00:00, 46.74it/s]100%|##########| 26/26 [00:00<00:00, 37.57it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.52)	test_minacc   0.44 (  0.55)	test_majacc   0.45 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.52)	test_minacc_d   0.44 (  0.55)	test_majacc_d   0.45 (  0.51)	test_corr_d  -0.07 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.44 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.44 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.00 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.43 (  0.51)	test_majacc   0.54 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.03 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.34it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 41/  1]	epoch_time 0.0489 (0.0431)	validation_time 0.0004 (0.0005)	train_time 0.0485 (0.0425)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.5087000099122524, 0.5139999985694885)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.70it/s] 12%|#1        | 3/26 [00:00<00:01, 12.01it/s] 19%|#9        | 5/26 [00:00<00:01, 14.24it/s] 27%|##6       | 7/26 [00:00<00:01, 15.50it/s] 35%|###4      | 9/26 [00:00<00:01, 16.11it/s] 42%|####2     | 11/26 [00:00<00:00, 16.59it/s] 50%|#####     | 13/26 [00:00<00:00, 16.72it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.98it/s] 65%|######5   | 17/26 [00:01<00:00, 17.03it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.20it/s] 81%|########  | 21/26 [00:01<00:00, 17.26it/s] 88%|########8 | 23/26 [00:01<00:00, 17.35it/s] 96%|#########6| 25/26 [00:01<00:00, 17.21it/s]100%|##########| 26/26 [00:01<00:00, 15.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.23 (  0.23)	train_acc   0.53 (  0.51)	train_minacc   0.43 (  0.51)	train_majacc   0.54 (  0.51)	train_corr   0.00 (  0.00)	l1 15.2303 (15.2249)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.10it/s] 23%|##3       | 6/26 [00:00<00:00, 31.65it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.65it/s] 42%|####2     | 11/26 [00:00<00:00, 38.87it/s] 65%|######5   | 17/26 [00:00<00:00, 44.16it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.16it/s] 88%|########8 | 23/26 [00:00<00:00, 49.10it/s]100%|##########| 26/26 [00:00<00:00, 39.11it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.52)	test_minacc   0.44 (  0.55)	test_majacc   0.45 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.52)	test_minacc_d   0.44 (  0.55)	test_majacc_d   0.45 (  0.51)	test_corr_d  -0.08 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.44 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.44 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.43 (  0.51)	test_majacc   0.54 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.02 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.19it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 42/  1]	epoch_time 0.0494 (0.0433)	validation_time 0.0004 (0.0005)	train_time 0.0490 (0.0427)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.5094000098705291, 0.5120000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.41it/s] 12%|#1        | 3/26 [00:00<00:02, 10.94it/s] 19%|#9        | 5/26 [00:00<00:01, 13.30it/s] 27%|##6       | 7/26 [00:00<00:01, 14.67it/s] 35%|###4      | 9/26 [00:00<00:01, 15.40it/s] 42%|####2     | 11/26 [00:00<00:00, 15.82it/s] 50%|#####     | 13/26 [00:00<00:00, 16.20it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.17it/s] 65%|######5   | 17/26 [00:01<00:00, 16.06it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.28it/s] 81%|########  | 21/26 [00:01<00:00, 16.41it/s] 88%|########8 | 23/26 [00:01<00:00, 16.65it/s] 96%|#########6| 25/26 [00:01<00:00, 16.72it/s]100%|##########| 26/26 [00:01<00:00, 15.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.23 (  0.23)	train_acc   0.53 (  0.51)	train_minacc   0.43 (  0.51)	train_majacc   0.54 (  0.51)	train_corr   0.00 (  0.00)	l1 15.2404 (15.2354)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.05it/s] 27%|##6       | 7/26 [00:00<00:00, 31.77it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.77it/s] 50%|#####     | 13/26 [00:00<00:00, 38.80it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.61it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.61it/s] 96%|#########6| 25/26 [00:00<00:00, 46.54it/s]100%|##########| 26/26 [00:00<00:00, 38.46it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.07 ( -0.07)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.52)	test_minacc   0.44 (  0.55)	test_majacc   0.45 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.52)	test_minacc_d   0.44 (  0.55)	test_majacc_d   0.45 (  0.51)	test_corr_d  -0.09 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.44 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.44 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.02 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.43 (  0.51)	test_majacc   0.54 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.01 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.88it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 43/  1]	epoch_time 0.0501 (0.0434)	validation_time 0.0003 (0.0005)	train_time 0.0498 (0.0428)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.5109000074565411, 0.5110000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.09it/s] 12%|#1        | 3/26 [00:00<00:02, 11.25it/s] 19%|#9        | 5/26 [00:00<00:01, 13.25it/s] 27%|##6       | 7/26 [00:00<00:01, 14.53it/s] 35%|###4      | 9/26 [00:00<00:01, 15.33it/s] 42%|####2     | 11/26 [00:00<00:00, 15.84it/s] 50%|#####     | 13/26 [00:00<00:00, 16.20it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.39it/s] 65%|######5   | 17/26 [00:01<00:00, 16.51it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.48it/s] 81%|########  | 21/26 [00:01<00:00, 16.03it/s] 88%|########8 | 23/26 [00:01<00:00, 16.45it/s] 96%|#########6| 25/26 [00:01<00:00, 16.70it/s]100%|##########| 26/26 [00:01<00:00, 15.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.23 (  0.23)	train_acc   0.53 (  0.51)	train_minacc   0.43 (  0.51)	train_majacc   0.54 (  0.51)	train_corr   0.00 (  0.00)	l1 15.2500 (15.2452)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.82it/s] 35%|###4      | 9/26 [00:00<00:00, 38.58it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.58it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.11it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.11it/s] 81%|########  | 21/26 [00:00<00:00, 46.68it/s]100%|##########| 26/26 [00:00<00:00, 41.97it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.52)	test_minacc   0.44 (  0.55)	test_majacc   0.45 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.52)	test_minacc_d   0.44 (  0.55)	test_majacc_d   0.45 (  0.51)	test_corr_d  -0.09 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.44 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.44 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.02 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.43 (  0.51)	test_majacc   0.54 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.01 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.41it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 44/  1]	epoch_time 0.0501 (0.0436)	validation_time 0.0003 (0.0005)	train_time 0.0498 (0.0430)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.5124000120162964, 0.5139999985694885)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.16it/s] 12%|#1        | 3/26 [00:00<00:01, 11.53it/s] 19%|#9        | 5/26 [00:00<00:01, 13.84it/s] 27%|##6       | 7/26 [00:00<00:01, 15.08it/s] 35%|###4      | 9/26 [00:00<00:01, 15.81it/s] 42%|####2     | 11/26 [00:00<00:00, 16.19it/s] 50%|#####     | 13/26 [00:00<00:00, 16.47it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.55it/s] 65%|######5   | 17/26 [00:01<00:00, 16.66it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.76it/s] 81%|########  | 21/26 [00:01<00:00, 16.69it/s] 88%|########8 | 23/26 [00:01<00:00, 16.75it/s] 96%|#########6| 25/26 [00:01<00:00, 16.88it/s]100%|##########| 26/26 [00:01<00:00, 15.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.23 (  0.23)	train_acc   0.53 (  0.51)	train_minacc   0.43 (  0.51)	train_majacc   0.55 (  0.51)	train_corr   0.00 (  0.00)	l1 15.2590 (15.2545)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.21it/s] 27%|##6       | 7/26 [00:00<00:00, 36.20it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.20it/s] 46%|####6     | 12/26 [00:00<00:00, 40.63it/s] 69%|######9   | 18/26 [00:00<00:00, 45.75it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.75it/s] 92%|#########2| 24/26 [00:00<00:00, 47.20it/s]100%|##########| 26/26 [00:00<00:00, 40.05it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.09 ( -0.09)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.52)	test_minacc   0.44 (  0.55)	test_majacc   0.46 (  0.52)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.52)	test_minacc_d   0.44 (  0.55)	test_majacc_d   0.46 (  0.52)	test_corr_d  -0.10 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.44 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.44 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.03 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.43 (  0.51)	test_majacc   0.55 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.55 (  0.51)	test_corr_d  -0.00 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.99it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 45/  1]	epoch_time 0.0518 (0.0438)	validation_time 0.0004 (0.0005)	train_time 0.0514 (0.0432)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.5137000121474266, 0.51500004529953)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.11it/s] 12%|#1        | 3/26 [00:00<00:02, 11.28it/s] 19%|#9        | 5/26 [00:00<00:01, 13.50it/s] 27%|##6       | 7/26 [00:00<00:01, 14.83it/s] 35%|###4      | 9/26 [00:00<00:01, 15.49it/s] 42%|####2     | 11/26 [00:00<00:00, 15.67it/s] 50%|#####     | 13/26 [00:00<00:00, 15.78it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.19it/s] 65%|######5   | 17/26 [00:01<00:00, 16.47it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.70it/s] 81%|########  | 21/26 [00:01<00:00, 16.92it/s] 88%|########8 | 23/26 [00:01<00:00, 17.09it/s] 96%|#########6| 25/26 [00:01<00:00, 17.11it/s]100%|##########| 26/26 [00:01<00:00, 15.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.23 (  0.23)	train_acc   0.54 (  0.51)	train_minacc   0.43 (  0.51)	train_majacc   0.55 (  0.51)	train_corr   0.00 (  0.00)	l1 15.2674 (15.2632)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.58it/s] 35%|###4      | 9/26 [00:00<00:00, 40.91it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.91it/s] 58%|#####7    | 15/26 [00:00<00:00, 48.03it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 48.03it/s] 81%|########  | 21/26 [00:00<00:00, 47.66it/s]100%|##########| 26/26 [00:00<00:00, 42.61it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.10 ( -0.10)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.52)	test_minacc   0.46 (  0.55)	test_majacc   0.46 (  0.52)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.52)	test_minacc_d   0.46 (  0.55)	test_majacc_d   0.46 (  0.52)	test_corr_d  -0.10 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.43 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.03 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.43 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.01 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.03it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 46/  1]	epoch_time 0.0493 (0.0439)	validation_time 0.0003 (0.0005)	train_time 0.0490 (0.0433)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.5157000087499618, 0.5139999985694885)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.37it/s] 12%|#1        | 3/26 [00:00<00:01, 11.54it/s] 19%|#9        | 5/26 [00:00<00:01, 13.80it/s] 27%|##6       | 7/26 [00:00<00:01, 15.06it/s] 35%|###4      | 9/26 [00:00<00:01, 15.78it/s] 42%|####2     | 11/26 [00:00<00:00, 16.19it/s] 50%|#####     | 13/26 [00:00<00:00, 16.33it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.55it/s] 65%|######5   | 17/26 [00:01<00:00, 16.67it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.83it/s] 81%|########  | 21/26 [00:01<00:00, 16.88it/s] 88%|########8 | 23/26 [00:01<00:00, 17.04it/s] 96%|#########6| 25/26 [00:01<00:00, 17.03it/s]100%|##########| 26/26 [00:01<00:00, 15.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.23 (  0.23)	train_acc   0.54 (  0.52)	train_minacc   0.43 (  0.51)	train_majacc   0.56 (  0.52)	train_corr   0.00 (  0.00)	l1 15.2753 (15.2714)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.27it/s] 27%|##6       | 7/26 [00:00<00:00, 30.58it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.58it/s] 46%|####6     | 12/26 [00:00<00:00, 37.59it/s] 69%|######9   | 18/26 [00:00<00:00, 45.38it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.38it/s] 92%|#########2| 24/26 [00:00<00:00, 46.63it/s]100%|##########| 26/26 [00:00<00:00, 37.81it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.10 ( -0.10)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.52)	test_minacc   0.47 (  0.55)	test_majacc   0.46 (  0.52)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.52)	test_minacc_d   0.47 (  0.55)	test_majacc_d   0.46 (  0.52)	test_corr_d  -0.11 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.43 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.04 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.43 (  0.52)	test_majacc   0.56 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.43 (  0.52)	test_majacc_d   0.56 (  0.52)	test_corr_d  -0.01 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.74it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 47/  1]	epoch_time 0.0506 (0.0440)	validation_time 0.0004 (0.0005)	train_time 0.0502 (0.0434)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.5171000053882598, 0.5120000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.15it/s] 12%|#1        | 3/26 [00:00<00:01, 11.96it/s] 19%|#9        | 5/26 [00:00<00:01, 13.89it/s] 27%|##6       | 7/26 [00:00<00:01, 15.03it/s] 35%|###4      | 9/26 [00:00<00:01, 15.72it/s] 42%|####2     | 11/26 [00:00<00:00, 16.01it/s] 50%|#####     | 13/26 [00:00<00:00, 16.27it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.50it/s] 65%|######5   | 17/26 [00:01<00:00, 16.54it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.50it/s] 81%|########  | 21/26 [00:01<00:00, 16.56it/s] 88%|########8 | 23/26 [00:01<00:00, 16.76it/s] 96%|#########6| 25/26 [00:01<00:00, 16.86it/s]100%|##########| 26/26 [00:01<00:00, 15.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.23 (  0.23)	train_acc   0.54 (  0.52)	train_minacc   0.40 (  0.52)	train_majacc   0.56 (  0.52)	train_corr   0.00 (  0.00)	l1 15.2826 (15.2790)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.92it/s] 31%|###       | 8/26 [00:00<00:00, 43.33it/s]                                               31%|###       | 8/26 [00:00<00:00, 43.33it/s] 50%|#####     | 13/26 [00:00<00:00, 41.94it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.98it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.98it/s] 96%|#########6| 25/26 [00:00<00:00, 47.18it/s]100%|##########| 26/26 [00:00<00:00, 41.89it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.54 (  0.54)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.11 ( -0.11)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.53)	test_minacc   0.46 (  0.55)	test_majacc   0.46 (  0.52)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.53)	test_minacc_d   0.46 (  0.55)	test_majacc_d   0.46 (  0.52)	test_corr_d  -0.11 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.52)	test_minacc   0.43 (  0.51)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.51 (  0.52)	test_corr_d  -0.04 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.40 (  0.52)	test_majacc   0.56 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.40 (  0.52)	test_majacc_d   0.56 (  0.52)	test_corr_d  -0.02 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.51it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 48/  1]	epoch_time 0.0489 (0.0441)	validation_time 0.0004 (0.0005)	train_time 0.0485 (0.0435)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.5191000062227249, 0.5120000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.37it/s] 12%|#1        | 3/26 [00:00<00:01, 11.52it/s] 19%|#9        | 5/26 [00:00<00:01, 13.73it/s] 27%|##6       | 7/26 [00:00<00:01, 15.08it/s] 35%|###4      | 9/26 [00:00<00:01, 15.89it/s] 42%|####2     | 11/26 [00:00<00:00, 16.28it/s] 50%|#####     | 13/26 [00:00<00:00, 16.23it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.39it/s] 65%|######5   | 17/26 [00:01<00:00, 16.44it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.56it/s] 81%|########  | 21/26 [00:01<00:00, 16.61it/s] 88%|########8 | 23/26 [00:01<00:00, 16.74it/s] 96%|#########6| 25/26 [00:01<00:00, 16.77it/s]100%|##########| 26/26 [00:01<00:00, 15.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.23 (  0.23)	train_acc   0.54 (  0.52)	train_minacc   0.40 (  0.51)	train_majacc   0.56 (  0.52)	train_corr   0.00 (  0.00)	l1 15.2895 (15.2861)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.81it/s] 23%|##3       | 6/26 [00:00<00:00, 27.58it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.58it/s] 46%|####6     | 12/26 [00:00<00:00, 37.52it/s] 65%|######5   | 17/26 [00:00<00:00, 41.42it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.42it/s] 88%|########8 | 23/26 [00:00<00:00, 47.16it/s]100%|##########| 26/26 [00:00<00:00, 37.26it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.11 ( -0.11)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.53)	test_minacc   0.46 (  0.56)	test_majacc   0.47 (  0.52)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.53)	test_minacc_d   0.46 (  0.56)	test_majacc_d   0.47 (  0.52)	test_corr_d  -0.11 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.52)	test_minacc   0.43 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.04 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.40 (  0.52)	test_majacc   0.56 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.40 (  0.52)	test_majacc_d   0.56 (  0.52)	test_corr_d  -0.02 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.98it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 49/  1]	epoch_time 0.0488 (0.0442)	validation_time 0.0005 (0.0005)	train_time 0.0484 (0.0436)
record: (train_acc, test_acc) (0.6552000195980072, 0.659000039100647)
last accs (train_acc, test_acc) (0.5219000130295753, 0.51500004529953)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.159 MB of 0.159 MB uploadedwandb: \ 0.159 MB of 0.159 MB uploadedwandb: | 0.159 MB of 0.159 MB uploadedwandb: / 0.181 MB of 0.190 MB uploaded (0.003 MB deduped)wandb: - 0.514 MB of 0.514 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/diagnostics/epoch_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▃▃▃▂▄▄▄▃▄▃▄▃▃▄▃▃▄▄▃▄▃
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/diagnostics/train_time_val █▂▁▁▁▂▁▁▁▁▂▁▁▁▁▁▁▂▁▄▄▃▃▅▄▄▄▄▄▅▄▄▄▄▄▄▅▄▅▄
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/Loss_avg ▇█▇█▇▇▇▆▇▇▇▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/Loss_d_avg ▇█▇█▇▇▇▆▇▇▇▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/Loss_d_val ▇█▇█▇▇▇▆▇▇▇▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/Loss_val ▇█▇█▇▇▇▆▇▇▇▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/test_acc_avg ▁▁▁▁▁▂▂▂▂▂▃▄███▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/test_acc_d_avg ▁▁▁▁▁▂▂▂▂▂▃▄███▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/test_acc_d_val ▁▁▁▁▁▂▂▂▂▂▃▄███▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/test_acc_val ▁▁▁▁▁▂▂▂▂▂▃▄███▇▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/test_corr_d_avg █████▇▇▇▇▇▇▆▁▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/test_corr_d_val █████▇▇▇▇▇▇▆▁▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/test_majacc_avg ███████████▇▄▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/test_majacc_d_avg ███████████▇▄▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/test_majacc_d_val ███████████▇▄▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/test_majacc_val ███████████▇▄▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/test_minacc_avg ▁▁▁▁▁▂▂▂▂▂▃▄███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▇▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/test_minacc_d_avg ▁▁▁▁▁▂▂▂▂▂▃▄███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▇▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/test_minacc_d_val ▁▁▁▁▁▂▂▂▂▂▃▄███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▇▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/test_minacc_val ▁▁▁▁▁▂▂▂▂▂▃▄███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▇▆▆▆
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/Loss_avg █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/Loss_val █▅▃▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/l1_avg ▂▂▁▁▁▁▂▃▅▅▆▇███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/l1_val ▂▂▁▁▁▂▂▃▅▆▇▇███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/train_acc_avg ▇███████████▇▃▃▃▂▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/train_acc_val ███████▇████▄▂▂▂▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/train_majacc_avg ▇████████▇█▇▆▃▂▂▂▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/train_majacc_val ███████▇▇▇▇█▃▂▂▂▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/train_minacc_avg ▂▁▁▁▁▂▂▃▃▄▄▄▆██████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/train_minacc_val ▁▁▁▁▁▂▂▂▂▃▃▂█▇▇▇█▇▇▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/train_nll_avg ▆▃▂▂▂▁▁▁▁▁▁▁▃▇▇▇████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/train_nll_val ▃▃▃▂▂▂▂▂▂▁▂▁▇███████████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/train_penalty_avg █▂▂▂▂▂▂▂▂▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/train_penalty_val ▆▇█▇▆▄▄▅▄▃▃▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/weight_norm_avg █▅▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/weight_norm_val █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/diagnostics/epoch_time_val 0.04883
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/diagnostics/train_time_val 0.04836
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/diagnostics/validation_time_val 0.00045
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/Loss_avg 0.6926
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/Loss_d_avg 0.6926
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/Loss_d_val 0.6926
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/Loss_val 0.6926
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/test_acc_avg 0.515
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/test_acc_d_avg 0.515
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/test_acc_d_val 0.515
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/test_acc_val 0.515
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/test_corr_d_avg -0.08857
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/test_corr_d_val -0.08857
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/test_majacc_avg 0.54
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/test_majacc_d_avg 0.54
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/test_majacc_d_val 0.54
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/test_majacc_val 0.54
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/test_minacc_avg 0.51222
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/test_minacc_d_avg 0.51222
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/test_minacc_d_val 0.51222
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/test/test_minacc_val 0.51222
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/Loss_avg 9e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/Loss_val 9e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/l1_avg 15.28609
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/l1_val 15.28945
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/train_acc_avg 0.5194
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/train_acc_val 0.536
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/train_majacc_avg 0.51998
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/train_majacc_val 0.55814
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/train_minacc_avg 0.51412
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/train_minacc_val 0.4
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/train_nll_avg 0.69306
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/train_nll_val 0.69293
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/weight_norm_avg 0.22621
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/59/logs/train/weight_norm_val 0.22605
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/8tamxqf2
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_120821-8tamxqf2/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_121113-x1qcmxpd
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/x1qcmxpd
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=15.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1157
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6017, 3, 32, 32) (5983, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:41,  1.67s/it] 19%|#9        | 5/26 [00:01<00:05,  3.64it/s] 35%|###4      | 9/26 [00:01<00:02,  7.14it/s] 50%|#####     | 13/26 [00:02<00:01, 11.03it/s] 65%|######5   | 17/26 [00:02<00:00, 15.08it/s] 81%|########  | 21/26 [00:02<00:00, 19.07it/s] 96%|#########6| 25/26 [00:02<00:00, 22.70it/s]100%|##########| 26/26 [00:02<00:00,  9.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 9.378 (12.228)	train_nll   0.37 (  0.58)	train_penalty   0.04 (  0.28)	weight_norm   9.01 ( 11.65)	train_acc   0.86 (  0.78)	train_minacc   0.00 (  0.12)	train_majacc   0.99 (  0.90)	train_corr   0.00 (  0.00)	l1 10.0406 (8.6928)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.43it/s] 35%|###4      | 9/26 [00:00<00:00, 40.33it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.33it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.30it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.30it/s] 81%|########  | 21/26 [00:00<00:00, 48.76it/s]100%|##########| 26/26 [00:00<00:00, 42.90it/s]
Test: [   0/  26]	Loss 0.424 (0.424)	test_acc   0.86 (  0.86)	test_minacc   0.00 (  0.00)	test_majacc   0.98 (  0.98)	Loss_d 0.424 (0.424)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.399 (0.443)	test_acc   0.86 (  0.85)	test_minacc   0.02 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.399 (0.443)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.02 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.96)
Test: [  20/  26]	Loss 0.430 (0.449)	test_acc   0.86 (  0.84)	test_minacc   0.00 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.430 (0.449)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.00 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.384 (0.447)	test_acc   0.86 (  0.84)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.384 (0.447)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.57it/s]100%|##########| 1/1 [00:00<00:00,  2.57it/s]
Test: [  0/  1]	Loss 1.550 (1.550)	test_acc   0.13 (  0.13)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 1.550 (1.550)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.550 (1.550)	test_acc   0.13 (  0.13)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 1.550 (1.550)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/60/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0752 (0.0752)	validation_time 0.0066 (0.0066)	train_time 0.0659 (0.0659)
record: (train_acc, test_acc) (0.8422000237107277, 0.12800000607967377)
last accs (train_acc, test_acc) (0.8422000237107277, 0.12800000607967377)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.82it/s] 19%|#9        | 5/26 [00:00<00:01, 20.14it/s] 35%|###4      | 9/26 [00:00<00:00, 25.68it/s] 50%|#####     | 13/26 [00:00<00:00, 28.54it/s] 65%|######5   | 17/26 [00:00<00:00, 30.77it/s] 81%|########  | 21/26 [00:00<00:00, 31.98it/s] 96%|#########6| 25/26 [00:00<00:00, 32.33it/s]100%|##########| 26/26 [00:00<00:00, 27.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 4.818 (6.758)	train_nll   0.35 (  0.41)	train_penalty   0.03 (  0.05)	weight_norm   4.46 (  6.34)	train_acc   0.86 (  0.84)	train_minacc   0.00 (  0.03)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 10.0448 (10.2399)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 36.44it/s] 38%|###8      | 10/26 [00:00<00:00, 48.31it/s]                                                38%|###8      | 10/26 [00:00<00:00, 48.31it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.44it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.44it/s] 81%|########  | 21/26 [00:00<00:00, 50.51it/s]100%|##########| 26/26 [00:00<00:00, 44.34it/s]
Test: [   0/  26]	Loss 0.357 (0.357)	test_acc   0.87 (  0.87)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.357 (0.357)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.363 (0.393)	test_acc   0.87 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.363 (0.393)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.352 (0.394)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.352 (0.394)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.325 (0.393)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.325 (0.393)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.12it/s]
Test: [  0/  1]	Loss 1.797 (1.797)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.797 (1.797)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.92)
Test: [  1/  1]	Loss 1.797 (1.797)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.797 (1.797)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.92)
Overall Timing[  1/  1]	epoch_time 0.0374 (0.0563)	validation_time 0.0004 (0.0035)	train_time 0.0370 (0.0515)
record: (train_acc, test_acc) (0.8422000237107277, 0.12800000607967377)
last accs (train_acc, test_acc) (0.8462000201940536, 0.12000000476837158)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.39it/s] 19%|#9        | 5/26 [00:00<00:01, 20.32it/s] 35%|###4      | 9/26 [00:00<00:00, 26.25it/s] 46%|####6     | 12/26 [00:00<00:00, 27.23it/s] 62%|######1   | 16/26 [00:00<00:00, 29.20it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.88it/s] 92%|#########2| 24/26 [00:00<00:00, 31.69it/s]100%|##########| 26/26 [00:00<00:00, 26.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 2.940 (3.787)	train_nll   0.32 (  0.39)	train_penalty   0.02 (  0.05)	weight_norm   2.62 (  3.39)	train_acc   0.88 (  0.84)	train_minacc   0.09 (  0.06)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 8.8750 (9.4729)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.00it/s] 27%|##6       | 7/26 [00:00<00:00, 34.22it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.22it/s] 50%|#####     | 13/26 [00:00<00:00, 40.23it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.91it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.91it/s] 96%|#########6| 25/26 [00:00<00:00, 47.60it/s]100%|##########| 26/26 [00:00<00:00, 39.93it/s]
Test: [   0/  26]	Loss 0.342 (0.342)	test_acc   0.87 (  0.87)	test_minacc   0.10 (  0.10)	test_majacc   0.98 (  0.98)	Loss_d 0.342 (0.342)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.360 (0.374)	test_acc   0.86 (  0.86)	test_minacc   0.06 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.360 (0.374)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.06 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.336 (0.380)	test_acc   0.86 (  0.85)	test_minacc   0.02 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.336 (0.380)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.02 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.94)
Test: [  26/  26]	Loss 0.294 (0.377)	test_acc   0.87 (  0.85)	test_minacc   0.06 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.294 (0.377)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.06 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.33it/s]
Test: [  0/  1]	Loss 1.839 (1.839)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   1.00 (  1.00)	Loss_d 1.839 (1.839)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.84 (  0.84)
Test: [  1/  1]	Loss 1.839 (1.839)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   1.00 (  1.00)	Loss_d 1.839 (1.839)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.84 (  0.84)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/60/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0382 (0.0503)	validation_time 0.0004 (0.0024)	train_time 0.0378 (0.0469)
record: (train_acc, test_acc) (0.8500000283122062, 0.18900001049041748)
last accs (train_acc, test_acc) (0.8500000283122062, 0.18900001049041748)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.62it/s] 19%|#9        | 5/26 [00:00<00:01, 20.64it/s] 35%|###4      | 9/26 [00:00<00:00, 26.58it/s] 50%|#####     | 13/26 [00:00<00:00, 29.22it/s] 65%|######5   | 17/26 [00:00<00:00, 31.26it/s] 81%|########  | 21/26 [00:00<00:00, 32.04it/s] 96%|#########6| 25/26 [00:00<00:00, 32.85it/s]100%|##########| 26/26 [00:00<00:00, 27.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 1.982 (2.460)	train_nll   0.32 (  0.38)	train_penalty   0.02 (  0.04)	weight_norm   1.66 (  2.08)	train_acc   0.86 (  0.85)	train_minacc   0.19 (  0.12)	train_majacc   0.96 (  0.97)	train_corr   0.00 (  0.00)	l1 7.6512 (8.2058)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.25it/s] 31%|###       | 8/26 [00:00<00:00, 37.89it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.89it/s] 50%|#####     | 13/26 [00:00<00:00, 42.78it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.81it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.81it/s] 92%|#########2| 24/26 [00:00<00:00, 48.89it/s]100%|##########| 26/26 [00:00<00:00, 41.61it/s]
Test: [   0/  26]	Loss 0.323 (0.323)	test_acc   0.87 (  0.87)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.323 (0.323)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.338 (0.361)	test_acc   0.86 (  0.85)	test_minacc   0.06 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.338 (0.361)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.06 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  20/  26]	Loss 0.319 (0.367)	test_acc   0.87 (  0.85)	test_minacc   0.04 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.319 (0.367)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.04 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  26/  26]	Loss 0.294 (0.366)	test_acc   0.87 (  0.85)	test_minacc   0.03 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.294 (0.366)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.03 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.37it/s]
Test: [  0/  1]	Loss 1.913 (1.913)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   1.00 (  1.00)	Loss_d 1.913 (1.913)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.85 (  0.85)
Test: [  1/  1]	Loss 1.913 (1.913)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   1.00 (  1.00)	Loss_d 1.913 (1.913)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.85 (  0.85)
Overall Timing[  3/  1]	epoch_time 0.0353 (0.0465)	validation_time 0.0003 (0.0019)	train_time 0.0349 (0.0439)
record: (train_acc, test_acc) (0.8500000283122062, 0.18900001049041748)
last accs (train_acc, test_acc) (0.8509000294208526, 0.17900000512599945)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.82it/s] 19%|#9        | 5/26 [00:00<00:00, 22.01it/s] 35%|###4      | 9/26 [00:00<00:00, 27.30it/s] 50%|#####     | 13/26 [00:00<00:00, 29.80it/s] 65%|######5   | 17/26 [00:00<00:00, 31.52it/s] 81%|########  | 21/26 [00:00<00:00, 32.52it/s] 96%|#########6| 25/26 [00:00<00:00, 32.95it/s]100%|##########| 26/26 [00:00<00:00, 28.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.406 (1.707)	train_nll   0.32 (  0.36)	train_penalty   0.01 (  0.03)	weight_norm   1.08 (  1.34)	train_acc   0.85 (  0.85)	train_minacc   0.38 (  0.13)	train_majacc   0.92 (  0.98)	train_corr   0.00 (  0.00)	l1 7.1190 (7.3774)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 21.26it/s] 35%|###4      | 9/26 [00:00<00:00, 39.97it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.97it/s] 58%|#####7    | 15/26 [00:00<00:00, 43.20it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 43.20it/s] 81%|########  | 21/26 [00:00<00:00, 47.61it/s]100%|##########| 26/26 [00:00<00:00, 41.36it/s]
Test: [   0/  26]	Loss 0.313 (0.313)	test_acc   0.87 (  0.87)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.313 (0.313)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.336 (0.342)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.336 (0.342)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.331 (0.353)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.331 (0.353)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.276 (0.350)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.276 (0.350)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.45it/s]
Test: [  0/  1]	Loss 1.988 (1.988)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.988 (1.988)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.988 (1.988)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.988 (1.988)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Overall Timing[  4/  1]	epoch_time 0.0368 (0.0446)	validation_time 0.0004 (0.0016)	train_time 0.0364 (0.0424)
record: (train_acc, test_acc) (0.8500000283122062, 0.18900001049041748)
last accs (train_acc, test_acc) (0.8488000214099884, 0.11700000613927841)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.11it/s] 19%|#9        | 5/26 [00:00<00:00, 22.47it/s] 35%|###4      | 9/26 [00:00<00:00, 27.82it/s] 50%|#####     | 13/26 [00:00<00:00, 30.61it/s] 65%|######5   | 17/26 [00:00<00:00, 32.40it/s] 81%|########  | 21/26 [00:00<00:00, 33.60it/s] 96%|#########6| 25/26 [00:00<00:00, 33.53it/s]100%|##########| 26/26 [00:00<00:00, 28.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.029 (1.244)	train_nll   0.31 (  0.36)	train_penalty   0.02 (  0.03)	weight_norm   0.72 (  0.89)	train_acc   0.89 (  0.85)	train_minacc   0.22 (  0.13)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 6.8962 (6.8806)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.40it/s] 35%|###4      | 9/26 [00:00<00:00, 41.07it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.07it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.07it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.07it/s] 81%|########  | 21/26 [00:00<00:00, 48.09it/s]100%|##########| 26/26 [00:00<00:00, 42.73it/s]
Test: [   0/  26]	Loss 0.318 (0.318)	test_acc   0.86 (  0.86)	test_minacc   0.14 (  0.14)	test_majacc   0.96 (  0.96)	Loss_d 0.318 (0.318)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.324 (0.342)	test_acc   0.86 (  0.85)	test_minacc   0.15 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 0.324 (0.342)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.15 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  20/  26]	Loss 0.304 (0.350)	test_acc   0.87 (  0.85)	test_minacc   0.23 (  0.18)	test_majacc   0.97 (  0.97)	Loss_d 0.304 (0.350)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.23 (  0.18)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  26/  26]	Loss 0.292 (0.348)	test_acc   0.88 (  0.85)	test_minacc   0.19 (  0.18)	test_majacc   0.98 (  0.97)	Loss_d 0.292 (0.348)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.19 (  0.18)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.92 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.07it/s]
Test: [  0/  1]	Loss 1.713 (1.713)	test_acc   0.29 (  0.29)	test_minacc   0.21 (  0.21)	test_majacc   0.99 (  0.99)	Loss_d 1.713 (1.713)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.69 (  0.69)
Test: [  1/  1]	Loss 1.713 (1.713)	test_acc   0.29 (  0.29)	test_minacc   0.21 (  0.21)	test_majacc   0.99 (  0.99)	Loss_d 1.713 (1.713)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.69 (  0.69)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/60/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0359 (0.0431)	validation_time 0.0003 (0.0014)	train_time 0.0355 (0.0413)
record: (train_acc, test_acc) (0.8514000286459923, 0.2850000262260437)
last accs (train_acc, test_acc) (0.8514000286459923, 0.2850000262260437)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.19it/s] 19%|#9        | 5/26 [00:00<00:01, 17.68it/s] 31%|###       | 8/26 [00:00<00:00, 21.99it/s] 46%|####6     | 12/26 [00:00<00:00, 26.21it/s] 62%|######1   | 16/26 [00:00<00:00, 28.47it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.44it/s] 92%|#########2| 24/26 [00:00<00:00, 32.00it/s]100%|##########| 26/26 [00:01<00:00, 25.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.782 (0.942)	train_nll   0.30 (  0.35)	train_penalty   0.01 (  0.03)	weight_norm   0.48 (  0.59)	train_acc   0.88 (  0.85)	train_minacc   0.47 (  0.17)	train_majacc   0.94 (  0.97)	train_corr   0.00 (  0.00)	l1 7.5643 (7.1880)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.84it/s] 23%|##3       | 6/26 [00:00<00:00, 32.27it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.27it/s] 46%|####6     | 12/26 [00:00<00:00, 38.58it/s] 69%|######9   | 18/26 [00:00<00:00, 45.95it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.95it/s] 92%|#########2| 24/26 [00:00<00:00, 46.66it/s]100%|##########| 26/26 [00:00<00:00, 39.70it/s]
Test: [   0/  26]	Loss 0.284 (0.284)	test_acc   0.87 (  0.87)	test_minacc   0.06 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.284 (0.284)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.320 (0.334)	test_acc   0.86 (  0.86)	test_minacc   0.02 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.320 (0.334)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.02 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.311 (0.343)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.311 (0.343)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  26/  26]	Loss 0.269 (0.341)	test_acc   0.88 (  0.85)	test_minacc   0.09 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.269 (0.341)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.09 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.53it/s]
Test: [  0/  1]	Loss 1.863 (1.863)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   1.00 (  1.00)	Loss_d 1.863 (1.863)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.85 (  0.85)
Test: [  1/  1]	Loss 1.863 (1.863)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   1.00 (  1.00)	Loss_d 1.863 (1.863)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.85 (  0.85)
Overall Timing[  6/  1]	epoch_time 0.0379 (0.0424)	validation_time 0.0004 (0.0013)	train_time 0.0374 (0.0407)
record: (train_acc, test_acc) (0.8514000286459923, 0.2850000262260437)
last accs (train_acc, test_acc) (0.8516000249385833, 0.1770000010728836)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.64it/s] 19%|#9        | 5/26 [00:00<00:01, 20.47it/s] 35%|###4      | 9/26 [00:00<00:00, 25.67it/s] 50%|#####     | 13/26 [00:00<00:00, 28.27it/s] 65%|######5   | 17/26 [00:00<00:00, 30.20it/s] 81%|########  | 21/26 [00:00<00:00, 31.66it/s] 96%|#########6| 25/26 [00:00<00:00, 32.46it/s]100%|##########| 26/26 [00:00<00:00, 27.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.639 (0.752)	train_nll   0.30 (  0.35)	train_penalty   0.01 (  0.03)	weight_norm   0.34 (  0.40)	train_acc   0.88 (  0.85)	train_minacc   0.34 (  0.16)	train_majacc   0.95 (  0.97)	train_corr   0.00 (  0.00)	l1 8.7474 (8.0645)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.50it/s] 27%|##6       | 7/26 [00:00<00:00, 27.94it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.94it/s] 50%|#####     | 13/26 [00:00<00:00, 35.42it/s] 73%|#######3  | 19/26 [00:00<00:00, 42.97it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 42.97it/s] 96%|#########6| 25/26 [00:00<00:00, 44.95it/s]100%|##########| 26/26 [00:00<00:00, 35.79it/s]
Test: [   0/  26]	Loss 0.297 (0.297)	test_acc   0.88 (  0.88)	test_minacc   0.12 (  0.12)	test_majacc   0.99 (  0.99)	Loss_d 0.297 (0.297)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.320 (0.344)	test_acc   0.86 (  0.86)	test_minacc   0.11 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.320 (0.344)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.11 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  20/  26]	Loss 0.318 (0.346)	test_acc   0.86 (  0.85)	test_minacc   0.06 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.318 (0.346)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.06 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  26/  26]	Loss 0.259 (0.343)	test_acc   0.88 (  0.85)	test_minacc   0.19 (  0.13)	test_majacc   0.99 (  0.98)	Loss_d 0.259 (0.343)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.19 (  0.13)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.94 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.55it/s]
Test: [  0/  1]	Loss 1.884 (1.884)	test_acc   0.23 (  0.23)	test_minacc   0.14 (  0.14)	test_majacc   1.00 (  1.00)	Loss_d 1.884 (1.884)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.14 (  0.14)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.81 (  0.81)
Test: [  1/  1]	Loss 1.884 (1.884)	test_acc   0.23 (  0.23)	test_minacc   0.14 (  0.14)	test_majacc   1.00 (  1.00)	Loss_d 1.884 (1.884)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.14 (  0.14)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.81 (  0.81)
Overall Timing[  7/  1]	epoch_time 0.0371 (0.0417)	validation_time 0.0004 (0.0011)	train_time 0.0367 (0.0402)
record: (train_acc, test_acc) (0.8514000286459923, 0.2850000262260437)
last accs (train_acc, test_acc) (0.8548000228404998, 0.22800001502037048)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.17it/s] 12%|#1        | 3/26 [00:00<00:01, 13.57it/s] 27%|##6       | 7/26 [00:00<00:00, 22.11it/s] 42%|####2     | 11/26 [00:00<00:00, 26.69it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.32it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.54it/s] 88%|########8 | 23/26 [00:00<00:00, 31.59it/s]100%|##########| 26/26 [00:00<00:00, 26.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.519 (0.631)	train_nll   0.28 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.24 (  0.29)	train_acc   0.89 (  0.86)	train_minacc   0.31 (  0.19)	train_majacc   0.97 (  0.97)	train_corr   0.00 (  0.00)	l1 10.3762 (9.7049)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.05it/s] 31%|###       | 8/26 [00:00<00:00, 38.48it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.48it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.43it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.58it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.58it/s]100%|##########| 26/26 [00:00<00:00, 51.00it/s]100%|##########| 26/26 [00:00<00:00, 41.83it/s]
Test: [   0/  26]	Loss 0.300 (0.300)	test_acc   0.85 (  0.85)	test_minacc   0.20 (  0.20)	test_majacc   0.94 (  0.94)	Loss_d 0.300 (0.300)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.350 (0.329)	test_acc   0.83 (  0.85)	test_minacc   0.23 (  0.27)	test_majacc   0.92 (  0.95)	Loss_d 0.350 (0.329)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.23 (  0.27)	test_majacc_d   0.92 (  0.95)	test_corr_d   0.87 (  0.88)
Test: [  20/  26]	Loss 0.310 (0.337)	test_acc   0.85 (  0.85)	test_minacc   0.23 (  0.27)	test_majacc   0.94 (  0.95)	Loss_d 0.310 (0.337)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.23 (  0.27)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.89 (  0.88)
Test: [  26/  26]	Loss 0.280 (0.333)	test_acc   0.88 (  0.85)	test_minacc   0.34 (  0.28)	test_majacc   0.96 (  0.95)	Loss_d 0.280 (0.333)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.34 (  0.28)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.88 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.34it/s]
Test: [  0/  1]	Loss 1.541 (1.541)	test_acc   0.35 (  0.35)	test_minacc   0.28 (  0.28)	test_majacc   0.96 (  0.96)	Loss_d 1.541 (1.541)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.59 (  0.59)
Test: [  1/  1]	Loss 1.541 (1.541)	test_acc   0.35 (  0.35)	test_minacc   0.28 (  0.28)	test_majacc   0.96 (  0.96)	Loss_d 1.541 (1.541)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.59 (  0.59)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/60/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0379 (0.0413)	validation_time 0.0004 (0.0011)	train_time 0.0375 (0.0399)
record: (train_acc, test_acc) (0.8484000208973884, 0.3500000238418579)
last accs (train_acc, test_acc) (0.8484000208973884, 0.3500000238418579)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.77it/s] 19%|#9        | 5/26 [00:00<00:01, 20.59it/s] 35%|###4      | 9/26 [00:00<00:00, 26.95it/s] 50%|#####     | 13/26 [00:00<00:00, 30.13it/s] 65%|######5   | 17/26 [00:00<00:00, 32.21it/s] 81%|########  | 21/26 [00:00<00:00, 33.18it/s] 96%|#########6| 25/26 [00:00<00:00, 33.13it/s]100%|##########| 26/26 [00:00<00:00, 28.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.458 (0.544)	train_nll   0.28 (  0.34)	train_penalty   0.01 (  0.02)	weight_norm   0.18 (  0.21)	train_acc   0.90 (  0.85)	train_minacc   0.47 (  0.23)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 12.1143 (11.4283)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.70it/s] 35%|###4      | 9/26 [00:00<00:00, 39.18it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.18it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.23it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.23it/s] 81%|########  | 21/26 [00:00<00:00, 47.12it/s]100%|##########| 26/26 [00:00<00:00, 42.26it/s]
Test: [   0/  26]	Loss 0.284 (0.284)	test_acc   0.88 (  0.88)	test_minacc   0.26 (  0.26)	test_majacc   0.98 (  0.98)	Loss_d 0.284 (0.284)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.309 (0.318)	test_acc   0.87 (  0.86)	test_minacc   0.26 (  0.24)	test_majacc   0.97 (  0.97)	Loss_d 0.309 (0.318)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.26 (  0.24)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  20/  26]	Loss 0.299 (0.327)	test_acc   0.86 (  0.86)	test_minacc   0.15 (  0.23)	test_majacc   0.97 (  0.97)	Loss_d 0.299 (0.327)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.15 (  0.23)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.92 (  0.90)
Test: [  26/  26]	Loss 0.259 (0.325)	test_acc   0.88 (  0.86)	test_minacc   0.28 (  0.23)	test_majacc   0.97 (  0.97)	Loss_d 0.259 (0.325)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.28 (  0.23)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.31it/s]
Test: [  0/  1]	Loss 1.694 (1.694)	test_acc   0.28 (  0.28)	test_minacc   0.20 (  0.20)	test_majacc   1.00 (  1.00)	Loss_d 1.694 (1.694)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.20 (  0.20)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.72 (  0.72)
Test: [  1/  1]	Loss 1.694 (1.694)	test_acc   0.28 (  0.28)	test_minacc   0.20 (  0.20)	test_majacc   1.00 (  1.00)	Loss_d 1.694 (1.694)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.20 (  0.20)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.72 (  0.72)
Overall Timing[  9/  1]	epoch_time 0.0372 (0.0409)	validation_time 0.0003 (0.0010)	train_time 0.0369 (0.0396)
record: (train_acc, test_acc) (0.8484000208973884, 0.3500000238418579)
last accs (train_acc, test_acc) (0.8584000272750855, 0.281000018119812)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.09it/s] 23%|##3       | 6/26 [00:00<00:00, 25.56it/s] 38%|###8      | 10/26 [00:00<00:00, 29.77it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.87it/s] 69%|######9   | 18/26 [00:00<00:00, 33.13it/s] 85%|########4 | 22/26 [00:00<00:00, 34.05it/s]100%|##########| 26/26 [00:00<00:00, 34.85it/s]100%|##########| 26/26 [00:00<00:00, 29.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.425 (0.496)	train_nll   0.28 (  0.34)	train_penalty   0.01 (  0.02)	weight_norm   0.15 (  0.16)	train_acc   0.88 (  0.86)	train_minacc   0.44 (  0.23)	train_majacc   0.95 (  0.97)	train_corr   0.00 (  0.00)	l1 13.7906 (13.1983)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.03it/s] 35%|###4      | 9/26 [00:00<00:00, 32.28it/s]                                               35%|###4      | 9/26 [00:00<00:00, 32.28it/s] 58%|#####7    | 15/26 [00:00<00:00, 41.32it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 41.32it/s] 81%|########  | 21/26 [00:00<00:00, 43.19it/s]100%|##########| 26/26 [00:00<00:00, 36.50it/s]
Test: [   0/  26]	Loss 0.286 (0.286)	test_acc   0.87 (  0.87)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.286 (0.286)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.309 (0.325)	test_acc   0.86 (  0.86)	test_minacc   0.13 (  0.18)	test_majacc   0.98 (  0.98)	Loss_d 0.309 (0.325)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.13 (  0.18)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  20/  26]	Loss 0.302 (0.332)	test_acc   0.86 (  0.86)	test_minacc   0.15 (  0.19)	test_majacc   0.97 (  0.97)	Loss_d 0.302 (0.332)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.15 (  0.19)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.90)
Test: [  26/  26]	Loss 0.261 (0.330)	test_acc   0.88 (  0.86)	test_minacc   0.28 (  0.18)	test_majacc   0.97 (  0.97)	Loss_d 0.261 (0.330)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.28 (  0.18)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.51it/s]
Test: [  0/  1]	Loss 1.667 (1.667)	test_acc   0.27 (  0.27)	test_minacc   0.19 (  0.19)	test_majacc   0.99 (  0.99)	Loss_d 1.667 (1.667)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.69 (  0.69)
Test: [  1/  1]	Loss 1.667 (1.667)	test_acc   0.27 (  0.27)	test_minacc   0.19 (  0.19)	test_majacc   0.99 (  0.99)	Loss_d 1.667 (1.667)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.69 (  0.69)
Overall Timing[ 10/  1]	epoch_time 0.0385 (0.0407)	validation_time 0.0005 (0.0009)	train_time 0.0380 (0.0395)
record: (train_acc, test_acc) (0.8484000208973884, 0.3500000238418579)
last accs (train_acc, test_acc) (0.8556000227928162, 0.26900002360343933)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.51it/s] 19%|#9        | 5/26 [00:00<00:00, 23.86it/s] 35%|###4      | 9/26 [00:00<00:00, 28.52it/s] 50%|#####     | 13/26 [00:00<00:00, 30.70it/s] 65%|######5   | 17/26 [00:00<00:00, 32.43it/s] 81%|########  | 21/26 [00:00<00:00, 33.37it/s] 96%|#########6| 25/26 [00:00<00:00, 33.23it/s]100%|##########| 26/26 [00:00<00:00, 29.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.393 (0.466)	train_nll   0.27 (  0.33)	train_penalty   0.01 (  0.02)	weight_norm   0.12 (  0.13)	train_acc   0.88 (  0.85)	train_minacc   0.66 (  0.22)	train_majacc   0.91 (  0.96)	train_corr   0.00 (  0.00)	l1 15.4315 (14.6817)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.16it/s] 31%|###       | 8/26 [00:00<00:00, 35.25it/s]                                               31%|###       | 8/26 [00:00<00:00, 35.25it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.17it/s] 77%|#######6  | 20/26 [00:00<00:00, 45.81it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 45.81it/s]100%|##########| 26/26 [00:00<00:00, 49.20it/s]100%|##########| 26/26 [00:00<00:00, 40.62it/s]
Test: [   0/  26]	Loss 0.294 (0.294)	test_acc   0.87 (  0.87)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.294 (0.294)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.335 (0.337)	test_acc   0.85 (  0.86)	test_minacc   0.06 (  0.12)	test_majacc   0.98 (  0.99)	Loss_d 0.335 (0.337)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.06 (  0.12)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  20/  26]	Loss 0.334 (0.350)	test_acc   0.87 (  0.86)	test_minacc   0.12 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 0.334 (0.350)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.12 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  26/  26]	Loss 0.256 (0.346)	test_acc   0.87 (  0.86)	test_minacc   0.09 (  0.12)	test_majacc   0.98 (  0.99)	Loss_d 0.256 (0.346)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.09 (  0.12)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.94 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.40it/s]
Test: [  0/  1]	Loss 1.867 (1.867)	test_acc   0.17 (  0.17)	test_minacc   0.07 (  0.07)	test_majacc   1.00 (  1.00)	Loss_d 1.867 (1.867)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.07 (  0.07)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.86 (  0.86)
Test: [  1/  1]	Loss 1.867 (1.867)	test_acc   0.17 (  0.17)	test_minacc   0.07 (  0.07)	test_majacc   1.00 (  1.00)	Loss_d 1.867 (1.867)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.07 (  0.07)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.86 (  0.86)
Overall Timing[ 11/  1]	epoch_time 0.0355 (0.0402)	validation_time 0.0004 (0.0009)	train_time 0.0351 (0.0391)
record: (train_acc, test_acc) (0.8484000208973884, 0.3500000238418579)
last accs (train_acc, test_acc) (0.8568000218868256, 0.16700001060962677)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.64it/s] 19%|#9        | 5/26 [00:00<00:00, 21.49it/s] 35%|###4      | 9/26 [00:00<00:00, 26.72it/s] 50%|#####     | 13/26 [00:00<00:00, 29.63it/s] 65%|######5   | 17/26 [00:00<00:00, 31.34it/s] 81%|########  | 21/26 [00:00<00:00, 32.45it/s] 96%|#########6| 25/26 [00:00<00:00, 33.41it/s]100%|##########| 26/26 [00:00<00:00, 28.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.371 (0.451)	train_nll   0.26 (  0.34)	train_penalty   0.01 (  0.02)	weight_norm   0.11 (  0.12)	train_acc   0.90 (  0.86)	train_minacc   0.66 (  0.25)	train_majacc   0.94 (  0.96)	train_corr   0.00 (  0.00)	l1 17.0975 (16.4010)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.76it/s] 35%|###4      | 9/26 [00:00<00:00, 40.31it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.31it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.86it/s] 77%|#######6  | 20/26 [00:00<00:00, 49.10it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 49.10it/s]100%|##########| 26/26 [00:00<00:00, 51.22it/s]100%|##########| 26/26 [00:00<00:00, 42.70it/s]
Test: [   0/  26]	Loss 0.268 (0.268)	test_acc   0.89 (  0.89)	test_minacc   0.42 (  0.42)	test_majacc   0.96 (  0.96)	Loss_d 0.268 (0.268)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.299 (0.303)	test_acc   0.87 (  0.87)	test_minacc   0.40 (  0.35)	test_majacc   0.94 (  0.96)	Loss_d 0.299 (0.303)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.40 (  0.35)	test_majacc_d   0.94 (  0.96)	test_corr_d   0.87 (  0.87)
Test: [  20/  26]	Loss 0.294 (0.312)	test_acc   0.86 (  0.86)	test_minacc   0.31 (  0.35)	test_majacc   0.95 (  0.95)	Loss_d 0.294 (0.312)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.31 (  0.35)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.88 (  0.87)
Test: [  26/  26]	Loss 0.240 (0.309)	test_acc   0.91 (  0.87)	test_minacc   0.53 (  0.36)	test_majacc   0.96 (  0.96)	Loss_d 0.240 (0.309)	test_acc_d   0.91 (  0.87)	test_minacc_d   0.53 (  0.36)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.68it/s]
Test: [  0/  1]	Loss 1.462 (1.462)	test_acc   0.38 (  0.38)	test_minacc   0.31 (  0.31)	test_majacc   0.98 (  0.98)	Loss_d 1.462 (1.462)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.53 (  0.53)
Test: [  1/  1]	Loss 1.462 (1.462)	test_acc   0.38 (  0.38)	test_minacc   0.31 (  0.31)	test_majacc   0.98 (  0.98)	Loss_d 1.462 (1.462)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.53 (  0.53)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/60/checkpoints/model_best.pth
Overall Timing[ 12/  1]	epoch_time 0.0358 (0.0399)	validation_time 0.0004 (0.0008)	train_time 0.0354 (0.0388)
record: (train_acc, test_acc) (0.8664000242352485, 0.3760000169277191)
last accs (train_acc, test_acc) (0.8664000242352485, 0.3760000169277191)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.62it/s] 19%|#9        | 5/26 [00:00<00:01, 14.63it/s] 35%|###4      | 9/26 [00:00<00:00, 21.49it/s] 50%|#####     | 13/26 [00:00<00:00, 25.90it/s] 65%|######5   | 17/26 [00:00<00:00, 28.97it/s] 81%|########  | 21/26 [00:00<00:00, 31.00it/s] 96%|#########6| 25/26 [00:00<00:00, 31.99it/s]100%|##########| 26/26 [00:01<00:00, 24.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.358 (0.437)	train_nll   0.26 (  0.33)	train_penalty   0.01 (  0.02)	weight_norm   0.10 (  0.11)	train_acc   0.90 (  0.86)	train_minacc   0.66 (  0.29)	train_majacc   0.94 (  0.96)	train_corr   0.00 (  0.00)	l1 18.5252 (18.0056)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.93it/s] 27%|##6       | 7/26 [00:00<00:00, 37.74it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.74it/s] 46%|####6     | 12/26 [00:00<00:00, 41.62it/s] 69%|######9   | 18/26 [00:00<00:00, 45.72it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.72it/s] 92%|#########2| 24/26 [00:00<00:00, 48.48it/s]100%|##########| 26/26 [00:00<00:00, 41.05it/s]
Test: [   0/  26]	Loss 0.266 (0.266)	test_acc   0.88 (  0.88)	test_minacc   0.56 (  0.56)	test_majacc   0.93 (  0.93)	Loss_d 0.266 (0.266)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.83 (  0.83)
Test: [  10/  26]	Loss 0.322 (0.301)	test_acc   0.84 (  0.86)	test_minacc   0.36 (  0.44)	test_majacc   0.92 (  0.94)	Loss_d 0.322 (0.301)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.36 (  0.44)	test_majacc_d   0.92 (  0.94)	test_corr_d   0.84 (  0.84)
Test: [  20/  26]	Loss 0.291 (0.312)	test_acc   0.86 (  0.86)	test_minacc   0.38 (  0.42)	test_majacc   0.93 (  0.94)	Loss_d 0.291 (0.312)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.38 (  0.42)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.85 (  0.84)
Test: [  26/  26]	Loss 0.218 (0.307)	test_acc   0.92 (  0.86)	test_minacc   0.72 (  0.43)	test_majacc   0.94 (  0.94)	Loss_d 0.218 (0.307)	test_acc_d   0.92 (  0.86)	test_minacc_d   0.72 (  0.43)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.84 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.28it/s]
Test: [  0/  1]	Loss 1.337 (1.337)	test_acc   0.46 (  0.46)	test_minacc   0.40 (  0.40)	test_majacc   0.96 (  0.96)	Loss_d 1.337 (1.337)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.43 (  0.43)
Test: [  1/  1]	Loss 1.337 (1.337)	test_acc   0.46 (  0.46)	test_minacc   0.40 (  0.40)	test_majacc   0.96 (  0.96)	Loss_d 1.337 (1.337)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.43 (  0.43)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/60/checkpoints/model_best.pth
Overall Timing[ 13/  1]	epoch_time 0.0356 (0.0396)	validation_time 0.0003 (0.0008)	train_time 0.0353 (0.0386)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.82it/s] 19%|#9        | 5/26 [00:00<00:00, 23.01it/s] 35%|###4      | 9/26 [00:00<00:00, 28.48it/s] 50%|#####     | 13/26 [00:00<00:00, 31.03it/s] 65%|######5   | 17/26 [00:00<00:00, 32.31it/s] 81%|########  | 21/26 [00:00<00:00, 32.99it/s] 96%|#########6| 25/26 [00:00<00:00, 33.56it/s]100%|##########| 26/26 [00:00<00:00, 29.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.354 (0.413)	train_nll   0.26 (  0.32)	train_penalty   0.01 (  0.02)	weight_norm   0.09 (  0.09)	train_acc   0.90 (  0.86)	train_minacc   0.47 (  0.33)	train_majacc   0.96 (  0.95)	train_corr   0.00 (  0.00)	l1 19.8822 (19.3183)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.30it/s] 15%|#5        | 4/26 [00:00<00:01, 17.79it/s] 38%|###8      | 10/26 [00:00<00:00, 34.12it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.12it/s] 62%|######1   | 16/26 [00:00<00:00, 40.50it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.50it/s] 85%|########4 | 22/26 [00:00<00:00, 46.65it/s]100%|##########| 26/26 [00:00<00:00, 37.00it/s]
Test: [   0/  26]	Loss 0.257 (0.257)	test_acc   0.89 (  0.89)	test_minacc   0.26 (  0.26)	test_majacc   0.98 (  0.98)	Loss_d 0.257 (0.257)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.285 (0.294)	test_acc   0.88 (  0.87)	test_minacc   0.23 (  0.23)	test_majacc   0.99 (  0.98)	Loss_d 0.285 (0.294)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.93 (  0.92)
Test: [  20/  26]	Loss 0.290 (0.306)	test_acc   0.86 (  0.87)	test_minacc   0.13 (  0.22)	test_majacc   0.97 (  0.98)	Loss_d 0.290 (0.306)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.13 (  0.22)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.224 (0.303)	test_acc   0.90 (  0.87)	test_minacc   0.34 (  0.22)	test_majacc   0.98 (  0.98)	Loss_d 0.224 (0.303)	test_acc_d   0.90 (  0.87)	test_minacc_d   0.34 (  0.22)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.51it/s]
Test: [  0/  1]	Loss 1.711 (1.711)	test_acc   0.24 (  0.24)	test_minacc   0.15 (  0.15)	test_majacc   0.99 (  0.99)	Loss_d 1.711 (1.711)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.76 (  0.76)
Test: [  1/  1]	Loss 1.711 (1.711)	test_acc   0.24 (  0.24)	test_minacc   0.15 (  0.15)	test_majacc   0.99 (  0.99)	Loss_d 1.711 (1.711)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.76 (  0.76)
Overall Timing[ 14/  1]	epoch_time 0.0365 (0.0394)	validation_time 0.0003 (0.0008)	train_time 0.0361 (0.0384)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.8664000214934349, 0.2370000183582306)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.83it/s] 19%|#9        | 5/26 [00:00<00:00, 21.69it/s] 35%|###4      | 9/26 [00:00<00:00, 26.96it/s] 50%|#####     | 13/26 [00:00<00:00, 29.64it/s] 65%|######5   | 17/26 [00:00<00:00, 31.39it/s] 81%|########  | 21/26 [00:00<00:00, 32.25it/s] 96%|#########6| 25/26 [00:00<00:00, 33.16it/s]100%|##########| 26/26 [00:00<00:00, 27.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.001 (0.158)	train_nll   0.69 (  0.46)	train_penalty   0.00 (  0.01)	weight_norm   0.12 (  0.10)	train_acc   0.52 (  0.76)	train_minacc   0.81 (  0.51)	train_majacc   0.48 (  0.80)	train_corr   0.00 (  0.00)	l1 20.1204 (20.2435)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.71it/s] 27%|##6       | 7/26 [00:00<00:00, 30.87it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.87it/s] 50%|#####     | 13/26 [00:00<00:00, 38.83it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.56it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.56it/s] 96%|#########6| 25/26 [00:00<00:00, 46.95it/s]100%|##########| 26/26 [00:00<00:00, 38.23it/s]
Test: [   0/  26]	Loss 0.673 (0.673)	test_acc   0.50 (  0.50)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.673 (0.673)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.660 (0.676)	test_acc   0.55 (  0.51)	test_minacc   0.53 (  0.50)	test_majacc   0.56 (  0.51)	Loss_d 0.660 (0.676)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.56 (  0.51)	test_corr_d   0.11 (  0.07)
Test: [  20/  26]	Loss 0.699 (0.680)	test_acc   0.46 (  0.50)	test_minacc   0.33 (  0.49)	test_majacc   0.48 (  0.50)	Loss_d 0.699 (0.680)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.33 (  0.49)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.10 (  0.07)
Test: [  26/  26]	Loss 0.671 (0.679)	test_acc   0.55 (  0.50)	test_minacc   0.69 (  0.50)	test_majacc   0.53 (  0.51)	Loss_d 0.671 (0.679)	test_acc_d   0.55 (  0.50)	test_minacc_d   0.69 (  0.50)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.01 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.57it/s]
Test: [  0/  1]	Loss 0.617 (0.617)	test_acc   0.63 (  0.63)	test_minacc   0.64 (  0.64)	test_majacc   0.56 (  0.56)	Loss_d 0.617 (0.617)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.47 ( -0.47)
Test: [  1/  1]	Loss 0.617 (0.617)	test_acc   0.63 (  0.63)	test_minacc   0.64 (  0.64)	test_majacc   0.56 (  0.56)	Loss_d 0.617 (0.617)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.47 ( -0.47)
Overall Timing[ 15/  1]	epoch_time 0.0368 (0.0392)	validation_time 0.0004 (0.0008)	train_time 0.0364 (0.0383)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.5046000088751316, 0.6320000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.10it/s] 19%|#9        | 5/26 [00:00<00:01, 20.40it/s] 35%|###4      | 9/26 [00:00<00:00, 26.53it/s] 50%|#####     | 13/26 [00:00<00:00, 28.29it/s] 65%|######5   | 17/26 [00:00<00:00, 30.06it/s] 81%|########  | 21/26 [00:00<00:00, 31.03it/s] 96%|#########6| 25/26 [00:00<00:00, 32.29it/s]100%|##########| 26/26 [00:00<00:00, 27.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.14)	train_acc   0.55 (  0.51)	train_minacc   0.69 (  0.50)	train_majacc   0.53 (  0.52)	train_corr   0.00 (  0.00)	l1 19.9315 (20.0029)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.08it/s] 27%|##6       | 7/26 [00:00<00:00, 32.45it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.45it/s] 46%|####6     | 12/26 [00:00<00:00, 38.80it/s] 69%|######9   | 18/26 [00:00<00:00, 46.00it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.00it/s] 92%|#########2| 24/26 [00:00<00:00, 47.46it/s]100%|##########| 26/26 [00:00<00:00, 38.84it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.686 (0.691)	test_acc   0.54 (  0.51)	test_minacc   0.53 (  0.50)	test_majacc   0.54 (  0.51)	Loss_d 0.686 (0.691)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.18 (  0.13)
Test: [  20/  26]	Loss 0.696 (0.691)	test_acc   0.46 (  0.50)	test_minacc   0.33 (  0.48)	test_majacc   0.48 (  0.51)	Loss_d 0.696 (0.691)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.33 (  0.48)	test_majacc_d   0.48 (  0.51)	test_corr_d   0.15 (  0.14)
Test: [  26/  26]	Loss 0.687 (0.691)	test_acc   0.54 (  0.50)	test_minacc   0.69 (  0.50)	test_majacc   0.52 (  0.51)	Loss_d 0.687 (0.691)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.69 (  0.50)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.19 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.96it/s]
Test: [  0/  1]	Loss 0.685 (0.685)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.58 (  0.58)	Loss_d 0.685 (0.685)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.685 (0.685)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.58 (  0.58)	Loss_d 0.685 (0.685)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 16/  1]	epoch_time 0.0359 (0.0390)	validation_time 0.0003 (0.0007)	train_time 0.0355 (0.0381)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.5048000109791756, 0.5320000052452087)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.32it/s] 19%|#9        | 5/26 [00:00<00:01, 20.36it/s] 35%|###4      | 9/26 [00:00<00:00, 25.27it/s] 50%|#####     | 13/26 [00:00<00:00, 28.42it/s] 65%|######5   | 17/26 [00:00<00:00, 30.71it/s] 81%|########  | 21/26 [00:00<00:00, 31.12it/s] 96%|#########6| 25/26 [00:00<00:00, 32.30it/s]100%|##########| 26/26 [00:00<00:00, 27.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.48 (  0.52)	train_minacc   0.41 (  0.37)	train_majacc   0.49 (  0.54)	train_corr   0.00 (  0.00)	l1 19.8959 (19.9073)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.79it/s] 27%|##6       | 7/26 [00:00<00:00, 34.82it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.82it/s] 50%|#####     | 13/26 [00:00<00:00, 40.57it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.63it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.63it/s] 96%|#########6| 25/26 [00:00<00:00, 48.02it/s]100%|##########| 26/26 [00:00<00:00, 39.88it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.42 (  0.42)	test_majacc   0.44 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.694 (0.695)	test_acc   0.44 (  0.43)	test_minacc   0.49 (  0.45)	test_majacc   0.43 (  0.42)	Loss_d 0.694 (0.695)	test_acc_d   0.44 (  0.43)	test_minacc_d   0.49 (  0.45)	test_majacc_d   0.43 (  0.42)	test_corr_d  -0.01 ( -0.02)
Test: [  20/  26]	Loss 0.694 (0.695)	test_acc   0.43 (  0.43)	test_minacc   0.37 (  0.45)	test_majacc   0.44 (  0.43)	Loss_d 0.694 (0.695)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.37 (  0.45)	test_majacc_d   0.44 (  0.43)	test_corr_d   0.02 ( -0.01)
Test: [  26/  26]	Loss 0.694 (0.695)	test_acc   0.47 (  0.43)	test_minacc   0.41 (  0.45)	test_majacc   0.48 (  0.43)	Loss_d 0.694 (0.695)	test_acc_d   0.47 (  0.43)	test_minacc_d   0.41 (  0.45)	test_majacc_d   0.48 (  0.43)	test_corr_d   0.07 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.66it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.60 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.58 (  0.58)	Loss_d 0.688 (0.688)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.60 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.58 (  0.58)	Loss_d 0.688 (0.688)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 17/  1]	epoch_time 0.0363 (0.0389)	validation_time 0.0003 (0.0007)	train_time 0.0360 (0.0380)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.4290000047981739, 0.5950000286102295)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.07it/s] 12%|#1        | 3/26 [00:00<00:01, 14.60it/s] 27%|##6       | 7/26 [00:00<00:00, 23.33it/s] 42%|####2     | 11/26 [00:00<00:00, 27.45it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.93it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.35it/s] 88%|########8 | 23/26 [00:00<00:00, 32.55it/s]100%|##########| 26/26 [00:00<00:00, 27.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.48 (  0.46)	train_minacc   0.44 (  0.53)	train_majacc   0.49 (  0.45)	train_corr   0.00 (  0.00)	l1 19.8919 (19.8933)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.60it/s] 31%|###       | 8/26 [00:00<00:00, 38.55it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.55it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.71it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.13it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.13it/s]100%|##########| 26/26 [00:00<00:00, 50.61it/s]100%|##########| 26/26 [00:00<00:00, 41.47it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.56 (  0.56)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.58 (  0.56)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.58 (  0.56)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.01 ( -0.04)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.45)	test_minacc   0.44 (  0.55)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.45)	test_minacc_d   0.44 (  0.55)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.03 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.45)	test_minacc   0.44 (  0.55)	test_majacc   0.50 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.45)	test_minacc_d   0.44 (  0.55)	test_majacc_d   0.50 (  0.43)	test_corr_d   0.01 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.31it/s]
Test: [  0/  1]	Loss 0.685 (0.685)	test_acc   0.61 (  0.61)	test_minacc   0.61 (  0.61)	test_majacc   0.57 (  0.57)	Loss_d 0.685 (0.685)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.685 (0.685)	test_acc   0.61 (  0.61)	test_minacc   0.61 (  0.61)	test_majacc   0.57 (  0.57)	Loss_d 0.685 (0.685)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 18/  1]	epoch_time 0.0356 (0.0387)	validation_time 0.0004 (0.0007)	train_time 0.0352 (0.0378)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.4518000072240829, 0.609000027179718)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.04it/s] 19%|#9        | 5/26 [00:00<00:00, 22.76it/s] 35%|###4      | 9/26 [00:00<00:00, 28.05it/s] 50%|#####     | 13/26 [00:00<00:00, 30.00it/s] 65%|######5   | 17/26 [00:00<00:00, 31.16it/s] 81%|########  | 21/26 [00:00<00:00, 31.75it/s] 96%|#########6| 25/26 [00:00<00:00, 32.57it/s]100%|##########| 26/26 [00:00<00:00, 28.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.46 (  0.46)	train_minacc   0.38 (  0.53)	train_majacc   0.48 (  0.44)	train_corr   0.00 (  0.00)	l1 19.8911 (19.8915)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.70it/s] 31%|###       | 8/26 [00:00<00:00, 40.22it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.22it/s] 50%|#####     | 13/26 [00:00<00:00, 41.35it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.65it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.65it/s] 96%|#########6| 25/26 [00:00<00:00, 46.53it/s]100%|##########| 26/26 [00:00<00:00, 40.41it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.48 (  0.48)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.44)	test_minacc   0.55 (  0.52)	test_majacc   0.44 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.44)	test_minacc_d   0.55 (  0.52)	test_majacc_d   0.44 (  0.43)	test_corr_d   0.03 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.44)	test_minacc   0.44 (  0.51)	test_majacc   0.45 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.44)	test_minacc_d   0.44 (  0.51)	test_majacc_d   0.45 (  0.43)	test_corr_d   0.03 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.44)	test_minacc   0.38 (  0.51)	test_majacc   0.47 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.38 (  0.51)	test_majacc_d   0.47 (  0.43)	test_corr_d   0.06 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.16it/s]
Test: [  0/  1]	Loss 0.686 (0.686)	test_acc   0.61 (  0.61)	test_minacc   0.61 (  0.61)	test_majacc   0.59 (  0.59)	Loss_d 0.686 (0.686)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.686 (0.686)	test_acc   0.61 (  0.61)	test_minacc   0.61 (  0.61)	test_majacc   0.59 (  0.59)	Loss_d 0.686 (0.686)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 19/  1]	epoch_time 0.0369 (0.0386)	validation_time 0.0004 (0.0007)	train_time 0.0365 (0.0378)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.4436000035107136, 0.6050000190734863)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.59it/s] 19%|#9        | 5/26 [00:00<00:01, 19.15it/s] 35%|###4      | 9/26 [00:00<00:00, 25.43it/s] 50%|#####     | 13/26 [00:00<00:00, 29.05it/s] 65%|######5   | 17/26 [00:00<00:00, 30.50it/s] 81%|########  | 21/26 [00:00<00:00, 31.76it/s] 96%|#########6| 25/26 [00:00<00:00, 32.42it/s]100%|##########| 26/26 [00:00<00:00, 26.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.45 (  0.46)	train_minacc   0.38 (  0.50)	train_majacc   0.46 (  0.45)	train_corr   0.00 (  0.00)	l1 19.8908 (19.8910)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.51it/s] 31%|###       | 8/26 [00:00<00:00, 34.84it/s]                                               31%|###       | 8/26 [00:00<00:00, 34.84it/s] 54%|#####3    | 14/26 [00:00<00:00, 41.51it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.10it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.10it/s]100%|##########| 26/26 [00:00<00:00, 50.91it/s]100%|##########| 26/26 [00:00<00:00, 40.58it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.48 (  0.48)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.694)	test_acc   0.45 (  0.44)	test_minacc   0.51 (  0.51)	test_majacc   0.44 (  0.43)	Loss_d 0.693 (0.694)	test_acc_d   0.45 (  0.44)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.44 (  0.43)	test_corr_d   0.03 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.44)	test_minacc   0.44 (  0.50)	test_majacc   0.46 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.46 (  0.43)	test_corr_d   0.04 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.44)	test_minacc   0.38 (  0.50)	test_majacc   0.46 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.44)	test_minacc_d   0.38 (  0.50)	test_majacc_d   0.46 (  0.43)	test_corr_d   0.07 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.82it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.60 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.62 (  0.62)	Loss_d 0.687 (0.687)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.60 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.62 (  0.62)	Loss_d 0.687 (0.687)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 20/  1]	epoch_time 0.0360 (0.0385)	validation_time 0.0003 (0.0007)	train_time 0.0356 (0.0377)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.4402000040411949, 0.6000000238418579)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.87it/s] 19%|#9        | 5/26 [00:00<00:01, 21.00it/s] 35%|###4      | 9/26 [00:00<00:00, 26.19it/s] 50%|#####     | 13/26 [00:00<00:00, 29.11it/s] 65%|######5   | 17/26 [00:00<00:00, 31.10it/s] 81%|########  | 21/26 [00:00<00:00, 32.73it/s] 96%|#########6| 25/26 [00:00<00:00, 32.98it/s]100%|##########| 26/26 [00:00<00:00, 27.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.46 (  0.46)	train_minacc   0.38 (  0.50)	train_majacc   0.47 (  0.45)	train_corr   0.00 (  0.00)	l1 19.8905 (19.8907)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.37it/s] 31%|###       | 8/26 [00:00<00:00, 40.67it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.67it/s] 50%|#####     | 13/26 [00:00<00:00, 41.86it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.70it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.70it/s] 96%|#########6| 25/26 [00:00<00:00, 47.76it/s]100%|##########| 26/26 [00:00<00:00, 41.09it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.50 (  0.50)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.694)	test_acc   0.45 (  0.44)	test_minacc   0.51 (  0.51)	test_majacc   0.44 (  0.43)	Loss_d 0.693 (0.694)	test_acc_d   0.45 (  0.44)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.44 (  0.43)	test_corr_d   0.02 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.44)	test_minacc   0.42 (  0.50)	test_majacc   0.46 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.44)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.46 (  0.43)	test_corr_d   0.03 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.44)	test_minacc   0.38 (  0.49)	test_majacc   0.46 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.44)	test_minacc_d   0.38 (  0.49)	test_majacc_d   0.46 (  0.43)	test_corr_d   0.06 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.15it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.60 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.62 (  0.62)	Loss_d 0.687 (0.687)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.60 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.62 (  0.62)	Loss_d 0.687 (0.687)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 21/  1]	epoch_time 0.0361 (0.0384)	validation_time 0.0003 (0.0006)	train_time 0.0357 (0.0376)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.4390000041127205, 0.6010000109672546)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.50it/s] 19%|#9        | 5/26 [00:00<00:01, 18.87it/s] 35%|###4      | 9/26 [00:00<00:00, 24.83it/s] 50%|#####     | 13/26 [00:00<00:00, 28.78it/s] 65%|######5   | 17/26 [00:00<00:00, 30.49it/s] 81%|########  | 21/26 [00:00<00:00, 31.60it/s] 96%|#########6| 25/26 [00:00<00:00, 30.50it/s]100%|##########| 26/26 [00:00<00:00, 26.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.46 (  0.46)	train_minacc   0.38 (  0.50)	train_majacc   0.47 (  0.45)	train_corr   0.00 (  0.00)	l1 19.8903 (19.8904)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.57it/s] 31%|###       | 8/26 [00:00<00:00, 41.76it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.76it/s] 50%|#####     | 13/26 [00:00<00:00, 42.65it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.50it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.50it/s] 96%|#########6| 25/26 [00:00<00:00, 48.75it/s]100%|##########| 26/26 [00:00<00:00, 41.99it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.50 (  0.50)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.694)	test_acc   0.45 (  0.44)	test_minacc   0.51 (  0.51)	test_majacc   0.44 (  0.43)	Loss_d 0.693 (0.694)	test_acc_d   0.45 (  0.44)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.44 (  0.43)	test_corr_d   0.02 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.40 (  0.49)	test_majacc   0.44 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.40 (  0.49)	test_majacc_d   0.44 (  0.43)	test_corr_d   0.03 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.44)	test_minacc   0.38 (  0.49)	test_majacc   0.47 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.38 (  0.49)	test_majacc_d   0.47 (  0.43)	test_corr_d   0.05 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.04it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.61 (  0.61)	test_minacc   0.60 (  0.60)	test_majacc   0.62 (  0.62)	Loss_d 0.687 (0.687)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.61 (  0.61)	test_minacc   0.60 (  0.60)	test_majacc   0.62 (  0.62)	Loss_d 0.687 (0.687)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 22/  1]	epoch_time 0.0377 (0.0383)	validation_time 0.0003 (0.0006)	train_time 0.0374 (0.0376)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.43880000433325766, 0.6060000061988831)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.54it/s] 15%|#5        | 4/26 [00:00<00:01, 18.77it/s] 27%|##6       | 7/26 [00:00<00:00, 21.80it/s] 42%|####2     | 11/26 [00:00<00:00, 26.59it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.17it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.53it/s] 88%|########8 | 23/26 [00:00<00:00, 31.72it/s]100%|##########| 26/26 [00:00<00:00, 26.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 324 tensor(-0.0156, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
rho, theta 416 tensor(-0.0017, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
Epoch: [23][  26/  26]	Loss 0.001 (0.006)	train_nll   0.71 (  0.69)	train_penalty   0.00 (  0.01)	weight_norm   0.23 (  0.19)	train_acc   0.45 (  0.51)	train_minacc   0.31 (  0.48)	train_majacc   0.47 (  0.52)	train_corr   0.00 (  0.00)	l1 14.8484 (15.7237)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.60it/s] 27%|##6       | 7/26 [00:00<00:00, 32.32it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.32it/s] 50%|#####     | 13/26 [00:00<00:00, 39.98it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.37it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.37it/s] 96%|#########6| 25/26 [00:00<00:00, 47.04it/s]100%|##########| 26/26 [00:00<00:00, 38.55it/s]
Test: [   0/  26]	Loss 0.700 (0.700)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.700 (0.700)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.79 ( -0.79)
Test: [  10/  26]	Loss 0.707 (0.701)	test_acc   0.46 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.46 (  0.49)	Loss_d 0.707 (0.701)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.46 (  0.49)	test_corr_d  -0.77 ( -0.79)
Test: [  20/  26]	Loss 0.694 (0.700)	test_acc   0.54 (  0.50)	test_minacc   0.67 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.694 (0.700)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.67 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d  -0.79 ( -0.79)
Test: [  26/  26]	Loss 0.708 (0.700)	test_acc   0.45 (  0.50)	test_minacc   0.31 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.708 (0.700)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.31 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d  -0.82 ( -0.79)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.52it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.77 ( -0.77)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.77 ( -0.77)
Overall Timing[ 23/  1]	epoch_time 0.0388 (0.0384)	validation_time 0.0003 (0.0006)	train_time 0.0384 (0.0376)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.5000000120997429, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.18it/s] 19%|#9        | 5/26 [00:00<00:00, 22.03it/s] 35%|###4      | 9/26 [00:00<00:00, 27.22it/s] 50%|#####     | 13/26 [00:00<00:00, 30.26it/s] 65%|######5   | 17/26 [00:00<00:00, 31.72it/s] 81%|########  | 21/26 [00:00<00:00, 32.76it/s] 96%|#########6| 25/26 [00:00<00:00, 32.77it/s]100%|##########| 26/26 [00:00<00:00, 28.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.45 (  0.50)	train_minacc   0.31 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 14.5660 (14.6538)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.90it/s] 27%|##6       | 7/26 [00:00<00:00, 35.92it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.92it/s] 50%|#####     | 13/26 [00:00<00:00, 41.39it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.75it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.75it/s] 96%|#########6| 25/26 [00:00<00:00, 47.99it/s]100%|##########| 26/26 [00:00<00:00, 40.34it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.689 (0.689)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.695 (0.690)	test_acc   0.46 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.46 (  0.49)	Loss_d 0.695 (0.690)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.86 (  0.85)
Test: [  20/  26]	Loss 0.683 (0.689)	test_acc   0.54 (  0.50)	test_minacc   0.67 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.683 (0.689)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.67 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.85 (  0.85)
Test: [  26/  26]	Loss 0.697 (0.690)	test_acc   0.45 (  0.50)	test_minacc   0.31 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.697 (0.690)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.31 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.83 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.31it/s]
Test: [  0/  1]	Loss 0.701 (0.701)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.701 (0.701)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.79 (  0.79)
Test: [  1/  1]	Loss 0.701 (0.701)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.701 (0.701)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.79 (  0.79)
Overall Timing[ 24/  1]	epoch_time 0.0355 (0.0382)	validation_time 0.0003 (0.0006)	train_time 0.0352 (0.0375)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.5000000120997429, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.53it/s] 15%|#5        | 4/26 [00:00<00:01, 18.53it/s] 31%|###       | 8/26 [00:00<00:00, 25.13it/s] 46%|####6     | 12/26 [00:00<00:00, 27.71it/s] 62%|######1   | 16/26 [00:00<00:00, 29.45it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.12it/s] 92%|#########2| 24/26 [00:00<00:00, 31.79it/s]100%|##########| 26/26 [00:00<00:00, 27.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.45 (  0.50)	train_minacc   0.31 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 14.5078 (14.5340)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.14it/s] 31%|###       | 8/26 [00:00<00:00, 38.99it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.99it/s] 50%|#####     | 13/26 [00:00<00:00, 41.92it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.17it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.17it/s] 96%|#########6| 25/26 [00:00<00:00, 48.16it/s]100%|##########| 26/26 [00:00<00:00, 41.51it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.76 (  0.76)
Test: [  10/  26]	Loss 0.697 (0.692)	test_acc   0.46 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.46 (  0.49)	Loss_d 0.697 (0.692)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.79 (  0.77)
Test: [  20/  26]	Loss 0.685 (0.691)	test_acc   0.54 (  0.50)	test_minacc   0.67 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.685 (0.691)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.67 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.77 (  0.77)
Test: [  26/  26]	Loss 0.698 (0.691)	test_acc   0.45 (  0.50)	test_minacc   0.31 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.698 (0.691)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.31 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.75 (  0.77)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.67it/s]
Test: [  0/  1]	Loss 0.699 (0.699)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.699 (0.699)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.67 (  0.67)
Test: [  1/  1]	Loss 0.699 (0.699)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.699 (0.699)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.67 (  0.67)
Overall Timing[ 25/  1]	epoch_time 0.0368 (0.0382)	validation_time 0.0004 (0.0006)	train_time 0.0364 (0.0375)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.5000000120997429, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.81it/s] 19%|#9        | 5/26 [00:00<00:00, 21.21it/s] 31%|###       | 8/26 [00:00<00:00, 24.59it/s] 46%|####6     | 12/26 [00:00<00:00, 28.12it/s] 62%|######1   | 16/26 [00:00<00:00, 30.25it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.55it/s] 92%|#########2| 24/26 [00:00<00:00, 32.36it/s]100%|##########| 26/26 [00:00<00:00, 27.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.45 (  0.50)	train_minacc   0.31 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 14.4582 (14.4801)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.95it/s] 27%|##6       | 7/26 [00:00<00:00, 33.91it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.91it/s] 50%|#####     | 13/26 [00:00<00:00, 41.49it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.86it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.86it/s] 96%|#########6| 25/26 [00:00<00:00, 47.94it/s]100%|##########| 26/26 [00:00<00:00, 39.75it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.74 (  0.74)
Test: [  10/  26]	Loss 0.696 (0.692)	test_acc   0.46 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.46 (  0.49)	Loss_d 0.696 (0.692)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.78 (  0.76)
Test: [  20/  26]	Loss 0.685 (0.691)	test_acc   0.54 (  0.50)	test_minacc   0.67 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.685 (0.691)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.67 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.76 (  0.76)
Test: [  26/  26]	Loss 0.697 (0.691)	test_acc   0.45 (  0.50)	test_minacc   0.31 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.697 (0.691)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.31 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.73 (  0.76)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.63it/s]
Test: [  0/  1]	Loss 0.698 (0.698)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.698 (0.698)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.65 (  0.65)
Test: [  1/  1]	Loss 0.698 (0.698)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.698 (0.698)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.65 (  0.65)
Overall Timing[ 26/  1]	epoch_time 0.0365 (0.0381)	validation_time 0.0004 (0.0006)	train_time 0.0361 (0.0374)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.5000000120997429, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.86it/s] 19%|#9        | 5/26 [00:00<00:00, 23.99it/s] 35%|###4      | 9/26 [00:00<00:00, 28.29it/s] 50%|#####     | 13/26 [00:00<00:00, 31.13it/s] 65%|######5   | 17/26 [00:00<00:00, 32.38it/s] 81%|########  | 21/26 [00:00<00:00, 32.90it/s] 96%|#########6| 25/26 [00:00<00:00, 33.42it/s]100%|##########| 26/26 [00:00<00:00, 29.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.45 (  0.50)	train_minacc   0.31 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 14.4188 (14.4367)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.12it/s] 27%|##6       | 7/26 [00:00<00:00, 34.88it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.88it/s] 50%|#####     | 13/26 [00:00<00:00, 40.38it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.50it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.50it/s] 96%|#########6| 25/26 [00:00<00:00, 47.10it/s]100%|##########| 26/26 [00:00<00:00, 39.23it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.70 (  0.70)
Test: [  10/  26]	Loss 0.696 (0.692)	test_acc   0.46 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.46 (  0.49)	Loss_d 0.696 (0.692)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.75 (  0.72)
Test: [  20/  26]	Loss 0.686 (0.691)	test_acc   0.54 (  0.50)	test_minacc   0.67 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.686 (0.691)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.67 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.73 (  0.72)
Test: [  26/  26]	Loss 0.697 (0.692)	test_acc   0.45 (  0.50)	test_minacc   0.31 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.697 (0.692)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.31 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.69 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.32it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.697 (0.697)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.58 (  0.58)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.697 (0.697)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.58 (  0.58)
Overall Timing[ 27/  1]	epoch_time 0.0369 (0.0381)	validation_time 0.0004 (0.0006)	train_time 0.0365 (0.0374)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.5000000120997429, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.95it/s] 15%|#5        | 4/26 [00:00<00:01, 15.30it/s] 31%|###       | 8/26 [00:00<00:00, 22.91it/s] 46%|####6     | 12/26 [00:00<00:00, 27.22it/s] 62%|######1   | 16/26 [00:00<00:00, 30.08it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.93it/s] 92%|#########2| 24/26 [00:00<00:00, 33.02it/s]100%|##########| 26/26 [00:00<00:00, 26.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.45 (  0.50)	train_minacc   0.31 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 14.3825 (14.3989)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.87it/s] 27%|##6       | 7/26 [00:00<00:00, 36.07it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.07it/s] 50%|#####     | 13/26 [00:00<00:00, 43.21it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.70it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.70it/s] 96%|#########6| 25/26 [00:00<00:00, 48.70it/s]100%|##########| 26/26 [00:00<00:00, 41.50it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.67 (  0.67)
Test: [  10/  26]	Loss 0.696 (0.692)	test_acc   0.46 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.46 (  0.49)	Loss_d 0.696 (0.692)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.72 (  0.69)
Test: [  20/  26]	Loss 0.687 (0.691)	test_acc   0.54 (  0.50)	test_minacc   0.67 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.687 (0.691)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.67 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.70 (  0.68)
Test: [  26/  26]	Loss 0.697 (0.692)	test_acc   0.45 (  0.50)	test_minacc   0.31 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.697 (0.692)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.31 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.66 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.08it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.696 (0.696)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.52 (  0.52)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.696 (0.696)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.52 (  0.52)
Overall Timing[ 28/  1]	epoch_time 0.0383 (0.0381)	validation_time 0.0004 (0.0006)	train_time 0.0379 (0.0374)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.5000000120997429, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.74it/s] 19%|#9        | 5/26 [00:00<00:01, 18.82it/s] 35%|###4      | 9/26 [00:00<00:00, 25.00it/s] 50%|#####     | 13/26 [00:00<00:00, 28.20it/s] 65%|######5   | 17/26 [00:00<00:00, 30.40it/s] 81%|########  | 21/26 [00:00<00:00, 31.95it/s] 96%|#########6| 25/26 [00:00<00:00, 32.96it/s]100%|##########| 26/26 [00:00<00:00, 26.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.45 (  0.50)	train_minacc   0.31 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 14.3498 (14.3645)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.75it/s] 27%|##6       | 7/26 [00:00<00:00, 31.23it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.23it/s] 50%|#####     | 13/26 [00:00<00:00, 39.53it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.29it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.29it/s] 96%|#########6| 25/26 [00:00<00:00, 47.60it/s]100%|##########| 26/26 [00:00<00:00, 38.28it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.63 (  0.63)
Test: [  10/  26]	Loss 0.696 (0.692)	test_acc   0.46 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.46 (  0.49)	Loss_d 0.696 (0.692)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.69 (  0.66)
Test: [  20/  26]	Loss 0.687 (0.692)	test_acc   0.54 (  0.50)	test_minacc   0.67 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.687 (0.692)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.67 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.67 (  0.65)
Test: [  26/  26]	Loss 0.697 (0.692)	test_acc   0.45 (  0.50)	test_minacc   0.31 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.697 (0.692)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.31 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.62 (  0.65)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.66it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.696 (0.696)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.47 (  0.47)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.696 (0.696)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.47 (  0.47)
Overall Timing[ 29/  1]	epoch_time 0.0361 (0.0380)	validation_time 0.0003 (0.0006)	train_time 0.0358 (0.0374)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.5000000120997429, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.74it/s] 19%|#9        | 5/26 [00:00<00:00, 23.01it/s] 35%|###4      | 9/26 [00:00<00:00, 26.85it/s] 50%|#####     | 13/26 [00:00<00:00, 29.25it/s] 65%|######5   | 17/26 [00:00<00:00, 30.77it/s] 81%|########  | 21/26 [00:00<00:00, 31.69it/s] 96%|#########6| 25/26 [00:00<00:00, 32.13it/s]100%|##########| 26/26 [00:00<00:00, 27.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.45 (  0.50)	train_minacc   0.31 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 14.3201 (14.3334)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.31it/s] 27%|##6       | 7/26 [00:00<00:00, 33.40it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.40it/s] 50%|#####     | 13/26 [00:00<00:00, 39.27it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.35it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.35it/s] 96%|#########6| 25/26 [00:00<00:00, 45.73it/s]100%|##########| 26/26 [00:00<00:00, 38.44it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.59 (  0.59)
Test: [  10/  26]	Loss 0.696 (0.692)	test_acc   0.46 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.46 (  0.49)	Loss_d 0.696 (0.692)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.66 (  0.63)
Test: [  20/  26]	Loss 0.688 (0.692)	test_acc   0.54 (  0.50)	test_minacc   0.67 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.688 (0.692)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.67 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.63 (  0.62)
Test: [  26/  26]	Loss 0.697 (0.692)	test_acc   0.45 (  0.50)	test_minacc   0.31 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.697 (0.692)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.31 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.59 (  0.62)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.89it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.41 (  0.41)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.41 (  0.41)
Overall Timing[ 30/  1]	epoch_time 0.0376 (0.0380)	validation_time 0.0004 (0.0006)	train_time 0.0372 (0.0373)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.5000000120997429, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.59it/s] 19%|#9        | 5/26 [00:00<00:01, 18.37it/s] 35%|###4      | 9/26 [00:00<00:00, 24.02it/s] 46%|####6     | 12/26 [00:00<00:00, 24.45it/s] 62%|######1   | 16/26 [00:00<00:00, 27.39it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.36it/s] 88%|########8 | 23/26 [00:00<00:00, 28.00it/s]100%|##########| 26/26 [00:01<00:00, 24.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.45 (  0.50)	train_minacc   0.31 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 14.2927 (14.3050)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.55it/s] 27%|##6       | 7/26 [00:00<00:00, 36.27it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.27it/s] 46%|####6     | 12/26 [00:00<00:00, 39.44it/s] 69%|######9   | 18/26 [00:00<00:00, 45.68it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.68it/s] 92%|#########2| 24/26 [00:00<00:00, 45.61it/s]100%|##########| 26/26 [00:00<00:00, 39.34it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.56 (  0.56)
Test: [  10/  26]	Loss 0.696 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.46 (  0.49)	Loss_d 0.696 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.63 (  0.59)
Test: [  20/  26]	Loss 0.688 (0.692)	test_acc   0.54 (  0.50)	test_minacc   0.67 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.688 (0.692)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.67 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.60 (  0.58)
Test: [  26/  26]	Loss 0.696 (0.692)	test_acc   0.45 (  0.50)	test_minacc   0.31 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.696 (0.692)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.31 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.55 (  0.59)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.43it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.35 (  0.35)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.35 (  0.35)
Overall Timing[ 31/  1]	epoch_time 0.0372 (0.0380)	validation_time 0.0004 (0.0006)	train_time 0.0368 (0.0373)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.5000000120997429, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.95it/s] 19%|#9        | 5/26 [00:00<00:00, 22.18it/s] 35%|###4      | 9/26 [00:00<00:00, 26.59it/s] 50%|#####     | 13/26 [00:00<00:00, 29.30it/s] 65%|######5   | 17/26 [00:00<00:00, 30.85it/s] 81%|########  | 21/26 [00:00<00:00, 32.04it/s] 96%|#########6| 25/26 [00:00<00:00, 32.64it/s]100%|##########| 26/26 [00:00<00:00, 27.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.45 (  0.50)	train_minacc   0.31 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 14.2674 (14.2787)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.67it/s] 31%|###       | 8/26 [00:00<00:00, 38.80it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.80it/s] 50%|#####     | 13/26 [00:00<00:00, 41.51it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.10it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.10it/s] 96%|#########6| 25/26 [00:00<00:00, 48.27it/s]100%|##########| 26/26 [00:00<00:00, 41.42it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.52 (  0.52)
Test: [  10/  26]	Loss 0.696 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.46 (  0.49)	Loss_d 0.696 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.60 (  0.56)
Test: [  20/  26]	Loss 0.688 (0.692)	test_acc   0.54 (  0.50)	test_minacc   0.67 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.688 (0.692)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.67 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.57 (  0.55)
Test: [  26/  26]	Loss 0.696 (0.692)	test_acc   0.45 (  0.50)	test_minacc   0.31 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.696 (0.692)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.31 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.52 (  0.55)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.76it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.29 (  0.29)
Overall Timing[ 32/  1]	epoch_time 0.0369 (0.0380)	validation_time 0.0003 (0.0005)	train_time 0.0365 (0.0373)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.5000000120997429, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.21it/s] 19%|#9        | 5/26 [00:00<00:01, 18.13it/s] 35%|###4      | 9/26 [00:00<00:00, 24.29it/s] 50%|#####     | 13/26 [00:00<00:00, 27.98it/s] 65%|######5   | 17/26 [00:00<00:00, 29.91it/s] 81%|########  | 21/26 [00:00<00:00, 30.32it/s] 96%|#########6| 25/26 [00:00<00:00, 31.45it/s]100%|##########| 26/26 [00:01<00:00, 25.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.45 (  0.50)	train_minacc   0.31 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 14.2438 (14.2543)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.26it/s] 27%|##6       | 7/26 [00:00<00:00, 34.66it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.66it/s] 50%|#####     | 13/26 [00:00<00:00, 41.31it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.40it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.40it/s] 96%|#########6| 25/26 [00:00<00:00, 47.73it/s]100%|##########| 26/26 [00:00<00:00, 39.79it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.47 (  0.47)
Test: [  10/  26]	Loss 0.696 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.46 (  0.49)	Loss_d 0.696 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.55 (  0.51)
Test: [  20/  26]	Loss 0.689 (0.692)	test_acc   0.54 (  0.50)	test_minacc   0.67 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.689 (0.692)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.67 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.53 (  0.50)
Test: [  26/  26]	Loss 0.696 (0.692)	test_acc   0.45 (  0.50)	test_minacc   0.31 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.696 (0.692)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.31 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.47 (  0.51)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.75it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.21 (  0.21)
Overall Timing[ 33/  1]	epoch_time 0.0386 (0.0380)	validation_time 0.0004 (0.0005)	train_time 0.0382 (0.0373)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.5000000120997429, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.27it/s] 15%|#5        | 4/26 [00:00<00:01, 17.93it/s] 31%|###       | 8/26 [00:00<00:00, 24.56it/s] 46%|####6     | 12/26 [00:00<00:00, 28.42it/s] 62%|######1   | 16/26 [00:00<00:00, 30.12it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.73it/s] 92%|#########2| 24/26 [00:00<00:00, 30.90it/s]100%|##########| 26/26 [00:00<00:00, 26.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.45 (  0.50)	train_minacc   0.31 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 14.2213 (14.2313)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.30it/s] 27%|##6       | 7/26 [00:00<00:00, 34.97it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.97it/s] 50%|#####     | 13/26 [00:00<00:00, 41.58it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.46it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.46it/s] 96%|#########6| 25/26 [00:00<00:00, 48.35it/s]100%|##########| 26/26 [00:00<00:00, 40.63it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.43 (  0.43)
Test: [  10/  26]	Loss 0.695 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.46 (  0.49)	Loss_d 0.695 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.52 (  0.47)
Test: [  20/  26]	Loss 0.689 (0.692)	test_acc   0.54 (  0.50)	test_minacc   0.67 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.689 (0.692)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.67 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.49 (  0.46)
Test: [  26/  26]	Loss 0.696 (0.692)	test_acc   0.45 (  0.50)	test_minacc   0.31 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.696 (0.692)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.31 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.43 (  0.47)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.36it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.15 (  0.15)
Overall Timing[ 34/  1]	epoch_time 0.0380 (0.0380)	validation_time 0.0003 (0.0005)	train_time 0.0376 (0.0373)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.5000000120997429, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.31it/s] 19%|#9        | 5/26 [00:00<00:00, 21.63it/s] 35%|###4      | 9/26 [00:00<00:00, 25.73it/s] 50%|#####     | 13/26 [00:00<00:00, 28.31it/s] 65%|######5   | 17/26 [00:00<00:00, 29.61it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.11it/s] 92%|#########2| 24/26 [00:00<00:00, 30.72it/s]100%|##########| 26/26 [00:00<00:00, 26.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.45 (  0.50)	train_minacc   0.31 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 14.2003 (14.2096)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.70it/s] 27%|##6       | 7/26 [00:00<00:00, 35.45it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.45it/s] 46%|####6     | 12/26 [00:00<00:00, 41.65it/s] 65%|######5   | 17/26 [00:00<00:00, 43.20it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.20it/s] 88%|########8 | 23/26 [00:00<00:00, 47.98it/s]100%|##########| 26/26 [00:00<00:00, 39.70it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.39 (  0.39)
Test: [  10/  26]	Loss 0.695 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.46 (  0.49)	Loss_d 0.695 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.48 (  0.44)
Test: [  20/  26]	Loss 0.689 (0.692)	test_acc   0.54 (  0.50)	test_minacc   0.67 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.689 (0.692)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.67 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.45 (  0.43)
Test: [  26/  26]	Loss 0.696 (0.693)	test_acc   0.45 (  0.50)	test_minacc   0.31 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.696 (0.693)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.31 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.39 (  0.43)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.92it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.10 (  0.10)
Overall Timing[ 35/  1]	epoch_time 0.0388 (0.0380)	validation_time 0.0004 (0.0005)	train_time 0.0384 (0.0374)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.5000000120997429, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.18it/s] 19%|#9        | 5/26 [00:00<00:01, 20.56it/s] 35%|###4      | 9/26 [00:00<00:00, 26.26it/s] 50%|#####     | 13/26 [00:00<00:00, 28.67it/s] 65%|######5   | 17/26 [00:00<00:00, 30.48it/s] 81%|########  | 21/26 [00:00<00:00, 31.25it/s] 96%|#########6| 25/26 [00:00<00:00, 31.60it/s]100%|##########| 26/26 [00:00<00:00, 27.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.45 (  0.50)	train_minacc   0.31 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 14.1808 (14.1894)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.86it/s] 35%|###4      | 9/26 [00:00<00:00, 40.55it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.55it/s] 58%|#####7    | 15/26 [00:00<00:00, 48.10it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 48.10it/s] 81%|########  | 21/26 [00:00<00:00, 47.87it/s]100%|##########| 26/26 [00:00<00:00, 42.28it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.35 (  0.35)
Test: [  10/  26]	Loss 0.695 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.46 (  0.49)	Loss_d 0.695 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.45 (  0.40)
Test: [  20/  26]	Loss 0.690 (0.692)	test_acc   0.54 (  0.50)	test_minacc   0.67 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.67 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.42 (  0.39)
Test: [  26/  26]	Loss 0.696 (0.693)	test_acc   0.45 (  0.50)	test_minacc   0.31 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.696 (0.693)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.31 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.36 (  0.39)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.79it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.04 (  0.04)
Overall Timing[ 36/  1]	epoch_time 0.0375 (0.0380)	validation_time 0.0003 (0.0005)	train_time 0.0372 (0.0374)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.5000000120997429, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.66it/s] 19%|#9        | 5/26 [00:00<00:01, 19.12it/s] 35%|###4      | 9/26 [00:00<00:00, 25.49it/s] 50%|#####     | 13/26 [00:00<00:00, 28.96it/s] 65%|######5   | 17/26 [00:00<00:00, 31.19it/s] 81%|########  | 21/26 [00:00<00:00, 32.66it/s] 96%|#########6| 25/26 [00:00<00:00, 33.23it/s]100%|##########| 26/26 [00:00<00:00, 27.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.45 (  0.50)	train_minacc   0.31 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 14.1625 (14.1705)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.40it/s] 27%|##6       | 7/26 [00:00<00:00, 36.73it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.73it/s] 50%|#####     | 13/26 [00:00<00:00, 43.91it/s] 69%|######9   | 18/26 [00:00<00:00, 45.69it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.69it/s] 92%|#########2| 24/26 [00:00<00:00, 49.94it/s]100%|##########| 26/26 [00:00<00:00, 41.29it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.31 (  0.31)
Test: [  10/  26]	Loss 0.695 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.46 (  0.49)	Loss_d 0.695 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.42 (  0.37)
Test: [  20/  26]	Loss 0.690 (0.692)	test_acc   0.54 (  0.50)	test_minacc   0.67 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.67 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.39 (  0.35)
Test: [  26/  26]	Loss 0.696 (0.693)	test_acc   0.45 (  0.50)	test_minacc   0.31 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.696 (0.693)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.31 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.32 (  0.36)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.56it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 37/  1]	epoch_time 0.0372 (0.0380)	validation_time 0.0004 (0.0005)	train_time 0.0368 (0.0373)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.5000000120997429, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.05it/s] 19%|#9        | 5/26 [00:00<00:00, 23.09it/s] 35%|###4      | 9/26 [00:00<00:00, 27.76it/s] 50%|#####     | 13/26 [00:00<00:00, 30.24it/s] 65%|######5   | 17/26 [00:00<00:00, 31.47it/s] 81%|########  | 21/26 [00:00<00:00, 32.60it/s] 96%|#########6| 25/26 [00:00<00:00, 33.36it/s]100%|##########| 26/26 [00:00<00:00, 28.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.45 (  0.50)	train_minacc   0.31 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 14.1454 (14.1529)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.04it/s] 35%|###4      | 9/26 [00:00<00:00, 39.29it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.29it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.40it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.40it/s] 81%|########  | 21/26 [00:00<00:00, 47.21it/s]100%|##########| 26/26 [00:00<00:00, 41.58it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.28 (  0.28)
Test: [  10/  26]	Loss 0.695 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.46 (  0.49)	Loss_d 0.695 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.39 (  0.34)
Test: [  20/  26]	Loss 0.690 (0.693)	test_acc   0.54 (  0.50)	test_minacc   0.67 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.690 (0.693)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.67 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.36 (  0.32)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.45 (  0.50)	test_minacc   0.31 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.695 (0.693)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.31 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.29 (  0.33)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.95it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 38/  1]	epoch_time 0.0365 (0.0379)	validation_time 0.0004 (0.0005)	train_time 0.0360 (0.0373)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.5000000120997429, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.35it/s] 19%|#9        | 5/26 [00:00<00:01, 18.37it/s] 35%|###4      | 9/26 [00:00<00:00, 24.46it/s] 50%|#####     | 13/26 [00:00<00:00, 27.74it/s] 65%|######5   | 17/26 [00:00<00:00, 29.98it/s] 81%|########  | 21/26 [00:00<00:00, 31.26it/s] 96%|#########6| 25/26 [00:00<00:00, 32.03it/s]100%|##########| 26/26 [00:00<00:00, 26.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.45 (  0.50)	train_minacc   0.31 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 14.1295 (14.1365)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.65it/s] 31%|###       | 8/26 [00:00<00:00, 31.37it/s]                                               31%|###       | 8/26 [00:00<00:00, 31.37it/s] 50%|#####     | 13/26 [00:00<00:00, 37.62it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.85it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.85it/s] 96%|#########6| 25/26 [00:00<00:00, 45.90it/s]100%|##########| 26/26 [00:00<00:00, 37.02it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.25 (  0.25)
Test: [  10/  26]	Loss 0.695 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.46 (  0.49)	Loss_d 0.695 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.36 (  0.31)
Test: [  20/  26]	Loss 0.690 (0.693)	test_acc   0.54 (  0.50)	test_minacc   0.67 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.690 (0.693)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.67 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.33 (  0.29)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.45 (  0.50)	test_minacc   0.31 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.695 (0.693)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.31 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.26 (  0.30)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.65it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 39/  1]	epoch_time 0.0372 (0.0379)	validation_time 0.0003 (0.0005)	train_time 0.0368 (0.0373)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.5000000120997429, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.66it/s] 19%|#9        | 5/26 [00:00<00:01, 18.89it/s] 35%|###4      | 9/26 [00:00<00:00, 25.01it/s] 50%|#####     | 13/26 [00:00<00:00, 27.81it/s] 65%|######5   | 17/26 [00:00<00:00, 29.93it/s] 81%|########  | 21/26 [00:00<00:00, 31.11it/s] 96%|#########6| 25/26 [00:00<00:00, 31.86it/s]100%|##########| 26/26 [00:00<00:00, 26.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.24 (  0.24)	train_acc   0.45 (  0.50)	train_minacc   0.31 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 14.1146 (14.1212)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.60it/s] 27%|##6       | 7/26 [00:00<00:00, 36.25it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.25it/s] 46%|####6     | 12/26 [00:00<00:00, 42.28it/s] 65%|######5   | 17/26 [00:00<00:00, 43.16it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.16it/s] 88%|########8 | 23/26 [00:00<00:00, 48.36it/s]100%|##########| 26/26 [00:00<00:00, 40.64it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.695 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.46 (  0.49)	Loss_d 0.695 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.32 (  0.28)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.54 (  0.50)	test_minacc   0.67 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.693)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.67 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.30 (  0.26)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.45 (  0.50)	test_minacc   0.31 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.695 (0.693)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.31 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.23 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.23it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 40/  1]	epoch_time 0.0361 (0.0379)	validation_time 0.0003 (0.0005)	train_time 0.0357 (0.0373)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.5000000120997429, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.88it/s] 15%|#5        | 4/26 [00:00<00:01, 19.32it/s] 27%|##6       | 7/26 [00:00<00:00, 23.14it/s] 42%|####2     | 11/26 [00:00<00:00, 27.59it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.65it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.18it/s] 88%|########8 | 23/26 [00:00<00:00, 31.23it/s]100%|##########| 26/26 [00:00<00:00, 26.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.24 (  0.24)	train_acc   0.45 (  0.50)	train_minacc   0.31 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 14.1007 (14.1068)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.01it/s] 27%|##6       | 7/26 [00:00<00:00, 34.16it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.16it/s] 50%|#####     | 13/26 [00:00<00:00, 39.46it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.03it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.03it/s] 96%|#########6| 25/26 [00:00<00:00, 46.67it/s]100%|##########| 26/26 [00:00<00:00, 38.91it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.695 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.46 (  0.49)	Loss_d 0.695 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.29 (  0.25)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.54 (  0.50)	test_minacc   0.67 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.693)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.67 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.27 (  0.23)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.45 (  0.50)	test_minacc   0.31 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.695 (0.693)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.31 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.21 (  0.24)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.57it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 41/  1]	epoch_time 0.0378 (0.0379)	validation_time 0.0003 (0.0005)	train_time 0.0375 (0.0373)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.5000000120997429, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.55it/s] 19%|#9        | 5/26 [00:00<00:00, 22.49it/s] 35%|###4      | 9/26 [00:00<00:00, 27.71it/s] 50%|#####     | 13/26 [00:00<00:00, 30.32it/s] 65%|######5   | 17/26 [00:00<00:00, 31.54it/s] 81%|########  | 21/26 [00:00<00:00, 32.46it/s] 96%|#########6| 25/26 [00:00<00:00, 33.29it/s]100%|##########| 26/26 [00:00<00:00, 28.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.24 (  0.24)	train_acc   0.45 (  0.50)	train_minacc   0.31 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 14.0876 (14.0933)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.41it/s] 31%|###       | 8/26 [00:00<00:00, 42.24it/s]                                               31%|###       | 8/26 [00:00<00:00, 42.24it/s] 50%|#####     | 13/26 [00:00<00:00, 43.82it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.11it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.11it/s] 96%|#########6| 25/26 [00:00<00:00, 48.44it/s]100%|##########| 26/26 [00:00<00:00, 42.28it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.15 (  0.15)
Test: [  10/  26]	Loss 0.695 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.46 (  0.49)	Loss_d 0.695 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.26 (  0.22)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.54 (  0.50)	test_minacc   0.67 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.693)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.67 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.24 (  0.20)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.45 (  0.50)	test_minacc   0.31 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.695 (0.693)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.31 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.18 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.41it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 42/  1]	epoch_time 0.0373 (0.0378)	validation_time 0.0005 (0.0005)	train_time 0.0368 (0.0373)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.5000000120997429, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.65it/s] 19%|#9        | 5/26 [00:00<00:00, 23.27it/s] 35%|###4      | 9/26 [00:00<00:00, 27.83it/s] 50%|#####     | 13/26 [00:00<00:00, 30.21it/s] 65%|######5   | 17/26 [00:00<00:00, 31.51it/s] 81%|########  | 21/26 [00:00<00:00, 32.27it/s] 96%|#########6| 25/26 [00:00<00:00, 33.04it/s]100%|##########| 26/26 [00:00<00:00, 28.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.24 (  0.24)	train_acc   0.45 (  0.50)	train_minacc   0.31 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 14.0753 (14.0807)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.66it/s] 12%|#1        | 3/26 [00:00<00:01, 11.73it/s] 35%|###4      | 9/26 [00:00<00:00, 29.64it/s]                                               35%|###4      | 9/26 [00:00<00:00, 29.64it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.30it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 37.30it/s] 81%|########  | 21/26 [00:00<00:00, 43.93it/s]100%|##########| 26/26 [00:00<00:00, 33.83it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.46 (  0.49)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.24 (  0.19)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.54 (  0.50)	test_minacc   0.67 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.693)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.67 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.22 (  0.18)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.45 (  0.50)	test_minacc   0.31 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.695 (0.693)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.31 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.15 (  0.18)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.01it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 43/  1]	epoch_time 0.0364 (0.0378)	validation_time 0.0004 (0.0005)	train_time 0.0361 (0.0372)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.5000000120997429, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.20it/s] 19%|#9        | 5/26 [00:00<00:00, 22.87it/s] 35%|###4      | 9/26 [00:00<00:00, 27.47it/s] 50%|#####     | 13/26 [00:00<00:00, 30.01it/s] 65%|######5   | 17/26 [00:00<00:00, 31.32it/s] 81%|########  | 21/26 [00:00<00:00, 32.24it/s] 96%|#########6| 25/26 [00:00<00:00, 32.62it/s]100%|##########| 26/26 [00:00<00:00, 28.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.24 (  0.24)	train_acc   0.45 (  0.50)	train_minacc   0.31 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 14.0638 (14.0688)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.96it/s] 31%|###       | 8/26 [00:00<00:00, 41.57it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.57it/s] 50%|#####     | 13/26 [00:00<00:00, 43.26it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.10it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.10it/s] 96%|#########6| 25/26 [00:00<00:00, 49.19it/s]100%|##########| 26/26 [00:00<00:00, 42.60it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.46 (  0.49)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.21 (  0.17)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.54 (  0.50)	test_minacc   0.67 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.693)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.67 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.19 (  0.15)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.45 (  0.50)	test_minacc   0.31 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.695 (0.693)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.31 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.13 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.28it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 44/  1]	epoch_time 0.0354 (0.0378)	validation_time 0.0004 (0.0005)	train_time 0.0350 (0.0372)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.5000000120997429, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.67it/s] 19%|#9        | 5/26 [00:00<00:00, 21.80it/s] 35%|###4      | 9/26 [00:00<00:00, 27.06it/s] 50%|#####     | 13/26 [00:00<00:00, 30.07it/s] 65%|######5   | 17/26 [00:00<00:00, 31.44it/s] 81%|########  | 21/26 [00:00<00:00, 32.90it/s] 96%|#########6| 25/26 [00:00<00:00, 32.93it/s]100%|##########| 26/26 [00:00<00:00, 28.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.24 (  0.24)	train_acc   0.45 (  0.50)	train_minacc   0.31 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 14.0531 (14.0577)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.09it/s] 27%|##6       | 7/26 [00:00<00:00, 35.90it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.90it/s] 50%|#####     | 13/26 [00:00<00:00, 43.28it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.99it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.99it/s] 96%|#########6| 25/26 [00:00<00:00, 48.44it/s]100%|##########| 26/26 [00:00<00:00, 41.56it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.46 (  0.49)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.18 (  0.14)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.54 (  0.50)	test_minacc   0.67 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.691 (0.693)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.67 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.17 (  0.13)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.45 (  0.50)	test_minacc   0.31 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.695 (0.693)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.31 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.11 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.54it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.28 ( -0.28)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.28 ( -0.28)
Overall Timing[ 45/  1]	epoch_time 0.0376 (0.0378)	validation_time 0.0003 (0.0005)	train_time 0.0373 (0.0372)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.5000000120997429, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.95it/s] 19%|#9        | 5/26 [00:00<00:00, 22.37it/s] 35%|###4      | 9/26 [00:00<00:00, 27.02it/s] 50%|#####     | 13/26 [00:00<00:00, 29.88it/s] 65%|######5   | 17/26 [00:00<00:00, 31.43it/s] 81%|########  | 21/26 [00:00<00:00, 32.85it/s] 96%|#########6| 25/26 [00:00<00:00, 33.35it/s]100%|##########| 26/26 [00:00<00:00, 28.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.24 (  0.24)	train_acc   0.45 (  0.50)	train_minacc   0.31 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 14.0430 (14.0474)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.03it/s] 23%|##3       | 6/26 [00:00<00:00, 28.87it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.87it/s] 46%|####6     | 12/26 [00:00<00:00, 40.71it/s] 69%|######9   | 18/26 [00:00<00:00, 44.48it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.48it/s] 92%|#########2| 24/26 [00:00<00:00, 48.67it/s]100%|##########| 26/26 [00:00<00:00, 40.02it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.46 (  0.49)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.16 (  0.12)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.50)	test_minacc   0.67 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.67 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.15 (  0.11)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.50)	test_minacc   0.31 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.31 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.09 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.04it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.30 ( -0.30)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.30 ( -0.30)
Overall Timing[ 46/  1]	epoch_time 0.0360 (0.0377)	validation_time 0.0003 (0.0005)	train_time 0.0357 (0.0372)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.5000000120997429, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.72it/s] 15%|#5        | 4/26 [00:00<00:01, 16.31it/s] 27%|##6       | 7/26 [00:00<00:00, 21.47it/s] 42%|####2     | 11/26 [00:00<00:00, 25.88it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.90it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.26it/s] 88%|########8 | 23/26 [00:00<00:00, 31.57it/s]100%|##########| 26/26 [00:00<00:00, 26.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.24 (  0.24)	train_acc   0.45 (  0.50)	train_minacc   0.31 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 14.0335 (14.0376)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.67it/s] 27%|##6       | 7/26 [00:00<00:00, 32.44it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.44it/s] 50%|#####     | 13/26 [00:00<00:00, 39.01it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.82it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.82it/s] 96%|#########6| 25/26 [00:00<00:00, 46.64it/s]100%|##########| 26/26 [00:00<00:00, 38.34it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.46 (  0.49)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.14 (  0.10)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.50)	test_minacc   0.67 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.67 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.13 (  0.08)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.50)	test_minacc   0.31 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.31 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.07 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.70it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.32 ( -0.32)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.32 ( -0.32)
Overall Timing[ 47/  1]	epoch_time 0.0379 (0.0377)	validation_time 0.0004 (0.0005)	train_time 0.0375 (0.0372)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.5000000120997429, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.62it/s] 19%|#9        | 5/26 [00:00<00:00, 23.43it/s] 35%|###4      | 9/26 [00:00<00:00, 27.95it/s] 50%|#####     | 13/26 [00:00<00:00, 30.60it/s] 65%|######5   | 17/26 [00:00<00:00, 32.39it/s] 81%|########  | 21/26 [00:00<00:00, 33.36it/s] 96%|#########6| 25/26 [00:00<00:00, 34.20it/s]100%|##########| 26/26 [00:00<00:00, 29.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.24 (  0.24)	train_acc   0.45 (  0.50)	train_minacc   0.31 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 14.0247 (14.0285)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.72it/s] 27%|##6       | 7/26 [00:00<00:00, 36.26it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.26it/s] 50%|#####     | 13/26 [00:00<00:00, 41.93it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.75it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.75it/s] 96%|#########6| 25/26 [00:00<00:00, 48.20it/s]100%|##########| 26/26 [00:00<00:00, 40.52it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.46 (  0.49)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.12 (  0.08)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.50)	test_minacc   0.67 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.67 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.11 (  0.07)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.50)	test_minacc   0.31 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.31 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.05 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.94it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.34 ( -0.34)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.34 ( -0.34)
Overall Timing[ 48/  1]	epoch_time 0.0367 (0.0377)	validation_time 0.0003 (0.0005)	train_time 0.0364 (0.0371)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.5000000120997429, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.91it/s] 15%|#5        | 4/26 [00:00<00:01, 16.90it/s] 31%|###       | 8/26 [00:00<00:00, 23.36it/s] 46%|####6     | 12/26 [00:00<00:00, 26.71it/s] 62%|######1   | 16/26 [00:00<00:00, 29.01it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.97it/s] 92%|#########2| 24/26 [00:00<00:00, 31.36it/s]100%|##########| 26/26 [00:01<00:00, 25.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.24 (  0.24)	train_acc   0.45 (  0.50)	train_minacc   0.31 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 14.0164 (14.0200)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.64it/s] 27%|##6       | 7/26 [00:00<00:00, 37.03it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.03it/s] 50%|#####     | 13/26 [00:00<00:00, 42.29it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.24it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.24it/s] 96%|#########6| 25/26 [00:00<00:00, 48.07it/s]100%|##########| 26/26 [00:00<00:00, 40.61it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.46 (  0.49)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.10 (  0.06)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.50)	test_minacc   0.67 (  0.51)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.67 (  0.51)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.10 (  0.05)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.50)	test_minacc   0.31 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.31 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.03 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.73it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.36 ( -0.36)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.36 ( -0.36)
Overall Timing[ 49/  1]	epoch_time 0.0373 (0.0377)	validation_time 0.0004 (0.0005)	train_time 0.0369 (0.0371)
record: (train_acc, test_acc) (0.8634000225067139, 0.45900002121925354)
last accs (train_acc, test_acc) (0.5000000120997429, 0.5)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.096 MB of 0.096 MB uploadedwandb: \ 0.096 MB of 0.096 MB uploadedwandb: | 0.096 MB of 0.096 MB uploadedwandb: / 0.096 MB of 0.096 MB uploadedwandb: - 0.118 MB of 0.126 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/diagnostics/epoch_time_val █▁▂▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▂▁▁▁▂▁▁▁▂▂▁▁▁▁▁▁▁▁▁▁▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/diagnostics/train_time_val █▁▂▁▁▂▁▂▂▁▁▁▁▁▁▁▁▁▂▂▁▁▁▂▂▁▁▂▂▂▁▁▁▂▁▁▂▁▂▁
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/Loss_avg ▆▇██▇██▆▇█▆▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/Loss_d_avg ▆▇██▇██▆▇█▆▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/Loss_d_val ▆▇██▇██▆▇█▆▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/Loss_val ▆▇██▇██▆▇█▆▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/test_acc_avg ▁▁▂▂▃▂▂▄▃▂▅▆█▇▇████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/test_acc_d_avg ▁▁▂▂▃▂▂▄▃▂▅▆█▇▇████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/test_acc_d_val ▁▁▂▂▃▂▂▄▃▂▅▆█▇▇████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/test_acc_val ▁▁▂▂▃▂▂▄▃▂▅▆█▇▇████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/test_corr_d_avg ████▇█▇▇▇█▆▆▂▄▄▃▃▃▃▁▇▇▇▆▆▆▅▅▅▄▄▄▄▃▃▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/test_corr_d_val ████▇█▇▇▇█▆▆▂▄▄▃▃▃▃▁▇▇▇▆▆▆▅▅▅▄▄▄▄▃▃▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/test_majacc_avg ███████▇███▇▂▂▂▂▃▃▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/test_majacc_d_avg ███████▇███▇▂▂▂▂▃▃▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/test_majacc_d_val ███████▇███▇▂▂▂▂▃▃▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/test_majacc_val ███████▇███▇▂▂▂▂▃▃▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/test_minacc_avg ▁▁▂▂▃▂▂▄▃▂▄▅█▇█████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/test_minacc_d_avg ▁▁▂▂▃▂▂▄▃▂▄▅█▇█████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/test_minacc_d_val ▁▁▂▂▃▂▂▄▃▂▄▅█▇█████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/test_minacc_val ▁▁▂▂▃▂▂▄▃▂▄▅█▇█████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/Loss_avg █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/Loss_val █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/l1_avg ▂▃▂▂▁▁▂▂▄▅▆▇███████▆▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/l1_val ▃▃▂▁▁▁▂▃▅▆▆▇███████▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/train_acc_avg ▇███████████▆▂▂▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/train_acc_val ▇▇█▇████████▂▃▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/train_majacc_avg ▇███████████▆▂▂▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/train_majacc_val █████▇██▇▇▇▇▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/train_minacc_avg ▂▁▁▂▂▃▃▃▄▄▄▅██▆████▇████████████████████
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/train_minacc_val ▁▁▂▃▃▅▄▄▅▇▇▇█▇▅▅▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/train_nll_avg ▆▃▂▂▁▁▁▁▁▁▁▁▄███████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/train_nll_val ▃▂▂▂▂▂▂▁▁▁▁▁████████████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/train_penalty_avg █▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/train_penalty_val █▆▅▄▅▃▃▄▃▃▃▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/weight_norm_avg █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/weight_norm_val █▄▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/diagnostics/epoch_time_val 0.03726
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/diagnostics/train_time_val 0.03689
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/diagnostics/validation_time_val 0.00035
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/Loss_avg 0.69254
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/Loss_d_avg 0.69254
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/Loss_d_val 0.69254
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/Loss_val 0.69254
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/test_acc_avg 0.5
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/test_acc_d_avg 0.5
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/test_acc_d_val 0.5
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/test_acc_val 0.5
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/test_corr_d_avg -0.35574
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/test_corr_d_val -0.35574
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/test_majacc_avg 0.5
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/test_majacc_d_avg 0.5
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/test_majacc_d_val 0.5
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/test_majacc_val 0.5
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/test_minacc_avg 0.5
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/test_minacc_d_avg 0.5
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/test_minacc_d_val 0.5
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/test/test_minacc_val 0.5
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/Loss_avg 9e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/Loss_val 9e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/l1_avg 14.02001
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/l1_val 14.01642
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/train_acc_avg 0.5
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/train_acc_val 0.452
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/train_majacc_avg 0.49995
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/train_majacc_val 0.47248
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/train_minacc_avg 0.50096
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/train_minacc_val 0.3125
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/train_nll_avg 0.69292
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/train_nll_val 0.69416
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/weight_norm_avg 0.23843
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/60/logs/train/weight_norm_val 0.23808
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/x1qcmxpd
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_121113-x1qcmxpd/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_121340-cf10h7bc
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/cf10h7bc
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=15.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1209
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5981, 3, 32, 32) (6019, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:41,  1.66s/it] 19%|#9        | 5/26 [00:01<00:05,  3.65it/s] 35%|###4      | 9/26 [00:01<00:02,  7.11it/s] 50%|#####     | 13/26 [00:02<00:01, 10.89it/s] 65%|######5   | 17/26 [00:02<00:00, 14.84it/s] 81%|########  | 21/26 [00:02<00:00, 18.69it/s] 96%|#########6| 25/26 [00:02<00:00, 22.10it/s]100%|##########| 26/26 [00:02<00:00,  9.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 9.447 (12.243)	train_nll   0.44 (  0.55)	train_penalty   0.07 (  0.29)	weight_norm   9.01 ( 11.69)	train_acc   0.83 (  0.81)	train_minacc   0.00 (  0.05)	train_majacc   1.00 (  0.95)	train_corr   0.00 (  0.00)	l1 6.8248 (8.0828)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.52it/s] 27%|##6       | 7/26 [00:00<00:00, 35.73it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.73it/s] 50%|#####     | 13/26 [00:00<00:00, 41.32it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.72it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.72it/s] 96%|#########6| 25/26 [00:00<00:00, 48.07it/s]100%|##########| 26/26 [00:00<00:00, 40.71it/s]
Test: [   0/  26]	Loss 0.394 (0.394)	test_acc   0.86 (  0.86)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.394 (0.394)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.432 (0.422)	test_acc   0.83 (  0.84)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  0.99)	Loss_d 0.432 (0.422)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.99 (  0.98)
Test: [  20/  26]	Loss 0.402 (0.412)	test_acc   0.86 (  0.85)	test_minacc   0.02 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.402 (0.412)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.02 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.430 (0.414)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.430 (0.414)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.56it/s]100%|##########| 1/1 [00:00<00:00,  2.55it/s]
Test: [  0/  1]	Loss 1.711 (1.711)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.711 (1.711)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 1.711 (1.711)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.711 (1.711)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/61/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0756 (0.0756)	validation_time 0.0067 (0.0067)	train_time 0.0654 (0.0654)
record: (train_acc, test_acc) (0.8466000255942344, 0.10400000214576721)
last accs (train_acc, test_acc) (0.8466000255942344, 0.10400000214576721)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.56it/s] 19%|#9        | 5/26 [00:00<00:01, 20.02it/s] 35%|###4      | 9/26 [00:00<00:00, 26.18it/s] 50%|#####     | 13/26 [00:00<00:00, 29.62it/s] 65%|######5   | 17/26 [00:00<00:00, 31.00it/s] 81%|########  | 21/26 [00:00<00:00, 32.54it/s] 96%|#########6| 25/26 [00:00<00:00, 32.56it/s]100%|##########| 26/26 [00:00<00:00, 27.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 4.808 (6.730)	train_nll   0.39 (  0.41)	train_penalty   0.04 (  0.05)	weight_norm   4.42 (  6.32)	train_acc   0.84 (  0.85)	train_minacc   0.02 (  0.01)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 6.1451 (6.4678)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.84it/s] 27%|##6       | 7/26 [00:00<00:00, 34.28it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.28it/s] 50%|#####     | 13/26 [00:00<00:00, 41.04it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.66it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.66it/s] 96%|#########6| 25/26 [00:00<00:00, 48.17it/s]100%|##########| 26/26 [00:00<00:00, 41.04it/s]
Test: [   0/  26]	Loss 0.359 (0.359)	test_acc   0.86 (  0.86)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.359 (0.359)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.402 (0.391)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.402 (0.391)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.368 (0.379)	test_acc   0.86 (  0.85)	test_minacc   0.05 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.368 (0.379)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.05 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.96)
Test: [  26/  26]	Loss 0.372 (0.379)	test_acc   0.85 (  0.85)	test_minacc   0.07 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.372 (0.379)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.07 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.46it/s]
Test: [  0/  1]	Loss 1.731 (1.731)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.731 (1.731)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.731 (1.731)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.731 (1.731)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/61/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0368 (0.0562)	validation_time 0.0004 (0.0036)	train_time 0.0364 (0.0509)
record: (train_acc, test_acc) (0.8496000262498855, 0.11600000411272049)
last accs (train_acc, test_acc) (0.8496000262498855, 0.11600000411272049)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.16it/s] 19%|#9        | 5/26 [00:00<00:00, 22.19it/s] 35%|###4      | 9/26 [00:00<00:00, 28.01it/s] 50%|#####     | 13/26 [00:00<00:00, 30.82it/s] 65%|######5   | 17/26 [00:00<00:00, 32.42it/s] 81%|########  | 21/26 [00:00<00:00, 33.74it/s] 96%|#########6| 25/26 [00:00<00:00, 34.34it/s]100%|##########| 26/26 [00:00<00:00, 29.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 2.945 (3.740)	train_nll   0.39 (  0.40)	train_penalty   0.04 (  0.05)	weight_norm   2.56 (  3.34)	train_acc   0.85 (  0.85)	train_minacc   0.15 (  0.05)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 5.4801 (5.7731)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.78it/s] 27%|##6       | 7/26 [00:00<00:00, 30.06it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.06it/s] 50%|#####     | 13/26 [00:00<00:00, 37.74it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.81it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.81it/s] 96%|#########6| 25/26 [00:00<00:00, 45.21it/s]100%|##########| 26/26 [00:00<00:00, 36.77it/s]
Test: [   0/  26]	Loss 0.355 (0.355)	test_acc   0.86 (  0.86)	test_minacc   0.11 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 0.355 (0.355)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.411 (0.393)	test_acc   0.84 (  0.85)	test_minacc   0.03 (  0.06)	test_majacc   1.00 (  0.99)	Loss_d 0.411 (0.393)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.03 (  0.06)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.378 (0.382)	test_acc   0.85 (  0.85)	test_minacc   0.07 (  0.06)	test_majacc   0.98 (  0.99)	Loss_d 0.378 (0.382)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.07 (  0.06)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.95 (  0.96)
Test: [  26/  26]	Loss 0.375 (0.383)	test_acc   0.86 (  0.85)	test_minacc   0.15 (  0.06)	test_majacc   1.00 (  0.99)	Loss_d 0.375 (0.383)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.15 (  0.06)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.74it/s]
Test: [  0/  1]	Loss 1.813 (1.813)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   1.00 (  1.00)	Loss_d 1.813 (1.813)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Test: [  1/  1]	Loss 1.813 (1.813)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   1.00 (  1.00)	Loss_d 1.813 (1.813)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/61/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0355 (0.0493)	validation_time 0.0005 (0.0025)	train_time 0.0350 (0.0456)
record: (train_acc, test_acc) (0.8482000197768211, 0.14400000870227814)
last accs (train_acc, test_acc) (0.8482000197768211, 0.14400000870227814)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.30it/s] 19%|#9        | 5/26 [00:00<00:00, 21.20it/s] 35%|###4      | 9/26 [00:00<00:00, 26.29it/s] 50%|#####     | 13/26 [00:00<00:00, 29.30it/s] 65%|######5   | 17/26 [00:00<00:00, 31.16it/s] 81%|########  | 21/26 [00:00<00:00, 32.19it/s] 96%|#########6| 25/26 [00:00<00:00, 32.38it/s]100%|##########| 26/26 [00:00<00:00, 27.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 1.979 (2.405)	train_nll   0.37 (  0.38)	train_penalty   0.03 (  0.04)	weight_norm   1.61 (  2.02)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.08)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 5.0419 (5.3393)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.10it/s] 27%|##6       | 7/26 [00:00<00:00, 35.14it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.14it/s] 50%|#####     | 13/26 [00:00<00:00, 39.40it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.71it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.71it/s] 96%|#########6| 25/26 [00:00<00:00, 46.09it/s]100%|##########| 26/26 [00:00<00:00, 39.15it/s]
Test: [   0/  26]	Loss 0.341 (0.341)	test_acc   0.87 (  0.87)	test_minacc   0.22 (  0.22)	test_majacc   0.98 (  0.98)	Loss_d 0.341 (0.341)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.385 (0.371)	test_acc   0.83 (  0.85)	test_minacc   0.14 (  0.20)	test_majacc   0.97 (  0.96)	Loss_d 0.385 (0.371)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.14 (  0.20)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.90 (  0.90)
Test: [  20/  26]	Loss 0.367 (0.365)	test_acc   0.83 (  0.85)	test_minacc   0.18 (  0.19)	test_majacc   0.94 (  0.96)	Loss_d 0.367 (0.365)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.18 (  0.19)	test_majacc_d   0.94 (  0.96)	test_corr_d   0.89 (  0.90)
Test: [  26/  26]	Loss 0.346 (0.362)	test_acc   0.84 (  0.85)	test_minacc   0.20 (  0.19)	test_majacc   0.96 (  0.97)	Loss_d 0.346 (0.362)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.20 (  0.19)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.90 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.35it/s]
Test: [  0/  1]	Loss 1.522 (1.522)	test_acc   0.17 (  0.17)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 1.522 (1.522)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.84 (  0.84)
Test: [  1/  1]	Loss 1.522 (1.522)	test_acc   0.17 (  0.17)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 1.522 (1.522)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.84 (  0.84)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/61/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0379 (0.0464)	validation_time 0.0003 (0.0020)	train_time 0.0375 (0.0436)
record: (train_acc, test_acc) (0.8487000280022621, 0.16600000858306885)
last accs (train_acc, test_acc) (0.8487000280022621, 0.16600000858306885)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.19it/s] 19%|#9        | 5/26 [00:00<00:01, 18.38it/s] 35%|###4      | 9/26 [00:00<00:00, 24.57it/s] 50%|#####     | 13/26 [00:00<00:00, 28.20it/s] 65%|######5   | 17/26 [00:00<00:00, 30.39it/s] 81%|########  | 21/26 [00:00<00:00, 31.60it/s] 96%|#########6| 25/26 [00:00<00:00, 32.39it/s]100%|##########| 26/26 [00:00<00:00, 26.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.405 (1.656)	train_nll   0.36 (  0.37)	train_penalty   0.02 (  0.03)	weight_norm   1.04 (  1.29)	train_acc   0.84 (  0.85)	train_minacc   0.05 (  0.12)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 5.3323 (5.1846)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.11it/s] 27%|##6       | 7/26 [00:00<00:00, 36.15it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.15it/s] 50%|#####     | 13/26 [00:00<00:00, 40.54it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.33it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.33it/s] 96%|#########6| 25/26 [00:00<00:00, 47.63it/s]100%|##########| 26/26 [00:00<00:00, 40.30it/s]
Test: [   0/  26]	Loss 0.323 (0.323)	test_acc   0.86 (  0.86)	test_minacc   0.22 (  0.22)	test_majacc   0.97 (  0.97)	Loss_d 0.323 (0.323)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.383 (0.360)	test_acc   0.84 (  0.85)	test_minacc   0.25 (  0.25)	test_majacc   0.96 (  0.96)	Loss_d 0.383 (0.360)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.88)
Test: [  20/  26]	Loss 0.345 (0.352)	test_acc   0.86 (  0.85)	test_minacc   0.30 (  0.25)	test_majacc   0.95 (  0.96)	Loss_d 0.345 (0.352)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.30 (  0.25)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.86 (  0.88)
Test: [  26/  26]	Loss 0.319 (0.349)	test_acc   0.86 (  0.85)	test_minacc   0.32 (  0.26)	test_majacc   0.96 (  0.96)	Loss_d 0.319 (0.349)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.32 (  0.26)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.15it/s]
Test: [  0/  1]	Loss 1.558 (1.558)	test_acc   0.29 (  0.29)	test_minacc   0.22 (  0.22)	test_majacc   0.96 (  0.96)	Loss_d 1.558 (1.558)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.70 (  0.70)
Test: [  1/  1]	Loss 1.558 (1.558)	test_acc   0.29 (  0.29)	test_minacc   0.22 (  0.22)	test_majacc   0.96 (  0.96)	Loss_d 1.558 (1.558)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.70 (  0.70)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/61/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0359 (0.0443)	validation_time 0.0004 (0.0017)	train_time 0.0355 (0.0420)
record: (train_acc, test_acc) (0.8520000218749046, 0.2930000126361847)
last accs (train_acc, test_acc) (0.8520000218749046, 0.2930000126361847)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.82it/s] 15%|#5        | 4/26 [00:00<00:01, 21.32it/s] 31%|###       | 8/26 [00:00<00:00, 27.07it/s] 46%|####6     | 12/26 [00:00<00:00, 30.35it/s] 62%|######1   | 16/26 [00:00<00:00, 31.94it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.32it/s] 92%|#########2| 24/26 [00:00<00:00, 33.15it/s]100%|##########| 26/26 [00:00<00:00, 28.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.002 (1.203)	train_nll   0.32 (  0.36)	train_penalty   0.01 (  0.03)	weight_norm   0.68 (  0.85)	train_acc   0.86 (  0.85)	train_minacc   0.27 (  0.15)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 6.2074 (5.8918)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.05it/s] 27%|##6       | 7/26 [00:00<00:00, 31.76it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.76it/s] 50%|#####     | 13/26 [00:00<00:00, 40.00it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.18it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.18it/s] 96%|#########6| 25/26 [00:00<00:00, 48.12it/s]100%|##########| 26/26 [00:00<00:00, 39.14it/s]
Test: [   0/  26]	Loss 0.325 (0.325)	test_acc   0.87 (  0.87)	test_minacc   0.29 (  0.29)	test_majacc   0.96 (  0.96)	Loss_d 0.325 (0.325)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.395 (0.354)	test_acc   0.83 (  0.85)	test_minacc   0.27 (  0.31)	test_majacc   0.94 (  0.95)	Loss_d 0.395 (0.354)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.27 (  0.31)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.86 (  0.87)
Test: [  20/  26]	Loss 0.355 (0.343)	test_acc   0.87 (  0.86)	test_minacc   0.41 (  0.32)	test_majacc   0.95 (  0.95)	Loss_d 0.355 (0.343)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.41 (  0.32)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.86 (  0.87)
Test: [  26/  26]	Loss 0.287 (0.338)	test_acc   0.88 (  0.86)	test_minacc   0.49 (  0.33)	test_majacc   0.96 (  0.95)	Loss_d 0.287 (0.338)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.49 (  0.33)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.85 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.11it/s]
Test: [  0/  1]	Loss 1.572 (1.572)	test_acc   0.31 (  0.31)	test_minacc   0.24 (  0.24)	test_majacc   0.93 (  0.93)	Loss_d 1.572 (1.572)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.68 (  0.68)
Test: [  1/  1]	Loss 1.572 (1.572)	test_acc   0.31 (  0.31)	test_minacc   0.24 (  0.24)	test_majacc   0.93 (  0.93)	Loss_d 1.572 (1.572)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.68 (  0.68)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/61/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0364 (0.0430)	validation_time 0.0004 (0.0014)	train_time 0.0360 (0.0410)
record: (train_acc, test_acc) (0.8579000247716904, 0.3100000023841858)
last accs (train_acc, test_acc) (0.8579000247716904, 0.3100000023841858)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.46it/s] 23%|##3       | 6/26 [00:00<00:00, 25.04it/s] 38%|###8      | 10/26 [00:00<00:00, 28.79it/s] 54%|#####3    | 14/26 [00:00<00:00, 29.41it/s] 69%|######9   | 18/26 [00:00<00:00, 31.15it/s] 85%|########4 | 22/26 [00:00<00:00, 32.76it/s]100%|##########| 26/26 [00:00<00:00, 34.18it/s]100%|##########| 26/26 [00:00<00:00, 29.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.847 (0.946)	train_nll   0.34 (  0.36)	train_penalty   0.02 (  0.03)	weight_norm   0.50 (  0.58)	train_acc   0.86 (  0.85)	train_minacc   0.32 (  0.12)	train_majacc   0.96 (  0.98)	train_corr   0.00 (  0.00)	l1 7.3762 (6.8879)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.13it/s] 27%|##6       | 7/26 [00:00<00:00, 33.48it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.48it/s] 46%|####6     | 12/26 [00:00<00:00, 39.48it/s] 65%|######5   | 17/26 [00:00<00:00, 42.96it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.96it/s] 85%|########4 | 22/26 [00:00<00:00, 44.82it/s]100%|##########| 26/26 [00:00<00:00, 38.57it/s]
Test: [   0/  26]	Loss 0.320 (0.320)	test_acc   0.86 (  0.86)	test_minacc   0.29 (  0.29)	test_majacc   0.95 (  0.95)	Loss_d 0.320 (0.320)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.366 (0.356)	test_acc   0.85 (  0.85)	test_minacc   0.28 (  0.30)	test_majacc   0.96 (  0.95)	Loss_d 0.366 (0.356)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.28 (  0.30)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.86 (  0.85)
Test: [  20/  26]	Loss 0.347 (0.346)	test_acc   0.87 (  0.86)	test_minacc   0.38 (  0.33)	test_majacc   0.95 (  0.95)	Loss_d 0.347 (0.346)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.38 (  0.33)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.85 (  0.85)
Test: [  26/  26]	Loss 0.311 (0.343)	test_acc   0.86 (  0.86)	test_minacc   0.39 (  0.33)	test_majacc   0.96 (  0.95)	Loss_d 0.311 (0.343)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.39 (  0.33)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.84 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.39it/s]
Test: [  0/  1]	Loss 1.366 (1.366)	test_acc   0.31 (  0.31)	test_minacc   0.24 (  0.24)	test_majacc   0.96 (  0.96)	Loss_d 1.366 (1.366)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.65 (  0.65)
Test: [  1/  1]	Loss 1.366 (1.366)	test_acc   0.31 (  0.31)	test_minacc   0.24 (  0.24)	test_majacc   0.96 (  0.96)	Loss_d 1.366 (1.366)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.65 (  0.65)
Overall Timing[  6/  1]	epoch_time 0.0358 (0.0420)	validation_time 0.0004 (0.0013)	train_time 0.0354 (0.0402)
record: (train_acc, test_acc) (0.8579000247716904, 0.3100000023841858)
last accs (train_acc, test_acc) (0.8576000251173973, 0.30900001525878906)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.21it/s] 19%|#9        | 5/26 [00:00<00:01, 18.91it/s] 35%|###4      | 9/26 [00:00<00:00, 25.40it/s] 50%|#####     | 13/26 [00:00<00:00, 29.38it/s] 65%|######5   | 17/26 [00:00<00:00, 31.60it/s] 81%|########  | 21/26 [00:00<00:00, 33.02it/s] 96%|#########6| 25/26 [00:00<00:00, 33.92it/s]100%|##########| 26/26 [00:00<00:00, 27.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.637 (0.743)	train_nll   0.32 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.31 (  0.40)	train_acc   0.86 (  0.85)	train_minacc   0.27 (  0.18)	train_majacc   0.97 (  0.97)	train_corr   0.00 (  0.00)	l1 8.8614 (8.3399)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.15it/s] 35%|###4      | 9/26 [00:00<00:00, 39.29it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.29it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.32it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.32it/s] 81%|########  | 21/26 [00:00<00:00, 46.95it/s]100%|##########| 26/26 [00:00<00:00, 43.07it/s]
Test: [   0/  26]	Loss 0.316 (0.316)	test_acc   0.86 (  0.86)	test_minacc   0.40 (  0.40)	test_majacc   0.93 (  0.93)	Loss_d 0.316 (0.316)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.350 (0.344)	test_acc   0.84 (  0.85)	test_minacc   0.30 (  0.37)	test_majacc   0.94 (  0.94)	Loss_d 0.350 (0.344)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.30 (  0.37)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.85 (  0.84)
Test: [  20/  26]	Loss 0.349 (0.341)	test_acc   0.85 (  0.85)	test_minacc   0.38 (  0.36)	test_majacc   0.93 (  0.94)	Loss_d 0.349 (0.341)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.38 (  0.36)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.83 (  0.85)
Test: [  26/  26]	Loss 0.311 (0.339)	test_acc   0.86 (  0.85)	test_minacc   0.44 (  0.38)	test_majacc   0.95 (  0.94)	Loss_d 0.311 (0.339)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.44 (  0.38)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.84 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.92it/s]
Test: [  0/  1]	Loss 1.404 (1.404)	test_acc   0.38 (  0.38)	test_minacc   0.32 (  0.32)	test_majacc   0.94 (  0.94)	Loss_d 1.404 (1.404)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.57 (  0.57)
Test: [  1/  1]	Loss 1.404 (1.404)	test_acc   0.38 (  0.38)	test_minacc   0.32 (  0.32)	test_majacc   0.94 (  0.94)	Loss_d 1.404 (1.404)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.57 (  0.57)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/61/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0353 (0.0411)	validation_time 0.0003 (0.0012)	train_time 0.0349 (0.0395)
record: (train_acc, test_acc) (0.8529000265598297, 0.38100001215934753)
last accs (train_acc, test_acc) (0.8529000265598297, 0.38100001215934753)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.94it/s] 19%|#9        | 5/26 [00:00<00:01, 15.61it/s] 35%|###4      | 9/26 [00:00<00:00, 21.96it/s] 50%|#####     | 13/26 [00:00<00:00, 26.26it/s] 65%|######5   | 17/26 [00:00<00:00, 29.38it/s] 81%|########  | 21/26 [00:00<00:00, 31.60it/s] 96%|#########6| 25/26 [00:00<00:00, 33.16it/s]100%|##########| 26/26 [00:01<00:00, 25.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.534 (0.606)	train_nll   0.31 (  0.34)	train_penalty   0.01 (  0.02)	weight_norm   0.23 (  0.27)	train_acc   0.86 (  0.85)	train_minacc   0.27 (  0.20)	train_majacc   0.97 (  0.97)	train_corr   0.00 (  0.00)	l1 10.6571 (9.7385)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.67it/s] 27%|##6       | 7/26 [00:00<00:00, 35.55it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.55it/s] 46%|####6     | 12/26 [00:00<00:00, 40.78it/s] 69%|######9   | 18/26 [00:00<00:00, 46.94it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.94it/s] 92%|#########2| 24/26 [00:00<00:00, 46.96it/s]100%|##########| 26/26 [00:00<00:00, 40.21it/s]
Test: [   0/  26]	Loss 0.307 (0.307)	test_acc   0.87 (  0.87)	test_minacc   0.47 (  0.47)	test_majacc   0.94 (  0.94)	Loss_d 0.307 (0.307)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.358 (0.345)	test_acc   0.85 (  0.85)	test_minacc   0.34 (  0.36)	test_majacc   0.94 (  0.94)	Loss_d 0.358 (0.345)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.34 (  0.36)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.86 (  0.86)
Test: [  20/  26]	Loss 0.334 (0.337)	test_acc   0.85 (  0.85)	test_minacc   0.34 (  0.37)	test_majacc   0.93 (  0.94)	Loss_d 0.334 (0.337)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.34 (  0.37)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.86 (  0.86)
Test: [  26/  26]	Loss 0.278 (0.332)	test_acc   0.87 (  0.85)	test_minacc   0.49 (  0.39)	test_majacc   0.94 (  0.94)	Loss_d 0.278 (0.332)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.49 (  0.39)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.84 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.80it/s]
Test: [  0/  1]	Loss 1.520 (1.520)	test_acc   0.39 (  0.39)	test_minacc   0.32 (  0.32)	test_majacc   0.95 (  0.95)	Loss_d 1.520 (1.520)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.60 (  0.60)
Test: [  1/  1]	Loss 1.520 (1.520)	test_acc   0.39 (  0.39)	test_minacc   0.32 (  0.32)	test_majacc   0.95 (  0.95)	Loss_d 1.520 (1.520)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.60 (  0.60)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/61/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0354 (0.0405)	validation_time 0.0004 (0.0011)	train_time 0.0350 (0.0390)
record: (train_acc, test_acc) (0.8547000231742858, 0.38700002431869507)
last accs (train_acc, test_acc) (0.8547000231742858, 0.38700002431869507)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.38it/s] 19%|#9        | 5/26 [00:00<00:01, 17.90it/s] 35%|###4      | 9/26 [00:00<00:00, 23.96it/s] 50%|#####     | 13/26 [00:00<00:00, 27.77it/s] 65%|######5   | 17/26 [00:00<00:00, 30.01it/s] 81%|########  | 21/26 [00:00<00:00, 31.16it/s] 96%|#########6| 25/26 [00:00<00:00, 32.43it/s]100%|##########| 26/26 [00:00<00:00, 26.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.499 (0.546)	train_nll   0.33 (  0.35)	train_penalty   0.01 (  0.03)	weight_norm   0.17 (  0.20)	train_acc   0.85 (  0.85)	train_minacc   0.37 (  0.19)	train_majacc   0.95 (  0.97)	train_corr   0.00 (  0.00)	l1 11.9204 (11.4080)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.25it/s] 27%|##6       | 7/26 [00:00<00:00, 35.35it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.35it/s] 46%|####6     | 12/26 [00:00<00:00, 36.20it/s] 69%|######9   | 18/26 [00:00<00:00, 43.11it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.11it/s] 92%|#########2| 24/26 [00:00<00:00, 45.29it/s]100%|##########| 26/26 [00:00<00:00, 39.07it/s]
Test: [   0/  26]	Loss 0.297 (0.297)	test_acc   0.87 (  0.87)	test_minacc   0.31 (  0.31)	test_majacc   0.96 (  0.96)	Loss_d 0.297 (0.297)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.343 (0.333)	test_acc   0.86 (  0.86)	test_minacc   0.36 (  0.35)	test_majacc   0.96 (  0.95)	Loss_d 0.343 (0.333)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.36 (  0.35)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.86 (  0.86)
Test: [  20/  26]	Loss 0.332 (0.331)	test_acc   0.87 (  0.86)	test_minacc   0.34 (  0.34)	test_majacc   0.96 (  0.95)	Loss_d 0.332 (0.331)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.86 (  0.86)
Test: [  26/  26]	Loss 0.285 (0.327)	test_acc   0.86 (  0.86)	test_minacc   0.37 (  0.35)	test_majacc   0.95 (  0.95)	Loss_d 0.285 (0.327)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.37 (  0.35)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.85 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.62it/s]
Test: [  0/  1]	Loss 1.367 (1.367)	test_acc   0.37 (  0.37)	test_minacc   0.30 (  0.30)	test_majacc   0.97 (  0.97)	Loss_d 1.367 (1.367)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.58 (  0.58)
Test: [  1/  1]	Loss 1.367 (1.367)	test_acc   0.37 (  0.37)	test_minacc   0.30 (  0.30)	test_majacc   0.97 (  0.97)	Loss_d 1.367 (1.367)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.58 (  0.58)
Overall Timing[  9/  1]	epoch_time 0.0370 (0.0402)	validation_time 0.0004 (0.0010)	train_time 0.0366 (0.0388)
record: (train_acc, test_acc) (0.8547000231742858, 0.38700002431869507)
last accs (train_acc, test_acc) (0.863700024664402, 0.3710000216960907)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.52it/s] 19%|#9        | 5/26 [00:00<00:00, 22.23it/s] 35%|###4      | 9/26 [00:00<00:00, 27.53it/s] 50%|#####     | 13/26 [00:00<00:00, 30.24it/s] 65%|######5   | 17/26 [00:00<00:00, 31.30it/s] 81%|########  | 21/26 [00:00<00:00, 32.03it/s] 96%|#########6| 25/26 [00:00<00:00, 32.65it/s]100%|##########| 26/26 [00:00<00:00, 28.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.459 (0.491)	train_nll   0.31 (  0.34)	train_penalty   0.01 (  0.02)	weight_norm   0.15 (  0.15)	train_acc   0.87 (  0.85)	train_minacc   0.34 (  0.21)	train_majacc   0.97 (  0.97)	train_corr   0.00 (  0.00)	l1 13.5848 (12.8456)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.40it/s] 23%|##3       | 6/26 [00:00<00:00, 31.05it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.05it/s] 42%|####2     | 11/26 [00:00<00:00, 39.09it/s] 65%|######5   | 17/26 [00:00<00:00, 43.30it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.30it/s] 88%|########8 | 23/26 [00:00<00:00, 48.25it/s]100%|##########| 26/26 [00:00<00:00, 39.83it/s]
Test: [   0/  26]	Loss 0.300 (0.300)	test_acc   0.87 (  0.87)	test_minacc   0.55 (  0.55)	test_majacc   0.92 (  0.92)	Loss_d 0.300 (0.300)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.85 (  0.85)
Test: [  10/  26]	Loss 0.366 (0.342)	test_acc   0.83 (  0.85)	test_minacc   0.44 (  0.48)	test_majacc   0.91 (  0.92)	Loss_d 0.366 (0.342)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.44 (  0.48)	test_majacc_d   0.91 (  0.92)	test_corr_d   0.82 (  0.82)
Test: [  20/  26]	Loss 0.334 (0.336)	test_acc   0.85 (  0.85)	test_minacc   0.48 (  0.48)	test_majacc   0.92 (  0.92)	Loss_d 0.334 (0.336)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.81 (  0.82)
Test: [  26/  26]	Loss 0.268 (0.331)	test_acc   0.88 (  0.85)	test_minacc   0.68 (  0.50)	test_majacc   0.92 (  0.92)	Loss_d 0.268 (0.331)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.68 (  0.50)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.78 (  0.82)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.60it/s]
Test: [  0/  1]	Loss 1.372 (1.372)	test_acc   0.46 (  0.46)	test_minacc   0.40 (  0.40)	test_majacc   0.94 (  0.94)	Loss_d 1.372 (1.372)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.47 (  0.47)
Test: [  1/  1]	Loss 1.372 (1.372)	test_acc   0.46 (  0.46)	test_minacc   0.40 (  0.40)	test_majacc   0.94 (  0.94)	Loss_d 1.372 (1.372)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.47 (  0.47)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/61/checkpoints/model_best.pth
Overall Timing[ 10/  1]	epoch_time 0.0361 (0.0398)	validation_time 0.0003 (0.0010)	train_time 0.0357 (0.0385)
record: (train_acc, test_acc) (0.8533000273704529, 0.4580000340938568)
last accs (train_acc, test_acc) (0.8533000273704529, 0.4580000340938568)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.84it/s] 19%|#9        | 5/26 [00:00<00:00, 23.03it/s] 35%|###4      | 9/26 [00:00<00:00, 28.54it/s] 50%|#####     | 13/26 [00:00<00:00, 31.42it/s] 65%|######5   | 17/26 [00:00<00:00, 32.46it/s] 81%|########  | 21/26 [00:00<00:00, 33.15it/s] 96%|#########6| 25/26 [00:00<00:00, 33.41it/s]100%|##########| 26/26 [00:00<00:00, 29.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.433 (0.472)	train_nll   0.31 (  0.34)	train_penalty   0.01 (  0.02)	weight_norm   0.12 (  0.13)	train_acc   0.86 (  0.85)	train_minacc   0.32 (  0.25)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 14.8759 (14.3713)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.57it/s] 23%|##3       | 6/26 [00:00<00:00, 32.37it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.37it/s] 42%|####2     | 11/26 [00:00<00:00, 37.83it/s] 65%|######5   | 17/26 [00:00<00:00, 44.70it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.70it/s] 85%|########4 | 22/26 [00:00<00:00, 45.30it/s]100%|##########| 26/26 [00:00<00:00, 40.09it/s]
Test: [   0/  26]	Loss 0.286 (0.286)	test_acc   0.87 (  0.87)	test_minacc   0.44 (  0.44)	test_majacc   0.94 (  0.94)	Loss_d 0.286 (0.286)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.85 (  0.85)
Test: [  10/  26]	Loss 0.325 (0.336)	test_acc   0.86 (  0.85)	test_minacc   0.44 (  0.44)	test_majacc   0.94 (  0.93)	Loss_d 0.325 (0.336)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.94 (  0.93)	test_corr_d   0.85 (  0.84)
Test: [  20/  26]	Loss 0.334 (0.333)	test_acc   0.85 (  0.86)	test_minacc   0.45 (  0.44)	test_majacc   0.92 (  0.93)	Loss_d 0.334 (0.333)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.45 (  0.44)	test_majacc_d   0.92 (  0.93)	test_corr_d   0.83 (  0.84)
Test: [  26/  26]	Loss 0.275 (0.328)	test_acc   0.88 (  0.86)	test_minacc   0.59 (  0.45)	test_majacc   0.94 (  0.93)	Loss_d 0.275 (0.328)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.59 (  0.45)	test_majacc_d   0.94 (  0.93)	test_corr_d   0.82 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.18it/s]
Test: [  0/  1]	Loss 1.346 (1.346)	test_acc   0.45 (  0.45)	test_minacc   0.39 (  0.39)	test_majacc   0.95 (  0.95)	Loss_d 1.346 (1.346)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.49 (  0.49)
Test: [  1/  1]	Loss 1.346 (1.346)	test_acc   0.45 (  0.45)	test_minacc   0.39 (  0.39)	test_majacc   0.95 (  0.95)	Loss_d 1.346 (1.346)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.49 (  0.49)
Overall Timing[ 11/  1]	epoch_time 0.0353 (0.0394)	validation_time 0.0004 (0.0009)	train_time 0.0349 (0.0382)
record: (train_acc, test_acc) (0.8533000273704529, 0.4580000340938568)
last accs (train_acc, test_acc) (0.8581000238060951, 0.44600000977516174)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.37it/s] 19%|#9        | 5/26 [00:00<00:00, 22.05it/s] 35%|###4      | 9/26 [00:00<00:00, 27.60it/s] 50%|#####     | 13/26 [00:00<00:00, 30.52it/s] 65%|######5   | 17/26 [00:00<00:00, 32.13it/s] 81%|########  | 21/26 [00:00<00:00, 32.99it/s] 96%|#########6| 25/26 [00:00<00:00, 33.89it/s]100%|##########| 26/26 [00:00<00:00, 29.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.411 (0.445)	train_nll   0.31 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.11 (  0.11)	train_acc   0.86 (  0.85)	train_minacc   0.24 (  0.26)	train_majacc   0.98 (  0.95)	train_corr   0.00 (  0.00)	l1 16.3648 (15.7551)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.85it/s] 27%|##6       | 7/26 [00:00<00:00, 32.29it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.29it/s] 50%|#####     | 13/26 [00:00<00:00, 40.59it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.65it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.65it/s] 96%|#########6| 25/26 [00:00<00:00, 46.72it/s]100%|##########| 26/26 [00:00<00:00, 38.75it/s]
Test: [   0/  26]	Loss 0.296 (0.296)	test_acc   0.87 (  0.87)	test_minacc   0.27 (  0.27)	test_majacc   0.97 (  0.97)	Loss_d 0.296 (0.296)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.345 (0.339)	test_acc   0.84 (  0.86)	test_minacc   0.16 (  0.25)	test_majacc   0.97 (  0.97)	Loss_d 0.345 (0.339)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.16 (  0.25)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.92 (  0.91)
Test: [  20/  26]	Loss 0.319 (0.328)	test_acc   0.86 (  0.86)	test_minacc   0.29 (  0.24)	test_majacc   0.96 (  0.97)	Loss_d 0.319 (0.328)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.29 (  0.24)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.89 (  0.91)
Test: [  26/  26]	Loss 0.279 (0.325)	test_acc   0.88 (  0.86)	test_minacc   0.34 (  0.25)	test_majacc   0.98 (  0.97)	Loss_d 0.279 (0.325)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.34 (  0.25)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.90 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.12it/s]
Test: [  0/  1]	Loss 1.629 (1.629)	test_acc   0.28 (  0.28)	test_minacc   0.20 (  0.20)	test_majacc   0.99 (  0.99)	Loss_d 1.629 (1.629)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.74 (  0.74)
Test: [  1/  1]	Loss 1.629 (1.629)	test_acc   0.28 (  0.28)	test_minacc   0.20 (  0.20)	test_majacc   0.99 (  0.99)	Loss_d 1.629 (1.629)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.74 (  0.74)
Overall Timing[ 12/  1]	epoch_time 0.0342 (0.0390)	validation_time 0.0004 (0.0009)	train_time 0.0338 (0.0378)
record: (train_acc, test_acc) (0.8533000273704529, 0.4580000340938568)
last accs (train_acc, test_acc) (0.8610000267028809, 0.2770000100135803)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.59it/s] 19%|#9        | 5/26 [00:00<00:01, 17.41it/s] 31%|###       | 8/26 [00:00<00:00, 20.80it/s] 46%|####6     | 12/26 [00:00<00:00, 25.65it/s] 62%|######1   | 16/26 [00:00<00:00, 28.71it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.56it/s] 92%|#########2| 24/26 [00:00<00:00, 31.67it/s]100%|##########| 26/26 [00:01<00:00, 25.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.377 (0.431)	train_nll   0.28 (  0.33)	train_penalty   0.01 (  0.02)	weight_norm   0.10 (  0.10)	train_acc   0.87 (  0.86)	train_minacc   0.44 (  0.30)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 17.5342 (16.9541)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.53it/s] 27%|##6       | 7/26 [00:00<00:00, 31.59it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.59it/s] 50%|#####     | 13/26 [00:00<00:00, 37.62it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.12it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.12it/s] 96%|#########6| 25/26 [00:00<00:00, 45.44it/s]100%|##########| 26/26 [00:00<00:00, 37.02it/s]
Test: [   0/  26]	Loss 0.302 (0.302)	test_acc   0.88 (  0.88)	test_minacc   0.44 (  0.44)	test_majacc   0.95 (  0.95)	Loss_d 0.302 (0.302)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.347 (0.342)	test_acc   0.85 (  0.85)	test_minacc   0.39 (  0.39)	test_majacc   0.94 (  0.94)	Loss_d 0.347 (0.342)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.86 (  0.85)
Test: [  20/  26]	Loss 0.298 (0.332)	test_acc   0.88 (  0.86)	test_minacc   0.52 (  0.40)	test_majacc   0.94 (  0.93)	Loss_d 0.298 (0.332)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.52 (  0.40)	test_majacc_d   0.94 (  0.93)	test_corr_d   0.83 (  0.85)
Test: [  26/  26]	Loss 0.244 (0.323)	test_acc   0.89 (  0.86)	test_minacc   0.59 (  0.43)	test_majacc   0.95 (  0.94)	Loss_d 0.244 (0.323)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.59 (  0.43)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.83 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.48it/s]
Test: [  0/  1]	Loss 1.512 (1.512)	test_acc   0.40 (  0.40)	test_minacc   0.34 (  0.34)	test_majacc   0.96 (  0.96)	Loss_d 1.512 (1.512)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.55 (  0.55)
Test: [  1/  1]	Loss 1.512 (1.512)	test_acc   0.40 (  0.40)	test_minacc   0.34 (  0.34)	test_majacc   0.96 (  0.96)	Loss_d 1.512 (1.512)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.55 (  0.55)
Overall Timing[ 13/  1]	epoch_time 0.0371 (0.0389)	validation_time 0.0004 (0.0008)	train_time 0.0367 (0.0378)
record: (train_acc, test_acc) (0.8533000273704529, 0.4580000340938568)
last accs (train_acc, test_acc) (0.8606000215411186, 0.398000031709671)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.55it/s] 19%|#9        | 5/26 [00:00<00:00, 21.92it/s] 35%|###4      | 9/26 [00:00<00:00, 26.59it/s] 50%|#####     | 13/26 [00:00<00:00, 29.04it/s] 65%|######5   | 17/26 [00:00<00:00, 30.94it/s] 81%|########  | 21/26 [00:00<00:00, 31.88it/s] 96%|#########6| 25/26 [00:00<00:00, 32.72it/s]100%|##########| 26/26 [00:00<00:00, 27.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.366 (0.414)	train_nll   0.27 (  0.32)	train_penalty   0.01 (  0.02)	weight_norm   0.09 (  0.09)	train_acc   0.87 (  0.86)	train_minacc   0.51 (  0.34)	train_majacc   0.94 (  0.95)	train_corr   0.00 (  0.00)	l1 18.5325 (18.0425)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.99it/s] 27%|##6       | 7/26 [00:00<00:00, 32.65it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.65it/s] 50%|#####     | 13/26 [00:00<00:00, 39.77it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.07it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.07it/s] 96%|#########6| 25/26 [00:00<00:00, 47.76it/s]100%|##########| 26/26 [00:00<00:00, 39.46it/s]
Test: [   0/  26]	Loss 0.269 (0.269)	test_acc   0.88 (  0.88)	test_minacc   0.64 (  0.64)	test_majacc   0.93 (  0.93)	Loss_d 0.269 (0.269)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.81 (  0.81)
Test: [  10/  26]	Loss 0.340 (0.329)	test_acc   0.85 (  0.85)	test_minacc   0.52 (  0.58)	test_majacc   0.91 (  0.90)	Loss_d 0.340 (0.329)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.52 (  0.58)	test_majacc_d   0.91 (  0.90)	test_corr_d   0.78 (  0.77)
Test: [  20/  26]	Loss 0.308 (0.324)	test_acc   0.87 (  0.86)	test_minacc   0.57 (  0.57)	test_majacc   0.92 (  0.91)	Loss_d 0.308 (0.324)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.92 (  0.91)	test_corr_d   0.78 (  0.78)
Test: [  26/  26]	Loss 0.227 (0.316)	test_acc   0.91 (  0.86)	test_minacc   0.73 (  0.59)	test_majacc   0.94 (  0.91)	Loss_d 0.227 (0.316)	test_acc_d   0.91 (  0.86)	test_minacc_d   0.73 (  0.59)	test_majacc_d   0.94 (  0.91)	test_corr_d   0.77 (  0.78)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.04it/s]
Test: [  0/  1]	Loss 1.290 (1.290)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.89 (  0.89)	Loss_d 1.290 (1.290)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 1.290 (1.290)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.49)	test_majacc   0.89 (  0.89)	Loss_d 1.290 (1.290)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.26 (  0.26)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/61/checkpoints/model_best.pth
Overall Timing[ 14/  1]	epoch_time 0.0358 (0.0387)	validation_time 0.0003 (0.0008)	train_time 0.0355 (0.0376)
record: (train_acc, test_acc) (0.8615000303387642, 0.5290000438690186)
last accs (train_acc, test_acc) (0.8615000303387642, 0.5290000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.36it/s] 19%|#9        | 5/26 [00:00<00:00, 23.60it/s] 35%|###4      | 9/26 [00:00<00:00, 28.04it/s] 50%|#####     | 13/26 [00:00<00:00, 30.51it/s] 65%|######5   | 17/26 [00:00<00:00, 31.87it/s] 81%|########  | 21/26 [00:00<00:00, 32.28it/s] 96%|#########6| 25/26 [00:00<00:00, 32.87it/s]100%|##########| 26/26 [00:00<00:00, 28.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.005 (0.162)	train_nll   0.49 (  0.41)	train_penalty   0.00 (  0.01)	weight_norm   0.11 (  0.09)	train_acc   0.74 (  0.80)	train_minacc   0.80 (  0.54)	train_majacc   0.72 (  0.84)	train_corr   0.00 (  0.00)	l1 18.3729 (18.6471)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.05it/s] 31%|###       | 8/26 [00:00<00:00, 32.05it/s]                                               31%|###       | 8/26 [00:00<00:00, 32.05it/s] 54%|#####3    | 14/26 [00:00<00:00, 41.09it/s] 77%|#######6  | 20/26 [00:00<00:00, 43.80it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 43.80it/s]100%|##########| 26/26 [00:00<00:00, 48.53it/s]100%|##########| 26/26 [00:00<00:00, 38.23it/s]
Test: [   0/  26]	Loss 0.505 (0.505)	test_acc   0.74 (  0.74)	test_minacc   0.71 (  0.71)	test_majacc   0.74 (  0.74)	Loss_d 0.505 (0.505)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.50 (  0.50)
Test: [  10/  26]	Loss 0.507 (0.515)	test_acc   0.72 (  0.72)	test_minacc   0.64 (  0.66)	test_majacc   0.73 (  0.73)	Loss_d 0.507 (0.515)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.64 (  0.66)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.54 (  0.52)
Test: [  20/  26]	Loss 0.489 (0.509)	test_acc   0.75 (  0.73)	test_minacc   0.73 (  0.65)	test_majacc   0.75 (  0.74)	Loss_d 0.489 (0.509)	test_acc_d   0.75 (  0.73)	test_minacc_d   0.73 (  0.65)	test_majacc_d   0.75 (  0.74)	test_corr_d   0.55 (  0.54)
Test: [  26/  26]	Loss 0.501 (0.508)	test_acc   0.71 (  0.73)	test_minacc   0.78 (  0.67)	test_majacc   0.70 (  0.74)	Loss_d 0.501 (0.508)	test_acc_d   0.71 (  0.73)	test_minacc_d   0.78 (  0.67)	test_majacc_d   0.70 (  0.74)	test_corr_d   0.48 (  0.53)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.20it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.69 (  0.69)	Loss_d 0.692 (0.692)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.69 (  0.69)	Loss_d 0.692 (0.692)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.15 ( -0.15)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/61/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0374 (0.0386)	validation_time 0.0004 (0.0008)	train_time 0.0370 (0.0376)
record: (train_acc, test_acc) (0.7291000334620475, 0.6510000228881836)
last accs (train_acc, test_acc) (0.7291000334620475, 0.6510000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.13it/s] 23%|##3       | 6/26 [00:00<00:00, 26.11it/s] 38%|###8      | 10/26 [00:00<00:00, 29.11it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.67it/s] 69%|######9   | 18/26 [00:00<00:00, 31.79it/s] 85%|########4 | 22/26 [00:00<00:00, 32.45it/s]100%|##########| 26/26 [00:00<00:00, 32.82it/s]100%|##########| 26/26 [00:00<00:00, 27.08it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.001)	train_nll   0.62 (  0.60)	train_penalty   0.00 (  0.00)	weight_norm   0.13 (  0.12)	train_acc   0.64 (  0.66)	train_minacc   0.76 (  0.71)	train_majacc   0.61 (  0.65)	train_corr   0.00 (  0.00)	l1 17.9731 (18.1320)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.47it/s] 23%|##3       | 6/26 [00:00<00:00, 31.32it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.32it/s] 42%|####2     | 11/26 [00:00<00:00, 37.44it/s] 65%|######5   | 17/26 [00:00<00:00, 44.35it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.35it/s] 88%|########8 | 23/26 [00:00<00:00, 46.59it/s]100%|##########| 26/26 [00:00<00:00, 39.63it/s]
Test: [   0/  26]	Loss 0.641 (0.641)	test_acc   0.64 (  0.64)	test_minacc   0.75 (  0.75)	test_majacc   0.62 (  0.62)	Loss_d 0.641 (0.641)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.598 (0.625)	test_acc   0.67 (  0.64)	test_minacc   0.77 (  0.72)	test_majacc   0.65 (  0.63)	Loss_d 0.598 (0.625)	test_acc_d   0.67 (  0.64)	test_minacc_d   0.77 (  0.72)	test_majacc_d   0.65 (  0.63)	test_corr_d   0.26 (  0.21)
Test: [  20/  26]	Loss 0.610 (0.625)	test_acc   0.67 (  0.64)	test_minacc   0.77 (  0.72)	test_majacc   0.66 (  0.63)	Loss_d 0.610 (0.625)	test_acc_d   0.67 (  0.64)	test_minacc_d   0.77 (  0.72)	test_majacc_d   0.66 (  0.63)	test_corr_d   0.28 (  0.23)
Test: [  26/  26]	Loss 0.626 (0.625)	test_acc   0.63 (  0.64)	test_minacc   0.76 (  0.72)	test_majacc   0.61 (  0.63)	Loss_d 0.626 (0.625)	test_acc_d   0.63 (  0.64)	test_minacc_d   0.76 (  0.72)	test_majacc_d   0.61 (  0.63)	test_corr_d   0.13 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.51it/s]
Test: [  0/  1]	Loss 0.612 (0.612)	test_acc   0.68 (  0.68)	test_minacc   0.69 (  0.69)	test_majacc   0.61 (  0.61)	Loss_d 0.612 (0.612)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.34 ( -0.34)
Test: [  1/  1]	Loss 0.612 (0.612)	test_acc   0.68 (  0.68)	test_minacc   0.69 (  0.69)	test_majacc   0.61 (  0.61)	Loss_d 0.612 (0.612)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.34 ( -0.34)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/61/checkpoints/model_best.pth
Overall Timing[ 16/  1]	epoch_time 0.0376 (0.0385)	validation_time 0.0003 (0.0008)	train_time 0.0372 (0.0376)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.78it/s] 15%|#5        | 4/26 [00:00<00:01, 18.88it/s] 31%|###       | 8/26 [00:00<00:00, 25.42it/s] 46%|####6     | 12/26 [00:00<00:00, 28.76it/s] 62%|######1   | 16/26 [00:00<00:00, 31.09it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.32it/s] 92%|#########2| 24/26 [00:00<00:00, 33.01it/s]100%|##########| 26/26 [00:00<00:00, 28.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm   0.13 (  0.13)	train_acc   0.62 (  0.64)	train_minacc   0.76 (  0.71)	train_majacc   0.60 (  0.63)	train_corr   0.00 (  0.00)	l1 17.9170 (17.9354)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.52it/s] 31%|###       | 8/26 [00:00<00:00, 41.55it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.55it/s] 50%|#####     | 13/26 [00:00<00:00, 42.06it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.81it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.81it/s] 96%|#########6| 25/26 [00:00<00:00, 46.57it/s]100%|##########| 26/26 [00:00<00:00, 40.57it/s]
Test: [   0/  26]	Loss 0.648 (0.648)	test_acc   0.63 (  0.63)	test_minacc   0.71 (  0.71)	test_majacc   0.61 (  0.61)	Loss_d 0.648 (0.648)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.605 (0.632)	test_acc   0.67 (  0.64)	test_minacc   0.77 (  0.71)	test_majacc   0.65 (  0.62)	Loss_d 0.605 (0.632)	test_acc_d   0.67 (  0.64)	test_minacc_d   0.77 (  0.71)	test_majacc_d   0.65 (  0.62)	test_corr_d   0.25 (  0.21)
Test: [  20/  26]	Loss 0.618 (0.632)	test_acc   0.66 (  0.64)	test_minacc   0.75 (  0.70)	test_majacc   0.65 (  0.63)	Loss_d 0.618 (0.632)	test_acc_d   0.66 (  0.64)	test_minacc_d   0.75 (  0.70)	test_majacc_d   0.65 (  0.63)	test_corr_d   0.27 (  0.22)
Test: [  26/  26]	Loss 0.635 (0.632)	test_acc   0.62 (  0.64)	test_minacc   0.76 (  0.71)	test_majacc   0.60 (  0.62)	Loss_d 0.635 (0.632)	test_acc_d   0.62 (  0.64)	test_minacc_d   0.76 (  0.71)	test_majacc_d   0.60 (  0.62)	test_corr_d   0.13 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.21it/s]
Test: [  0/  1]	Loss 0.622 (0.622)	test_acc   0.67 (  0.67)	test_minacc   0.68 (  0.68)	test_majacc   0.61 (  0.61)	Loss_d 0.622 (0.622)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.622 (0.622)	test_acc   0.67 (  0.67)	test_minacc   0.68 (  0.68)	test_majacc   0.61 (  0.61)	Loss_d 0.622 (0.622)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.31 ( -0.31)
Overall Timing[ 17/  1]	epoch_time 0.0358 (0.0384)	validation_time 0.0004 (0.0007)	train_time 0.0354 (0.0374)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.6361000109910965, 0.6710000038146973)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.34it/s] 15%|#5        | 4/26 [00:00<00:01, 18.72it/s] 31%|###       | 8/26 [00:00<00:00, 25.62it/s] 46%|####6     | 12/26 [00:00<00:00, 28.84it/s] 62%|######1   | 16/26 [00:00<00:00, 31.01it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.92it/s] 92%|#########2| 24/26 [00:00<00:00, 32.87it/s]100%|##########| 26/26 [00:00<00:00, 28.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm   0.13 (  0.13)	train_acc   0.63 (  0.64)	train_minacc   0.78 (  0.70)	train_majacc   0.60 (  0.63)	train_corr   0.00 (  0.00)	l1 17.8927 (17.9033)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.98it/s] 27%|##6       | 7/26 [00:00<00:00, 33.15it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.15it/s] 50%|#####     | 13/26 [00:00<00:00, 40.41it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.89it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.89it/s] 96%|#########6| 25/26 [00:00<00:00, 47.03it/s]100%|##########| 26/26 [00:00<00:00, 39.38it/s]
Test: [   0/  26]	Loss 0.650 (0.650)	test_acc   0.62 (  0.62)	test_minacc   0.71 (  0.71)	test_majacc   0.61 (  0.61)	Loss_d 0.650 (0.650)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.610 (0.635)	test_acc   0.65 (  0.63)	test_minacc   0.73 (  0.70)	test_majacc   0.63 (  0.62)	Loss_d 0.610 (0.635)	test_acc_d   0.65 (  0.63)	test_minacc_d   0.73 (  0.70)	test_majacc_d   0.63 (  0.62)	test_corr_d   0.25 (  0.21)
Test: [  20/  26]	Loss 0.618 (0.634)	test_acc   0.66 (  0.63)	test_minacc   0.71 (  0.69)	test_majacc   0.65 (  0.62)	Loss_d 0.618 (0.634)	test_acc_d   0.66 (  0.63)	test_minacc_d   0.71 (  0.69)	test_majacc_d   0.65 (  0.62)	test_corr_d   0.27 (  0.23)
Test: [  26/  26]	Loss 0.636 (0.634)	test_acc   0.63 (  0.63)	test_minacc   0.78 (  0.70)	test_majacc   0.60 (  0.62)	Loss_d 0.636 (0.634)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.78 (  0.70)	test_majacc_d   0.60 (  0.62)	test_corr_d   0.13 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.91it/s]
Test: [  0/  1]	Loss 0.628 (0.628)	test_acc   0.67 (  0.67)	test_minacc   0.67 (  0.67)	test_majacc   0.63 (  0.63)	Loss_d 0.628 (0.628)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.30 ( -0.30)
Test: [  1/  1]	Loss 0.628 (0.628)	test_acc   0.67 (  0.67)	test_minacc   0.67 (  0.67)	test_majacc   0.63 (  0.63)	Loss_d 0.628 (0.628)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.30 ( -0.30)
Overall Timing[ 18/  1]	epoch_time 0.0340 (0.0381)	validation_time 0.0006 (0.0007)	train_time 0.0334 (0.0372)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.6336000113487243, 0.6650000214576721)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.93it/s] 19%|#9        | 5/26 [00:00<00:00, 25.31it/s] 35%|###4      | 9/26 [00:00<00:00, 27.81it/s] 50%|#####     | 13/26 [00:00<00:00, 29.94it/s] 65%|######5   | 17/26 [00:00<00:00, 30.73it/s] 81%|########  | 21/26 [00:00<00:00, 32.24it/s] 96%|#########6| 25/26 [00:00<00:00, 33.50it/s]100%|##########| 26/26 [00:00<00:00, 28.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm   0.13 (  0.13)	train_acc   0.62 (  0.63)	train_minacc   0.78 (  0.69)	train_majacc   0.59 (  0.62)	train_corr   0.00 (  0.00)	l1 17.8753 (17.8841)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.32it/s] 31%|###       | 8/26 [00:00<00:00, 40.90it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.90it/s] 50%|#####     | 13/26 [00:00<00:00, 42.80it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.01it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.01it/s] 96%|#########6| 25/26 [00:00<00:00, 49.10it/s]100%|##########| 26/26 [00:00<00:00, 42.66it/s]
Test: [   0/  26]	Loss 0.653 (0.653)	test_acc   0.62 (  0.62)	test_minacc   0.69 (  0.69)	test_majacc   0.61 (  0.61)	Loss_d 0.653 (0.653)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.613 (0.638)	test_acc   0.65 (  0.63)	test_minacc   0.72 (  0.69)	test_majacc   0.64 (  0.62)	Loss_d 0.613 (0.638)	test_acc_d   0.65 (  0.63)	test_minacc_d   0.72 (  0.69)	test_majacc_d   0.64 (  0.62)	test_corr_d   0.25 (  0.21)
Test: [  20/  26]	Loss 0.621 (0.636)	test_acc   0.66 (  0.63)	test_minacc   0.71 (  0.67)	test_majacc   0.65 (  0.62)	Loss_d 0.621 (0.636)	test_acc_d   0.66 (  0.63)	test_minacc_d   0.71 (  0.67)	test_majacc_d   0.65 (  0.62)	test_corr_d   0.27 (  0.22)
Test: [  26/  26]	Loss 0.637 (0.636)	test_acc   0.63 (  0.63)	test_minacc   0.78 (  0.69)	test_majacc   0.60 (  0.62)	Loss_d 0.637 (0.636)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.78 (  0.69)	test_majacc_d   0.60 (  0.62)	test_corr_d   0.13 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.57it/s]
Test: [  0/  1]	Loss 0.632 (0.632)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.66)	test_majacc   0.60 (  0.60)	Loss_d 0.632 (0.632)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.29 ( -0.29)
Test: [  1/  1]	Loss 0.632 (0.632)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.66)	test_majacc   0.60 (  0.60)	Loss_d 0.632 (0.632)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.29 ( -0.29)
Overall Timing[ 19/  1]	epoch_time 0.0351 (0.0380)	validation_time 0.0003 (0.0007)	train_time 0.0347 (0.0371)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.6308000091910362, 0.6570000052452087)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.07it/s] 12%|#1        | 3/26 [00:00<00:01, 11.51it/s] 27%|##6       | 7/26 [00:00<00:00, 21.50it/s] 42%|####2     | 11/26 [00:00<00:00, 26.99it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.14it/s] 73%|#######3  | 19/26 [00:00<00:00, 32.15it/s] 88%|########8 | 23/26 [00:00<00:00, 33.50it/s]100%|##########| 26/26 [00:00<00:00, 26.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm   0.13 (  0.13)	train_acc   0.62 (  0.63)	train_minacc   0.78 (  0.68)	train_majacc   0.59 (  0.62)	train_corr   0.00 (  0.00)	l1 17.8596 (17.8671)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.59it/s] 27%|##6       | 7/26 [00:00<00:00, 30.73it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.73it/s] 50%|#####     | 13/26 [00:00<00:00, 38.59it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.25it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.25it/s] 96%|#########6| 25/26 [00:00<00:00, 45.76it/s]100%|##########| 26/26 [00:00<00:00, 38.10it/s]
Test: [   0/  26]	Loss 0.656 (0.656)	test_acc   0.62 (  0.62)	test_minacc   0.69 (  0.69)	test_majacc   0.61 (  0.61)	Loss_d 0.656 (0.656)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.617 (0.641)	test_acc   0.64 (  0.63)	test_minacc   0.69 (  0.68)	test_majacc   0.63 (  0.62)	Loss_d 0.617 (0.641)	test_acc_d   0.64 (  0.63)	test_minacc_d   0.69 (  0.68)	test_majacc_d   0.63 (  0.62)	test_corr_d   0.24 (  0.20)
Test: [  20/  26]	Loss 0.624 (0.639)	test_acc   0.66 (  0.63)	test_minacc   0.71 (  0.67)	test_majacc   0.65 (  0.62)	Loss_d 0.624 (0.639)	test_acc_d   0.66 (  0.63)	test_minacc_d   0.71 (  0.67)	test_majacc_d   0.65 (  0.62)	test_corr_d   0.27 (  0.22)
Test: [  26/  26]	Loss 0.640 (0.639)	test_acc   0.62 (  0.63)	test_minacc   0.78 (  0.68)	test_majacc   0.59 (  0.62)	Loss_d 0.640 (0.639)	test_acc_d   0.62 (  0.63)	test_minacc_d   0.78 (  0.68)	test_majacc_d   0.59 (  0.62)	test_corr_d   0.13 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.33it/s]
Test: [  0/  1]	Loss 0.635 (0.635)	test_acc   0.65 (  0.65)	test_minacc   0.66 (  0.66)	test_majacc   0.60 (  0.60)	Loss_d 0.635 (0.635)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.28 ( -0.28)
Test: [  1/  1]	Loss 0.635 (0.635)	test_acc   0.65 (  0.65)	test_minacc   0.66 (  0.66)	test_majacc   0.60 (  0.60)	Loss_d 0.635 (0.635)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.28 ( -0.28)
Overall Timing[ 20/  1]	epoch_time 0.0353 (0.0379)	validation_time 0.0004 (0.0007)	train_time 0.0349 (0.0370)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.6291000090837479, 0.6540000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.06it/s] 19%|#9        | 5/26 [00:00<00:01, 19.28it/s] 35%|###4      | 9/26 [00:00<00:00, 25.01it/s] 50%|#####     | 13/26 [00:00<00:00, 28.16it/s] 65%|######5   | 17/26 [00:00<00:00, 29.95it/s] 81%|########  | 21/26 [00:00<00:00, 31.24it/s] 96%|#########6| 25/26 [00:00<00:00, 32.13it/s]100%|##########| 26/26 [00:00<00:00, 26.57it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm   0.13 (  0.13)	train_acc   0.62 (  0.63)	train_minacc   0.78 (  0.68)	train_majacc   0.58 (  0.62)	train_corr   0.00 (  0.00)	l1 17.8454 (17.8508)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.63it/s] 27%|##6       | 7/26 [00:00<00:00, 31.96it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.96it/s] 50%|#####     | 13/26 [00:00<00:00, 39.89it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.04it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.04it/s] 96%|#########6| 25/26 [00:00<00:00, 47.92it/s]100%|##########| 26/26 [00:00<00:00, 39.09it/s]
Test: [   0/  26]	Loss 0.659 (0.659)	test_acc   0.62 (  0.62)	test_minacc   0.65 (  0.65)	test_majacc   0.61 (  0.61)	Loss_d 0.659 (0.659)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.621 (0.644)	test_acc   0.64 (  0.62)	test_minacc   0.69 (  0.67)	test_majacc   0.63 (  0.61)	Loss_d 0.621 (0.644)	test_acc_d   0.64 (  0.62)	test_minacc_d   0.69 (  0.67)	test_majacc_d   0.63 (  0.61)	test_corr_d   0.23 (  0.19)
Test: [  20/  26]	Loss 0.628 (0.642)	test_acc   0.66 (  0.63)	test_minacc   0.71 (  0.67)	test_majacc   0.65 (  0.62)	Loss_d 0.628 (0.642)	test_acc_d   0.66 (  0.63)	test_minacc_d   0.71 (  0.67)	test_majacc_d   0.65 (  0.62)	test_corr_d   0.26 (  0.21)
Test: [  26/  26]	Loss 0.643 (0.642)	test_acc   0.62 (  0.63)	test_minacc   0.78 (  0.68)	test_majacc   0.59 (  0.62)	Loss_d 0.643 (0.642)	test_acc_d   0.62 (  0.63)	test_minacc_d   0.78 (  0.68)	test_majacc_d   0.59 (  0.62)	test_corr_d   0.13 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.89it/s]
Test: [  0/  1]	Loss 0.637 (0.637)	test_acc   0.65 (  0.65)	test_minacc   0.66 (  0.66)	test_majacc   0.61 (  0.61)	Loss_d 0.637 (0.637)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.28 ( -0.28)
Test: [  1/  1]	Loss 0.637 (0.637)	test_acc   0.65 (  0.65)	test_minacc   0.66 (  0.66)	test_majacc   0.61 (  0.61)	Loss_d 0.637 (0.637)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.28 ( -0.28)
Overall Timing[ 21/  1]	epoch_time 0.0369 (0.0378)	validation_time 0.0004 (0.0007)	train_time 0.0365 (0.0370)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.6272000113129615, 0.6540000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.87it/s] 19%|#9        | 5/26 [00:00<00:00, 21.27it/s] 31%|###       | 8/26 [00:00<00:00, 24.18it/s] 46%|####6     | 12/26 [00:00<00:00, 28.12it/s] 62%|######1   | 16/26 [00:00<00:00, 30.26it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.89it/s] 92%|#########2| 24/26 [00:00<00:00, 32.98it/s]100%|##########| 26/26 [00:00<00:00, 27.57it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.65 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm   0.13 (  0.13)	train_acc   0.62 (  0.63)	train_minacc   0.78 (  0.67)	train_majacc   0.59 (  0.62)	train_corr   0.00 (  0.00)	l1 17.8323 (17.8348)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 29.73it/s] 35%|###4      | 9/26 [00:00<00:00, 41.99it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.99it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.38it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.38it/s] 81%|########  | 21/26 [00:00<00:00, 48.96it/s]100%|##########| 26/26 [00:00<00:00, 43.68it/s]
Test: [   0/  26]	Loss 0.662 (0.662)	test_acc   0.61 (  0.61)	test_minacc   0.65 (  0.65)	test_majacc   0.61 (  0.61)	Loss_d 0.662 (0.662)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.15 (  0.15)
Test: [  10/  26]	Loss 0.626 (0.648)	test_acc   0.64 (  0.62)	test_minacc   0.70 (  0.68)	test_majacc   0.63 (  0.61)	Loss_d 0.626 (0.648)	test_acc_d   0.64 (  0.62)	test_minacc_d   0.70 (  0.68)	test_majacc_d   0.63 (  0.61)	test_corr_d   0.22 (  0.18)
Test: [  20/  26]	Loss 0.632 (0.646)	test_acc   0.65 (  0.62)	test_minacc   0.70 (  0.66)	test_majacc   0.64 (  0.62)	Loss_d 0.632 (0.646)	test_acc_d   0.65 (  0.62)	test_minacc_d   0.70 (  0.66)	test_majacc_d   0.64 (  0.62)	test_corr_d   0.25 (  0.20)
Test: [  26/  26]	Loss 0.646 (0.646)	test_acc   0.62 (  0.62)	test_minacc   0.78 (  0.67)	test_majacc   0.59 (  0.61)	Loss_d 0.646 (0.646)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.78 (  0.67)	test_majacc_d   0.59 (  0.61)	test_corr_d   0.12 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.40it/s]
Test: [  0/  1]	Loss 0.639 (0.639)	test_acc   0.65 (  0.65)	test_minacc   0.66 (  0.66)	test_majacc   0.62 (  0.62)	Loss_d 0.639 (0.639)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.28 ( -0.28)
Test: [  1/  1]	Loss 0.639 (0.639)	test_acc   0.65 (  0.65)	test_minacc   0.66 (  0.66)	test_majacc   0.62 (  0.62)	Loss_d 0.639 (0.639)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.28 ( -0.28)
Overall Timing[ 22/  1]	epoch_time 0.0369 (0.0378)	validation_time 0.0004 (0.0007)	train_time 0.0365 (0.0369)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.6234000059366226, 0.6540000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.05it/s] 15%|#5        | 4/26 [00:00<00:01, 17.06it/s] 27%|##6       | 7/26 [00:00<00:01, 18.98it/s] 35%|###4      | 9/26 [00:00<00:00, 18.46it/s] 42%|####2     | 11/26 [00:00<00:00, 18.18it/s] 50%|#####     | 13/26 [00:00<00:00, 17.84it/s] 58%|#####7    | 15/26 [00:00<00:00, 17.27it/s] 65%|######5   | 17/26 [00:00<00:00, 17.08it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.02it/s] 81%|########  | 21/26 [00:01<00:00, 16.70it/s] 88%|########8 | 23/26 [00:01<00:00, 16.86it/s] 96%|#########6| 25/26 [00:01<00:00, 16.90it/s]100%|##########| 26/26 [00:01<00:00, 16.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 348 tensor(-0.0228, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
rho, theta 449 tensor(-0.0007, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
rho, theta 479 tensor(-0.0004, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
rho, theta 481 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
rho, theta 485 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
rho, theta 489 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
rho, theta 498 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
rho, theta 500 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
rho, theta 504 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
rho, theta 508 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
rho, theta 510 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
rho, theta 498 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
rho, theta 504 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
rho, theta 510 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
rho, theta 507 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [23][  26/  26]	Loss 0.000 (0.004)	train_nll   0.69 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.13)	train_acc   0.55 (  0.59)	train_minacc   0.56 (  0.54)	train_majacc   0.55 (  0.60)	train_corr   0.00 (  0.00)	l1 15.0359 (15.4700)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.72it/s] 27%|##6       | 7/26 [00:00<00:00, 30.04it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.04it/s] 50%|#####     | 13/26 [00:00<00:00, 38.32it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.25it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.25it/s] 96%|#########6| 25/26 [00:00<00:00, 46.17it/s]100%|##########| 26/26 [00:00<00:00, 37.69it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.45 (  0.45)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.51 (  0.53)	test_minacc   0.52 (  0.49)	test_majacc   0.51 (  0.54)	Loss_d 0.692 (0.691)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.51 (  0.54)	test_corr_d   0.14 (  0.17)
Test: [  20/  26]	Loss 0.690 (0.691)	test_acc   0.58 (  0.54)	test_minacc   0.61 (  0.52)	test_majacc   0.58 (  0.54)	Loss_d 0.690 (0.691)	test_acc_d   0.58 (  0.54)	test_minacc_d   0.61 (  0.52)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.25 (  0.18)
Test: [  26/  26]	Loss 0.691 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.16 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.41it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 23/  1]	epoch_time 0.0466 (0.0381)	validation_time 0.0003 (0.0006)	train_time 0.0463 (0.0373)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5389000178277492, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.38it/s] 12%|#1        | 3/26 [00:00<00:01, 12.20it/s] 19%|#9        | 5/26 [00:00<00:01, 14.43it/s] 27%|##6       | 7/26 [00:00<00:01, 15.54it/s] 35%|###4      | 9/26 [00:00<00:01, 16.17it/s] 42%|####2     | 11/26 [00:00<00:00, 16.46it/s] 50%|#####     | 13/26 [00:00<00:00, 16.67it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.86it/s] 65%|######5   | 17/26 [00:01<00:00, 17.06it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.16it/s] 81%|########  | 21/26 [00:01<00:00, 17.33it/s] 88%|########8 | 23/26 [00:01<00:00, 17.07it/s] 96%|#########6| 25/26 [00:01<00:00, 16.96it/s]100%|##########| 26/26 [00:01<00:00, 15.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
rho, theta 510 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
rho, theta 510 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.50 (  0.52)	train_minacc   0.51 (  0.51)	train_majacc   0.50 (  0.52)	train_corr   0.00 (  0.00)	l1 15.0201 (15.0292)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.24it/s] 27%|##6       | 7/26 [00:00<00:00, 33.04it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.04it/s] 50%|#####     | 13/26 [00:00<00:00, 41.05it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.61it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.61it/s] 96%|#########6| 25/26 [00:00<00:00, 47.26it/s]100%|##########| 26/26 [00:00<00:00, 39.61it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.42 (  0.42)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.52 (  0.47)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.14 (  0.18)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.55 (  0.51)	test_minacc   0.61 (  0.50)	test_majacc   0.54 (  0.51)	Loss_d 0.691 (0.693)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.61 (  0.50)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.28 (  0.19)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.51 (  0.50)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.51 (  0.50)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.18 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.82it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 24/  1]	epoch_time 0.0488 (0.0386)	validation_time 0.0004 (0.0006)	train_time 0.0484 (0.0378)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5079000053405762, 0.5020000338554382)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.52it/s] 12%|#1        | 3/26 [00:00<00:02, 10.29it/s] 19%|#9        | 5/26 [00:00<00:01, 12.86it/s] 27%|##6       | 7/26 [00:00<00:01, 14.28it/s] 35%|###4      | 9/26 [00:00<00:01, 15.19it/s] 42%|####2     | 11/26 [00:00<00:00, 15.73it/s] 50%|#####     | 13/26 [00:00<00:00, 16.15it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.36it/s] 65%|######5   | 17/26 [00:01<00:00, 16.24it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.46it/s] 81%|########  | 21/26 [00:01<00:00, 16.40it/s] 88%|########8 | 23/26 [00:01<00:00, 16.59it/s] 96%|#########6| 25/26 [00:01<00:00, 16.77it/s]100%|##########| 26/26 [00:01<00:00, 14.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.50 (  0.51)	train_minacc   0.49 (  0.50)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0031 (15.0114)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.90it/s] 27%|##6       | 7/26 [00:00<00:00, 36.44it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.44it/s] 50%|#####     | 13/26 [00:00<00:00, 43.00it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.36it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.36it/s] 96%|#########6| 25/26 [00:00<00:00, 48.44it/s]100%|##########| 26/26 [00:00<00:00, 41.72it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.42 (  0.42)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.52 (  0.47)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.11 (  0.15)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.55 (  0.51)	test_minacc   0.61 (  0.50)	test_majacc   0.54 (  0.51)	Loss_d 0.691 (0.693)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.61 (  0.50)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.24 (  0.16)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.49 (  0.50)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.15 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.29it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 25/  1]	epoch_time 0.0489 (0.0390)	validation_time 0.0004 (0.0006)	train_time 0.0485 (0.0382)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5070000070929527, 0.5010000467300415)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.04it/s] 12%|#1        | 3/26 [00:00<00:02,  9.89it/s] 19%|#9        | 5/26 [00:00<00:01, 12.49it/s] 35%|###4      | 9/26 [00:00<00:00, 20.29it/s] 50%|#####     | 13/26 [00:00<00:00, 25.14it/s] 65%|######5   | 17/26 [00:00<00:00, 28.41it/s] 81%|########  | 21/26 [00:00<00:00, 30.50it/s] 96%|#########6| 25/26 [00:01<00:00, 32.06it/s]100%|##########| 26/26 [00:01<00:00, 23.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.50 (  0.51)	train_minacc   0.49 (  0.50)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 14.9918 (14.9965)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.41it/s] 23%|##3       | 6/26 [00:00<00:00, 25.61it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.61it/s] 46%|####6     | 12/26 [00:00<00:00, 37.69it/s] 69%|######9   | 18/26 [00:00<00:00, 41.71it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.71it/s] 92%|#########2| 24/26 [00:00<00:00, 46.95it/s]100%|##########| 26/26 [00:00<00:00, 37.08it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.42 (  0.42)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.52 (  0.47)	test_majacc   0.48 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.07 (  0.11)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.51)	test_minacc   0.61 (  0.50)	test_majacc   0.54 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.61 (  0.50)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.18 (  0.12)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.49 (  0.50)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.11 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.00it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 26/  1]	epoch_time 0.0388 (0.0390)	validation_time 0.0004 (0.0006)	train_time 0.0384 (0.0382)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5070000070929527, 0.503000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.96it/s] 19%|#9        | 5/26 [00:00<00:01, 19.18it/s] 35%|###4      | 9/26 [00:00<00:00, 24.99it/s] 50%|#####     | 13/26 [00:00<00:00, 28.05it/s] 65%|######5   | 17/26 [00:00<00:00, 30.16it/s] 81%|########  | 21/26 [00:00<00:00, 31.26it/s] 96%|#########6| 25/26 [00:00<00:00, 31.83it/s]100%|##########| 26/26 [00:00<00:00, 26.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.50 (  0.51)	train_minacc   0.49 (  0.50)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 14.9959 (14.9928)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.95it/s] 31%|###       | 8/26 [00:00<00:00, 40.37it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.37it/s] 54%|#####3    | 14/26 [00:00<00:00, 48.15it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.24it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.24it/s]100%|##########| 26/26 [00:00<00:00, 51.91it/s]100%|##########| 26/26 [00:00<00:00, 43.97it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.42 (  0.42)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.52 (  0.47)	test_majacc   0.48 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.04 (  0.08)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.51)	test_minacc   0.61 (  0.50)	test_majacc   0.54 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.61 (  0.50)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.12 (  0.08)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.49 (  0.50)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.07 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.31it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 27/  1]	epoch_time 0.0362 (0.0389)	validation_time 0.0004 (0.0006)	train_time 0.0358 (0.0381)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5071000082492828, 0.5020000338554382)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.48it/s] 19%|#9        | 5/26 [00:00<00:00, 22.70it/s] 35%|###4      | 9/26 [00:00<00:00, 27.40it/s] 50%|#####     | 13/26 [00:00<00:00, 29.77it/s] 62%|######1   | 16/26 [00:00<00:00, 28.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 22.96it/s] 85%|########4 | 22/26 [00:00<00:00, 20.38it/s] 96%|#########6| 25/26 [00:01<00:00, 18.97it/s]100%|##########| 26/26 [00:01<00:00, 20.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.50 (  0.51)	train_minacc   0.49 (  0.50)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0028 (14.9991)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.65it/s] 27%|##6       | 7/26 [00:00<00:00, 37.76it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.76it/s] 50%|#####     | 13/26 [00:00<00:00, 42.11it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.07it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.07it/s] 96%|#########6| 25/26 [00:00<00:00, 47.65it/s]100%|##########| 26/26 [00:00<00:00, 41.22it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.42 (  0.42)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.52 (  0.47)	test_majacc   0.48 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.02 (  0.05)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.51)	test_minacc   0.61 (  0.50)	test_majacc   0.54 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.61 (  0.50)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.07 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.51 (  0.50)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.51 (  0.50)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.04 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.03it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 28/  1]	epoch_time 0.0418 (0.0390)	validation_time 0.0003 (0.0006)	train_time 0.0415 (0.0382)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5077000076770782, 0.5020000338554382)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.83it/s] 12%|#1        | 3/26 [00:00<00:02,  9.15it/s] 19%|#9        | 5/26 [00:00<00:01, 11.97it/s] 27%|##6       | 7/26 [00:00<00:01, 13.72it/s] 35%|###4      | 9/26 [00:00<00:01, 14.77it/s] 42%|####2     | 11/26 [00:00<00:00, 15.43it/s] 50%|#####     | 13/26 [00:00<00:00, 15.78it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.07it/s] 65%|######5   | 17/26 [00:01<00:00, 16.29it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.50it/s] 81%|########  | 21/26 [00:01<00:00, 16.46it/s] 88%|########8 | 23/26 [00:01<00:00, 16.59it/s] 96%|#########6| 25/26 [00:01<00:00, 16.66it/s]100%|##########| 26/26 [00:01<00:00, 14.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.50 (  0.51)	train_minacc   0.51 (  0.50)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0094 (15.0059)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.16it/s] 27%|##6       | 7/26 [00:00<00:00, 37.04it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.04it/s] 46%|####6     | 12/26 [00:00<00:00, 42.44it/s] 65%|######5   | 17/26 [00:00<00:00, 43.43it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.43it/s] 88%|########8 | 23/26 [00:00<00:00, 48.32it/s]100%|##########| 26/26 [00:00<00:00, 39.62it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.42 (  0.42)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.52 (  0.47)	test_majacc   0.48 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.48 (  0.50)	test_corr_d  -0.00 (  0.03)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.51)	test_minacc   0.61 (  0.50)	test_majacc   0.54 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.61 (  0.50)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.03 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.51 (  0.50)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.51 (  0.50)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.02 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.53it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 29/  1]	epoch_time 0.0500 (0.0393)	validation_time 0.0004 (0.0006)	train_time 0.0496 (0.0386)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5084000111222268, 0.5040000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.81it/s] 12%|#1        | 3/26 [00:00<00:02, 11.17it/s] 19%|#9        | 5/26 [00:00<00:01, 13.43it/s] 27%|##6       | 7/26 [00:00<00:01, 14.74it/s] 35%|###4      | 9/26 [00:00<00:01, 15.29it/s] 42%|####2     | 11/26 [00:00<00:00, 15.81it/s] 50%|#####     | 13/26 [00:00<00:00, 16.07it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.14it/s] 65%|######5   | 17/26 [00:01<00:00, 16.02it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.25it/s] 81%|########  | 21/26 [00:01<00:00, 16.34it/s] 88%|########8 | 23/26 [00:01<00:00, 16.42it/s] 96%|#########6| 25/26 [00:01<00:00, 16.44it/s]100%|##########| 26/26 [00:01<00:00, 15.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.50 (  0.51)	train_minacc   0.51 (  0.50)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0156 (15.0122)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.52it/s] 27%|##6       | 7/26 [00:00<00:00, 35.16it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.16it/s] 50%|#####     | 13/26 [00:00<00:00, 41.51it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.59it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.59it/s] 96%|#########6| 25/26 [00:00<00:00, 47.04it/s]100%|##########| 26/26 [00:00<00:00, 40.18it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.42 (  0.42)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.52 (  0.47)	test_majacc   0.48 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.48 (  0.51)	test_corr_d  -0.02 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.51)	test_minacc   0.61 (  0.50)	test_majacc   0.54 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.61 (  0.50)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.51 (  0.50)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.51 (  0.50)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.00 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.30it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 30/  1]	epoch_time 0.0489 (0.0396)	validation_time 0.0004 (0.0006)	train_time 0.0485 (0.0389)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5086000122725963, 0.5040000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.54it/s] 12%|#1        | 3/26 [00:00<00:01, 11.61it/s] 19%|#9        | 5/26 [00:00<00:01, 13.78it/s] 27%|##6       | 7/26 [00:00<00:01, 15.05it/s] 35%|###4      | 9/26 [00:00<00:01, 15.90it/s] 42%|####2     | 11/26 [00:00<00:00, 16.32it/s] 50%|#####     | 13/26 [00:00<00:00, 16.65it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.85it/s] 65%|######5   | 17/26 [00:01<00:00, 17.04it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.87it/s] 81%|########  | 21/26 [00:01<00:00, 16.75it/s] 88%|########8 | 23/26 [00:01<00:00, 16.69it/s] 96%|#########6| 25/26 [00:01<00:00, 16.78it/s]100%|##########| 26/26 [00:01<00:00, 15.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.50 (  0.51)	train_minacc   0.51 (  0.50)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0220 (15.0185)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.94it/s] 19%|#9        | 5/26 [00:00<00:00, 26.09it/s]                                               19%|#9        | 5/26 [00:00<00:00, 26.09it/s] 42%|####2     | 11/26 [00:00<00:00, 39.44it/s] 62%|######1   | 16/26 [00:00<00:00, 42.34it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.34it/s] 85%|########4 | 22/26 [00:00<00:00, 46.29it/s]100%|##########| 26/26 [00:00<00:00, 38.95it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.42 (  0.42)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.52 (  0.47)	test_majacc   0.48 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.48 (  0.51)	test_corr_d  -0.03 (  0.00)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.51)	test_minacc   0.61 (  0.50)	test_majacc   0.54 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.61 (  0.50)	test_majacc_d   0.54 (  0.51)	test_corr_d  -0.01 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.51 (  0.50)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.51 (  0.50)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.01 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.96it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 31/  1]	epoch_time 0.0496 (0.0400)	validation_time 0.0004 (0.0006)	train_time 0.0492 (0.0392)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5094000101089478, 0.5040000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.85it/s] 12%|#1        | 3/26 [00:00<00:02, 10.04it/s] 19%|#9        | 5/26 [00:00<00:01, 12.81it/s] 27%|##6       | 7/26 [00:00<00:01, 14.42it/s] 35%|###4      | 9/26 [00:00<00:01, 15.34it/s] 42%|####2     | 11/26 [00:00<00:00, 15.86it/s] 50%|#####     | 13/26 [00:00<00:00, 16.22it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.15it/s] 65%|######5   | 17/26 [00:01<00:00, 16.44it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.61it/s] 81%|########  | 21/26 [00:01<00:00, 16.49it/s] 88%|########8 | 23/26 [00:01<00:00, 16.61it/s] 96%|#########6| 25/26 [00:01<00:00, 16.53it/s]100%|##########| 26/26 [00:01<00:00, 14.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.50 (  0.51)	train_minacc   0.51 (  0.51)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0278 (15.0247)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.89it/s] 12%|#1        | 3/26 [00:00<00:01, 14.90it/s] 35%|###4      | 9/26 [00:00<00:00, 33.03it/s]                                               35%|###4      | 9/26 [00:00<00:00, 33.03it/s] 58%|#####7    | 15/26 [00:00<00:00, 39.22it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 39.22it/s] 81%|########  | 21/26 [00:00<00:00, 45.56it/s]100%|##########| 26/26 [00:00<00:00, 37.68it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.42 (  0.42)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.52 (  0.47)	test_majacc   0.48 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.48 (  0.51)	test_corr_d  -0.03 ( -0.00)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.51)	test_minacc   0.61 (  0.50)	test_majacc   0.54 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.61 (  0.50)	test_majacc_d   0.54 (  0.51)	test_corr_d  -0.02 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.01 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.23it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 32/  1]	epoch_time 0.0486 (0.0402)	validation_time 0.0003 (0.0006)	train_time 0.0483 (0.0395)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5104000146985054, 0.5060000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.42it/s] 12%|#1        | 3/26 [00:00<00:01, 11.61it/s] 19%|#9        | 5/26 [00:00<00:01, 13.94it/s] 27%|##6       | 7/26 [00:00<00:01, 15.14it/s] 35%|###4      | 9/26 [00:00<00:01, 15.91it/s] 42%|####2     | 11/26 [00:00<00:00, 16.36it/s] 50%|#####     | 13/26 [00:00<00:00, 16.55it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.74it/s] 65%|######5   | 17/26 [00:01<00:00, 16.83it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.89it/s] 81%|########  | 21/26 [00:01<00:00, 16.85it/s] 88%|########8 | 23/26 [00:01<00:00, 17.02it/s] 96%|#########6| 25/26 [00:01<00:00, 17.19it/s]100%|##########| 26/26 [00:01<00:00, 15.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.50 (  0.51)	train_minacc   0.51 (  0.51)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0332 (15.0303)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.36it/s] 19%|#9        | 5/26 [00:00<00:00, 24.66it/s]                                               19%|#9        | 5/26 [00:00<00:00, 24.66it/s] 42%|####2     | 11/26 [00:00<00:00, 38.04it/s] 62%|######1   | 16/26 [00:00<00:00, 39.84it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.84it/s] 85%|########4 | 22/26 [00:00<00:00, 45.73it/s]100%|##########| 26/26 [00:00<00:00, 37.73it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.42 (  0.42)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.52 (  0.47)	test_majacc   0.48 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.48 (  0.51)	test_corr_d  -0.04 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.51)	test_minacc   0.61 (  0.50)	test_majacc   0.54 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.61 (  0.50)	test_majacc_d   0.54 (  0.51)	test_corr_d  -0.02 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.02 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.24it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 33/  1]	epoch_time 0.0498 (0.0405)	validation_time 0.0004 (0.0006)	train_time 0.0494 (0.0398)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5111000134944915, 0.5060000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.31it/s] 12%|#1        | 3/26 [00:00<00:01, 11.70it/s] 19%|#9        | 5/26 [00:00<00:01, 13.87it/s] 27%|##6       | 7/26 [00:00<00:01, 14.71it/s] 35%|###4      | 9/26 [00:00<00:01, 15.25it/s] 42%|####2     | 11/26 [00:00<00:00, 15.69it/s] 50%|#####     | 13/26 [00:00<00:00, 15.96it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.19it/s] 65%|######5   | 17/26 [00:01<00:00, 16.26it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.40it/s] 81%|########  | 21/26 [00:01<00:00, 16.60it/s] 88%|########8 | 23/26 [00:01<00:00, 16.69it/s] 96%|#########6| 25/26 [00:01<00:00, 16.72it/s]100%|##########| 26/26 [00:01<00:00, 15.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.51 (  0.51)	train_minacc   0.51 (  0.51)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0390 (15.0359)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02, 10.00it/s] 27%|##6       | 7/26 [00:00<00:00, 37.78it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.78it/s] 50%|#####     | 13/26 [00:00<00:00, 42.88it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.64it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.64it/s] 96%|#########6| 25/26 [00:00<00:00, 48.91it/s]100%|##########| 26/26 [00:00<00:00, 41.81it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.42 (  0.42)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.52 (  0.47)	test_majacc   0.49 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.49 (  0.51)	test_corr_d  -0.04 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.51)	test_minacc   0.61 (  0.50)	test_majacc   0.54 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.61 (  0.50)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.02 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.02 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.54it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 34/  1]	epoch_time 0.0501 (0.0408)	validation_time 0.0006 (0.0006)	train_time 0.0495 (0.0401)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5118000136613846, 0.5070000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.24it/s] 12%|#1        | 3/26 [00:00<00:01, 11.96it/s] 19%|#9        | 5/26 [00:00<00:01, 13.86it/s] 27%|##6       | 7/26 [00:00<00:01, 14.68it/s] 35%|###4      | 9/26 [00:00<00:01, 15.42it/s] 42%|####2     | 11/26 [00:00<00:00, 15.81it/s] 50%|#####     | 13/26 [00:00<00:00, 16.14it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.32it/s] 65%|######5   | 17/26 [00:01<00:00, 16.53it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.54it/s] 81%|########  | 21/26 [00:01<00:00, 16.44it/s] 88%|########8 | 23/26 [00:01<00:00, 16.33it/s] 96%|#########6| 25/26 [00:01<00:00, 16.46it/s]100%|##########| 26/26 [00:01<00:00, 15.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.51 (  0.51)	train_minacc   0.51 (  0.51)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0451 (15.0420)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.38it/s] 35%|###4      | 9/26 [00:00<00:00, 38.61it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.61it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.93it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.93it/s] 81%|########  | 21/26 [00:00<00:00, 46.70it/s]100%|##########| 26/26 [00:00<00:00, 42.64it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.44 (  0.44)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.52 (  0.47)	test_majacc   0.49 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.49 (  0.51)	test_corr_d  -0.04 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.51)	test_minacc   0.61 (  0.50)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.61 (  0.50)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.02 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.02 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.26it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 35/  1]	epoch_time 0.0497 (0.0410)	validation_time 0.0004 (0.0006)	train_time 0.0493 (0.0403)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5136000160872937, 0.5090000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.29it/s] 12%|#1        | 3/26 [00:00<00:02, 10.33it/s] 19%|#9        | 5/26 [00:00<00:01, 12.83it/s] 27%|##6       | 7/26 [00:00<00:01, 14.22it/s] 35%|###4      | 9/26 [00:00<00:01, 15.08it/s] 42%|####2     | 11/26 [00:00<00:00, 15.54it/s] 50%|#####     | 13/26 [00:00<00:00, 15.99it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.25it/s] 65%|######5   | 17/26 [00:01<00:00, 16.42it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.47it/s] 81%|########  | 21/26 [00:01<00:00, 16.38it/s] 88%|########8 | 23/26 [00:01<00:00, 16.43it/s] 96%|#########6| 25/26 [00:01<00:00, 16.51it/s]100%|##########| 26/26 [00:01<00:00, 14.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.51 (  0.51)	train_minacc   0.51 (  0.51)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0508 (15.0478)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.11it/s] 27%|##6       | 7/26 [00:00<00:00, 35.23it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.23it/s] 50%|#####     | 13/26 [00:00<00:00, 41.95it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.77it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.77it/s] 96%|#########6| 25/26 [00:00<00:00, 47.93it/s]100%|##########| 26/26 [00:00<00:00, 40.53it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.44 (  0.44)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.52 (  0.47)	test_majacc   0.49 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.49 (  0.51)	test_corr_d  -0.03 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.61 (  0.50)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.61 (  0.50)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.52)	test_corr_d  -0.01 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.26it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 36/  1]	epoch_time 0.0492 (0.0412)	validation_time 0.0004 (0.0006)	train_time 0.0488 (0.0406)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5148000102043152, 0.5090000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.92it/s] 12%|#1        | 3/26 [00:00<00:02, 11.16it/s] 19%|#9        | 5/26 [00:00<00:01, 13.55it/s] 27%|##6       | 7/26 [00:00<00:01, 14.76it/s] 35%|###4      | 9/26 [00:00<00:01, 15.56it/s] 42%|####2     | 11/26 [00:00<00:00, 15.92it/s] 50%|#####     | 13/26 [00:00<00:00, 16.28it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.37it/s] 65%|######5   | 17/26 [00:01<00:00, 16.55it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.53it/s] 81%|########  | 21/26 [00:01<00:00, 16.47it/s] 88%|########8 | 23/26 [00:01<00:00, 15.60it/s] 96%|#########6| 25/26 [00:01<00:00, 15.95it/s]100%|##########| 26/26 [00:01<00:00, 14.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.52 (  0.52)	train_minacc   0.51 (  0.51)	train_majacc   0.52 (  0.52)	train_corr   0.00 (  0.00)	l1 15.0563 (15.0535)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.15it/s] 35%|###4      | 9/26 [00:00<00:00, 42.30it/s]                                               35%|###4      | 9/26 [00:00<00:00, 42.30it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.50it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.50it/s] 81%|########  | 21/26 [00:00<00:00, 49.14it/s]100%|##########| 26/26 [00:00<00:00, 44.93it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.44 (  0.44)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.52 (  0.47)	test_majacc   0.49 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.49 (  0.51)	test_corr_d  -0.03 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.61 (  0.50)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.61 (  0.50)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.27it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 37/  1]	epoch_time 0.0489 (0.0414)	validation_time 0.0003 (0.0006)	train_time 0.0485 (0.0408)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5159000149965286, 0.5090000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.06it/s] 12%|#1        | 3/26 [00:00<00:02, 11.14it/s] 19%|#9        | 5/26 [00:00<00:01, 13.49it/s] 27%|##6       | 7/26 [00:00<00:01, 14.69it/s] 35%|###4      | 9/26 [00:00<00:01, 15.49it/s] 42%|####2     | 11/26 [00:00<00:00, 15.84it/s] 50%|#####     | 13/26 [00:00<00:00, 16.05it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.27it/s] 65%|######5   | 17/26 [00:01<00:00, 16.52it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.73it/s] 81%|########  | 21/26 [00:01<00:00, 16.74it/s] 88%|########8 | 23/26 [00:01<00:00, 16.83it/s] 96%|#########6| 25/26 [00:01<00:00, 16.79it/s]100%|##########| 26/26 [00:01<00:00, 15.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.52 (  0.52)	train_minacc   0.51 (  0.51)	train_majacc   0.52 (  0.52)	train_corr   0.00 (  0.00)	l1 15.0615 (15.0588)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.07it/s] 27%|##6       | 7/26 [00:00<00:00, 33.62it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.62it/s] 50%|#####     | 13/26 [00:00<00:00, 39.06it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.41it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.41it/s] 96%|#########6| 25/26 [00:00<00:00, 46.52it/s]100%|##########| 26/26 [00:00<00:00, 38.98it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.44 (  0.44)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.52 (  0.47)	test_majacc   0.49 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.49 (  0.52)	test_corr_d  -0.03 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.61 (  0.50)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.61 (  0.50)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.94it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 38/  1]	epoch_time 0.0503 (0.0417)	validation_time 0.0004 (0.0006)	train_time 0.0499 (0.0410)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5174000149071216, 0.5100000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.23it/s] 12%|#1        | 3/26 [00:00<00:02,  9.30it/s] 19%|#9        | 5/26 [00:00<00:01, 12.07it/s] 27%|##6       | 7/26 [00:00<00:01, 13.82it/s] 35%|###4      | 9/26 [00:00<00:01, 14.89it/s] 42%|####2     | 11/26 [00:00<00:00, 15.61it/s] 50%|#####     | 13/26 [00:00<00:00, 15.89it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.19it/s] 65%|######5   | 17/26 [00:01<00:00, 16.26it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.46it/s] 81%|########  | 21/26 [00:01<00:00, 16.32it/s] 88%|########8 | 23/26 [00:01<00:00, 16.43it/s] 96%|#########6| 25/26 [00:01<00:00, 16.48it/s]100%|##########| 26/26 [00:01<00:00, 14.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.52 (  0.52)	train_minacc   0.51 (  0.51)	train_majacc   0.52 (  0.52)	train_corr   0.00 (  0.00)	l1 15.0663 (15.0638)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.83it/s] 27%|##6       | 7/26 [00:00<00:00, 33.73it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.73it/s] 50%|#####     | 13/26 [00:00<00:00, 39.77it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.45it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.45it/s] 96%|#########6| 25/26 [00:00<00:00, 46.65it/s]100%|##########| 26/26 [00:00<00:00, 39.36it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.45 (  0.45)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.52 (  0.47)	test_majacc   0.49 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.49 (  0.52)	test_corr_d  -0.03 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.52)	test_minacc   0.61 (  0.50)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.61 (  0.50)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.00 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.00 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.01it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 39/  1]	epoch_time 0.0503 (0.0419)	validation_time 0.0006 (0.0006)	train_time 0.0497 (0.0412)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5199000147581101, 0.5110000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.83it/s] 12%|#1        | 3/26 [00:00<00:02, 11.19it/s] 19%|#9        | 5/26 [00:00<00:01, 13.45it/s] 27%|##6       | 7/26 [00:00<00:01, 14.61it/s] 35%|###4      | 9/26 [00:00<00:01, 15.48it/s] 42%|####2     | 11/26 [00:00<00:00, 15.98it/s] 50%|#####     | 13/26 [00:00<00:00, 16.36it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.55it/s] 65%|######5   | 17/26 [00:01<00:00, 16.73it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.84it/s] 81%|########  | 21/26 [00:01<00:00, 16.82it/s] 88%|########8 | 23/26 [00:01<00:00, 16.87it/s] 96%|#########6| 25/26 [00:01<00:00, 16.96it/s]100%|##########| 26/26 [00:01<00:00, 15.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.52 (  0.52)	train_minacc   0.51 (  0.51)	train_majacc   0.52 (  0.52)	train_corr   0.00 (  0.00)	l1 15.0708 (15.0685)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.82it/s] 23%|##3       | 6/26 [00:00<00:00, 30.87it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.87it/s] 42%|####2     | 11/26 [00:00<00:00, 37.37it/s] 65%|######5   | 17/26 [00:00<00:00, 45.29it/s]                                                65%|######5   | 17/26 [00:00<00:00, 45.29it/s] 88%|########8 | 23/26 [00:00<00:00, 47.11it/s]100%|##########| 26/26 [00:00<00:00, 40.58it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.45 (  0.45)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.52 (  0.48)	test_majacc   0.49 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.52 (  0.48)	test_majacc_d   0.49 (  0.52)	test_corr_d  -0.03 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.52)	test_minacc   0.61 (  0.50)	test_majacc   0.56 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.61 (  0.50)	test_majacc_d   0.56 (  0.53)	test_corr_d  -0.00 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.00 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.94it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 40/  1]	epoch_time 0.0497 (0.0421)	validation_time 0.0003 (0.0005)	train_time 0.0494 (0.0414)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5219000158011913, 0.5110000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.30it/s] 12%|#1        | 3/26 [00:00<00:02, 11.25it/s] 19%|#9        | 5/26 [00:00<00:01, 13.48it/s] 27%|##6       | 7/26 [00:00<00:01, 14.61it/s] 35%|###4      | 9/26 [00:00<00:01, 15.38it/s] 42%|####2     | 11/26 [00:00<00:00, 15.73it/s] 50%|#####     | 13/26 [00:00<00:00, 16.20it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.11it/s] 65%|######5   | 17/26 [00:01<00:00, 16.18it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.37it/s] 81%|########  | 21/26 [00:01<00:00, 16.40it/s] 88%|########8 | 23/26 [00:01<00:00, 16.43it/s] 96%|#########6| 25/26 [00:01<00:00, 16.23it/s]100%|##########| 26/26 [00:01<00:00, 14.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.52 (  0.52)	train_minacc   0.51 (  0.52)	train_majacc   0.52 (  0.52)	train_corr   0.00 (  0.00)	l1 15.0751 (15.0729)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.24it/s] 35%|###4      | 9/26 [00:00<00:00, 40.78it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.78it/s] 58%|#####7    | 15/26 [00:00<00:00, 48.42it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 48.42it/s] 81%|########  | 21/26 [00:00<00:00, 47.70it/s]100%|##########| 26/26 [00:00<00:00, 42.56it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.45 (  0.45)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.52)	test_minacc   0.52 (  0.48)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.52 (  0.48)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.52)	test_minacc   0.61 (  0.51)	test_majacc   0.56 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.52)	test_minacc_d   0.61 (  0.51)	test_majacc_d   0.56 (  0.53)	test_corr_d   0.00 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.52)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.00 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.20it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 41/  1]	epoch_time 0.0495 (0.0423)	validation_time 0.0004 (0.0005)	train_time 0.0491 (0.0416)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.523800014525652, 0.5139999985694885)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.74it/s] 12%|#1        | 3/26 [00:00<00:01, 11.75it/s] 19%|#9        | 5/26 [00:00<00:01, 14.03it/s] 27%|##6       | 7/26 [00:00<00:01, 15.28it/s] 35%|###4      | 9/26 [00:00<00:01, 15.73it/s] 42%|####2     | 11/26 [00:00<00:00, 16.14it/s] 50%|#####     | 13/26 [00:00<00:00, 16.43it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.59it/s] 65%|######5   | 17/26 [00:01<00:00, 16.69it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.76it/s] 81%|########  | 21/26 [00:01<00:00, 16.63it/s] 88%|########8 | 23/26 [00:01<00:00, 16.42it/s] 96%|#########6| 25/26 [00:01<00:00, 16.47it/s]100%|##########| 26/26 [00:01<00:00, 15.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.52 (  0.52)	train_minacc   0.51 (  0.52)	train_majacc   0.52 (  0.53)	train_corr   0.00 (  0.00)	l1 15.0792 (15.0770)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.13it/s] 27%|##6       | 7/26 [00:00<00:00, 35.65it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.65it/s] 46%|####6     | 12/26 [00:00<00:00, 41.23it/s] 69%|######9   | 18/26 [00:00<00:00, 46.67it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.67it/s] 92%|#########2| 24/26 [00:00<00:00, 48.60it/s]100%|##########| 26/26 [00:00<00:00, 40.58it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.45 (  0.45)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.52)	test_minacc   0.52 (  0.48)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.52 (  0.48)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.52)	test_minacc   0.61 (  0.51)	test_majacc   0.56 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.52)	test_minacc_d   0.61 (  0.51)	test_majacc_d   0.56 (  0.53)	test_corr_d   0.01 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.53)	test_minacc   0.51 (  0.52)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.00 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.31it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 42/  1]	epoch_time 0.0494 (0.0424)	validation_time 0.0004 (0.0005)	train_time 0.0490 (0.0418)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5253000123202801, 0.51500004529953)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.85it/s] 12%|#1        | 3/26 [00:00<00:01, 11.84it/s] 19%|#9        | 5/26 [00:00<00:01, 14.11it/s] 27%|##6       | 7/26 [00:00<00:01, 15.36it/s] 35%|###4      | 9/26 [00:00<00:01, 15.99it/s] 42%|####2     | 11/26 [00:00<00:00, 16.31it/s] 50%|#####     | 13/26 [00:00<00:00, 16.56it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.71it/s] 65%|######5   | 17/26 [00:01<00:00, 16.84it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.04it/s] 81%|########  | 21/26 [00:01<00:00, 16.75it/s] 88%|########8 | 23/26 [00:01<00:00, 16.89it/s] 96%|#########6| 25/26 [00:01<00:00, 17.01it/s]100%|##########| 26/26 [00:01<00:00, 15.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.52 (  0.53)	train_minacc   0.51 (  0.52)	train_majacc   0.52 (  0.53)	train_corr   0.00 (  0.00)	l1 15.0830 (15.0810)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.32it/s] 27%|##6       | 7/26 [00:00<00:00, 35.30it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.30it/s] 50%|#####     | 13/26 [00:00<00:00, 44.93it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.01it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.01it/s] 96%|#########6| 25/26 [00:00<00:00, 49.60it/s]100%|##########| 26/26 [00:00<00:00, 41.88it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.45 (  0.45)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.52)	test_minacc   0.52 (  0.48)	test_majacc   0.50 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.52 (  0.48)	test_majacc_d   0.50 (  0.53)	test_corr_d  -0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.53)	test_minacc   0.61 (  0.51)	test_majacc   0.57 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.53)	test_minacc_d   0.61 (  0.51)	test_majacc_d   0.57 (  0.53)	test_corr_d   0.01 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.53)	test_minacc   0.51 (  0.52)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.01 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.15it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 43/  1]	epoch_time 0.0492 (0.0426)	validation_time 0.0004 (0.0005)	train_time 0.0488 (0.0419)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.527400015681982, 0.51500004529953)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.76it/s] 12%|#1        | 3/26 [00:00<00:02, 11.02it/s] 19%|#9        | 5/26 [00:00<00:01, 13.17it/s] 27%|##6       | 7/26 [00:00<00:01, 14.58it/s] 35%|###4      | 9/26 [00:00<00:01, 15.36it/s] 42%|####2     | 11/26 [00:00<00:00, 15.86it/s] 50%|#####     | 13/26 [00:00<00:00, 16.17it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.47it/s] 65%|######5   | 17/26 [00:01<00:00, 16.71it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.60it/s] 81%|########  | 21/26 [00:01<00:00, 16.40it/s] 88%|########8 | 23/26 [00:01<00:00, 16.47it/s] 96%|#########6| 25/26 [00:01<00:00, 16.59it/s]100%|##########| 26/26 [00:01<00:00, 15.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.52 (  0.53)	train_minacc   0.51 (  0.52)	train_majacc   0.52 (  0.53)	train_corr   0.00 (  0.00)	l1 15.0866 (15.0847)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.78it/s] 35%|###4      | 9/26 [00:00<00:00, 41.87it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.87it/s] 58%|#####7    | 15/26 [00:00<00:00, 48.59it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 48.59it/s] 81%|########  | 21/26 [00:00<00:00, 47.90it/s]100%|##########| 26/26 [00:00<00:00, 43.14it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.45 (  0.45)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.53 (  0.48)	test_majacc   0.50 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.53 (  0.48)	test_majacc_d   0.50 (  0.53)	test_corr_d  -0.02 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.58 (  0.53)	test_minacc   0.61 (  0.51)	test_majacc   0.57 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.53)	test_minacc_d   0.61 (  0.51)	test_majacc_d   0.57 (  0.53)	test_corr_d   0.01 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.53)	test_minacc   0.51 (  0.52)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.01 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.27it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 44/  1]	epoch_time 0.0489 (0.0427)	validation_time 0.0004 (0.0005)	train_time 0.0485 (0.0421)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5294000109136104, 0.51500004529953)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.02it/s] 12%|#1        | 3/26 [00:00<00:02, 10.16it/s] 19%|#9        | 5/26 [00:00<00:01, 12.68it/s] 27%|##6       | 7/26 [00:00<00:01, 14.22it/s] 35%|###4      | 9/26 [00:00<00:01, 15.18it/s] 42%|####2     | 11/26 [00:00<00:00, 15.82it/s] 50%|#####     | 13/26 [00:00<00:00, 16.20it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.25it/s] 65%|######5   | 17/26 [00:01<00:00, 16.18it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.44it/s] 81%|########  | 21/26 [00:01<00:00, 16.50it/s] 88%|########8 | 23/26 [00:01<00:00, 16.47it/s] 96%|#########6| 25/26 [00:01<00:00, 16.58it/s]100%|##########| 26/26 [00:01<00:00, 14.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.52 (  0.53)	train_minacc   0.51 (  0.52)	train_majacc   0.52 (  0.53)	train_corr   0.00 (  0.00)	l1 15.0900 (15.0882)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.95it/s] 35%|###4      | 9/26 [00:00<00:00, 39.10it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.10it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.57it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.57it/s] 81%|########  | 21/26 [00:00<00:00, 47.28it/s]100%|##########| 26/26 [00:00<00:00, 42.12it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.45 (  0.45)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.53 (  0.48)	test_majacc   0.50 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.53 (  0.48)	test_majacc_d   0.50 (  0.53)	test_corr_d  -0.02 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.58 (  0.53)	test_minacc   0.61 (  0.51)	test_majacc   0.57 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.53)	test_minacc_d   0.61 (  0.51)	test_majacc_d   0.57 (  0.54)	test_corr_d   0.02 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.53)	test_minacc   0.51 (  0.52)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.01 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.55it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 45/  1]	epoch_time 0.0492 (0.0429)	validation_time 0.0004 (0.0005)	train_time 0.0488 (0.0422)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5311000131368637, 0.51500004529953)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.85it/s] 12%|#1        | 3/26 [00:00<00:02, 11.24it/s] 19%|#9        | 5/26 [00:00<00:01, 13.46it/s] 27%|##6       | 7/26 [00:00<00:01, 14.71it/s] 35%|###4      | 9/26 [00:00<00:01, 15.18it/s] 42%|####2     | 11/26 [00:00<00:00, 15.73it/s] 50%|#####     | 13/26 [00:00<00:00, 15.97it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.25it/s] 65%|######5   | 17/26 [00:01<00:00, 16.30it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.39it/s] 81%|########  | 21/26 [00:01<00:00, 16.46it/s] 88%|########8 | 23/26 [00:01<00:00, 16.49it/s] 96%|#########6| 25/26 [00:01<00:00, 16.39it/s]100%|##########| 26/26 [00:01<00:00, 15.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.52 (  0.53)	train_minacc   0.51 (  0.52)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 15.0931 (15.0915)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.48it/s] 23%|##3       | 6/26 [00:00<00:00, 29.23it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.23it/s] 46%|####6     | 12/26 [00:00<00:00, 40.42it/s] 65%|######5   | 17/26 [00:00<00:00, 41.86it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.86it/s] 88%|########8 | 23/26 [00:00<00:00, 46.73it/s]100%|##########| 26/26 [00:00<00:00, 38.32it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.45 (  0.45)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.53 (  0.48)	test_majacc   0.50 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.53 (  0.48)	test_majacc_d   0.50 (  0.53)	test_corr_d  -0.02 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.58 (  0.53)	test_minacc   0.61 (  0.51)	test_majacc   0.57 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.53)	test_minacc_d   0.61 (  0.51)	test_majacc_d   0.57 (  0.54)	test_corr_d   0.02 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.53)	test_minacc   0.51 (  0.52)	test_majacc   0.53 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.01 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.13it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 46/  1]	epoch_time 0.0512 (0.0430)	validation_time 0.0006 (0.0005)	train_time 0.0506 (0.0424)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5331000109016896, 0.5180000066757202)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.95it/s] 12%|#1        | 3/26 [00:00<00:02, 10.65it/s] 19%|#9        | 5/26 [00:00<00:01, 13.13it/s] 27%|##6       | 7/26 [00:00<00:01, 14.40it/s] 35%|###4      | 9/26 [00:00<00:01, 15.18it/s] 42%|####2     | 11/26 [00:00<00:00, 15.72it/s] 50%|#####     | 13/26 [00:00<00:00, 15.90it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.01it/s] 65%|######5   | 17/26 [00:01<00:00, 16.14it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.37it/s] 81%|########  | 21/26 [00:01<00:00, 16.25it/s] 88%|########8 | 23/26 [00:01<00:00, 16.35it/s] 96%|#########6| 25/26 [00:01<00:00, 16.48it/s]100%|##########| 26/26 [00:01<00:00, 14.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.52 (  0.53)	train_minacc   0.51 (  0.52)	train_majacc   0.53 (  0.54)	train_corr   0.00 (  0.00)	l1 15.0961 (15.0946)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.36it/s] 27%|##6       | 7/26 [00:00<00:00, 32.81it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.81it/s] 50%|#####     | 13/26 [00:00<00:00, 39.42it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.69it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.69it/s] 96%|#########6| 25/26 [00:00<00:00, 46.34it/s]100%|##########| 26/26 [00:00<00:00, 38.63it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.45 (  0.45)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.53 (  0.48)	test_majacc   0.50 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.53 (  0.48)	test_majacc_d   0.50 (  0.53)	test_corr_d  -0.02 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.58 (  0.53)	test_minacc   0.61 (  0.51)	test_majacc   0.57 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.53)	test_minacc_d   0.61 (  0.51)	test_majacc_d   0.57 (  0.54)	test_corr_d   0.02 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.53)	test_minacc   0.51 (  0.52)	test_majacc   0.53 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.01 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.26it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 47/  1]	epoch_time 0.0492 (0.0432)	validation_time 0.0004 (0.0005)	train_time 0.0487 (0.0425)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5347000119686127, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.50it/s] 12%|#1        | 3/26 [00:00<00:01, 12.50it/s] 19%|#9        | 5/26 [00:00<00:01, 14.30it/s] 27%|##6       | 7/26 [00:00<00:01, 15.18it/s] 35%|###4      | 9/26 [00:00<00:01, 15.77it/s] 42%|####2     | 11/26 [00:00<00:00, 16.19it/s] 50%|#####     | 13/26 [00:00<00:00, 16.37it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.44it/s] 65%|######5   | 17/26 [00:01<00:00, 16.47it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.59it/s] 81%|########  | 21/26 [00:01<00:00, 16.79it/s] 88%|########8 | 23/26 [00:01<00:00, 16.50it/s] 96%|#########6| 25/26 [00:01<00:00, 16.41it/s]100%|##########| 26/26 [00:01<00:00, 15.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.52 (  0.53)	train_minacc   0.51 (  0.52)	train_majacc   0.53 (  0.54)	train_corr   0.00 (  0.00)	l1 15.0989 (15.0975)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.92it/s] 31%|###       | 8/26 [00:00<00:00, 40.62it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.62it/s] 50%|#####     | 13/26 [00:00<00:00, 41.46it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.89it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.89it/s] 96%|#########6| 25/26 [00:00<00:00, 47.85it/s]100%|##########| 26/26 [00:00<00:00, 41.46it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.45 (  0.45)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.53)	test_minacc   0.53 (  0.48)	test_majacc   0.50 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.53 (  0.48)	test_majacc_d   0.50 (  0.53)	test_corr_d  -0.02 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.58 (  0.54)	test_minacc   0.61 (  0.51)	test_majacc   0.58 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.54)	test_minacc_d   0.61 (  0.51)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.03 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.54)	test_minacc   0.51 (  0.52)	test_majacc   0.53 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.02 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.66it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 48/  1]	epoch_time 0.0476 (0.0433)	validation_time 0.0004 (0.0005)	train_time 0.0472 (0.0426)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5357000142335892, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.89it/s] 12%|#1        | 3/26 [00:00<00:02, 10.86it/s] 19%|#9        | 5/26 [00:00<00:01, 13.18it/s] 27%|##6       | 7/26 [00:00<00:01, 14.37it/s] 35%|###4      | 9/26 [00:00<00:01, 15.05it/s] 42%|####2     | 11/26 [00:00<00:00, 15.55it/s] 50%|#####     | 13/26 [00:00<00:00, 15.20it/s] 58%|#####7    | 15/26 [00:01<00:00, 15.60it/s] 65%|######5   | 17/26 [00:01<00:00, 15.93it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.22it/s] 81%|########  | 21/26 [00:01<00:00, 16.33it/s] 88%|########8 | 23/26 [00:01<00:00, 16.39it/s] 96%|#########6| 25/26 [00:01<00:00, 16.29it/s]100%|##########| 26/26 [00:01<00:00, 14.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.52 (  0.54)	train_minacc   0.51 (  0.52)	train_majacc   0.52 (  0.54)	train_corr   0.00 (  0.00)	l1 15.1016 (15.1002)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.30it/s] 27%|##6       | 7/26 [00:00<00:00, 36.60it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.60it/s] 50%|#####     | 13/26 [00:00<00:00, 43.13it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.26it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.26it/s] 96%|#########6| 25/26 [00:00<00:00, 47.85it/s]100%|##########| 26/26 [00:00<00:00, 40.89it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.45 (  0.45)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.53)	test_minacc   0.52 (  0.48)	test_majacc   0.50 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.52 (  0.48)	test_majacc_d   0.50 (  0.54)	test_corr_d  -0.02 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.58 (  0.54)	test_minacc   0.61 (  0.51)	test_majacc   0.58 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.54)	test_minacc_d   0.61 (  0.51)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.03 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.54)	test_minacc   0.51 (  0.52)	test_majacc   0.52 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.52 (  0.54)	test_corr_d   0.02 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.57it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 49/  1]	epoch_time 0.0497 (0.0434)	validation_time 0.0004 (0.0005)	train_time 0.0493 (0.0428)
record: (train_acc, test_acc) (0.6411000157594681, 0.6780000329017639)
last accs (train_acc, test_acc) (0.5373000150918961, 0.5210000276565552)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.159 MB of 0.159 MB uploadedwandb: \ 0.159 MB of 0.159 MB uploadedwandb: | 0.159 MB of 0.159 MB uploadedwandb: / 0.159 MB of 0.159 MB uploadedwandb: - 0.181 MB of 0.193 MB uploaded (0.003 MB deduped)wandb: \ 0.514 MB of 0.514 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/diagnostics/epoch_time_val █▁▁▂▁▁▁▁▁▁▁▂▂▂▁▁▁▁▁▃▄▂▁▂▄▄▃▄▄▄▄▄▄▄▄▄▄▄▄▄
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/diagnostics/train_time_val █▂▁▂▂▁▁▁▂▁▁▂▂▂▁▁▁▂▂▄▄▂▂▃▄▄▄▅▄▄▄▅▄▄▄▄▄▅▄▄
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/Loss_avg ▇██▆▇▅▆▆▅▅▇▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/Loss_d_avg ▇██▆▇▅▆▆▅▅▇▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/Loss_d_val ▇██▆▇▅▆▆▅▅▇▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/Loss_val ▇██▆▇▅▆▆▅▅▇▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/test_acc_avg ▁▁▁▂▄▄▄▄▅▅▃▅███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/test_acc_d_avg ▁▁▁▂▄▄▄▄▅▅▃▅███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/test_acc_d_val ▁▁▁▂▄▄▄▄▅▅▃▅███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/test_acc_val ▁▁▁▂▄▄▄▄▅▅▃▅███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/test_corr_d_avg ███▇▆▆▆▆▅▅▇▆▂▁▁▁▁▁▁▂▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/test_corr_d_val ███▇▆▆▆▆▅▅▇▆▂▁▁▁▁▁▁▂▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/test_majacc_avg ████▇▇▇▇▇▇█▇▄▃▃▃▃▃▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/test_majacc_d_avg ████▇▇▇▇▇▇█▇▄▃▃▃▃▃▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/test_majacc_d_val ████▇▇▇▇▇▇█▇▄▃▃▃▃▃▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/test_majacc_val ████▇▇▇▇▇▇█▇▄▃▃▃▃▃▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/test_minacc_avg ▁▁▁▂▃▃▄▄▅▅▃▄███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/test_minacc_d_avg ▁▁▁▂▃▃▄▄▅▅▃▄███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/test_minacc_d_val ▁▁▁▂▃▃▄▄▅▅▃▄███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/test_minacc_val ▁▁▁▂▃▃▄▄▅▅▃▄███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/Loss_avg █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/Loss_val █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/l1_avg ▂▂▁▁▁▂▃▃▅▆▆▇███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/l1_val ▂▂▁▁▂▂▃▄▅▆▇████████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/train_acc_avg ▇███████████▇▄▄▄▃▃▃▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/train_acc_val ▇▇█▇████████▅▄▃▃▃▃▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/train_majacc_avg ▇█████████▇▇▆▃▃▃▃▃▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/train_majacc_val █████▇███▇█▇▄▃▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/train_minacc_avg ▁▁▁▂▂▂▃▃▃▃▃▄▆██████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/train_minacc_val ▁▁▂▁▃▄▃▃▄▄▃▅███████▆▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/train_nll_avg ▅▃▂▂▂▂▁▁▁▁▁▁▃▆▇▇▇▇▇█████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/train_nll_val ▄▃▃▃▂▂▂▁▂▂▁▁▅▇▇▇▇▇▇█████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/train_penalty_avg █▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/train_penalty_val █▅▅▃▂▃▂▂▂▂▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/weight_norm_avg █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/weight_norm_val █▄▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/diagnostics/epoch_time_val 0.0497
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/diagnostics/train_time_val 0.04928
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/diagnostics/validation_time_val 0.00041
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/Loss_avg 0.69309
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/Loss_d_avg 0.69309
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/Loss_d_val 0.69309
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/Loss_val 0.69309
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/test_acc_avg 0.521
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/test_acc_d_avg 0.521
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/test_acc_d_val 0.521
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/test_acc_val 0.521
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/test_corr_d_avg -0.02164
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/test_corr_d_val -0.02164
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/test_majacc_avg 0.51
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/test_majacc_d_avg 0.51
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/test_majacc_d_val 0.51
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/test_majacc_val 0.51
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/test_minacc_avg 0.52222
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/test_minacc_d_avg 0.52222
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/test_minacc_d_val 0.52222
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/test/test_minacc_val 0.52222
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/Loss_avg 8e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/Loss_val 8e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/l1_avg 15.10018
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/l1_val 15.10156
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/train_acc_avg 0.5363
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/train_acc_val 0.52
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/train_majacc_avg 0.53917
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/train_majacc_val 0.52153
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/train_minacc_avg 0.51971
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/train_minacc_val 0.5122
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/train_nll_avg 0.69316
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/train_nll_val 0.69315
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/weight_norm_avg 0.14043
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/61/logs/train/weight_norm_val 0.14036
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/cf10h7bc
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_121340-cf10h7bc/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_121629-b76on9ay
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/b76on9ay
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=15.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1165
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6059, 3, 32, 32) (5941, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:40,  1.62s/it] 19%|#9        | 5/26 [00:01<00:05,  3.75it/s] 35%|###4      | 9/26 [00:01<00:02,  7.34it/s] 50%|#####     | 13/26 [00:01<00:01, 11.09it/s] 65%|######5   | 17/26 [00:02<00:00, 15.04it/s] 81%|########  | 21/26 [00:02<00:00, 18.75it/s] 96%|#########6| 25/26 [00:02<00:00, 22.19it/s]100%|##########| 26/26 [00:02<00:00,  9.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 10.390 (12.762)	train_nll   0.44 (  0.65)	train_penalty   0.08 (  0.53)	weight_norm   9.95 ( 12.12)	train_acc   0.84 (  0.79)	train_minacc   0.00 (  0.09)	train_majacc   0.99 (  0.92)	train_corr   0.00 (  0.00)	l1 6.6586 (8.0467)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.73it/s] 35%|###4      | 9/26 [00:00<00:00, 39.38it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.38it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.03it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.03it/s] 81%|########  | 21/26 [00:00<00:00, 46.85it/s]100%|##########| 26/26 [00:00<00:00, 42.11it/s]
Test: [   0/  26]	Loss 0.412 (0.412)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.412 (0.412)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.498 (0.426)	test_acc   0.80 (  0.84)	test_minacc   0.03 (  0.02)	test_majacc   0.97 (  0.99)	Loss_d 0.498 (0.426)	test_acc_d   0.80 (  0.84)	test_minacc_d   0.03 (  0.02)	test_majacc_d   0.97 (  0.99)	test_corr_d   0.95 (  0.96)
Test: [  20/  26]	Loss 0.353 (0.417)	test_acc   0.89 (  0.85)	test_minacc   0.09 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.353 (0.417)	test_acc_d   0.89 (  0.85)	test_minacc_d   0.09 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.96)
Test: [  26/  26]	Loss 0.428 (0.415)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.428 (0.415)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.54it/s]100%|##########| 1/1 [00:00<00:00,  2.54it/s]
Test: [  0/  1]	Loss 1.798 (1.798)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.798 (1.798)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  1/  1]	Loss 1.798 (1.798)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.798 (1.798)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/62/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0758 (0.0758)	validation_time 0.0066 (0.0066)	train_time 0.0666 (0.0666)
record: (train_acc, test_acc) (0.8455000225901603, 0.11600000411272049)
last accs (train_acc, test_acc) (0.8455000225901603, 0.11600000411272049)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.30it/s] 19%|#9        | 5/26 [00:00<00:01, 20.98it/s] 35%|###4      | 9/26 [00:00<00:00, 26.53it/s] 50%|#####     | 13/26 [00:00<00:00, 29.19it/s] 65%|######5   | 17/26 [00:00<00:00, 30.99it/s] 81%|########  | 21/26 [00:00<00:00, 32.23it/s] 96%|#########6| 25/26 [00:00<00:00, 32.80it/s]100%|##########| 26/26 [00:00<00:00, 27.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 5.663 (7.688)	train_nll   0.40 (  0.41)	train_penalty   0.06 (  0.06)	weight_norm   5.26 (  7.28)	train_acc   0.85 (  0.85)	train_minacc   0.00 (  0.02)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.9719 (6.2683)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.46it/s] 35%|###4      | 9/26 [00:00<00:00, 40.91it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.91it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.94it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.94it/s] 81%|########  | 21/26 [00:00<00:00, 46.51it/s]100%|##########| 26/26 [00:00<00:00, 41.98it/s]
Test: [   0/  26]	Loss 0.377 (0.377)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.377 (0.377)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.477 (0.408)	test_acc   0.82 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.477 (0.408)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.337 (0.402)	test_acc   0.88 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.337 (0.402)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.97)
Test: [  26/  26]	Loss 0.401 (0.400)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.401 (0.400)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.74it/s]
Test: [  0/  1]	Loss 1.831 (1.831)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.831 (1.831)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.831 (1.831)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.831 (1.831)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Overall Timing[  1/  1]	epoch_time 0.0370 (0.0564)	validation_time 0.0004 (0.0035)	train_time 0.0366 (0.0516)
record: (train_acc, test_acc) (0.8455000225901603, 0.11600000411272049)
last accs (train_acc, test_acc) (0.848700022816658, 0.10900000482797623)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.75it/s] 15%|#5        | 4/26 [00:00<00:01, 16.70it/s] 31%|###       | 8/26 [00:00<00:00, 23.71it/s] 46%|####6     | 12/26 [00:00<00:00, 27.35it/s] 62%|######1   | 16/26 [00:00<00:00, 29.37it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.73it/s] 92%|#########2| 24/26 [00:00<00:00, 31.87it/s]100%|##########| 26/26 [00:00<00:00, 26.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 3.477 (4.407)	train_nll   0.40 (  0.40)	train_penalty   0.05 (  0.06)	weight_norm   3.08 (  4.01)	train_acc   0.85 (  0.85)	train_minacc   0.00 (  0.04)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.1382 (5.5947)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.70it/s] 23%|##3       | 6/26 [00:00<00:00, 29.44it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.44it/s] 42%|####2     | 11/26 [00:00<00:00, 35.54it/s] 65%|######5   | 17/26 [00:00<00:00, 42.58it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.58it/s] 85%|########4 | 22/26 [00:00<00:00, 44.43it/s]100%|##########| 26/26 [00:00<00:00, 38.07it/s]
Test: [   0/  26]	Loss 0.358 (0.358)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.358 (0.358)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.451 (0.395)	test_acc   0.83 (  0.84)	test_minacc   0.07 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.451 (0.395)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.07 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.326 (0.387)	test_acc   0.88 (  0.85)	test_minacc   0.02 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.326 (0.387)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.02 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.96)
Test: [  26/  26]	Loss 0.387 (0.385)	test_acc   0.85 (  0.85)	test_minacc   0.03 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.387 (0.385)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.03 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.45it/s]
Test: [  0/  1]	Loss 1.844 (1.844)	test_acc   0.12 (  0.12)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 1.844 (1.844)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.844 (1.844)	test_acc   0.12 (  0.12)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 1.844 (1.844)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/62/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0366 (0.0498)	validation_time 0.0004 (0.0025)	train_time 0.0362 (0.0465)
record: (train_acc, test_acc) (0.8479000265598298, 0.12400000542402267)
last accs (train_acc, test_acc) (0.8479000265598298, 0.12400000542402267)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.96it/s] 19%|#9        | 5/26 [00:00<00:01, 17.40it/s] 35%|###4      | 9/26 [00:00<00:00, 24.00it/s] 50%|#####     | 13/26 [00:00<00:00, 28.06it/s] 65%|######5   | 17/26 [00:00<00:00, 30.20it/s] 81%|########  | 21/26 [00:00<00:00, 31.87it/s] 96%|#########6| 25/26 [00:00<00:00, 32.94it/s]100%|##########| 26/26 [00:00<00:00, 26.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 2.329 (2.840)	train_nll   0.37 (  0.39)	train_penalty   0.04 (  0.05)	weight_norm   1.95 (  2.45)	train_acc   0.85 (  0.85)	train_minacc   0.03 (  0.06)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 4.7654 (4.9410)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.54it/s] 19%|#9        | 5/26 [00:00<00:00, 22.57it/s] 38%|###8      | 10/26 [00:00<00:00, 32.50it/s]                                                38%|###8      | 10/26 [00:00<00:00, 32.50it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.47it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.11it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.11it/s] 92%|#########2| 24/26 [00:00<00:00, 41.06it/s]100%|##########| 26/26 [00:00<00:00, 32.34it/s]
Test: [   0/  26]	Loss 0.348 (0.348)	test_acc   0.87 (  0.87)	test_minacc   0.07 (  0.07)	test_majacc   1.00 (  1.00)	Loss_d 0.348 (0.348)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.07 (  0.07)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.418 (0.377)	test_acc   0.82 (  0.85)	test_minacc   0.10 (  0.06)	test_majacc   0.98 (  0.99)	Loss_d 0.418 (0.377)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.10 (  0.06)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.94 (  0.95)
Test: [  20/  26]	Loss 0.322 (0.373)	test_acc   0.89 (  0.85)	test_minacc   0.15 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.322 (0.373)	test_acc_d   0.89 (  0.85)	test_minacc_d   0.15 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  26/  26]	Loss 0.365 (0.371)	test_acc   0.86 (  0.85)	test_minacc   0.05 (  0.08)	test_majacc   1.00 (  0.99)	Loss_d 0.365 (0.371)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.05 (  0.08)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.84it/s]
Test: [  0/  1]	Loss 1.786 (1.786)	test_acc   0.15 (  0.15)	test_minacc   0.06 (  0.06)	test_majacc   0.98 (  0.98)	Loss_d 1.786 (1.786)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.89 (  0.89)
Test: [  1/  1]	Loss 1.786 (1.786)	test_acc   0.15 (  0.15)	test_minacc   0.06 (  0.06)	test_majacc   0.98 (  0.98)	Loss_d 1.786 (1.786)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.89 (  0.89)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/62/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0399 (0.0473)	validation_time 0.0004 (0.0019)	train_time 0.0395 (0.0447)
record: (train_acc, test_acc) (0.8518000242114067, 0.15200001001358032)
last accs (train_acc, test_acc) (0.8518000242114067, 0.15200001001358032)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.96it/s] 19%|#9        | 5/26 [00:00<00:01, 17.74it/s] 35%|###4      | 9/26 [00:00<00:00, 23.78it/s] 50%|#####     | 13/26 [00:00<00:00, 27.37it/s] 65%|######5   | 17/26 [00:00<00:00, 29.56it/s] 81%|########  | 21/26 [00:00<00:00, 31.37it/s] 96%|#########6| 25/26 [00:00<00:00, 32.32it/s]100%|##########| 26/26 [00:01<00:00, 26.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.646 (1.950)	train_nll   0.37 (  0.37)	train_penalty   0.02 (  0.04)	weight_norm   1.28 (  1.58)	train_acc   0.83 (  0.85)	train_minacc   0.13 (  0.11)	train_majacc   0.96 (  0.98)	train_corr   0.00 (  0.00)	l1 4.8554 (4.8411)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.47it/s] 31%|###       | 8/26 [00:00<00:00, 40.72it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.72it/s] 50%|#####     | 13/26 [00:00<00:00, 43.24it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.33it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.33it/s] 96%|#########6| 25/26 [00:00<00:00, 47.24it/s]100%|##########| 26/26 [00:00<00:00, 41.17it/s]
Test: [   0/  26]	Loss 0.334 (0.334)	test_acc   0.86 (  0.86)	test_minacc   0.09 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.334 (0.334)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.389 (0.348)	test_acc   0.82 (  0.85)	test_minacc   0.06 (  0.10)	test_majacc   0.98 (  0.98)	Loss_d 0.389 (0.348)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.06 (  0.10)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  20/  26]	Loss 0.305 (0.346)	test_acc   0.87 (  0.85)	test_minacc   0.02 (  0.10)	test_majacc   0.99 (  0.98)	Loss_d 0.305 (0.346)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.02 (  0.10)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.95 (  0.93)
Test: [  26/  26]	Loss 0.352 (0.346)	test_acc   0.85 (  0.85)	test_minacc   0.08 (  0.10)	test_majacc   0.99 (  0.98)	Loss_d 0.352 (0.346)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.08 (  0.10)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.93 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.99it/s]
Test: [  0/  1]	Loss 1.780 (1.780)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.96 (  0.96)	Loss_d 1.780 (1.780)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.87 (  0.87)
Test: [  1/  1]	Loss 1.780 (1.780)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.96 (  0.96)	Loss_d 1.780 (1.780)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.87 (  0.87)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/62/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0378 (0.0454)	validation_time 0.0004 (0.0016)	train_time 0.0374 (0.0433)
record: (train_acc, test_acc) (0.8506000252366066, 0.15700000524520874)
last accs (train_acc, test_acc) (0.8506000252366066, 0.15700000524520874)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.89it/s] 19%|#9        | 5/26 [00:00<00:01, 20.20it/s] 35%|###4      | 9/26 [00:00<00:00, 25.69it/s] 50%|#####     | 13/26 [00:00<00:00, 28.97it/s] 65%|######5   | 17/26 [00:00<00:00, 30.82it/s] 81%|########  | 21/26 [00:00<00:00, 31.65it/s] 96%|#########6| 25/26 [00:00<00:00, 32.84it/s]100%|##########| 26/26 [00:00<00:00, 27.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.223 (1.406)	train_nll   0.37 (  0.37)	train_penalty   0.04 (  0.03)	weight_norm   0.85 (  1.04)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.09)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 5.6192 (5.3174)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.48it/s] 27%|##6       | 7/26 [00:00<00:00, 36.69it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.69it/s] 50%|#####     | 13/26 [00:00<00:00, 41.82it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.61it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.61it/s] 96%|#########6| 25/26 [00:00<00:00, 48.32it/s]100%|##########| 26/26 [00:00<00:00, 40.67it/s]
Test: [   0/  26]	Loss 0.334 (0.334)	test_acc   0.86 (  0.86)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.334 (0.334)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.400 (0.350)	test_acc   0.82 (  0.85)	test_minacc   0.01 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.400 (0.350)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.01 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  20/  26]	Loss 0.302 (0.349)	test_acc   0.88 (  0.85)	test_minacc   0.00 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.302 (0.349)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.00 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.93)
Test: [  26/  26]	Loss 0.337 (0.347)	test_acc   0.85 (  0.85)	test_minacc   0.05 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.337 (0.347)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.05 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.97it/s]
Test: [  0/  1]	Loss 1.778 (1.778)	test_acc   0.16 (  0.16)	test_minacc   0.06 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 1.778 (1.778)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.88 (  0.88)
Test: [  1/  1]	Loss 1.778 (1.778)	test_acc   0.16 (  0.16)	test_minacc   0.06 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 1.778 (1.778)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.88 (  0.88)
Overall Timing[  5/  1]	epoch_time 0.0371 (0.0440)	validation_time 0.0004 (0.0014)	train_time 0.0367 (0.0422)
record: (train_acc, test_acc) (0.8506000252366066, 0.15700000524520874)
last accs (train_acc, test_acc) (0.8504000205993653, 0.15600000321865082)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.08it/s] 19%|#9        | 5/26 [00:00<00:00, 22.81it/s] 35%|###4      | 9/26 [00:00<00:00, 27.17it/s] 50%|#####     | 13/26 [00:00<00:00, 29.49it/s] 65%|######5   | 17/26 [00:00<00:00, 31.15it/s] 81%|########  | 21/26 [00:00<00:00, 32.45it/s] 96%|#########6| 25/26 [00:00<00:00, 33.57it/s]100%|##########| 26/26 [00:00<00:00, 28.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.926 (1.052)	train_nll   0.35 (  0.35)	train_penalty   0.01 (  0.03)	weight_norm   0.58 (  0.70)	train_acc   0.83 (  0.85)	train_minacc   0.21 (  0.14)	train_majacc   0.94 (  0.98)	train_corr   0.00 (  0.00)	l1 6.4929 (6.2284)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.62it/s] 19%|#9        | 5/26 [00:00<00:00, 27.20it/s] 38%|###8      | 10/26 [00:00<00:00, 34.02it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.02it/s] 62%|######1   | 16/26 [00:00<00:00, 42.30it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.30it/s] 85%|########4 | 22/26 [00:00<00:00, 44.18it/s]100%|##########| 26/26 [00:00<00:00, 38.50it/s]
Test: [   0/  26]	Loss 0.345 (0.345)	test_acc   0.86 (  0.86)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.345 (0.345)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.394 (0.343)	test_acc   0.82 (  0.85)	test_minacc   0.01 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.394 (0.343)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.01 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.92)
Test: [  20/  26]	Loss 0.294 (0.340)	test_acc   0.88 (  0.85)	test_minacc   0.02 (  0.06)	test_majacc   1.00 (  0.99)	Loss_d 0.294 (0.340)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.02 (  0.06)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.92)
Test: [  26/  26]	Loss 0.321 (0.338)	test_acc   0.86 (  0.85)	test_minacc   0.08 (  0.06)	test_majacc   1.00 (  0.99)	Loss_d 0.321 (0.338)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.08 (  0.06)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.93 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.34it/s]
Test: [  0/  1]	Loss 1.774 (1.774)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.98 (  0.98)	Loss_d 1.774 (1.774)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.84 (  0.84)
Test: [  1/  1]	Loss 1.774 (1.774)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.98 (  0.98)	Loss_d 1.774 (1.774)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.84 (  0.84)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/62/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0356 (0.0428)	validation_time 0.0004 (0.0013)	train_time 0.0352 (0.0412)
record: (train_acc, test_acc) (0.8515000206232071, 0.164000004529953)
last accs (train_acc, test_acc) (0.8515000206232071, 0.164000004529953)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.29it/s] 19%|#9        | 5/26 [00:00<00:00, 22.85it/s] 35%|###4      | 9/26 [00:00<00:00, 28.59it/s] 50%|#####     | 13/26 [00:00<00:00, 31.57it/s] 65%|######5   | 17/26 [00:00<00:00, 32.35it/s] 81%|########  | 21/26 [00:00<00:00, 33.12it/s] 96%|#########6| 25/26 [00:00<00:00, 33.69it/s]100%|##########| 26/26 [00:00<00:00, 29.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.802 (0.844)	train_nll   0.37 (  0.36)	train_penalty   0.04 (  0.03)	weight_norm   0.43 (  0.49)	train_acc   0.85 (  0.85)	train_minacc   0.11 (  0.13)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 7.8332 (7.2205)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.64it/s] 27%|##6       | 7/26 [00:00<00:00, 34.41it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.41it/s] 50%|#####     | 13/26 [00:00<00:00, 39.82it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.45it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.45it/s] 96%|#########6| 25/26 [00:00<00:00, 47.26it/s]100%|##########| 26/26 [00:00<00:00, 39.74it/s]
Test: [   0/  26]	Loss 0.319 (0.319)	test_acc   0.86 (  0.86)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.319 (0.319)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.393 (0.343)	test_acc   0.81 (  0.85)	test_minacc   0.07 (  0.06)	test_majacc   0.98 (  0.99)	Loss_d 0.393 (0.343)	test_acc_d   0.81 (  0.85)	test_minacc_d   0.07 (  0.06)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.93 (  0.94)
Test: [  20/  26]	Loss 0.294 (0.339)	test_acc   0.88 (  0.85)	test_minacc   0.06 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.294 (0.339)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.06 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.94)
Test: [  26/  26]	Loss 0.332 (0.336)	test_acc   0.86 (  0.85)	test_minacc   0.11 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.332 (0.336)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.11 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.26it/s]
Test: [  0/  1]	Loss 1.742 (1.742)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.96 (  0.96)	Loss_d 1.742 (1.742)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.83 (  0.83)
Test: [  1/  1]	Loss 1.742 (1.742)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.96 (  0.96)	Loss_d 1.742 (1.742)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.83 (  0.83)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/62/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0348 (0.0418)	validation_time 0.0003 (0.0012)	train_time 0.0345 (0.0403)
record: (train_acc, test_acc) (0.852100027680397, 0.17800000309944153)
last accs (train_acc, test_acc) (0.852100027680397, 0.17800000309944153)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.07it/s] 19%|#9        | 5/26 [00:00<00:00, 22.51it/s] 35%|###4      | 9/26 [00:00<00:00, 28.08it/s] 50%|#####     | 13/26 [00:00<00:00, 30.97it/s] 65%|######5   | 17/26 [00:00<00:00, 32.58it/s] 81%|########  | 21/26 [00:00<00:00, 33.51it/s] 96%|#########6| 25/26 [00:00<00:00, 34.13it/s]100%|##########| 26/26 [00:00<00:00, 29.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.648 (0.709)	train_nll   0.36 (  0.35)	train_penalty   0.03 (  0.03)	weight_norm   0.29 (  0.35)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.12)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 8.9237 (8.4673)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.16it/s] 35%|###4      | 9/26 [00:00<00:00, 39.84it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.84it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.10it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.10it/s] 81%|########  | 21/26 [00:00<00:00, 47.49it/s]100%|##########| 26/26 [00:00<00:00, 42.63it/s]
Test: [   0/  26]	Loss 0.327 (0.327)	test_acc   0.87 (  0.87)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 0.327 (0.327)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.388 (0.344)	test_acc   0.82 (  0.85)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.388 (0.344)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  20/  26]	Loss 0.308 (0.344)	test_acc   0.88 (  0.85)	test_minacc   0.02 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.308 (0.344)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.02 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.94)
Test: [  26/  26]	Loss 0.333 (0.342)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.333 (0.342)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.18it/s]
Test: [  0/  1]	Loss 1.773 (1.773)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 1.773 (1.773)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.87 (  0.87)
Test: [  1/  1]	Loss 1.773 (1.773)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 1.773 (1.773)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.87 (  0.87)
Overall Timing[  8/  1]	epoch_time 0.0357 (0.0412)	validation_time 0.0004 (0.0011)	train_time 0.0353 (0.0398)
record: (train_acc, test_acc) (0.852100027680397, 0.17800000309944153)
last accs (train_acc, test_acc) (0.8512000224590301, 0.14300000667572021)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.28it/s] 15%|#5        | 4/26 [00:00<00:01, 15.65it/s] 31%|###       | 8/26 [00:00<00:00, 22.73it/s] 46%|####6     | 12/26 [00:00<00:00, 27.17it/s] 62%|######1   | 16/26 [00:00<00:00, 30.07it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.05it/s] 92%|#########2| 24/26 [00:00<00:00, 32.65it/s]100%|##########| 26/26 [00:00<00:00, 26.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.545 (0.602)	train_nll   0.33 (  0.36)	train_penalty   0.02 (  0.03)	weight_norm   0.21 (  0.25)	train_acc   0.85 (  0.85)	train_minacc   0.18 (  0.16)	train_majacc   0.97 (  0.98)	train_corr   0.00 (  0.00)	l1 10.5887 (9.8824)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.83it/s] 27%|##6       | 7/26 [00:00<00:00, 34.76it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.76it/s] 46%|####6     | 12/26 [00:00<00:00, 41.09it/s] 65%|######5   | 17/26 [00:00<00:00, 41.49it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.49it/s] 88%|########8 | 23/26 [00:00<00:00, 47.36it/s]100%|##########| 26/26 [00:00<00:00, 38.57it/s]
Test: [   0/  26]	Loss 0.342 (0.342)	test_acc   0.87 (  0.87)	test_minacc   0.15 (  0.15)	test_majacc   0.98 (  0.98)	Loss_d 0.342 (0.342)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.380 (0.347)	test_acc   0.83 (  0.85)	test_minacc   0.15 (  0.18)	test_majacc   0.98 (  0.97)	Loss_d 0.380 (0.347)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.15 (  0.18)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  20/  26]	Loss 0.300 (0.347)	test_acc   0.88 (  0.85)	test_minacc   0.15 (  0.17)	test_majacc   0.98 (  0.97)	Loss_d 0.300 (0.347)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.15 (  0.17)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.93 (  0.92)
Test: [  26/  26]	Loss 0.322 (0.345)	test_acc   0.86 (  0.85)	test_minacc   0.29 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 0.322 (0.345)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.29 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.37it/s]
Test: [  0/  1]	Loss 1.642 (1.642)	test_acc   0.22 (  0.22)	test_minacc   0.13 (  0.13)	test_majacc   0.97 (  0.97)	Loss_d 1.642 (1.642)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.77 (  0.77)
Test: [  1/  1]	Loss 1.642 (1.642)	test_acc   0.22 (  0.22)	test_minacc   0.13 (  0.13)	test_majacc   0.97 (  0.97)	Loss_d 1.642 (1.642)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.77 (  0.77)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/62/checkpoints/model_best.pth
Overall Timing[  9/  1]	epoch_time 0.0376 (0.0408)	validation_time 0.0003 (0.0010)	train_time 0.0372 (0.0395)
record: (train_acc, test_acc) (0.8526000230908394, 0.2160000056028366)
last accs (train_acc, test_acc) (0.8526000230908394, 0.2160000056028366)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.47it/s] 19%|#9        | 5/26 [00:00<00:00, 21.03it/s] 35%|###4      | 9/26 [00:00<00:00, 26.87it/s] 50%|#####     | 13/26 [00:00<00:00, 29.58it/s] 65%|######5   | 17/26 [00:00<00:00, 30.14it/s] 81%|########  | 21/26 [00:00<00:00, 30.89it/s] 96%|#########6| 25/26 [00:00<00:00, 32.40it/s]100%|##########| 26/26 [00:00<00:00, 27.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.519 (0.537)	train_nll   0.35 (  0.35)	train_penalty   0.03 (  0.03)	weight_norm   0.17 (  0.18)	train_acc   0.85 (  0.85)	train_minacc   0.16 (  0.17)	train_majacc   0.98 (  0.98)	train_corr   0.00 (  0.00)	l1 12.4817 (11.7147)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.20it/s] 23%|##3       | 6/26 [00:00<00:00, 29.75it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.75it/s] 46%|####6     | 12/26 [00:00<00:00, 40.41it/s] 65%|######5   | 17/26 [00:00<00:00, 41.53it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.53it/s] 88%|########8 | 23/26 [00:00<00:00, 46.88it/s]100%|##########| 26/26 [00:00<00:00, 38.69it/s]
Test: [   0/  26]	Loss 0.321 (0.321)	test_acc   0.86 (  0.86)	test_minacc   0.20 (  0.20)	test_majacc   0.96 (  0.96)	Loss_d 0.321 (0.321)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.358 (0.329)	test_acc   0.84 (  0.85)	test_minacc   0.34 (  0.29)	test_majacc   0.95 (  0.95)	Loss_d 0.358 (0.329)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.34 (  0.29)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.85 (  0.87)
Test: [  20/  26]	Loss 0.286 (0.331)	test_acc   0.88 (  0.86)	test_minacc   0.26 (  0.28)	test_majacc   0.97 (  0.96)	Loss_d 0.286 (0.331)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.26 (  0.28)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.90 (  0.88)
Test: [  26/  26]	Loss 0.317 (0.327)	test_acc   0.88 (  0.86)	test_minacc   0.37 (  0.28)	test_majacc   0.97 (  0.96)	Loss_d 0.317 (0.327)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.37 (  0.28)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.86 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.84it/s]
Test: [  0/  1]	Loss 1.503 (1.503)	test_acc   0.35 (  0.35)	test_minacc   0.28 (  0.28)	test_majacc   0.96 (  0.96)	Loss_d 1.503 (1.503)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.58 (  0.58)
Test: [  1/  1]	Loss 1.503 (1.503)	test_acc   0.35 (  0.35)	test_minacc   0.28 (  0.28)	test_majacc   0.96 (  0.96)	Loss_d 1.503 (1.503)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.58 (  0.58)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/62/checkpoints/model_best.pth
Overall Timing[ 10/  1]	epoch_time 0.0353 (0.0403)	validation_time 0.0004 (0.0009)	train_time 0.0349 (0.0391)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.38it/s] 19%|#9        | 5/26 [00:00<00:01, 20.07it/s] 35%|###4      | 9/26 [00:00<00:00, 25.82it/s] 50%|#####     | 13/26 [00:00<00:00, 29.33it/s] 65%|######5   | 17/26 [00:00<00:00, 31.67it/s] 81%|########  | 21/26 [00:00<00:00, 33.19it/s] 96%|#########6| 25/26 [00:00<00:00, 34.06it/s]100%|##########| 26/26 [00:00<00:00, 28.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.453 (0.489)	train_nll   0.32 (  0.34)	train_penalty   0.02 (  0.02)	weight_norm   0.13 (  0.15)	train_acc   0.86 (  0.86)	train_minacc   0.29 (  0.22)	train_majacc   0.96 (  0.97)	train_corr   0.00 (  0.00)	l1 14.2266 (13.5577)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.45it/s] 19%|#9        | 5/26 [00:00<00:00, 23.85it/s] 35%|###4      | 9/26 [00:00<00:00, 30.30it/s]                                               35%|###4      | 9/26 [00:00<00:00, 30.30it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.17it/s] 73%|#######3  | 19/26 [00:00<00:00, 39.02it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 39.02it/s] 92%|#########2| 24/26 [00:00<00:00, 41.89it/s]100%|##########| 26/26 [00:00<00:00, 32.87it/s]
Test: [   0/  26]	Loss 0.310 (0.310)	test_acc   0.88 (  0.88)	test_minacc   0.22 (  0.22)	test_majacc   0.99 (  0.99)	Loss_d 0.310 (0.310)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.349 (0.331)	test_acc   0.84 (  0.86)	test_minacc   0.27 (  0.24)	test_majacc   0.97 (  0.97)	Loss_d 0.349 (0.331)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.27 (  0.24)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.90)
Test: [  20/  26]	Loss 0.302 (0.330)	test_acc   0.89 (  0.86)	test_minacc   0.23 (  0.23)	test_majacc   0.98 (  0.97)	Loss_d 0.302 (0.330)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.92 (  0.90)
Test: [  26/  26]	Loss 0.302 (0.326)	test_acc   0.88 (  0.86)	test_minacc   0.37 (  0.24)	test_majacc   0.98 (  0.97)	Loss_d 0.302 (0.326)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.37 (  0.24)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.89 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.99it/s]
Test: [  0/  1]	Loss 1.669 (1.669)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 1.669 (1.669)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.76 (  0.76)
Test: [  1/  1]	Loss 1.669 (1.669)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 1.669 (1.669)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.76 (  0.76)
Overall Timing[ 11/  1]	epoch_time 0.0385 (0.0401)	validation_time 0.0003 (0.0009)	train_time 0.0382 (0.0390)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.8626000247001648, 0.21000000834465027)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.17it/s] 19%|#9        | 5/26 [00:00<00:01, 20.11it/s] 35%|###4      | 9/26 [00:00<00:00, 25.68it/s] 50%|#####     | 13/26 [00:00<00:00, 28.45it/s] 65%|######5   | 17/26 [00:00<00:00, 29.44it/s] 81%|########  | 21/26 [00:00<00:00, 31.05it/s] 96%|#########6| 25/26 [00:00<00:00, 31.93it/s]100%|##########| 26/26 [00:00<00:00, 26.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.428 (0.470)	train_nll   0.31 (  0.35)	train_penalty   0.01 (  0.03)	weight_norm   0.12 (  0.12)	train_acc   0.86 (  0.85)	train_minacc   0.39 (  0.21)	train_majacc   0.94 (  0.97)	train_corr   0.00 (  0.00)	l1 15.3847 (14.9322)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.12it/s] 31%|###       | 8/26 [00:00<00:00, 40.00it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.00it/s] 50%|#####     | 13/26 [00:00<00:00, 40.27it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.60it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.60it/s] 96%|#########6| 25/26 [00:00<00:00, 46.29it/s]100%|##########| 26/26 [00:00<00:00, 40.53it/s]
Test: [   0/  26]	Loss 0.323 (0.323)	test_acc   0.87 (  0.87)	test_minacc   0.19 (  0.19)	test_majacc   0.98 (  0.98)	Loss_d 0.323 (0.323)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.358 (0.329)	test_acc   0.83 (  0.86)	test_minacc   0.25 (  0.23)	test_majacc   0.96 (  0.97)	Loss_d 0.358 (0.329)	test_acc_d   0.83 (  0.86)	test_minacc_d   0.25 (  0.23)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.88 (  0.91)
Test: [  20/  26]	Loss 0.290 (0.329)	test_acc   0.89 (  0.86)	test_minacc   0.26 (  0.23)	test_majacc   0.98 (  0.97)	Loss_d 0.290 (0.329)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.26 (  0.23)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.93 (  0.91)
Test: [  26/  26]	Loss 0.288 (0.326)	test_acc   0.89 (  0.86)	test_minacc   0.42 (  0.24)	test_majacc   0.98 (  0.97)	Loss_d 0.288 (0.326)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.42 (  0.24)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.89 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.40it/s]
Test: [  0/  1]	Loss 1.558 (1.558)	test_acc   0.27 (  0.27)	test_minacc   0.19 (  0.19)	test_majacc   0.97 (  0.97)	Loss_d 1.558 (1.558)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.71 (  0.71)
Test: [  1/  1]	Loss 1.558 (1.558)	test_acc   0.27 (  0.27)	test_minacc   0.19 (  0.19)	test_majacc   0.97 (  0.97)	Loss_d 1.558 (1.558)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.71 (  0.71)
Overall Timing[ 12/  1]	epoch_time 0.0387 (0.0400)	validation_time 0.0004 (0.0009)	train_time 0.0383 (0.0390)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.8602000260949135, 0.27000001072883606)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.69it/s] 19%|#9        | 5/26 [00:00<00:01, 20.72it/s] 35%|###4      | 9/26 [00:00<00:00, 27.18it/s] 50%|#####     | 13/26 [00:00<00:00, 30.42it/s] 65%|######5   | 17/26 [00:00<00:00, 32.38it/s] 81%|########  | 21/26 [00:00<00:00, 34.09it/s] 96%|#########6| 25/26 [00:00<00:00, 34.30it/s]100%|##########| 26/26 [00:00<00:00, 28.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.410 (0.444)	train_nll   0.31 (  0.34)	train_penalty   0.01 (  0.03)	weight_norm   0.10 (  0.11)	train_acc   0.86 (  0.85)	train_minacc   0.37 (  0.24)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 16.6039 (16.1799)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.33it/s] 27%|##6       | 7/26 [00:00<00:00, 34.83it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.83it/s] 50%|#####     | 13/26 [00:00<00:00, 40.28it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.49it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.49it/s] 96%|#########6| 25/26 [00:00<00:00, 43.98it/s]100%|##########| 26/26 [00:00<00:00, 38.33it/s]
Test: [   0/  26]	Loss 0.329 (0.329)	test_acc   0.87 (  0.87)	test_minacc   0.20 (  0.20)	test_majacc   0.97 (  0.97)	Loss_d 0.329 (0.329)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.372 (0.336)	test_acc   0.83 (  0.85)	test_minacc   0.20 (  0.23)	test_majacc   0.97 (  0.96)	Loss_d 0.372 (0.336)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.20 (  0.23)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.87 (  0.89)
Test: [  20/  26]	Loss 0.307 (0.339)	test_acc   0.88 (  0.85)	test_minacc   0.19 (  0.22)	test_majacc   0.98 (  0.97)	Loss_d 0.307 (0.339)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.19 (  0.22)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.91 (  0.90)
Test: [  26/  26]	Loss 0.302 (0.336)	test_acc   0.88 (  0.85)	test_minacc   0.32 (  0.22)	test_majacc   0.98 (  0.97)	Loss_d 0.302 (0.336)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.32 (  0.22)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.89 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.94it/s]
Test: [  0/  1]	Loss 1.575 (1.575)	test_acc   0.24 (  0.24)	test_minacc   0.15 (  0.15)	test_majacc   0.98 (  0.98)	Loss_d 1.575 (1.575)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.75 (  0.75)
Test: [  1/  1]	Loss 1.575 (1.575)	test_acc   0.24 (  0.24)	test_minacc   0.15 (  0.15)	test_majacc   0.98 (  0.98)	Loss_d 1.575 (1.575)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.75 (  0.75)
Overall Timing[ 13/  1]	epoch_time 0.0365 (0.0398)	validation_time 0.0004 (0.0008)	train_time 0.0361 (0.0388)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.8539000189900399, 0.23500001430511475)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.84it/s] 19%|#9        | 5/26 [00:00<00:00, 22.95it/s] 35%|###4      | 9/26 [00:00<00:00, 28.85it/s] 50%|#####     | 13/26 [00:00<00:00, 32.15it/s] 65%|######5   | 17/26 [00:00<00:00, 33.59it/s] 81%|########  | 21/26 [00:00<00:00, 34.79it/s] 96%|#########6| 25/26 [00:00<00:00, 35.38it/s]100%|##########| 26/26 [00:00<00:00, 30.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.403 (0.427)	train_nll   0.31 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.09 (  0.09)	train_acc   0.86 (  0.86)	train_minacc   0.24 (  0.30)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 17.6164 (17.2627)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.23it/s] 27%|##6       | 7/26 [00:00<00:00, 34.90it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.90it/s] 50%|#####     | 13/26 [00:00<00:00, 40.90it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.33it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.33it/s] 96%|#########6| 25/26 [00:00<00:00, 47.43it/s]100%|##########| 26/26 [00:00<00:00, 40.08it/s]
Test: [   0/  26]	Loss 0.323 (0.323)	test_acc   0.87 (  0.87)	test_minacc   0.19 (  0.19)	test_majacc   0.99 (  0.99)	Loss_d 0.323 (0.323)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.362 (0.327)	test_acc   0.82 (  0.86)	test_minacc   0.15 (  0.20)	test_majacc   0.97 (  0.97)	Loss_d 0.362 (0.327)	test_acc_d   0.82 (  0.86)	test_minacc_d   0.15 (  0.20)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.92)
Test: [  20/  26]	Loss 0.304 (0.327)	test_acc   0.89 (  0.86)	test_minacc   0.19 (  0.20)	test_majacc   0.99 (  0.98)	Loss_d 0.304 (0.327)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.19 (  0.20)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.94 (  0.92)
Test: [  26/  26]	Loss 0.296 (0.325)	test_acc   0.88 (  0.86)	test_minacc   0.32 (  0.20)	test_majacc   0.98 (  0.98)	Loss_d 0.296 (0.325)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.32 (  0.20)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.40it/s]
Test: [  0/  1]	Loss 1.495 (1.495)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.98 (  0.98)	Loss_d 1.495 (1.495)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.77 (  0.77)
Test: [  1/  1]	Loss 1.495 (1.495)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.98 (  0.98)	Loss_d 1.495 (1.495)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.77 (  0.77)
Overall Timing[ 14/  1]	epoch_time 0.0361 (0.0395)	validation_time 0.0003 (0.0008)	train_time 0.0358 (0.0386)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.860200021147728, 0.242000013589859)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.82it/s] 19%|#9        | 5/26 [00:00<00:00, 22.52it/s] 35%|###4      | 9/26 [00:00<00:00, 27.14it/s] 50%|#####     | 13/26 [00:00<00:00, 30.22it/s] 65%|######5   | 17/26 [00:00<00:00, 32.03it/s] 81%|########  | 21/26 [00:00<00:00, 32.65it/s] 96%|#########6| 25/26 [00:00<00:00, 33.24it/s]100%|##########| 26/26 [00:00<00:00, 28.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.002 (0.158)	train_nll   0.72 (  0.47)	train_penalty   0.00 (  0.01)	weight_norm   0.12 (  0.09)	train_acc   0.39 (  0.73)	train_minacc   0.84 (  0.52)	train_majacc   0.31 (  0.77)	train_corr   0.00 (  0.00)	l1 18.3058 (18.2613)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.45it/s] 27%|##6       | 7/26 [00:00<00:00, 34.68it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.68it/s] 50%|#####     | 13/26 [00:00<00:00, 38.87it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.57it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.57it/s] 96%|#########6| 25/26 [00:00<00:00, 45.45it/s]100%|##########| 26/26 [00:00<00:00, 38.83it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.51 (  0.51)	test_minacc   0.74 (  0.74)	test_majacc   0.47 (  0.47)	Loss_d 0.688 (0.688)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.12 ( -0.12)
Test: [  10/  26]	Loss 0.684 (0.691)	test_acc   0.53 (  0.51)	test_minacc   0.82 (  0.72)	test_majacc   0.47 (  0.47)	Loss_d 0.684 (0.691)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.82 (  0.72)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.12 ( -0.12)
Test: [  20/  26]	Loss 0.713 (0.694)	test_acc   0.45 (  0.50)	test_minacc   0.64 (  0.71)	test_majacc   0.43 (  0.46)	Loss_d 0.713 (0.694)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.64 (  0.71)	test_majacc_d   0.43 (  0.46)	test_corr_d  -0.13 ( -0.12)
Test: [  26/  26]	Loss 0.689 (0.694)	test_acc   0.47 (  0.49)	test_minacc   0.63 (  0.71)	test_majacc   0.44 (  0.46)	Loss_d 0.689 (0.694)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.63 (  0.71)	test_majacc_d   0.44 (  0.46)	test_corr_d  -0.07 ( -0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.03it/s]
Test: [  0/  1]	Loss 0.680 (0.680)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.46 (  0.46)	Loss_d 0.680 (0.680)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.680 (0.680)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.46 (  0.46)	Loss_d 0.680 (0.680)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 15/  1]	epoch_time 0.0373 (0.0394)	validation_time 0.0004 (0.0008)	train_time 0.0369 (0.0385)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.49460000690817835, 0.5860000252723694)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.84it/s] 23%|##3       | 6/26 [00:00<00:00, 25.83it/s] 38%|###8      | 10/26 [00:00<00:00, 29.66it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.66it/s] 69%|######9   | 18/26 [00:00<00:00, 32.61it/s] 85%|########4 | 22/26 [00:00<00:00, 33.52it/s]100%|##########| 26/26 [00:00<00:00, 33.31it/s]100%|##########| 26/26 [00:00<00:00, 29.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.13)	train_acc   0.49 (  0.51)	train_minacc   0.39 (  0.54)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 18.1652 (18.2102)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.20it/s] 27%|##6       | 7/26 [00:00<00:00, 32.23it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.23it/s] 46%|####6     | 12/26 [00:00<00:00, 39.31it/s] 65%|######5   | 17/26 [00:00<00:00, 41.44it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.44it/s] 88%|########8 | 23/26 [00:00<00:00, 46.96it/s]100%|##########| 26/26 [00:00<00:00, 38.23it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.49 (  0.49)	test_minacc   0.37 (  0.37)	test_majacc   0.51 (  0.51)	Loss_d 0.689 (0.689)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.15 (  0.15)
Test: [  10/  26]	Loss 0.688 (0.688)	test_acc   0.52 (  0.51)	test_minacc   0.56 (  0.46)	test_majacc   0.51 (  0.52)	Loss_d 0.688 (0.688)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.56 (  0.46)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.26 (  0.21)
Test: [  20/  26]	Loss 0.693 (0.688)	test_acc   0.47 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.47 (  0.52)	Loss_d 0.693 (0.688)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.47 (  0.52)	test_corr_d   0.13 (  0.21)
Test: [  26/  26]	Loss 0.690 (0.688)	test_acc   0.48 (  0.51)	test_minacc   0.37 (  0.46)	test_majacc   0.50 (  0.52)	Loss_d 0.690 (0.688)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.37 (  0.46)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.20 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.75it/s]
Test: [  0/  1]	Loss 0.714 (0.714)	test_acc   0.40 (  0.40)	test_minacc   0.39 (  0.39)	test_majacc   0.55 (  0.55)	Loss_d 0.714 (0.714)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.53 (  0.53)
Test: [  1/  1]	Loss 0.714 (0.714)	test_acc   0.40 (  0.40)	test_minacc   0.39 (  0.39)	test_majacc   0.55 (  0.55)	Loss_d 0.714 (0.714)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.53 (  0.53)
Overall Timing[ 16/  1]	epoch_time 0.0378 (0.0393)	validation_time 0.0003 (0.0007)	train_time 0.0374 (0.0384)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.51210001039505, 0.40300002694129944)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.40it/s] 19%|#9        | 5/26 [00:00<00:01, 20.46it/s] 35%|###4      | 9/26 [00:00<00:00, 26.32it/s] 50%|#####     | 13/26 [00:00<00:00, 29.69it/s] 65%|######5   | 17/26 [00:00<00:00, 31.92it/s] 81%|########  | 21/26 [00:00<00:00, 33.34it/s] 96%|#########6| 25/26 [00:00<00:00, 33.94it/s]100%|##########| 26/26 [00:00<00:00, 28.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.43 (  0.49)	train_minacc   0.45 (  0.47)	train_majacc   0.42 (  0.49)	train_corr   0.00 (  0.00)	l1 18.1456 (18.1526)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.24it/s] 19%|#9        | 5/26 [00:00<00:00, 23.61it/s] 35%|###4      | 9/26 [00:00<00:00, 29.88it/s]                                               35%|###4      | 9/26 [00:00<00:00, 29.88it/s] 58%|#####7    | 15/26 [00:00<00:00, 39.88it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 39.88it/s] 81%|########  | 21/26 [00:00<00:00, 39.90it/s]100%|##########| 26/26 [00:00<00:00, 42.08it/s]100%|##########| 26/26 [00:00<00:00, 34.18it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.43 (  0.43)	test_minacc   0.46 (  0.46)	test_majacc   0.43 (  0.43)	Loss_d 0.695 (0.695)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.10 ( -0.10)
Test: [  10/  26]	Loss 0.693 (0.694)	test_acc   0.46 (  0.47)	test_minacc   0.56 (  0.52)	test_majacc   0.44 (  0.46)	Loss_d 0.693 (0.694)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.56 (  0.52)	test_majacc_d   0.44 (  0.46)	test_corr_d  -0.02 ( -0.05)
Test: [  20/  26]	Loss 0.698 (0.694)	test_acc   0.42 (  0.46)	test_minacc   0.45 (  0.49)	test_majacc   0.41 (  0.46)	Loss_d 0.698 (0.694)	test_acc_d   0.42 (  0.46)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.41 (  0.46)	test_corr_d  -0.10 ( -0.04)
Test: [  26/  26]	Loss 0.695 (0.694)	test_acc   0.42 (  0.46)	test_minacc   0.45 (  0.49)	test_majacc   0.42 (  0.46)	Loss_d 0.695 (0.694)	test_acc_d   0.42 (  0.46)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.42 (  0.46)	test_corr_d  -0.05 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 54.36it/s]
Test: [  0/  1]	Loss 0.706 (0.706)	test_acc   0.38 (  0.38)	test_minacc   0.36 (  0.36)	test_majacc   0.58 (  0.58)	Loss_d 0.706 (0.706)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.38 (  0.38)
Test: [  1/  1]	Loss 0.706 (0.706)	test_acc   0.38 (  0.38)	test_minacc   0.36 (  0.36)	test_majacc   0.58 (  0.58)	Loss_d 0.706 (0.706)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.38 (  0.38)
Overall Timing[ 17/  1]	epoch_time 0.0386 (0.0393)	validation_time 0.0005 (0.0007)	train_time 0.0381 (0.0384)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.46280000388622283, 0.3790000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.97it/s] 19%|#9        | 5/26 [00:00<00:01, 20.66it/s] 35%|###4      | 9/26 [00:00<00:00, 26.50it/s] 50%|#####     | 13/26 [00:00<00:00, 29.69it/s] 65%|######5   | 17/26 [00:00<00:00, 31.80it/s] 81%|########  | 21/26 [00:00<00:00, 33.19it/s] 96%|#########6| 25/26 [00:00<00:00, 34.42it/s]100%|##########| 26/26 [00:00<00:00, 28.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.46 (  0.49)	train_minacc   0.47 (  0.44)	train_majacc   0.46 (  0.50)	train_corr   0.00 (  0.00)	l1 18.1415 (18.1428)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.26it/s] 23%|##3       | 6/26 [00:00<00:00, 30.18it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.18it/s] 42%|####2     | 11/26 [00:00<00:00, 37.05it/s] 62%|######1   | 16/26 [00:00<00:00, 40.68it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.68it/s] 85%|########4 | 22/26 [00:00<00:00, 43.53it/s]100%|##########| 26/26 [00:00<00:00, 37.65it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.42 (  0.42)	test_minacc   0.43 (  0.43)	test_majacc   0.42 (  0.42)	Loss_d 0.695 (0.695)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.09 ( -0.09)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.47)	test_minacc   0.52 (  0.49)	test_majacc   0.47 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.47 (  0.46)	test_corr_d  -0.01 ( -0.04)
Test: [  20/  26]	Loss 0.697 (0.694)	test_acc   0.43 (  0.47)	test_minacc   0.38 (  0.47)	test_majacc   0.44 (  0.46)	Loss_d 0.697 (0.694)	test_acc_d   0.43 (  0.47)	test_minacc_d   0.38 (  0.47)	test_majacc_d   0.44 (  0.46)	test_corr_d  -0.09 ( -0.03)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.53 (  0.47)	test_majacc   0.46 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.53 (  0.47)	test_majacc_d   0.46 (  0.47)	test_corr_d  -0.03 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.97it/s]
Test: [  0/  1]	Loss 0.705 (0.705)	test_acc   0.35 (  0.35)	test_minacc   0.33 (  0.33)	test_majacc   0.58 (  0.58)	Loss_d 0.705 (0.705)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.39 (  0.39)
Test: [  1/  1]	Loss 0.705 (0.705)	test_acc   0.35 (  0.35)	test_minacc   0.33 (  0.33)	test_majacc   0.58 (  0.58)	Loss_d 0.705 (0.705)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.39 (  0.39)
Overall Timing[ 18/  1]	epoch_time 0.0390 (0.0392)	validation_time 0.0006 (0.0007)	train_time 0.0383 (0.0384)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.468400004774332, 0.3530000150203705)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.63it/s] 19%|#9        | 5/26 [00:00<00:01, 18.47it/s] 35%|###4      | 9/26 [00:00<00:00, 24.07it/s] 50%|#####     | 13/26 [00:00<00:00, 27.42it/s] 65%|######5   | 17/26 [00:00<00:00, 29.41it/s] 81%|########  | 21/26 [00:00<00:00, 30.79it/s] 96%|#########6| 25/26 [00:00<00:00, 31.86it/s]100%|##########| 26/26 [00:00<00:00, 26.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.48 (  0.49)	train_minacc   0.45 (  0.44)	train_majacc   0.49 (  0.49)	train_corr   0.00 (  0.00)	l1 18.1405 (18.1409)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.26it/s] 35%|###4      | 9/26 [00:00<00:00, 37.97it/s]                                               35%|###4      | 9/26 [00:00<00:00, 37.97it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.45it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.45it/s] 81%|########  | 21/26 [00:00<00:00, 46.04it/s]100%|##########| 26/26 [00:00<00:00, 42.13it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.43 (  0.43)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.07 ( -0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.54 (  0.49)	test_majacc   0.46 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.46 (  0.47)	test_corr_d   0.00 ( -0.03)
Test: [  20/  26]	Loss 0.697 (0.694)	test_acc   0.42 (  0.47)	test_minacc   0.36 (  0.46)	test_majacc   0.43 (  0.47)	Loss_d 0.697 (0.694)	test_acc_d   0.42 (  0.47)	test_minacc_d   0.36 (  0.46)	test_majacc_d   0.43 (  0.47)	test_corr_d  -0.08 ( -0.02)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.47 (  0.46)	test_majacc   0.46 (  0.47)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.47 (  0.46)	test_majacc_d   0.46 (  0.47)	test_corr_d  -0.02 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.83it/s]
Test: [  0/  1]	Loss 0.705 (0.705)	test_acc   0.35 (  0.35)	test_minacc   0.32 (  0.32)	test_majacc   0.59 (  0.59)	Loss_d 0.705 (0.705)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.41 (  0.41)
Test: [  1/  1]	Loss 0.705 (0.705)	test_acc   0.35 (  0.35)	test_minacc   0.32 (  0.32)	test_majacc   0.59 (  0.59)	Loss_d 0.705 (0.705)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.41 (  0.41)
Overall Timing[ 19/  1]	epoch_time 0.0371 (0.0391)	validation_time 0.0003 (0.0007)	train_time 0.0367 (0.0383)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.47220000413060187, 0.35100001096725464)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.08it/s] 19%|#9        | 5/26 [00:00<00:01, 19.93it/s] 35%|###4      | 9/26 [00:00<00:00, 25.08it/s] 50%|#####     | 13/26 [00:00<00:00, 28.56it/s] 65%|######5   | 17/26 [00:00<00:00, 30.78it/s] 81%|########  | 21/26 [00:00<00:00, 32.14it/s] 96%|#########6| 25/26 [00:00<00:00, 32.93it/s]100%|##########| 26/26 [00:00<00:00, 27.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.46 (  0.48)	train_minacc   0.45 (  0.44)	train_majacc   0.47 (  0.49)	train_corr   0.00 (  0.00)	l1 18.1398 (18.1401)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.00it/s] 31%|###       | 8/26 [00:00<00:00, 40.31it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.31it/s] 54%|#####3    | 14/26 [00:00<00:00, 42.78it/s] 73%|#######3  | 19/26 [00:00<00:00, 42.21it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 42.21it/s] 92%|#########2| 24/26 [00:00<00:00, 43.48it/s]100%|##########| 26/26 [00:00<00:00, 39.28it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.46 (  0.46)	test_majacc   0.42 (  0.42)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.10 ( -0.10)
Test: [  10/  26]	Loss 0.693 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.55 (  0.51)	test_majacc   0.44 (  0.45)	Loss_d 0.693 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.44 (  0.45)	test_corr_d  -0.03 ( -0.06)
Test: [  20/  26]	Loss 0.697 (0.694)	test_acc   0.42 (  0.46)	test_minacc   0.45 (  0.49)	test_majacc   0.41 (  0.45)	Loss_d 0.697 (0.694)	test_acc_d   0.42 (  0.46)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.41 (  0.45)	test_corr_d  -0.11 ( -0.06)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.44 (  0.46)	test_minacc   0.47 (  0.48)	test_majacc   0.43 (  0.46)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.46)	test_minacc_d   0.47 (  0.48)	test_majacc_d   0.43 (  0.46)	test_corr_d  -0.04 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.76it/s]
Test: [  0/  1]	Loss 0.704 (0.704)	test_acc   0.36 (  0.36)	test_minacc   0.33 (  0.33)	test_majacc   0.59 (  0.59)	Loss_d 0.704 (0.704)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.40 (  0.40)
Test: [  1/  1]	Loss 0.704 (0.704)	test_acc   0.36 (  0.36)	test_minacc   0.33 (  0.33)	test_majacc   0.59 (  0.59)	Loss_d 0.704 (0.704)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.40 (  0.40)
Overall Timing[ 20/  1]	epoch_time 0.0374 (0.0391)	validation_time 0.0004 (0.0007)	train_time 0.0370 (0.0382)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.460000006467104, 0.36000001430511475)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.06it/s] 15%|#5        | 4/26 [00:00<00:01, 18.49it/s] 27%|##6       | 7/26 [00:00<00:00, 22.37it/s] 42%|####2     | 11/26 [00:00<00:00, 26.88it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.04it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.65it/s] 88%|########8 | 23/26 [00:00<00:00, 31.51it/s]100%|##########| 26/26 [00:00<00:00, 26.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.48 (  0.49)	train_minacc   0.45 (  0.45)	train_majacc   0.48 (  0.49)	train_corr   0.00 (  0.00)	l1 18.1389 (18.1393)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.88it/s] 35%|###4      | 9/26 [00:00<00:00, 39.99it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.99it/s] 54%|#####3    | 14/26 [00:00<00:00, 41.64it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.47it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.47it/s]100%|##########| 26/26 [00:00<00:00, 51.34it/s]100%|##########| 26/26 [00:00<00:00, 41.87it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.46 (  0.46)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.09 ( -0.09)
Test: [  10/  26]	Loss 0.693 (0.694)	test_acc   0.46 (  0.47)	test_minacc   0.54 (  0.50)	test_majacc   0.45 (  0.46)	Loss_d 0.693 (0.694)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.54 (  0.50)	test_majacc_d   0.45 (  0.46)	test_corr_d  -0.03 ( -0.05)
Test: [  20/  26]	Loss 0.697 (0.694)	test_acc   0.43 (  0.46)	test_minacc   0.43 (  0.48)	test_majacc   0.43 (  0.46)	Loss_d 0.697 (0.694)	test_acc_d   0.43 (  0.46)	test_minacc_d   0.43 (  0.48)	test_majacc_d   0.43 (  0.46)	test_corr_d  -0.11 ( -0.05)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.45 (  0.46)	test_minacc   0.47 (  0.47)	test_majacc   0.45 (  0.46)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.46)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.45 (  0.46)	test_corr_d  -0.03 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.69it/s]
Test: [  0/  1]	Loss 0.704 (0.704)	test_acc   0.36 (  0.36)	test_minacc   0.33 (  0.33)	test_majacc   0.59 (  0.59)	Loss_d 0.704 (0.704)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.40 (  0.40)
Test: [  1/  1]	Loss 0.704 (0.704)	test_acc   0.36 (  0.36)	test_minacc   0.33 (  0.33)	test_majacc   0.59 (  0.59)	Loss_d 0.704 (0.704)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.40 (  0.40)
Overall Timing[ 21/  1]	epoch_time 0.0382 (0.0390)	validation_time 0.0004 (0.0007)	train_time 0.0378 (0.0382)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.4648000060617924, 0.36000001430511475)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.57it/s] 27%|##6       | 7/26 [00:00<00:00, 29.77it/s] 42%|####2     | 11/26 [00:00<00:00, 32.07it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 33.88it/s] 88%|########8 | 23/26 [00:00<00:00, 34.34it/s]100%|##########| 26/26 [00:00<00:00, 30.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.48 (  0.49)	train_minacc   0.45 (  0.44)	train_majacc   0.48 (  0.49)	train_corr   0.00 (  0.00)	l1 18.1381 (18.1385)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.78it/s] 27%|##6       | 7/26 [00:00<00:00, 32.34it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.34it/s] 50%|#####     | 13/26 [00:00<00:00, 37.25it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.79it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.79it/s] 96%|#########6| 25/26 [00:00<00:00, 44.07it/s]100%|##########| 26/26 [00:00<00:00, 37.35it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.44 (  0.44)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.09 ( -0.09)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.52 (  0.50)	test_majacc   0.45 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.45 (  0.46)	test_corr_d  -0.02 ( -0.04)
Test: [  20/  26]	Loss 0.696 (0.694)	test_acc   0.43 (  0.47)	test_minacc   0.40 (  0.48)	test_majacc   0.43 (  0.47)	Loss_d 0.696 (0.694)	test_acc_d   0.43 (  0.47)	test_minacc_d   0.40 (  0.48)	test_majacc_d   0.43 (  0.47)	test_corr_d  -0.10 ( -0.04)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.46 (  0.47)	test_minacc   0.45 (  0.47)	test_majacc   0.46 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.45 (  0.47)	test_majacc_d   0.46 (  0.47)	test_corr_d  -0.02 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.26it/s]
Test: [  0/  1]	Loss 0.704 (0.704)	test_acc   0.35 (  0.35)	test_minacc   0.32 (  0.32)	test_majacc   0.61 (  0.61)	Loss_d 0.704 (0.704)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.42 (  0.42)
Test: [  1/  1]	Loss 0.704 (0.704)	test_acc   0.35 (  0.35)	test_minacc   0.32 (  0.32)	test_majacc   0.61 (  0.61)	Loss_d 0.704 (0.704)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.42 (  0.42)
Overall Timing[ 22/  1]	epoch_time 0.0374 (0.0389)	validation_time 0.0003 (0.0007)	train_time 0.0371 (0.0382)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.4693000071644783, 0.3500000238418579)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.96it/s] 15%|#5        | 4/26 [00:00<00:01, 15.85it/s] 31%|###       | 8/26 [00:00<00:00, 21.13it/s] 46%|####6     | 12/26 [00:00<00:00, 25.83it/s] 62%|######1   | 16/26 [00:00<00:00, 28.44it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.65it/s] 92%|#########2| 24/26 [00:00<00:00, 32.15it/s]100%|##########| 26/26 [00:00<00:00, 26.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 338 tensor(-0.0242, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
rho, theta 375 tensor(-0.0043, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
Epoch: [23][  26/  26]	Loss 0.000 (0.015)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.01)	weight_norm   0.22 (  0.17)	train_acc   0.47 (  0.56)	train_minacc   0.37 (  0.42)	train_majacc   0.49 (  0.58)	train_corr   0.00 (  0.00)	l1 14.5336 (15.3981)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 33.85it/s] 35%|###4      | 9/26 [00:00<00:00, 42.54it/s]                                               35%|###4      | 9/26 [00:00<00:00, 42.54it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.42it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.42it/s] 81%|########  | 21/26 [00:00<00:00, 48.58it/s]100%|##########| 26/26 [00:00<00:00, 43.21it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.50 (  0.50)	test_minacc   0.48 (  0.48)	test_majacc   0.51 (  0.51)	Loss_d 0.688 (0.688)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.68 (  0.68)
Test: [  10/  26]	Loss 0.692 (0.690)	test_acc   0.49 (  0.50)	test_minacc   0.58 (  0.48)	test_majacc   0.47 (  0.50)	Loss_d 0.692 (0.690)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.58 (  0.48)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.63 (  0.65)
Test: [  20/  26]	Loss 0.691 (0.689)	test_acc   0.49 (  0.50)	test_minacc   0.55 (  0.50)	test_majacc   0.48 (  0.50)	Loss_d 0.691 (0.689)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.66 (  0.64)
Test: [  26/  26]	Loss 0.696 (0.689)	test_acc   0.47 (  0.50)	test_minacc   0.37 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.696 (0.689)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.37 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.68 (  0.65)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.36it/s]
Test: [  0/  1]	Loss 0.716 (0.716)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.716 (0.716)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.60 (  0.60)
Test: [  1/  1]	Loss 0.716 (0.716)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.716 (0.716)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.60 (  0.60)
Overall Timing[ 23/  1]	epoch_time 0.0376 (0.0389)	validation_time 0.0004 (0.0006)	train_time 0.0372 (0.0381)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.5000000135600566, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.15it/s] 23%|##3       | 6/26 [00:00<00:00, 26.86it/s] 38%|###8      | 10/26 [00:00<00:00, 30.81it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.80it/s] 69%|######9   | 18/26 [00:00<00:00, 34.01it/s] 85%|########4 | 22/26 [00:00<00:00, 34.65it/s]100%|##########| 26/26 [00:00<00:00, 34.74it/s]100%|##########| 26/26 [00:00<00:00, 30.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.24)	train_acc   0.48 (  0.52)	train_minacc   0.34 (  0.45)	train_majacc   0.50 (  0.53)	train_corr   0.00 (  0.00)	l1 13.8981 (14.0953)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.97it/s] 35%|###4      | 9/26 [00:00<00:00, 40.13it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.13it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.96it/s] 77%|#######6  | 20/26 [00:00<00:00, 49.39it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 49.39it/s] 96%|#########6| 25/26 [00:00<00:00, 49.51it/s]100%|##########| 26/26 [00:00<00:00, 42.86it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.52 (  0.52)	test_minacc   0.46 (  0.46)	test_majacc   0.53 (  0.53)	Loss_d 0.688 (0.688)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.44 (  0.44)
Test: [  10/  26]	Loss 0.692 (0.690)	test_acc   0.51 (  0.52)	test_minacc   0.56 (  0.46)	test_majacc   0.50 (  0.53)	Loss_d 0.692 (0.690)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.56 (  0.46)	test_majacc_d   0.50 (  0.53)	test_corr_d   0.34 (  0.39)
Test: [  20/  26]	Loss 0.691 (0.690)	test_acc   0.51 (  0.52)	test_minacc   0.55 (  0.47)	test_majacc   0.51 (  0.53)	Loss_d 0.691 (0.690)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.55 (  0.47)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.37 (  0.39)
Test: [  26/  26]	Loss 0.695 (0.690)	test_acc   0.49 (  0.52)	test_minacc   0.34 (  0.46)	test_majacc   0.51 (  0.53)	Loss_d 0.695 (0.690)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.34 (  0.46)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.43 (  0.39)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.65it/s]
Test: [  0/  1]	Loss 0.709 (0.709)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.709 (0.709)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.35 (  0.35)
Test: [  1/  1]	Loss 0.709 (0.709)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.709 (0.709)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.35 (  0.35)
Overall Timing[ 24/  1]	epoch_time 0.0353 (0.0387)	validation_time 0.0003 (0.0006)	train_time 0.0350 (0.0380)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.517800012588501, 0.47600001096725464)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.83it/s] 19%|#9        | 5/26 [00:00<00:00, 21.49it/s] 35%|###4      | 9/26 [00:00<00:00, 27.74it/s] 50%|#####     | 13/26 [00:00<00:00, 30.84it/s] 65%|######5   | 17/26 [00:00<00:00, 32.89it/s] 81%|########  | 21/26 [00:00<00:00, 34.12it/s] 96%|#########6| 25/26 [00:00<00:00, 33.83it/s]100%|##########| 26/26 [00:00<00:00, 28.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.48 (  0.52)	train_minacc   0.34 (  0.46)	train_majacc   0.50 (  0.53)	train_corr   0.00 (  0.00)	l1 13.7484 (13.8089)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.05it/s] 27%|##6       | 7/26 [00:00<00:00, 32.43it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.43it/s] 50%|#####     | 13/26 [00:00<00:00, 39.53it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.45it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.45it/s] 96%|#########6| 25/26 [00:00<00:00, 47.94it/s]100%|##########| 26/26 [00:00<00:00, 39.01it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.52 (  0.52)	Loss_d 0.689 (0.689)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.41 (  0.41)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.51 (  0.52)	test_minacc   0.56 (  0.46)	test_majacc   0.50 (  0.52)	Loss_d 0.692 (0.691)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.56 (  0.46)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.28 (  0.35)
Test: [  20/  26]	Loss 0.692 (0.691)	test_acc   0.51 (  0.52)	test_minacc   0.55 (  0.47)	test_majacc   0.50 (  0.52)	Loss_d 0.692 (0.691)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.55 (  0.47)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.32 (  0.35)
Test: [  26/  26]	Loss 0.695 (0.691)	test_acc   0.48 (  0.51)	test_minacc   0.34 (  0.47)	test_majacc   0.50 (  0.52)	Loss_d 0.695 (0.691)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.34 (  0.47)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.41 (  0.35)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.68it/s]
Test: [  0/  1]	Loss 0.703 (0.703)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.703 (0.703)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.28 (  0.28)
Test: [  1/  1]	Loss 0.703 (0.703)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.703 (0.703)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.28 (  0.28)
Overall Timing[ 25/  1]	epoch_time 0.0372 (0.0387)	validation_time 0.0004 (0.0006)	train_time 0.0368 (0.0379)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.5142000147104263, 0.48000001907348633)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.18it/s] 19%|#9        | 5/26 [00:00<00:00, 21.45it/s] 35%|###4      | 9/26 [00:00<00:00, 26.64it/s] 50%|#####     | 13/26 [00:00<00:00, 29.28it/s] 65%|######5   | 17/26 [00:00<00:00, 31.61it/s] 81%|########  | 21/26 [00:00<00:00, 32.85it/s] 96%|#########6| 25/26 [00:00<00:00, 33.38it/s]100%|##########| 26/26 [00:00<00:00, 28.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.48 (  0.51)	train_minacc   0.34 (  0.47)	train_majacc   0.50 (  0.52)	train_corr   0.00 (  0.00)	l1 13.6635 (13.7011)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.81it/s] 27%|##6       | 7/26 [00:00<00:00, 32.61it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.61it/s] 50%|#####     | 13/26 [00:00<00:00, 40.55it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.17it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.17it/s] 96%|#########6| 25/26 [00:00<00:00, 47.12it/s]100%|##########| 26/26 [00:00<00:00, 38.70it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.36 (  0.36)
Test: [  10/  26]	Loss 0.693 (0.691)	test_acc   0.52 (  0.51)	test_minacc   0.56 (  0.47)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.691)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.56 (  0.47)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.21 (  0.29)
Test: [  20/  26]	Loss 0.693 (0.691)	test_acc   0.50 (  0.52)	test_minacc   0.55 (  0.49)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.691)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.25 (  0.29)
Test: [  26/  26]	Loss 0.695 (0.692)	test_acc   0.48 (  0.51)	test_minacc   0.34 (  0.48)	test_majacc   0.50 (  0.52)	Loss_d 0.695 (0.692)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.34 (  0.48)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.36 (  0.29)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.52it/s]
Test: [  0/  1]	Loss 0.699 (0.699)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.53 (  0.53)	Loss_d 0.699 (0.699)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 0.699 (0.699)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.53 (  0.53)	Loss_d 0.699 (0.699)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.18 (  0.18)
Overall Timing[ 26/  1]	epoch_time 0.0362 (0.0386)	validation_time 0.0004 (0.0006)	train_time 0.0358 (0.0379)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.5129000157415867, 0.4910000264644623)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.40it/s] 19%|#9        | 5/26 [00:00<00:00, 21.80it/s] 35%|###4      | 9/26 [00:00<00:00, 27.39it/s] 50%|#####     | 13/26 [00:00<00:00, 30.54it/s] 65%|######5   | 17/26 [00:00<00:00, 32.22it/s] 81%|########  | 21/26 [00:00<00:00, 33.51it/s] 96%|#########6| 25/26 [00:00<00:00, 33.53it/s]100%|##########| 26/26 [00:00<00:00, 28.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.48 (  0.52)	train_minacc   0.34 (  0.48)	train_majacc   0.51 (  0.52)	train_corr   0.00 (  0.00)	l1 13.6023 (13.6302)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.83it/s] 27%|##6       | 7/26 [00:00<00:00, 32.27it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.27it/s] 50%|#####     | 13/26 [00:00<00:00, 39.03it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.41it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.41it/s] 96%|#########6| 25/26 [00:00<00:00, 46.96it/s]100%|##########| 26/26 [00:00<00:00, 38.50it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.46 (  0.46)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.29 (  0.29)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.56 (  0.48)	test_majacc   0.51 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.56 (  0.48)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.13 (  0.21)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.52)	test_minacc   0.55 (  0.50)	test_majacc   0.49 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.49 (  0.52)	test_corr_d   0.16 (  0.21)
Test: [  26/  26]	Loss 0.695 (0.692)	test_acc   0.48 (  0.52)	test_minacc   0.34 (  0.49)	test_majacc   0.51 (  0.52)	Loss_d 0.695 (0.692)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.34 (  0.49)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.29 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.92it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.54 (  0.54)	Loss_d 0.697 (0.697)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.54 (  0.54)	Loss_d 0.697 (0.697)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.08 (  0.08)
Overall Timing[ 27/  1]	epoch_time 0.0370 (0.0385)	validation_time 0.0004 (0.0006)	train_time 0.0366 (0.0378)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.517000013589859, 0.4960000216960907)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.54it/s] 19%|#9        | 5/26 [00:00<00:01, 18.78it/s] 35%|###4      | 9/26 [00:00<00:00, 25.03it/s] 50%|#####     | 13/26 [00:00<00:00, 29.10it/s] 65%|######5   | 17/26 [00:00<00:00, 31.58it/s] 81%|########  | 21/26 [00:00<00:00, 33.12it/s] 96%|#########6| 25/26 [00:00<00:00, 33.14it/s]100%|##########| 26/26 [00:00<00:00, 27.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.49 (  0.52)	train_minacc   0.34 (  0.49)	train_majacc   0.51 (  0.53)	train_corr   0.00 (  0.00)	l1 13.5544 (13.5766)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.58it/s] 31%|###       | 8/26 [00:00<00:00, 41.48it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.48it/s] 50%|#####     | 13/26 [00:00<00:00, 41.74it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.02it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.02it/s] 96%|#########6| 25/26 [00:00<00:00, 47.88it/s]100%|##########| 26/26 [00:00<00:00, 41.38it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.46 (  0.46)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.53 (  0.52)	test_minacc   0.58 (  0.49)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.58 (  0.49)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.07 (  0.15)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.51 (  0.52)	test_minacc   0.57 (  0.50)	test_majacc   0.50 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.57 (  0.50)	test_majacc_d   0.50 (  0.53)	test_corr_d   0.09 (  0.15)
Test: [  26/  26]	Loss 0.695 (0.692)	test_acc   0.49 (  0.52)	test_minacc   0.34 (  0.49)	test_majacc   0.51 (  0.53)	Loss_d 0.695 (0.692)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.34 (  0.49)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.23 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.20it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.54 (  0.54)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.54 (  0.54)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 28/  1]	epoch_time 0.0383 (0.0385)	validation_time 0.0003 (0.0006)	train_time 0.0379 (0.0378)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.5219000135064125, 0.4970000088214874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.58it/s] 15%|#5        | 4/26 [00:00<00:01, 17.29it/s] 31%|###       | 8/26 [00:00<00:00, 24.10it/s] 46%|####6     | 12/26 [00:00<00:00, 28.08it/s] 62%|######1   | 16/26 [00:00<00:00, 29.81it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.27it/s] 92%|#########2| 24/26 [00:00<00:00, 32.11it/s]100%|##########| 26/26 [00:00<00:00, 26.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.50 (  0.53)	train_minacc   0.34 (  0.49)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 13.5148 (13.5334)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.13it/s] 27%|##6       | 7/26 [00:00<00:00, 32.61it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.61it/s] 50%|#####     | 13/26 [00:00<00:00, 38.69it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.17it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.17it/s] 96%|#########6| 25/26 [00:00<00:00, 45.98it/s]100%|##########| 26/26 [00:00<00:00, 38.01it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.44 (  0.44)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.54 (  0.53)	test_minacc   0.59 (  0.49)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.59 (  0.49)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.03 (  0.10)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.51 (  0.53)	test_minacc   0.57 (  0.50)	test_majacc   0.50 (  0.53)	Loss_d 0.694 (0.692)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.57 (  0.50)	test_majacc_d   0.50 (  0.53)	test_corr_d   0.04 (  0.11)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.50 (  0.53)	test_minacc   0.34 (  0.50)	test_majacc   0.53 (  0.53)	Loss_d 0.695 (0.693)	test_acc_d   0.50 (  0.53)	test_minacc_d   0.34 (  0.50)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.18 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.41it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 29/  1]	epoch_time 0.0366 (0.0385)	validation_time 0.0005 (0.0006)	train_time 0.0361 (0.0378)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.5264000170230866, 0.49900001287460327)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.77it/s] 19%|#9        | 5/26 [00:00<00:01, 19.98it/s] 35%|###4      | 9/26 [00:00<00:00, 25.40it/s] 50%|#####     | 13/26 [00:00<00:00, 29.15it/s] 65%|######5   | 17/26 [00:00<00:00, 31.35it/s] 81%|########  | 21/26 [00:00<00:00, 32.94it/s] 96%|#########6| 25/26 [00:00<00:00, 32.26it/s]100%|##########| 26/26 [00:00<00:00, 27.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.51 (  0.53)	train_minacc   0.34 (  0.49)	train_majacc   0.54 (  0.54)	train_corr   0.00 (  0.00)	l1 13.4811 (13.4972)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.58it/s] 23%|##3       | 6/26 [00:00<00:00, 29.18it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.18it/s] 46%|####6     | 12/26 [00:00<00:00, 39.23it/s] 69%|######9   | 18/26 [00:00<00:00, 45.14it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.14it/s] 92%|#########2| 24/26 [00:00<00:00, 47.73it/s]100%|##########| 26/26 [00:00<00:00, 39.61it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.44 (  0.44)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.53)	test_minacc   0.59 (  0.50)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.59 (  0.50)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.00 (  0.06)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.51 (  0.53)	test_minacc   0.57 (  0.50)	test_majacc   0.50 (  0.54)	Loss_d 0.694 (0.692)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.57 (  0.50)	test_majacc_d   0.50 (  0.54)	test_corr_d   0.00 (  0.07)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.51 (  0.53)	test_minacc   0.34 (  0.50)	test_majacc   0.54 (  0.54)	Loss_d 0.695 (0.693)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.34 (  0.50)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.14 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.28it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 30/  1]	epoch_time 0.0363 (0.0384)	validation_time 0.0003 (0.0006)	train_time 0.0360 (0.0377)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.531200011342764, 0.49800002574920654)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.50it/s] 19%|#9        | 5/26 [00:00<00:01, 16.59it/s] 35%|###4      | 9/26 [00:00<00:00, 23.18it/s] 50%|#####     | 13/26 [00:00<00:00, 27.29it/s] 65%|######5   | 17/26 [00:00<00:00, 29.67it/s] 81%|########  | 21/26 [00:00<00:00, 31.25it/s] 96%|#########6| 25/26 [00:00<00:00, 31.75it/s]100%|##########| 26/26 [00:01<00:00, 25.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.52 (  0.54)	train_minacc   0.37 (  0.49)	train_majacc   0.54 (  0.54)	train_corr   0.00 (  0.00)	l1 13.4519 (13.4660)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.74it/s] 27%|##6       | 7/26 [00:00<00:00, 37.19it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.19it/s] 50%|#####     | 13/26 [00:00<00:00, 42.30it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.63it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.63it/s] 96%|#########6| 25/26 [00:00<00:00, 48.95it/s]100%|##########| 26/26 [00:00<00:00, 41.62it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.44 (  0.44)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.54)	test_minacc   0.61 (  0.50)	test_majacc   0.53 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.61 (  0.50)	test_majacc_d   0.53 (  0.54)	test_corr_d  -0.02 (  0.04)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.51 (  0.54)	test_minacc   0.55 (  0.51)	test_majacc   0.51 (  0.54)	Loss_d 0.694 (0.693)	test_acc_d   0.51 (  0.54)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.51 (  0.54)	test_corr_d  -0.02 (  0.04)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.52 (  0.54)	test_minacc   0.37 (  0.50)	test_majacc   0.54 (  0.54)	Loss_d 0.695 (0.693)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.37 (  0.50)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.11 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.96it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 31/  1]	epoch_time 0.0375 (0.0384)	validation_time 0.0004 (0.0006)	train_time 0.0370 (0.0377)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.5362000126242638, 0.49500003457069397)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.94it/s] 19%|#9        | 5/26 [00:00<00:00, 22.89it/s] 35%|###4      | 9/26 [00:00<00:00, 28.07it/s] 50%|#####     | 13/26 [00:00<00:00, 30.67it/s] 65%|######5   | 17/26 [00:00<00:00, 31.83it/s] 81%|########  | 21/26 [00:00<00:00, 32.93it/s] 96%|#########6| 25/26 [00:00<00:00, 34.13it/s]100%|##########| 26/26 [00:00<00:00, 29.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.52 (  0.54)	train_minacc   0.37 (  0.49)	train_majacc   0.54 (  0.55)	train_corr   0.00 (  0.00)	l1 13.4262 (13.4388)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.19it/s] 31%|###       | 8/26 [00:00<00:00, 37.96it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.96it/s] 50%|#####     | 13/26 [00:00<00:00, 41.69it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.55it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.55it/s] 96%|#########6| 25/26 [00:00<00:00, 47.61it/s]100%|##########| 26/26 [00:00<00:00, 39.92it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.46 (  0.46)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.54)	test_minacc   0.61 (  0.51)	test_majacc   0.54 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.61 (  0.51)	test_majacc_d   0.54 (  0.55)	test_corr_d  -0.04 (  0.01)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.53 (  0.54)	test_minacc   0.60 (  0.51)	test_majacc   0.52 (  0.55)	Loss_d 0.694 (0.693)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.60 (  0.51)	test_majacc_d   0.52 (  0.55)	test_corr_d  -0.04 (  0.02)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.52 (  0.54)	test_minacc   0.37 (  0.50)	test_majacc   0.54 (  0.55)	Loss_d 0.694 (0.693)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.37 (  0.50)	test_majacc_d   0.54 (  0.55)	test_corr_d   0.09 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.19it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 32/  1]	epoch_time 0.0359 (0.0383)	validation_time 0.0003 (0.0006)	train_time 0.0356 (0.0376)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.5422000099420548, 0.4930000305175781)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.47it/s] 23%|##3       | 6/26 [00:00<00:00, 27.96it/s] 38%|###8      | 10/26 [00:00<00:00, 31.10it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.44it/s] 69%|######9   | 18/26 [00:00<00:00, 33.28it/s] 85%|########4 | 22/26 [00:00<00:00, 33.43it/s]100%|##########| 26/26 [00:00<00:00, 33.70it/s]100%|##########| 26/26 [00:00<00:00, 30.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.52 (  0.55)	train_minacc   0.39 (  0.49)	train_majacc   0.54 (  0.56)	train_corr   0.00 (  0.00)	l1 13.4034 (13.4147)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.33it/s] 31%|###       | 8/26 [00:00<00:00, 41.54it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.54it/s] 50%|#####     | 13/26 [00:00<00:00, 42.63it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.52it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.52it/s] 96%|#########6| 25/26 [00:00<00:00, 47.54it/s]100%|##########| 26/26 [00:00<00:00, 42.39it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.46 (  0.46)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.55)	test_minacc   0.62 (  0.51)	test_majacc   0.54 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.62 (  0.51)	test_majacc_d   0.54 (  0.55)	test_corr_d  -0.05 ( -0.00)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.54 (  0.55)	test_minacc   0.60 (  0.50)	test_majacc   0.54 (  0.56)	Loss_d 0.694 (0.693)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.60 (  0.50)	test_majacc_d   0.54 (  0.56)	test_corr_d  -0.06 (  0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.52 (  0.55)	test_minacc   0.39 (  0.50)	test_majacc   0.54 (  0.56)	Loss_d 0.694 (0.693)	test_acc_d   0.52 (  0.55)	test_minacc_d   0.39 (  0.50)	test_majacc_d   0.54 (  0.56)	test_corr_d   0.07 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.00it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 33/  1]	epoch_time 0.0352 (0.0382)	validation_time 0.0004 (0.0006)	train_time 0.0348 (0.0375)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.5468000133633614, 0.49000000953674316)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.16it/s] 19%|#9        | 5/26 [00:00<00:01, 20.07it/s] 35%|###4      | 9/26 [00:00<00:00, 25.63it/s] 50%|#####     | 13/26 [00:00<00:00, 28.45it/s] 65%|######5   | 17/26 [00:00<00:00, 30.84it/s] 81%|########  | 21/26 [00:00<00:00, 32.21it/s] 96%|#########6| 25/26 [00:00<00:00, 33.07it/s]100%|##########| 26/26 [00:00<00:00, 27.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.54 (  0.55)	train_minacc   0.42 (  0.49)	train_majacc   0.56 (  0.56)	train_corr   0.00 (  0.00)	l1 13.3829 (13.3932)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.75it/s] 27%|##6       | 7/26 [00:00<00:00, 32.79it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.79it/s] 50%|#####     | 13/26 [00:00<00:00, 40.12it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.59it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.59it/s] 96%|#########6| 25/26 [00:00<00:00, 46.62it/s]100%|##########| 26/26 [00:00<00:00, 39.08it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.46 (  0.46)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.55)	test_minacc   0.62 (  0.50)	test_majacc   0.54 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.62 (  0.50)	test_majacc_d   0.54 (  0.56)	test_corr_d  -0.06 ( -0.01)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.60 (  0.50)	test_majacc   0.54 (  0.56)	Loss_d 0.694 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.60 (  0.50)	test_majacc_d   0.54 (  0.56)	test_corr_d  -0.07 ( -0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.54 (  0.55)	test_minacc   0.42 (  0.49)	test_majacc   0.56 (  0.56)	Loss_d 0.694 (0.693)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.42 (  0.49)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.05 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.90it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.55 (  0.55)	Loss_d 0.690 (0.690)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.55 (  0.55)	Loss_d 0.690 (0.690)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 34/  1]	epoch_time 0.0365 (0.0382)	validation_time 0.0003 (0.0006)	train_time 0.0362 (0.0375)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.5503000090122223, 0.48600003123283386)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.63it/s] 19%|#9        | 5/26 [00:00<00:01, 19.17it/s] 35%|###4      | 9/26 [00:00<00:00, 24.87it/s] 50%|#####     | 13/26 [00:00<00:00, 28.19it/s] 65%|######5   | 17/26 [00:00<00:00, 29.76it/s] 81%|########  | 21/26 [00:00<00:00, 31.43it/s] 96%|#########6| 25/26 [00:00<00:00, 32.32it/s]100%|##########| 26/26 [00:00<00:00, 26.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.55 (  0.56)	train_minacc   0.42 (  0.49)	train_majacc   0.57 (  0.57)	train_corr   0.00 (  0.00)	l1 13.3645 (13.3738)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.11it/s] 27%|##6       | 7/26 [00:00<00:00, 35.62it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.62it/s] 50%|#####     | 13/26 [00:00<00:00, 42.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.24it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.24it/s] 96%|#########6| 25/26 [00:00<00:00, 48.78it/s]100%|##########| 26/26 [00:00<00:00, 40.26it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.46 (  0.46)	test_majacc   0.58 (  0.58)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.62 (  0.50)	test_majacc   0.55 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.62 (  0.50)	test_majacc_d   0.55 (  0.57)	test_corr_d  -0.07 ( -0.02)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.55 (  0.56)	test_minacc   0.60 (  0.50)	test_majacc   0.55 (  0.57)	Loss_d 0.694 (0.693)	test_acc_d   0.55 (  0.56)	test_minacc_d   0.60 (  0.50)	test_majacc_d   0.55 (  0.57)	test_corr_d  -0.08 ( -0.02)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.54 (  0.56)	test_minacc   0.42 (  0.49)	test_majacc   0.57 (  0.57)	Loss_d 0.694 (0.693)	test_acc_d   0.54 (  0.56)	test_minacc_d   0.42 (  0.49)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.85it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.54 (  0.54)	Loss_d 0.690 (0.690)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.54 (  0.54)	Loss_d 0.690 (0.690)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 35/  1]	epoch_time 0.0355 (0.0381)	validation_time 0.0003 (0.0006)	train_time 0.0352 (0.0374)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.5570000078678131, 0.4870000183582306)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.26it/s] 19%|#9        | 5/26 [00:00<00:00, 21.60it/s] 35%|###4      | 9/26 [00:00<00:00, 25.97it/s] 50%|#####     | 13/26 [00:00<00:00, 27.88it/s] 65%|######5   | 17/26 [00:00<00:00, 30.03it/s] 81%|########  | 21/26 [00:00<00:00, 31.66it/s] 96%|#########6| 25/26 [00:00<00:00, 32.75it/s]100%|##########| 26/26 [00:00<00:00, 27.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.54 (  0.56)	train_minacc   0.42 (  0.49)	train_majacc   0.57 (  0.58)	train_corr   0.00 (  0.00)	l1 13.3479 (13.3564)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.34it/s] 27%|##6       | 7/26 [00:00<00:00, 35.14it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.14it/s] 50%|#####     | 13/26 [00:00<00:00, 41.18it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.65it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.65it/s] 96%|#########6| 25/26 [00:00<00:00, 48.13it/s]100%|##########| 26/26 [00:00<00:00, 39.92it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.48 (  0.48)	test_majacc   0.58 (  0.58)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.61 (  0.50)	test_majacc   0.55 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.61 (  0.50)	test_majacc_d   0.55 (  0.57)	test_corr_d  -0.08 ( -0.03)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.60 (  0.50)	test_majacc   0.56 (  0.57)	Loss_d 0.694 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.60 (  0.50)	test_majacc_d   0.56 (  0.57)	test_corr_d  -0.08 ( -0.02)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.54 (  0.56)	test_minacc   0.42 (  0.49)	test_majacc   0.57 (  0.57)	Loss_d 0.694 (0.693)	test_acc_d   0.54 (  0.56)	test_minacc_d   0.42 (  0.49)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.03 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.88it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 36/  1]	epoch_time 0.0376 (0.0381)	validation_time 0.0004 (0.0005)	train_time 0.0372 (0.0374)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.561700011074543, 0.48000001907348633)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.42it/s] 19%|#9        | 5/26 [00:00<00:01, 20.19it/s] 35%|###4      | 9/26 [00:00<00:00, 25.85it/s] 50%|#####     | 13/26 [00:00<00:00, 29.02it/s] 62%|######1   | 16/26 [00:00<00:00, 27.84it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.93it/s] 92%|#########2| 24/26 [00:00<00:00, 31.62it/s]100%|##########| 26/26 [00:00<00:00, 26.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.55 (  0.57)	train_minacc   0.42 (  0.48)	train_majacc   0.57 (  0.58)	train_corr   0.00 (  0.00)	l1 13.3328 (13.3405)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.86it/s] 35%|###4      | 9/26 [00:00<00:00, 41.07it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.07it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.04it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.04it/s] 81%|########  | 21/26 [00:00<00:00, 47.74it/s]100%|##########| 26/26 [00:00<00:00, 42.36it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.48 (  0.48)	test_majacc   0.59 (  0.59)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.57)	test_minacc   0.59 (  0.50)	test_majacc   0.56 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.57)	test_minacc_d   0.59 (  0.50)	test_majacc_d   0.56 (  0.58)	test_corr_d  -0.09 ( -0.04)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.56 (  0.57)	test_minacc   0.60 (  0.49)	test_majacc   0.56 (  0.58)	Loss_d 0.694 (0.693)	test_acc_d   0.56 (  0.57)	test_minacc_d   0.60 (  0.49)	test_majacc_d   0.56 (  0.58)	test_corr_d  -0.09 ( -0.03)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.55 (  0.56)	test_minacc   0.42 (  0.49)	test_majacc   0.57 (  0.58)	Loss_d 0.694 (0.693)	test_acc_d   0.55 (  0.56)	test_minacc_d   0.42 (  0.49)	test_majacc_d   0.57 (  0.58)	test_corr_d   0.02 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.97it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 37/  1]	epoch_time 0.0363 (0.0380)	validation_time 0.0006 (0.0006)	train_time 0.0357 (0.0374)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.564800013422966, 0.47600001096725464)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.14it/s] 19%|#9        | 5/26 [00:00<00:00, 22.81it/s] 35%|###4      | 9/26 [00:00<00:00, 28.41it/s] 50%|#####     | 13/26 [00:00<00:00, 31.19it/s] 65%|######5   | 17/26 [00:00<00:00, 32.81it/s] 81%|########  | 21/26 [00:00<00:00, 33.67it/s] 96%|#########6| 25/26 [00:00<00:00, 34.31it/s]100%|##########| 26/26 [00:00<00:00, 29.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.55 (  0.57)	train_minacc   0.42 (  0.48)	train_majacc   0.58 (  0.59)	train_corr   0.00 (  0.00)	l1 13.3190 (13.3262)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.43it/s] 27%|##6       | 7/26 [00:00<00:00, 35.46it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.46it/s] 50%|#####     | 13/26 [00:00<00:00, 41.31it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.46it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.46it/s] 96%|#########6| 25/26 [00:00<00:00, 47.77it/s]100%|##########| 26/26 [00:00<00:00, 40.58it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.48 (  0.48)	test_majacc   0.59 (  0.59)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.59 (  0.50)	test_majacc   0.57 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.59 (  0.50)	test_majacc_d   0.57 (  0.58)	test_corr_d  -0.09 ( -0.05)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.62 (  0.49)	test_majacc   0.57 (  0.58)	Loss_d 0.694 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.62 (  0.49)	test_majacc_d   0.57 (  0.58)	test_corr_d  -0.09 ( -0.04)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.55 (  0.57)	test_minacc   0.42 (  0.49)	test_majacc   0.58 (  0.58)	Loss_d 0.694 (0.693)	test_acc_d   0.55 (  0.57)	test_minacc_d   0.42 (  0.49)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.01 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.97it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 38/  1]	epoch_time 0.0367 (0.0380)	validation_time 0.0004 (0.0005)	train_time 0.0363 (0.0374)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.5685000157356263, 0.4780000150203705)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.23it/s] 19%|#9        | 5/26 [00:00<00:00, 22.84it/s] 35%|###4      | 9/26 [00:00<00:00, 28.06it/s] 50%|#####     | 13/26 [00:00<00:00, 30.45it/s] 65%|######5   | 17/26 [00:00<00:00, 31.19it/s] 81%|########  | 21/26 [00:00<00:00, 31.82it/s] 96%|#########6| 25/26 [00:00<00:00, 32.77it/s]100%|##########| 26/26 [00:00<00:00, 28.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.56 (  0.58)	train_minacc   0.42 (  0.48)	train_majacc   0.58 (  0.59)	train_corr   0.00 (  0.00)	l1 13.3066 (13.3131)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.07it/s] 27%|##6       | 7/26 [00:00<00:00, 30.28it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.28it/s] 50%|#####     | 13/26 [00:00<00:00, 39.04it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.71it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.71it/s] 96%|#########6| 25/26 [00:00<00:00, 46.92it/s]100%|##########| 26/26 [00:00<00:00, 38.01it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.58 (  0.58)	test_minacc   0.48 (  0.48)	test_majacc   0.60 (  0.60)	Loss_d 0.692 (0.692)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.59 (  0.50)	test_majacc   0.57 (  0.59)	Loss_d 0.694 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.59 (  0.50)	test_majacc_d   0.57 (  0.59)	test_corr_d  -0.10 ( -0.05)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.58 (  0.57)	test_minacc   0.60 (  0.49)	test_majacc   0.57 (  0.59)	Loss_d 0.694 (0.693)	test_acc_d   0.58 (  0.57)	test_minacc_d   0.60 (  0.49)	test_majacc_d   0.57 (  0.59)	test_corr_d  -0.09 ( -0.04)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.56 (  0.57)	test_minacc   0.42 (  0.49)	test_majacc   0.58 (  0.59)	Loss_d 0.694 (0.693)	test_acc_d   0.56 (  0.57)	test_minacc_d   0.42 (  0.49)	test_majacc_d   0.58 (  0.59)	test_corr_d   0.00 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.68it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 39/  1]	epoch_time 0.0379 (0.0380)	validation_time 0.0003 (0.0005)	train_time 0.0376 (0.0374)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.5723000074625015, 0.48500001430511475)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.90it/s] 23%|##3       | 6/26 [00:00<00:00, 26.47it/s] 38%|###8      | 10/26 [00:00<00:00, 29.92it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.74it/s] 69%|######9   | 18/26 [00:00<00:00, 33.47it/s] 85%|########4 | 22/26 [00:00<00:00, 34.68it/s]100%|##########| 26/26 [00:00<00:00, 35.04it/s]100%|##########| 26/26 [00:00<00:00, 30.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.58 (  0.58)	train_minacc   0.45 (  0.48)	train_majacc   0.60 (  0.59)	train_corr   0.00 (  0.00)	l1 13.2952 (13.3012)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.77it/s] 35%|###4      | 9/26 [00:00<00:00, 42.53it/s]                                               35%|###4      | 9/26 [00:00<00:00, 42.53it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.48it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.84it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.84it/s]100%|##########| 26/26 [00:00<00:00, 52.28it/s]100%|##########| 26/26 [00:00<00:00, 43.05it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.59 (  0.59)	test_minacc   0.48 (  0.48)	test_majacc   0.61 (  0.61)	Loss_d 0.692 (0.692)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.56 (  0.49)	test_majacc   0.58 (  0.59)	Loss_d 0.694 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.56 (  0.49)	test_majacc_d   0.58 (  0.59)	test_corr_d  -0.10 ( -0.05)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.57 (  0.49)	test_majacc   0.58 (  0.59)	Loss_d 0.694 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.57 (  0.49)	test_majacc_d   0.58 (  0.59)	test_corr_d  -0.10 ( -0.05)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.58 (  0.57)	test_minacc   0.45 (  0.48)	test_majacc   0.60 (  0.59)	Loss_d 0.694 (0.693)	test_acc_d   0.58 (  0.57)	test_minacc_d   0.45 (  0.48)	test_majacc_d   0.60 (  0.59)	test_corr_d  -0.00 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.76it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 40/  1]	epoch_time 0.0342 (0.0379)	validation_time 0.0003 (0.0005)	train_time 0.0338 (0.0373)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.5748000093102456, 0.49800002574920654)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.57it/s] 19%|#9        | 5/26 [00:00<00:00, 21.44it/s] 35%|###4      | 9/26 [00:00<00:00, 26.28it/s] 50%|#####     | 13/26 [00:00<00:00, 29.12it/s] 65%|######5   | 17/26 [00:00<00:00, 31.13it/s] 81%|########  | 21/26 [00:00<00:00, 32.68it/s] 96%|#########6| 25/26 [00:00<00:00, 33.66it/s]100%|##########| 26/26 [00:00<00:00, 28.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.58 (  0.58)	train_minacc   0.45 (  0.48)	train_majacc   0.60 (  0.60)	train_corr   0.00 (  0.00)	l1 13.2849 (13.2904)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.35it/s] 27%|##6       | 7/26 [00:00<00:00, 35.56it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.56it/s] 50%|#####     | 13/26 [00:00<00:00, 41.56it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.42it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.42it/s] 96%|#########6| 25/26 [00:00<00:00, 47.76it/s]100%|##########| 26/26 [00:00<00:00, 39.78it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.60 (  0.60)	test_minacc   0.48 (  0.48)	test_majacc   0.62 (  0.62)	Loss_d 0.692 (0.692)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.61 (  0.50)	test_majacc   0.58 (  0.59)	Loss_d 0.694 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.61 (  0.50)	test_majacc_d   0.58 (  0.59)	test_corr_d  -0.11 ( -0.06)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.57 (  0.49)	test_majacc   0.58 (  0.59)	Loss_d 0.694 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.57 (  0.49)	test_majacc_d   0.58 (  0.59)	test_corr_d  -0.10 ( -0.05)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.45 (  0.49)	test_majacc   0.60 (  0.59)	Loss_d 0.694 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.60 (  0.59)	test_corr_d  -0.01 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.86it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 41/  1]	epoch_time 0.0361 (0.0379)	validation_time 0.0005 (0.0005)	train_time 0.0355 (0.0372)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.5764000115394592, 0.5049999952316284)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.29it/s] 19%|#9        | 5/26 [00:00<00:00, 24.14it/s] 35%|###4      | 9/26 [00:00<00:00, 28.27it/s] 50%|#####     | 13/26 [00:00<00:00, 30.54it/s] 65%|######5   | 17/26 [00:00<00:00, 31.63it/s] 81%|########  | 21/26 [00:00<00:00, 33.07it/s] 96%|#########6| 25/26 [00:00<00:00, 33.33it/s]100%|##########| 26/26 [00:00<00:00, 28.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.57 (  0.58)	train_minacc   0.45 (  0.48)	train_majacc   0.59 (  0.60)	train_corr   0.00 (  0.00)	l1 13.2754 (13.2805)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.04it/s] 27%|##6       | 7/26 [00:00<00:00, 32.42it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.42it/s] 50%|#####     | 13/26 [00:00<00:00, 42.49it/s] 69%|######9   | 18/26 [00:00<00:00, 44.61it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.61it/s] 92%|#########2| 24/26 [00:00<00:00, 47.82it/s]100%|##########| 26/26 [00:00<00:00, 40.50it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.60 (  0.60)	test_minacc   0.48 (  0.48)	test_majacc   0.62 (  0.62)	Loss_d 0.692 (0.692)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.57 (  0.58)	test_minacc   0.58 (  0.49)	test_majacc   0.57 (  0.60)	Loss_d 0.694 (0.693)	test_acc_d   0.57 (  0.58)	test_minacc_d   0.58 (  0.49)	test_majacc_d   0.57 (  0.60)	test_corr_d  -0.11 ( -0.06)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.48)	test_majacc   0.58 (  0.59)	Loss_d 0.694 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.48)	test_majacc_d   0.58 (  0.59)	test_corr_d  -0.10 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.694)	test_acc   0.57 (  0.58)	test_minacc   0.45 (  0.48)	test_majacc   0.59 (  0.59)	Loss_d 0.693 (0.694)	test_acc_d   0.57 (  0.58)	test_minacc_d   0.45 (  0.48)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.01 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.21it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.690 (0.690)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.690 (0.690)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 42/  1]	epoch_time 0.0358 (0.0378)	validation_time 0.0003 (0.0005)	train_time 0.0355 (0.0372)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.5764000055193901, 0.5130000114440918)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.97it/s] 19%|#9        | 5/26 [00:00<00:00, 24.07it/s] 35%|###4      | 9/26 [00:00<00:00, 28.72it/s] 50%|#####     | 13/26 [00:00<00:00, 30.69it/s] 65%|######5   | 17/26 [00:00<00:00, 32.52it/s] 81%|########  | 21/26 [00:00<00:00, 33.54it/s] 96%|#########6| 25/26 [00:00<00:00, 34.06it/s]100%|##########| 26/26 [00:00<00:00, 29.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.58 (  0.58)	train_minacc   0.45 (  0.47)	train_majacc   0.60 (  0.60)	train_corr   0.00 (  0.00)	l1 13.2668 (13.2715)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.41it/s] 27%|##6       | 7/26 [00:00<00:00, 30.84it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.84it/s] 50%|#####     | 13/26 [00:00<00:00, 37.94it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.73it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.73it/s] 96%|#########6| 25/26 [00:00<00:00, 45.23it/s]100%|##########| 26/26 [00:00<00:00, 37.52it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.60 (  0.60)	test_minacc   0.48 (  0.48)	test_majacc   0.62 (  0.62)	Loss_d 0.692 (0.692)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.56 (  0.58)	test_minacc   0.58 (  0.49)	test_majacc   0.55 (  0.59)	Loss_d 0.694 (0.693)	test_acc_d   0.56 (  0.58)	test_minacc_d   0.58 (  0.49)	test_majacc_d   0.55 (  0.59)	test_corr_d  -0.11 ( -0.06)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.57 (  0.57)	test_minacc   0.55 (  0.48)	test_majacc   0.58 (  0.59)	Loss_d 0.694 (0.694)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.55 (  0.48)	test_majacc_d   0.58 (  0.59)	test_corr_d  -0.10 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.694)	test_acc   0.58 (  0.57)	test_minacc   0.45 (  0.48)	test_majacc   0.60 (  0.59)	Loss_d 0.693 (0.694)	test_acc_d   0.58 (  0.57)	test_minacc_d   0.45 (  0.48)	test_majacc_d   0.60 (  0.59)	test_corr_d  -0.01 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.75it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.45 (  0.45)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.45 (  0.45)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 43/  1]	epoch_time 0.0372 (0.0378)	validation_time 0.0004 (0.0005)	train_time 0.0368 (0.0372)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.5727000166177749, 0.5170000195503235)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.79it/s] 19%|#9        | 5/26 [00:00<00:01, 16.97it/s] 35%|###4      | 9/26 [00:00<00:00, 23.04it/s] 50%|#####     | 13/26 [00:00<00:00, 26.85it/s] 65%|######5   | 17/26 [00:00<00:00, 29.05it/s] 81%|########  | 21/26 [00:00<00:00, 30.35it/s] 96%|#########6| 25/26 [00:00<00:00, 31.32it/s]100%|##########| 26/26 [00:01<00:00, 25.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.59 (  0.58)	train_minacc   0.45 (  0.48)	train_majacc   0.61 (  0.60)	train_corr   0.00 (  0.00)	l1 13.2589 (13.2633)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.26it/s] 23%|##3       | 6/26 [00:00<00:00, 30.73it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.73it/s] 46%|####6     | 12/26 [00:00<00:00, 39.75it/s] 69%|######9   | 18/26 [00:00<00:00, 46.37it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.37it/s] 92%|#########2| 24/26 [00:00<00:00, 46.83it/s]100%|##########| 26/26 [00:00<00:00, 39.77it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.59 (  0.59)	test_minacc   0.48 (  0.48)	test_majacc   0.61 (  0.61)	Loss_d 0.692 (0.692)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.55 (  0.57)	test_minacc   0.58 (  0.49)	test_majacc   0.54 (  0.59)	Loss_d 0.694 (0.693)	test_acc_d   0.55 (  0.57)	test_minacc_d   0.58 (  0.49)	test_majacc_d   0.54 (  0.59)	test_corr_d  -0.12 ( -0.06)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.57 (  0.57)	test_minacc   0.55 (  0.49)	test_majacc   0.58 (  0.58)	Loss_d 0.694 (0.694)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.10 ( -0.06)
Test: [  26/  26]	Loss 0.693 (0.694)	test_acc   0.58 (  0.57)	test_minacc   0.45 (  0.48)	test_majacc   0.61 (  0.58)	Loss_d 0.693 (0.694)	test_acc_d   0.58 (  0.57)	test_minacc_d   0.45 (  0.48)	test_majacc_d   0.61 (  0.58)	test_corr_d  -0.02 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.94it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.43 (  0.43)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.43 (  0.43)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 44/  1]	epoch_time 0.0367 (0.0378)	validation_time 0.0004 (0.0005)	train_time 0.0362 (0.0372)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.5686000100970269, 0.5240000486373901)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.66it/s] 15%|#5        | 4/26 [00:00<00:01, 20.44it/s] 31%|###       | 8/26 [00:00<00:00, 25.59it/s] 46%|####6     | 12/26 [00:00<00:00, 28.95it/s] 62%|######1   | 16/26 [00:00<00:00, 30.86it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.30it/s] 92%|#########2| 24/26 [00:00<00:00, 33.24it/s]100%|##########| 26/26 [00:00<00:00, 28.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.59 (  0.58)	train_minacc   0.45 (  0.48)	train_majacc   0.61 (  0.60)	train_corr   0.00 (  0.00)	l1 13.2517 (13.2558)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.22it/s] 27%|##6       | 7/26 [00:00<00:00, 37.08it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.08it/s] 50%|#####     | 13/26 [00:00<00:00, 42.32it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.48it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.48it/s] 96%|#########6| 25/26 [00:00<00:00, 48.34it/s]100%|##########| 26/26 [00:00<00:00, 40.71it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.60 (  0.60)	test_minacc   0.50 (  0.50)	test_majacc   0.62 (  0.62)	Loss_d 0.692 (0.692)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.54 (  0.57)	test_minacc   0.55 (  0.49)	test_majacc   0.54 (  0.59)	Loss_d 0.694 (0.694)	test_acc_d   0.54 (  0.57)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.54 (  0.59)	test_corr_d  -0.12 ( -0.06)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.49)	test_majacc   0.57 (  0.58)	Loss_d 0.694 (0.694)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.49)	test_majacc_d   0.57 (  0.58)	test_corr_d  -0.10 ( -0.06)
Test: [  26/  26]	Loss 0.693 (0.694)	test_acc   0.59 (  0.57)	test_minacc   0.45 (  0.49)	test_majacc   0.61 (  0.58)	Loss_d 0.693 (0.694)	test_acc_d   0.59 (  0.57)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.61 (  0.58)	test_corr_d  -0.02 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.84it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.43 (  0.43)	Loss_d 0.690 (0.690)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.43 (  0.43)	Loss_d 0.690 (0.690)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 45/  1]	epoch_time 0.0382 (0.0378)	validation_time 0.0003 (0.0005)	train_time 0.0378 (0.0372)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.5655000136494637, 0.5350000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.30it/s] 19%|#9        | 5/26 [00:00<00:01, 19.35it/s] 35%|###4      | 9/26 [00:00<00:00, 24.34it/s] 50%|#####     | 13/26 [00:00<00:00, 27.51it/s] 65%|######5   | 17/26 [00:00<00:00, 29.95it/s] 81%|########  | 21/26 [00:00<00:00, 31.80it/s] 96%|#########6| 25/26 [00:00<00:00, 32.81it/s]100%|##########| 26/26 [00:00<00:00, 26.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.59 (  0.58)	train_minacc   0.45 (  0.48)	train_majacc   0.61 (  0.60)	train_corr   0.00 (  0.00)	l1 13.2451 (13.2489)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.32it/s] 27%|##6       | 7/26 [00:00<00:00, 35.54it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.54it/s] 50%|#####     | 13/26 [00:00<00:00, 40.72it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.67it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.67it/s] 96%|#########6| 25/26 [00:00<00:00, 47.94it/s]100%|##########| 26/26 [00:00<00:00, 40.33it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.59 (  0.59)	test_minacc   0.52 (  0.52)	test_majacc   0.60 (  0.60)	Loss_d 0.693 (0.693)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.54 (  0.57)	test_minacc   0.56 (  0.50)	test_majacc   0.54 (  0.58)	Loss_d 0.694 (0.694)	test_acc_d   0.54 (  0.57)	test_minacc_d   0.56 (  0.50)	test_majacc_d   0.54 (  0.58)	test_corr_d  -0.12 ( -0.07)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.50)	test_majacc   0.56 (  0.57)	Loss_d 0.694 (0.694)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.50)	test_majacc_d   0.56 (  0.57)	test_corr_d  -0.10 ( -0.06)
Test: [  26/  26]	Loss 0.693 (0.694)	test_acc   0.58 (  0.56)	test_minacc   0.45 (  0.49)	test_majacc   0.61 (  0.57)	Loss_d 0.693 (0.694)	test_acc_d   0.58 (  0.56)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.61 (  0.57)	test_corr_d  -0.02 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.39it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.56 (  0.56)	test_majacc   0.41 (  0.41)	Loss_d 0.691 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.56 (  0.56)	test_majacc   0.41 (  0.41)	Loss_d 0.691 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 46/  1]	epoch_time 0.0364 (0.0377)	validation_time 0.0004 (0.0005)	train_time 0.0360 (0.0372)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.5605000129044055, 0.5410000085830688)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.21it/s] 15%|#5        | 4/26 [00:00<00:01, 20.98it/s] 31%|###       | 8/26 [00:00<00:00, 26.60it/s] 46%|####6     | 12/26 [00:00<00:00, 29.24it/s] 62%|######1   | 16/26 [00:00<00:00, 30.34it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.52it/s] 92%|#########2| 24/26 [00:00<00:00, 32.64it/s]100%|##########| 26/26 [00:00<00:00, 28.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.58 (  0.58)	train_minacc   0.45 (  0.48)	train_majacc   0.60 (  0.59)	train_corr   0.00 (  0.00)	l1 13.2390 (13.2426)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.65it/s] 31%|###       | 8/26 [00:00<00:00, 39.25it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.25it/s] 50%|#####     | 13/26 [00:00<00:00, 42.76it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.87it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.87it/s] 92%|#########2| 24/26 [00:00<00:00, 49.25it/s]100%|##########| 26/26 [00:00<00:00, 42.04it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.59 (  0.59)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.54 (  0.56)	test_minacc   0.55 (  0.50)	test_majacc   0.53 (  0.57)	Loss_d 0.694 (0.694)	test_acc_d   0.54 (  0.56)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.53 (  0.57)	test_corr_d  -0.12 ( -0.07)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.50)	test_majacc   0.54 (  0.56)	Loss_d 0.694 (0.694)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.50)	test_majacc_d   0.54 (  0.56)	test_corr_d  -0.10 ( -0.06)
Test: [  26/  26]	Loss 0.693 (0.694)	test_acc   0.58 (  0.55)	test_minacc   0.45 (  0.50)	test_majacc   0.60 (  0.56)	Loss_d 0.693 (0.694)	test_acc_d   0.58 (  0.55)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.60 (  0.56)	test_corr_d  -0.03 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.30it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.38 (  0.38)	Loss_d 0.691 (0.691)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.38 (  0.38)	Loss_d 0.691 (0.691)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 47/  1]	epoch_time 0.0366 (0.0377)	validation_time 0.0004 (0.0005)	train_time 0.0362 (0.0371)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.5512000107169152, 0.5460000038146973)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.31it/s] 15%|#5        | 4/26 [00:00<00:01, 19.04it/s] 31%|###       | 8/26 [00:00<00:00, 25.28it/s] 46%|####6     | 12/26 [00:00<00:00, 29.33it/s] 62%|######1   | 16/26 [00:00<00:00, 31.24it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.08it/s] 92%|#########2| 24/26 [00:00<00:00, 32.05it/s]100%|##########| 26/26 [00:00<00:00, 27.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.25 (  0.25)	train_acc   0.57 (  0.57)	train_minacc   0.45 (  0.48)	train_majacc   0.59 (  0.58)	train_corr   0.00 (  0.00)	l1 13.2335 (13.2368)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.43it/s] 31%|###       | 8/26 [00:00<00:00, 40.15it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.15it/s] 50%|#####     | 13/26 [00:00<00:00, 41.43it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.49it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.49it/s] 96%|#########6| 25/26 [00:00<00:00, 48.28it/s]100%|##########| 26/26 [00:00<00:00, 41.76it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.58 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.52 (  0.55)	test_minacc   0.56 (  0.50)	test_majacc   0.51 (  0.56)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.55)	test_minacc_d   0.56 (  0.50)	test_majacc_d   0.51 (  0.56)	test_corr_d  -0.13 ( -0.07)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.52 (  0.54)	test_minacc   0.60 (  0.50)	test_majacc   0.51 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.60 (  0.50)	test_majacc_d   0.51 (  0.55)	test_corr_d  -0.10 ( -0.06)
Test: [  26/  26]	Loss 0.693 (0.694)	test_acc   0.56 (  0.54)	test_minacc   0.45 (  0.50)	test_majacc   0.58 (  0.55)	Loss_d 0.693 (0.694)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.58 (  0.55)	test_corr_d  -0.03 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.93it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.37 (  0.37)	Loss_d 0.691 (0.691)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.37 (  0.37)	Loss_d 0.691 (0.691)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 48/  1]	epoch_time 0.0372 (0.0377)	validation_time 0.0004 (0.0005)	train_time 0.0368 (0.0371)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.5388000129461289, 0.5490000247955322)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.46it/s] 19%|#9        | 5/26 [00:00<00:00, 24.06it/s] 35%|###4      | 9/26 [00:00<00:00, 28.83it/s] 50%|#####     | 13/26 [00:00<00:00, 31.37it/s] 65%|######5   | 17/26 [00:00<00:00, 32.21it/s] 81%|########  | 21/26 [00:00<00:00, 32.90it/s] 96%|#########6| 25/26 [00:00<00:00, 32.86it/s]100%|##########| 26/26 [00:00<00:00, 29.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.24 (  0.24)	train_acc   0.56 (  0.56)	train_minacc   0.45 (  0.49)	train_majacc   0.58 (  0.57)	train_corr   0.00 (  0.00)	l1 13.2284 (13.2315)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.63it/s] 27%|##6       | 7/26 [00:00<00:00, 32.46it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.46it/s] 50%|#####     | 13/26 [00:00<00:00, 38.63it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.17it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.17it/s] 96%|#########6| 25/26 [00:00<00:00, 46.20it/s]100%|##########| 26/26 [00:00<00:00, 38.46it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.52 (  0.54)	test_minacc   0.56 (  0.51)	test_majacc   0.51 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.51 (  0.55)	test_corr_d  -0.13 ( -0.07)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.52 (  0.53)	test_minacc   0.60 (  0.51)	test_majacc   0.50 (  0.54)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.60 (  0.51)	test_majacc_d   0.50 (  0.54)	test_corr_d  -0.10 ( -0.06)
Test: [  26/  26]	Loss 0.693 (0.694)	test_acc   0.54 (  0.53)	test_minacc   0.45 (  0.50)	test_majacc   0.56 (  0.53)	Loss_d 0.693 (0.694)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.56 (  0.53)	test_corr_d  -0.03 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.25it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.37 (  0.37)	Loss_d 0.691 (0.691)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.37 (  0.37)	Loss_d 0.691 (0.691)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 49/  1]	epoch_time 0.0357 (0.0377)	validation_time 0.0003 (0.0005)	train_time 0.0353 (0.0371)
record: (train_acc, test_acc) (0.8584000245332718, 0.35200002789497375)
last accs (train_acc, test_acc) (0.5301000117957592, 0.5550000071525574)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.095 MB of 0.095 MB uploadedwandb: \ 0.095 MB of 0.095 MB uploadedwandb: | 0.095 MB of 0.095 MB uploadedwandb: / 0.117 MB of 0.123 MB uploaded (0.003 MB deduped)wandb: - 0.493 MB of 0.493 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/diagnostics/epoch_time_val █▁▁▂▁▁▁▁▁▂▂▁▂▂▂▂▂▂▂▂▂▁▁▂▁▂▁▁▁▂▁▁▁▁▁▂▂▁▁▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/diagnostics/train_time_val █▂▂▂▂▁▁▁▁▂▂▁▂▂▂▂▂▂▂▂▂▁▂▂▁▂▁▁▁▂▁▂▁▁▁▂▂▁▁▁
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/Loss_avg ██████▇█▆▇▆▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/Loss_d_avg ██████▇█▆▇▆▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/Loss_d_val ██████▇█▆▇▆▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/Loss_val ██████▇█▆▇▆▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/test_acc_avg ▁▁▁▂▂▂▂▁▅▂▃▃█▅▅▅▅▅▅▇▆▇▇▇▇▇▇▇▇▆▆▆▇▇▇▇▇▇▇█
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/test_acc_d_avg ▁▁▁▂▂▂▂▁▅▂▃▃█▅▅▅▅▅▅▇▆▇▇▇▇▇▇▇▇▆▆▆▇▇▇▇▇▇▇█
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/test_acc_d_val ▁▁▁▂▂▂▂▁▅▂▃▃█▅▅▅▅▅▅▇▆▇▇▇▇▇▇▇▇▆▆▆▇▇▇▇▇▇▇█
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/test_acc_val ▁▁▁▂▂▂▂▁▅▂▃▃█▅▅▅▅▅▅▇▆▇▇▇▇▇▇▇▇▆▆▆▇▇▇▇▇▇▇█
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/test_corr_d_avg ████▇▇▇▇▆▇▆▇▁▅▄▅▅▅▅▆▄▃▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/test_corr_d_val ████▇▇▇▇▆▇▆▇▁▅▄▅▅▅▅▆▄▃▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/test_majacc_avg ████████████▂▃▃▃▃▃▄▂▃▃▃▃▃▃▃▃▃▃▃▃▃▃▂▂▂▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/test_majacc_d_avg ████████████▂▃▃▃▃▃▄▂▃▃▃▃▃▃▃▃▃▃▃▃▃▃▂▂▂▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/test_majacc_d_val ████████████▂▃▃▃▃▃▄▂▃▃▃▃▃▃▃▃▃▃▃▃▃▃▂▂▂▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/test_majacc_val ████████████▂▃▃▃▃▃▄▂▃▃▃▃▃▃▃▃▃▃▃▃▃▃▂▂▂▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/test_minacc_avg ▁▁▁▂▂▂▂▁▄▂▃▃█▅▅▅▅▅▅▇▇▇▇▇▇▇▇▇▇▇▆▆▇▇▇▇▇▇██
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/test_minacc_d_avg ▁▁▁▂▂▂▂▁▄▂▃▃█▅▅▅▅▅▅▇▇▇▇▇▇▇▇▇▇▇▆▆▇▇▇▇▇▇██
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/test_minacc_d_val ▁▁▁▂▂▂▂▁▄▂▃▃█▅▅▅▅▅▅▇▇▇▇▇▇▇▇▇▇▇▆▆▇▇▇▇▇▇██
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/test_minacc_val ▁▁▁▂▂▂▂▁▄▂▃▃█▅▅▅▅▅▅▇▇▇▇▇▇▇▇▇▇▇▆▆▇▇▇▇▇▇██
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/Loss_avg █▅▃▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/Loss_val █▅▃▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/l1_avg ▃▂▁▁▁▂▂▃▅▆▆▇███████▆▆▆▆▆▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/l1_val ▂▂▁▁▁▂▃▃▅▆▆▇███████▆▆▆▆▆▆▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/train_acc_avg ▇███████████▆▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▃▃▃▃▃▃▃▃▃▂
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/train_acc_val ████████████▁▂▂▂▂▂▂▂▂▂▂▂▃▃▃▃▃▃▃▃▄▄▄▄▄▄▄▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/train_majacc_avg ▇███████████▅▁▁▁▁▁▁▂▂▁▁▂▂▂▂▂▂▂▂▂▂▃▃▃▃▃▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/train_majacc_val █████▇████▇█▁▃▂▂▃▃▃▃▃▃▃▃▃▃▃▃▄▄▄▄▄▄▄▄▄▄▄▄
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/train_minacc_avg ▂▁▁▂▂▃▂▂▃▄▄▄██▇▇▇▇▇▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/train_minacc_val ▁▁▁▁▁▃▂▁▂▃▄▄█▄▅▅▅▅▅▄▄▄▄▄▄▄▄▄▅▅▅▅▅▅▅▅▅▅▅▅
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/train_nll_avg ▇▂▂▂▂▁▁▁▁▁▁▁▄███████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/train_nll_val ▃▃▂▂▂▂▂▂▂▁▁▁████████████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/train_penalty_avg █▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/train_penalty_val █▆▅▄▄▂▄▄▃▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/weight_norm_avg █▅▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/weight_norm_val █▅▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/diagnostics/epoch_time_val 0.03565
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/diagnostics/train_time_val 0.03532
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/diagnostics/validation_time_val 0.00032
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/Loss_avg 0.6907
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/Loss_d_avg 0.6907
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/Loss_d_val 0.6907
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/Loss_val 0.6907
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/test_acc_avg 0.555
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/test_acc_d_avg 0.555
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/test_acc_d_val 0.555
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/test_acc_val 0.555
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/test_corr_d_avg -0.19027
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/test_corr_d_val -0.19027
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/test_majacc_avg 0.37
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/test_majacc_d_avg 0.37
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/test_majacc_d_val 0.37
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/test_majacc_val 0.37
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/test_minacc_avg 0.57556
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/test_minacc_d_avg 0.57556
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/test_minacc_d_val 0.57556
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/test/test_minacc_val 0.57556
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/Loss_avg 0.0001
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/Loss_val 9e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/l1_avg 13.2315
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/l1_val 13.2284
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/train_acc_avg 0.5617
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/train_acc_val 0.556
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/train_majacc_avg 0.57496
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/train_majacc_val 0.57547
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/train_minacc_avg 0.48602
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/train_minacc_val 0.44737
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/train_nll_avg 0.69291
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/train_nll_val 0.69303
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/weight_norm_avg 0.24485
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/62/logs/train/weight_norm_val 0.24462
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/b76on9ay
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_121629-b76on9ay/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
