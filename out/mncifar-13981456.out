hello
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: - Waiting for wandb.init()...wandb: \ Waiting for wandb.init()...wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_125328-czbjeek5
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/czbjeek5
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=15.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1231
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6023, 3, 32, 32) (5977, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:40,  1.63s/it] 19%|#9        | 5/26 [00:01<00:05,  3.72it/s] 35%|###4      | 9/26 [00:01<00:02,  7.23it/s] 50%|#####     | 13/26 [00:01<00:01, 11.05it/s] 65%|######5   | 17/26 [00:02<00:00, 15.07it/s] 81%|########  | 21/26 [00:02<00:00, 18.95it/s] 96%|#########6| 25/26 [00:02<00:00, 22.22it/s]100%|##########| 26/26 [00:02<00:00,  9.57it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 9.229 (12.101)	train_nll   0.50 (  0.53)	train_penalty   0.17 (  0.24)	weight_norm   8.73 ( 11.57)	train_acc   0.82 (  0.81)	train_minacc   0.02 (  0.07)	train_majacc   0.99 (  0.94)	train_corr   0.00 (  0.00)	l1 6.8898 (8.0424)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.33it/s] 27%|##6       | 7/26 [00:00<00:00, 30.74it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.74it/s] 50%|#####     | 13/26 [00:00<00:00, 37.69it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.74it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.74it/s] 96%|#########6| 25/26 [00:00<00:00, 46.03it/s]100%|##########| 26/26 [00:00<00:00, 37.73it/s]
Test: [   0/  26]	Loss 0.432 (0.432)	test_acc   0.84 (  0.84)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.432 (0.432)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  10/  26]	Loss 0.350 (0.427)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.350 (0.427)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.99 (  0.98)
Test: [  20/  26]	Loss 0.451 (0.428)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.451 (0.428)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.489 (0.424)	test_acc   0.82 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.489 (0.424)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.56it/s]100%|##########| 1/1 [00:00<00:00,  2.56it/s]
Test: [  0/  1]	Loss 1.888 (1.888)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.888 (1.888)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 1.888 (1.888)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.888 (1.888)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/63/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0796 (0.0796)	validation_time 0.0067 (0.0067)	train_time 0.0654 (0.0654)
record: (train_acc, test_acc) (0.845200026333332, 0.11300000548362732)
last accs (train_acc, test_acc) (0.845200026333332, 0.11300000548362732)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.75it/s] 19%|#9        | 5/26 [00:00<00:00, 24.25it/s] 35%|###4      | 9/26 [00:00<00:00, 29.26it/s] 50%|#####     | 13/26 [00:00<00:00, 31.53it/s] 65%|######5   | 17/26 [00:00<00:00, 32.33it/s] 81%|########  | 21/26 [00:00<00:00, 32.88it/s] 96%|#########6| 25/26 [00:00<00:00, 33.62it/s]100%|##########| 26/26 [00:00<00:00, 29.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 4.665 (6.464)	train_nll   0.46 (  0.41)	train_penalty   0.11 (  0.06)	weight_norm   4.20 (  6.05)	train_acc   0.82 (  0.85)	train_minacc   0.00 (  0.02)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.9607 (6.3895)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.57it/s] 27%|##6       | 7/26 [00:00<00:00, 33.01it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.01it/s] 50%|#####     | 13/26 [00:00<00:00, 39.68it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.46it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.46it/s] 96%|#########6| 25/26 [00:00<00:00, 47.29it/s]100%|##########| 26/26 [00:00<00:00, 39.33it/s]
Test: [   0/  26]	Loss 0.420 (0.420)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.420 (0.420)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.336 (0.406)	test_acc   0.88 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.336 (0.406)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.426 (0.407)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.426 (0.407)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.447 (0.404)	test_acc   0.82 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.447 (0.404)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.35it/s]
Test: [  0/  1]	Loss 1.589 (1.589)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.589 (1.589)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.589 (1.589)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.589 (1.589)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Overall Timing[  1/  1]	epoch_time 0.0365 (0.0580)	validation_time 0.0003 (0.0035)	train_time 0.0362 (0.0508)
record: (train_acc, test_acc) (0.845200026333332, 0.11300000548362732)
last accs (train_acc, test_acc) (0.8484000251889229, 0.10500000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.33it/s] 19%|#9        | 5/26 [00:00<00:01, 19.79it/s] 35%|###4      | 9/26 [00:00<00:00, 25.70it/s] 50%|#####     | 13/26 [00:00<00:00, 29.08it/s] 65%|######5   | 17/26 [00:00<00:00, 30.88it/s] 81%|########  | 21/26 [00:00<00:00, 32.00it/s] 96%|#########6| 25/26 [00:00<00:00, 33.33it/s]100%|##########| 26/26 [00:00<00:00, 27.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 2.873 (3.556)	train_nll   0.45 (  0.39)	train_penalty   0.10 (  0.05)	weight_norm   2.42 (  3.17)	train_acc   0.82 (  0.85)	train_minacc   0.00 (  0.06)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.2165 (5.6023)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.68it/s] 27%|##6       | 7/26 [00:00<00:00, 34.11it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.11it/s] 50%|#####     | 13/26 [00:00<00:00, 44.02it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.17it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.17it/s] 96%|#########6| 25/26 [00:00<00:00, 50.25it/s]100%|##########| 26/26 [00:00<00:00, 41.86it/s]
Test: [   0/  26]	Loss 0.391 (0.391)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.391 (0.391)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.303 (0.377)	test_acc   0.88 (  0.85)	test_minacc   0.02 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.303 (0.377)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.02 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.94)
Test: [  20/  26]	Loss 0.405 (0.377)	test_acc   0.84 (  0.85)	test_minacc   0.06 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.405 (0.377)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.06 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  26/  26]	Loss 0.420 (0.374)	test_acc   0.82 (  0.85)	test_minacc   0.02 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.420 (0.374)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.02 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.93 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.39it/s]
Test: [  0/  1]	Loss 1.720 (1.720)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.720 (1.720)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.90 (  0.90)
Test: [  1/  1]	Loss 1.720 (1.720)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.720 (1.720)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.90 (  0.90)
Overall Timing[  2/  1]	epoch_time 0.0337 (0.0499)	validation_time 0.0003 (0.0024)	train_time 0.0334 (0.0450)
record: (train_acc, test_acc) (0.845200026333332, 0.11300000548362732)
last accs (train_acc, test_acc) (0.8490000311732292, 0.11300000548362732)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.73it/s] 19%|#9        | 5/26 [00:00<00:01, 17.00it/s] 35%|###4      | 9/26 [00:00<00:00, 23.32it/s] 50%|#####     | 13/26 [00:00<00:00, 27.58it/s] 65%|######5   | 17/26 [00:00<00:00, 30.31it/s] 81%|########  | 21/26 [00:00<00:00, 32.28it/s] 96%|#########6| 25/26 [00:00<00:00, 33.11it/s]100%|##########| 26/26 [00:00<00:00, 26.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 2.044 (2.337)	train_nll   0.47 (  0.39)	train_penalty   0.12 (  0.05)	weight_norm   1.57 (  1.94)	train_acc   0.82 (  0.84)	train_minacc   0.00 (  0.07)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 4.7646 (4.9323)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.19it/s] 27%|##6       | 7/26 [00:00<00:00, 34.03it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.03it/s] 46%|####6     | 12/26 [00:00<00:00, 39.69it/s] 65%|######5   | 17/26 [00:00<00:00, 41.82it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.82it/s] 88%|########8 | 23/26 [00:00<00:00, 46.90it/s]100%|##########| 26/26 [00:00<00:00, 38.59it/s]
Test: [   0/  26]	Loss 0.380 (0.380)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.380 (0.380)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.307 (0.368)	test_acc   0.88 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.307 (0.368)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.392 (0.370)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.392 (0.370)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.97)
Test: [  26/  26]	Loss 0.445 (0.368)	test_acc   0.82 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.445 (0.368)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.33it/s]
Test: [  0/  1]	Loss 1.686 (1.686)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.686 (1.686)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.686 (1.686)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.686 (1.686)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Overall Timing[  3/  1]	epoch_time 0.0363 (0.0465)	validation_time 0.0003 (0.0019)	train_time 0.0360 (0.0427)
record: (train_acc, test_acc) (0.845200026333332, 0.11300000548362732)
last accs (train_acc, test_acc) (0.8488000237941742, 0.10200000554323196)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.30it/s] 19%|#9        | 5/26 [00:00<00:00, 22.36it/s] 35%|###4      | 9/26 [00:00<00:00, 28.06it/s] 50%|#####     | 13/26 [00:00<00:00, 30.77it/s] 65%|######5   | 17/26 [00:00<00:00, 31.27it/s] 81%|########  | 21/26 [00:00<00:00, 32.24it/s] 96%|#########6| 25/26 [00:00<00:00, 33.18it/s]100%|##########| 26/26 [00:00<00:00, 28.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.432 (1.623)	train_nll   0.44 (  0.37)	train_penalty   0.07 (  0.04)	weight_norm   1.00 (  1.25)	train_acc   0.82 (  0.85)	train_minacc   0.00 (  0.08)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 5.1929 (5.1603)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.63it/s] 23%|##3       | 6/26 [00:00<00:00, 30.74it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.74it/s] 46%|####6     | 12/26 [00:00<00:00, 42.78it/s] 65%|######5   | 17/26 [00:00<00:00, 43.72it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.72it/s] 88%|########8 | 23/26 [00:00<00:00, 48.97it/s]100%|##########| 26/26 [00:00<00:00, 39.51it/s]
Test: [   0/  26]	Loss 0.375 (0.375)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.375 (0.375)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.306 (0.373)	test_acc   0.88 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.306 (0.373)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.92)
Test: [  20/  26]	Loss 0.387 (0.377)	test_acc   0.84 (  0.85)	test_minacc   0.03 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.387 (0.377)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.03 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.400 (0.373)	test_acc   0.83 (  0.85)	test_minacc   0.04 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.400 (0.373)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.04 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.18it/s]
Test: [  0/  1]	Loss 1.533 (1.533)	test_acc   0.13 (  0.13)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 1.533 (1.533)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.84 (  0.84)
Test: [  1/  1]	Loss 1.533 (1.533)	test_acc   0.13 (  0.13)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 1.533 (1.533)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.84 (  0.84)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/63/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0371 (0.0446)	validation_time 0.0003 (0.0016)	train_time 0.0367 (0.0415)
record: (train_acc, test_acc) (0.8495000313520431, 0.12800000607967377)
last accs (train_acc, test_acc) (0.8495000313520431, 0.12800000607967377)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.02it/s] 19%|#9        | 5/26 [00:00<00:00, 22.34it/s] 35%|###4      | 9/26 [00:00<00:00, 27.18it/s] 50%|#####     | 13/26 [00:00<00:00, 29.99it/s] 65%|######5   | 17/26 [00:00<00:00, 30.96it/s] 81%|########  | 21/26 [00:00<00:00, 32.52it/s] 96%|#########6| 25/26 [00:00<00:00, 33.19it/s]100%|##########| 26/26 [00:00<00:00, 28.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.186 (1.206)	train_nll   0.42 (  0.37)	train_penalty   0.05 (  0.03)	weight_norm   0.76 (  0.83)	train_acc   0.82 (  0.85)	train_minacc   0.00 (  0.13)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 5.8823 (5.7646)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.77it/s] 27%|##6       | 7/26 [00:00<00:00, 30.71it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.71it/s] 50%|#####     | 13/26 [00:00<00:00, 39.94it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.22it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.22it/s] 96%|#########6| 25/26 [00:00<00:00, 46.21it/s]100%|##########| 26/26 [00:00<00:00, 38.27it/s]
Test: [   0/  26]	Loss 0.377 (0.377)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.377 (0.377)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.299 (0.365)	test_acc   0.88 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.299 (0.365)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.93)
Test: [  20/  26]	Loss 0.378 (0.367)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.378 (0.367)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.93)
Test: [  26/  26]	Loss 0.399 (0.365)	test_acc   0.82 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.399 (0.365)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.47it/s]
Test: [  0/  1]	Loss 1.494 (1.494)	test_acc   0.11 (  0.11)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.494 (1.494)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.87 (  0.87)
Test: [  1/  1]	Loss 1.494 (1.494)	test_acc   0.11 (  0.11)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.494 (1.494)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.87 (  0.87)
Overall Timing[  5/  1]	epoch_time 0.0354 (0.0431)	validation_time 0.0004 (0.0014)	train_time 0.0350 (0.0404)
record: (train_acc, test_acc) (0.8495000313520431, 0.12800000607967377)
last accs (train_acc, test_acc) (0.8485000240206718, 0.11400000751018524)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.82it/s] 19%|#9        | 5/26 [00:00<00:00, 21.95it/s] 35%|###4      | 9/26 [00:00<00:00, 26.91it/s] 50%|#####     | 13/26 [00:00<00:00, 28.51it/s] 65%|######5   | 17/26 [00:00<00:00, 30.35it/s] 81%|########  | 21/26 [00:00<00:00, 31.49it/s] 96%|#########6| 25/26 [00:00<00:00, 32.24it/s]100%|##########| 26/26 [00:00<00:00, 27.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.918 (0.971)	train_nll   0.44 (  0.37)	train_penalty   0.09 (  0.04)	weight_norm   0.48 (  0.60)	train_acc   0.82 (  0.85)	train_minacc   0.00 (  0.11)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 6.9339 (6.7352)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.29it/s] 27%|##6       | 7/26 [00:00<00:00, 32.09it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.09it/s] 50%|#####     | 13/26 [00:00<00:00, 42.35it/s] 69%|######9   | 18/26 [00:00<00:00, 42.67it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.67it/s] 92%|#########2| 24/26 [00:00<00:00, 47.99it/s]100%|##########| 26/26 [00:00<00:00, 40.17it/s]
Test: [   0/  26]	Loss 0.357 (0.357)	test_acc   0.83 (  0.83)	test_minacc   0.03 (  0.03)	test_majacc   0.98 (  0.98)	Loss_d 0.357 (0.357)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.300 (0.355)	test_acc   0.88 (  0.85)	test_minacc   0.07 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.300 (0.355)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.07 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.94)
Test: [  20/  26]	Loss 0.372 (0.358)	test_acc   0.84 (  0.85)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.372 (0.358)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  26/  26]	Loss 0.404 (0.356)	test_acc   0.83 (  0.85)	test_minacc   0.13 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.404 (0.356)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.13 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.17it/s]
Test: [  0/  1]	Loss 1.606 (1.606)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   1.00 (  1.00)	Loss_d 1.606 (1.606)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.86 (  0.86)
Test: [  1/  1]	Loss 1.606 (1.606)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   1.00 (  1.00)	Loss_d 1.606 (1.606)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.86 (  0.86)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/63/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0356 (0.0420)	validation_time 0.0003 (0.0012)	train_time 0.0352 (0.0397)
record: (train_acc, test_acc) (0.8493000265955924, 0.15900000929832458)
last accs (train_acc, test_acc) (0.8493000265955924, 0.15900000929832458)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.99it/s] 19%|#9        | 5/26 [00:00<00:00, 23.76it/s] 35%|###4      | 9/26 [00:00<00:00, 29.11it/s] 50%|#####     | 13/26 [00:00<00:00, 31.43it/s] 65%|######5   | 17/26 [00:00<00:00, 32.76it/s] 81%|########  | 21/26 [00:00<00:00, 33.79it/s] 96%|#########6| 25/26 [00:00<00:00, 34.35it/s]100%|##########| 26/26 [00:00<00:00, 29.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.720 (0.743)	train_nll   0.41 (  0.36)	train_penalty   0.07 (  0.03)	weight_norm   0.31 (  0.38)	train_acc   0.82 (  0.85)	train_minacc   0.00 (  0.12)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 8.1515 (7.7705)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.90it/s] 31%|###       | 8/26 [00:00<00:00, 34.59it/s]                                               31%|###       | 8/26 [00:00<00:00, 34.59it/s] 54%|#####3    | 14/26 [00:00<00:00, 40.31it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.06it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.06it/s]100%|##########| 26/26 [00:00<00:00, 49.80it/s]100%|##########| 26/26 [00:00<00:00, 39.64it/s]
Test: [   0/  26]	Loss 0.342 (0.342)	test_acc   0.84 (  0.84)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.342 (0.342)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.294 (0.346)	test_acc   0.88 (  0.85)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.294 (0.346)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.93)
Test: [  20/  26]	Loss 0.365 (0.350)	test_acc   0.84 (  0.85)	test_minacc   0.03 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.365 (0.350)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.03 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.387 (0.348)	test_acc   0.83 (  0.85)	test_minacc   0.07 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.387 (0.348)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.07 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.91 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.53it/s]
Test: [  0/  1]	Loss 1.493 (1.493)	test_acc   0.17 (  0.17)	test_minacc   0.07 (  0.07)	test_majacc   1.00 (  1.00)	Loss_d 1.493 (1.493)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.07 (  0.07)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.82 (  0.82)
Test: [  1/  1]	Loss 1.493 (1.493)	test_acc   0.17 (  0.17)	test_minacc   0.07 (  0.07)	test_majacc   1.00 (  1.00)	Loss_d 1.493 (1.493)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.07 (  0.07)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.82 (  0.82)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/63/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0354 (0.0412)	validation_time 0.0004 (0.0011)	train_time 0.0350 (0.0391)
record: (train_acc, test_acc) (0.8512000206708908, 0.16700001060962677)
last accs (train_acc, test_acc) (0.8512000206708908, 0.16700001060962677)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.72it/s] 19%|#9        | 5/26 [00:00<00:00, 23.22it/s] 35%|###4      | 9/26 [00:00<00:00, 28.32it/s] 50%|#####     | 13/26 [00:00<00:00, 31.02it/s] 65%|######5   | 17/26 [00:00<00:00, 32.45it/s] 81%|########  | 21/26 [00:00<00:00, 33.65it/s] 96%|#########6| 25/26 [00:00<00:00, 33.85it/s]100%|##########| 26/26 [00:00<00:00, 29.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.651 (0.607)	train_nll   0.44 (  0.35)	train_penalty   0.07 (  0.03)	weight_norm   0.21 (  0.26)	train_acc   0.82 (  0.85)	train_minacc   0.07 (  0.18)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 9.9515 (9.3420)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.32it/s] 27%|##6       | 7/26 [00:00<00:00, 36.16it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.16it/s] 50%|#####     | 13/26 [00:00<00:00, 41.59it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.90it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.90it/s] 96%|#########6| 25/26 [00:00<00:00, 47.80it/s]100%|##########| 26/26 [00:00<00:00, 40.35it/s]
Test: [   0/  26]	Loss 0.354 (0.354)	test_acc   0.84 (  0.84)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.354 (0.354)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.289 (0.348)	test_acc   0.89 (  0.85)	test_minacc   0.17 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 0.289 (0.348)	test_acc_d   0.89 (  0.85)	test_minacc_d   0.17 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.93)
Test: [  20/  26]	Loss 0.366 (0.350)	test_acc   0.85 (  0.85)	test_minacc   0.15 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 0.366 (0.350)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.15 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  26/  26]	Loss 0.396 (0.347)	test_acc   0.83 (  0.86)	test_minacc   0.11 (  0.12)	test_majacc   0.99 (  0.99)	Loss_d 0.396 (0.347)	test_acc_d   0.83 (  0.86)	test_minacc_d   0.11 (  0.12)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.93it/s]
Test: [  0/  1]	Loss 1.539 (1.539)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   1.00 (  1.00)	Loss_d 1.539 (1.539)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.85 (  0.85)
Test: [  1/  1]	Loss 1.539 (1.539)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   1.00 (  1.00)	Loss_d 1.539 (1.539)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.85 (  0.85)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/63/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0360 (0.0406)	validation_time 0.0003 (0.0010)	train_time 0.0356 (0.0387)
record: (train_acc, test_acc) (0.8552000274062157, 0.1810000091791153)
last accs (train_acc, test_acc) (0.8552000274062157, 0.1810000091791153)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.12it/s] 19%|#9        | 5/26 [00:00<00:00, 21.83it/s] 35%|###4      | 9/26 [00:00<00:00, 27.34it/s] 50%|#####     | 13/26 [00:00<00:00, 30.05it/s] 65%|######5   | 17/26 [00:00<00:00, 31.91it/s] 81%|########  | 21/26 [00:00<00:00, 33.11it/s] 96%|#########6| 25/26 [00:00<00:00, 33.38it/s]100%|##########| 26/26 [00:00<00:00, 28.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.601 (0.538)	train_nll   0.43 (  0.35)	train_penalty   0.08 (  0.03)	weight_norm   0.17 (  0.19)	train_acc   0.82 (  0.85)	train_minacc   0.11 (  0.17)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 11.2569 (10.6547)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.82it/s] 23%|##3       | 6/26 [00:00<00:00, 32.86it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.86it/s] 46%|####6     | 12/26 [00:00<00:00, 42.91it/s] 65%|######5   | 17/26 [00:00<00:00, 43.05it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.05it/s] 88%|########8 | 23/26 [00:00<00:00, 48.18it/s]100%|##########| 26/26 [00:00<00:00, 39.62it/s]
Test: [   0/  26]	Loss 0.346 (0.346)	test_acc   0.85 (  0.85)	test_minacc   0.08 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.346 (0.346)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.275 (0.343)	test_acc   0.89 (  0.85)	test_minacc   0.24 (  0.16)	test_majacc   0.98 (  0.98)	Loss_d 0.275 (0.343)	test_acc_d   0.89 (  0.85)	test_minacc_d   0.24 (  0.16)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.92)
Test: [  20/  26]	Loss 0.358 (0.345)	test_acc   0.85 (  0.85)	test_minacc   0.18 (  0.17)	test_majacc   0.98 (  0.98)	Loss_d 0.358 (0.345)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.18 (  0.17)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.399 (0.343)	test_acc   0.82 (  0.86)	test_minacc   0.11 (  0.17)	test_majacc   0.98 (  0.98)	Loss_d 0.399 (0.343)	test_acc_d   0.82 (  0.86)	test_minacc_d   0.11 (  0.17)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.87it/s]
Test: [  0/  1]	Loss 1.683 (1.683)	test_acc   0.20 (  0.20)	test_minacc   0.12 (  0.12)	test_majacc   0.99 (  0.99)	Loss_d 1.683 (1.683)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.83 (  0.83)
Test: [  1/  1]	Loss 1.683 (1.683)	test_acc   0.20 (  0.20)	test_minacc   0.12 (  0.12)	test_majacc   0.99 (  0.99)	Loss_d 1.683 (1.683)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.83 (  0.83)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/63/checkpoints/model_best.pth
Overall Timing[  9/  1]	epoch_time 0.0371 (0.0403)	validation_time 0.0004 (0.0010)	train_time 0.0367 (0.0385)
record: (train_acc, test_acc) (0.8559000226259231, 0.20400001108646393)
last accs (train_acc, test_acc) (0.8559000226259231, 0.20400001108646393)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.85it/s] 19%|#9        | 5/26 [00:00<00:00, 23.67it/s] 35%|###4      | 9/26 [00:00<00:00, 28.37it/s] 50%|#####     | 13/26 [00:00<00:00, 30.88it/s] 65%|######5   | 17/26 [00:00<00:00, 32.47it/s] 81%|########  | 21/26 [00:00<00:00, 33.36it/s] 96%|#########6| 25/26 [00:00<00:00, 33.47it/s]100%|##########| 26/26 [00:00<00:00, 29.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.574 (0.505)	train_nll   0.44 (  0.36)	train_penalty   0.08 (  0.03)	weight_norm   0.14 (  0.15)	train_acc   0.82 (  0.85)	train_minacc   0.02 (  0.15)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 12.2730 (11.9519)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.13it/s] 23%|##3       | 6/26 [00:00<00:00, 29.83it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.83it/s] 46%|####6     | 12/26 [00:00<00:00, 36.64it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.17it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.17it/s] 92%|#########2| 24/26 [00:00<00:00, 46.22it/s]100%|##########| 26/26 [00:00<00:00, 39.63it/s]
Test: [   0/  26]	Loss 0.356 (0.356)	test_acc   0.84 (  0.84)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.356 (0.356)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.295 (0.353)	test_acc   0.89 (  0.85)	test_minacc   0.11 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.295 (0.353)	test_acc_d   0.89 (  0.85)	test_minacc_d   0.11 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  20/  26]	Loss 0.373 (0.357)	test_acc   0.84 (  0.85)	test_minacc   0.05 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.373 (0.357)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.05 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  26/  26]	Loss 0.407 (0.355)	test_acc   0.82 (  0.85)	test_minacc   0.04 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.407 (0.355)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.04 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.09it/s]
Test: [  0/  1]	Loss 1.587 (1.587)	test_acc   0.15 (  0.15)	test_minacc   0.06 (  0.06)	test_majacc   0.98 (  0.98)	Loss_d 1.587 (1.587)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.88 (  0.88)
Test: [  1/  1]	Loss 1.587 (1.587)	test_acc   0.15 (  0.15)	test_minacc   0.06 (  0.06)	test_majacc   0.98 (  0.98)	Loss_d 1.587 (1.587)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.88 (  0.88)
Overall Timing[ 10/  1]	epoch_time 0.0365 (0.0399)	validation_time 0.0004 (0.0009)	train_time 0.0360 (0.0383)
record: (train_acc, test_acc) (0.8559000226259231, 0.20400001108646393)
last accs (train_acc, test_acc) (0.8516000236272812, 0.15000000596046448)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.25it/s] 19%|#9        | 5/26 [00:00<00:01, 19.85it/s] 35%|###4      | 9/26 [00:00<00:00, 26.39it/s] 50%|#####     | 13/26 [00:00<00:00, 29.52it/s] 65%|######5   | 17/26 [00:00<00:00, 30.84it/s] 81%|########  | 21/26 [00:00<00:00, 32.46it/s] 96%|#########6| 25/26 [00:00<00:00, 33.32it/s]100%|##########| 26/26 [00:00<00:00, 27.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.535 (0.478)	train_nll   0.42 (  0.35)	train_penalty   0.07 (  0.03)	weight_norm   0.11 (  0.13)	train_acc   0.83 (  0.85)	train_minacc   0.11 (  0.16)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 14.0417 (13.2654)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.69it/s] 27%|##6       | 7/26 [00:00<00:00, 35.07it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.07it/s] 50%|#####     | 13/26 [00:00<00:00, 40.79it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.69it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.69it/s] 96%|#########6| 25/26 [00:00<00:00, 46.92it/s]100%|##########| 26/26 [00:00<00:00, 39.08it/s]
Test: [   0/  26]	Loss 0.329 (0.329)	test_acc   0.85 (  0.85)	test_minacc   0.06 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.329 (0.329)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.261 (0.328)	test_acc   0.91 (  0.85)	test_minacc   0.24 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 0.261 (0.328)	test_acc_d   0.91 (  0.85)	test_minacc_d   0.24 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.92)
Test: [  20/  26]	Loss 0.348 (0.330)	test_acc   0.86 (  0.86)	test_minacc   0.13 (  0.13)	test_majacc   0.99 (  0.99)	Loss_d 0.348 (0.330)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.92)
Test: [  26/  26]	Loss 0.387 (0.329)	test_acc   0.84 (  0.86)	test_minacc   0.16 (  0.13)	test_majacc   0.99 (  0.99)	Loss_d 0.387 (0.329)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.16 (  0.13)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.35it/s]
Test: [  0/  1]	Loss 1.558 (1.558)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.99 (  0.99)	Loss_d 1.558 (1.558)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.75 (  0.75)
Test: [  1/  1]	Loss 1.558 (1.558)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.99 (  0.99)	Loss_d 1.558 (1.558)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.75 (  0.75)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/63/checkpoints/model_best.pth
Overall Timing[ 11/  1]	epoch_time 0.0378 (0.0397)	validation_time 0.0003 (0.0009)	train_time 0.0374 (0.0382)
record: (train_acc, test_acc) (0.8583000288009643, 0.23000000417232513)
last accs (train_acc, test_acc) (0.8583000288009643, 0.23000000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.59it/s] 19%|#9        | 5/26 [00:00<00:00, 24.13it/s] 35%|###4      | 9/26 [00:00<00:00, 28.23it/s] 50%|#####     | 13/26 [00:00<00:00, 30.68it/s] 65%|######5   | 17/26 [00:00<00:00, 32.50it/s] 81%|########  | 21/26 [00:00<00:00, 33.59it/s] 96%|#########6| 25/26 [00:00<00:00, 34.54it/s]100%|##########| 26/26 [00:00<00:00, 29.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.516 (0.456)	train_nll   0.41 (  0.35)	train_penalty   0.06 (  0.03)	weight_norm   0.10 (  0.11)	train_acc   0.83 (  0.85)	train_minacc   0.07 (  0.18)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 15.0035 (14.6239)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.38it/s] 27%|##6       | 7/26 [00:00<00:00, 33.66it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.66it/s] 50%|#####     | 13/26 [00:00<00:00, 40.36it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.04it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.04it/s] 96%|#########6| 25/26 [00:00<00:00, 47.25it/s]100%|##########| 26/26 [00:00<00:00, 39.87it/s]
Test: [   0/  26]	Loss 0.315 (0.315)	test_acc   0.85 (  0.85)	test_minacc   0.23 (  0.23)	test_majacc   0.97 (  0.97)	Loss_d 0.315 (0.315)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.290 (0.328)	test_acc   0.91 (  0.86)	test_minacc   0.37 (  0.24)	test_majacc   0.98 (  0.97)	Loss_d 0.290 (0.328)	test_acc_d   0.91 (  0.86)	test_minacc_d   0.37 (  0.24)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.89 (  0.88)
Test: [  20/  26]	Loss 0.338 (0.329)	test_acc   0.86 (  0.86)	test_minacc   0.21 (  0.24)	test_majacc   0.98 (  0.97)	Loss_d 0.338 (0.329)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.21 (  0.24)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.89 (  0.88)
Test: [  26/  26]	Loss 0.379 (0.328)	test_acc   0.84 (  0.86)	test_minacc   0.27 (  0.24)	test_majacc   0.97 (  0.97)	Loss_d 0.379 (0.328)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.27 (  0.24)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.88 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.54it/s]
Test: [  0/  1]	Loss 1.399 (1.399)	test_acc   0.29 (  0.29)	test_minacc   0.21 (  0.21)	test_majacc   0.98 (  0.98)	Loss_d 1.399 (1.399)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.64 (  0.64)
Test: [  1/  1]	Loss 1.399 (1.399)	test_acc   0.29 (  0.29)	test_minacc   0.21 (  0.21)	test_majacc   0.98 (  0.98)	Loss_d 1.399 (1.399)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.64 (  0.64)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/63/checkpoints/model_best.pth
Overall Timing[ 12/  1]	epoch_time 0.0357 (0.0394)	validation_time 0.0004 (0.0008)	train_time 0.0353 (0.0380)
record: (train_acc, test_acc) (0.8633000229001045, 0.289000004529953)
last accs (train_acc, test_acc) (0.8633000229001045, 0.289000004529953)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.36it/s] 19%|#9        | 5/26 [00:00<00:00, 22.55it/s] 35%|###4      | 9/26 [00:00<00:00, 27.84it/s] 50%|#####     | 13/26 [00:00<00:00, 30.67it/s] 65%|######5   | 17/26 [00:00<00:00, 32.02it/s] 81%|########  | 21/26 [00:00<00:00, 33.10it/s] 96%|#########6| 25/26 [00:00<00:00, 33.99it/s]100%|##########| 26/26 [00:00<00:00, 28.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.535 (0.440)	train_nll   0.44 (  0.35)	train_penalty   0.10 (  0.03)	weight_norm   0.10 (  0.09)	train_acc   0.82 (  0.85)	train_minacc   0.09 (  0.20)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 15.8373 (15.5414)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.85it/s] 27%|##6       | 7/26 [00:00<00:00, 32.94it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.94it/s] 50%|#####     | 13/26 [00:00<00:00, 39.82it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.60it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.60it/s] 96%|#########6| 25/26 [00:00<00:00, 47.39it/s]100%|##########| 26/26 [00:00<00:00, 39.20it/s]
Test: [   0/  26]	Loss 0.353 (0.353)	test_acc   0.84 (  0.84)	test_minacc   0.10 (  0.10)	test_majacc   0.98 (  0.98)	Loss_d 0.353 (0.353)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.270 (0.342)	test_acc   0.89 (  0.86)	test_minacc   0.20 (  0.15)	test_majacc   0.99 (  0.98)	Loss_d 0.270 (0.342)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.20 (  0.15)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.360 (0.344)	test_acc   0.86 (  0.86)	test_minacc   0.18 (  0.17)	test_majacc   0.98 (  0.98)	Loss_d 0.360 (0.344)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.18 (  0.17)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  26/  26]	Loss 0.399 (0.342)	test_acc   0.83 (  0.86)	test_minacc   0.11 (  0.17)	test_majacc   0.99 (  0.98)	Loss_d 0.399 (0.342)	test_acc_d   0.83 (  0.86)	test_minacc_d   0.11 (  0.17)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.92 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.54it/s]
Test: [  0/  1]	Loss 1.646 (1.646)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.99 (  0.99)	Loss_d 1.646 (1.646)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.81 (  0.81)
Test: [  1/  1]	Loss 1.646 (1.646)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.99 (  0.99)	Loss_d 1.646 (1.646)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.81 (  0.81)
Overall Timing[ 13/  1]	epoch_time 0.0350 (0.0391)	validation_time 0.0003 (0.0008)	train_time 0.0347 (0.0378)
record: (train_acc, test_acc) (0.8633000229001045, 0.289000004529953)
last accs (train_acc, test_acc) (0.8603000260591507, 0.22100001573562622)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.25it/s] 15%|#5        | 4/26 [00:00<00:01, 17.15it/s] 31%|###       | 8/26 [00:00<00:00, 24.36it/s] 46%|####6     | 12/26 [00:00<00:00, 28.12it/s] 62%|######1   | 16/26 [00:00<00:00, 30.73it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.97it/s] 92%|#########2| 24/26 [00:00<00:00, 33.06it/s]100%|##########| 26/26 [00:00<00:00, 27.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.495 (0.431)	train_nll   0.41 (  0.34)	train_penalty   0.06 (  0.03)	weight_norm   0.08 (  0.09)	train_acc   0.82 (  0.85)	train_minacc   0.04 (  0.24)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 16.5720 (16.3069)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.92it/s] 31%|###       | 8/26 [00:00<00:00, 41.45it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.45it/s] 50%|#####     | 13/26 [00:00<00:00, 42.30it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.14it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.14it/s] 96%|#########6| 25/26 [00:00<00:00, 48.86it/s]100%|##########| 26/26 [00:00<00:00, 41.84it/s]
Test: [   0/  26]	Loss 0.329 (0.329)	test_acc   0.84 (  0.84)	test_minacc   0.08 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.329 (0.329)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.261 (0.323)	test_acc   0.91 (  0.86)	test_minacc   0.24 (  0.16)	test_majacc   0.99 (  0.98)	Loss_d 0.261 (0.323)	test_acc_d   0.91 (  0.86)	test_minacc_d   0.24 (  0.16)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.93 (  0.92)
Test: [  20/  26]	Loss 0.343 (0.324)	test_acc   0.86 (  0.86)	test_minacc   0.21 (  0.17)	test_majacc   0.98 (  0.98)	Loss_d 0.343 (0.324)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.21 (  0.17)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.92)
Test: [  26/  26]	Loss 0.369 (0.323)	test_acc   0.83 (  0.86)	test_minacc   0.16 (  0.17)	test_majacc   0.98 (  0.98)	Loss_d 0.369 (0.323)	test_acc_d   0.83 (  0.86)	test_minacc_d   0.16 (  0.17)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.10it/s]
Test: [  0/  1]	Loss 1.483 (1.483)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.99 (  0.99)	Loss_d 1.483 (1.483)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.77 (  0.77)
Test: [  1/  1]	Loss 1.483 (1.483)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.99 (  0.99)	Loss_d 1.483 (1.483)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.77 (  0.77)
Overall Timing[ 14/  1]	epoch_time 0.0362 (0.0389)	validation_time 0.0003 (0.0008)	train_time 0.0359 (0.0376)
record: (train_acc, test_acc) (0.8633000229001045, 0.289000004529953)
last accs (train_acc, test_acc) (0.8620000200271607, 0.22300000488758087)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.46it/s] 19%|#9        | 5/26 [00:00<00:01, 20.69it/s] 35%|###4      | 9/26 [00:00<00:00, 25.56it/s] 50%|#####     | 13/26 [00:00<00:00, 28.87it/s] 65%|######5   | 17/26 [00:00<00:00, 30.88it/s] 81%|########  | 21/26 [00:00<00:00, 32.56it/s] 96%|#########6| 25/26 [00:00<00:00, 33.89it/s]100%|##########| 26/26 [00:00<00:00, 28.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.000 (0.168)	train_nll   0.65 (  0.44)	train_penalty   0.00 (  0.01)	weight_norm   0.11 (  0.09)	train_acc   0.66 (  0.79)	train_minacc   0.49 (  0.45)	train_majacc   0.70 (  0.85)	train_corr   0.00 (  0.00)	l1 16.9045 (16.8578)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.18it/s] 23%|##3       | 6/26 [00:00<00:00, 32.20it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.20it/s] 42%|####2     | 11/26 [00:00<00:00, 39.60it/s] 65%|######5   | 17/26 [00:00<00:00, 43.64it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.64it/s] 88%|########8 | 23/26 [00:00<00:00, 48.68it/s]100%|##########| 26/26 [00:00<00:00, 39.69it/s]
Test: [   0/  26]	Loss 0.644 (0.644)	test_acc   0.58 (  0.58)	test_minacc   0.58 (  0.58)	test_majacc   0.58 (  0.58)	Loss_d 0.644 (0.644)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.648 (0.633)	test_acc   0.58 (  0.63)	test_minacc   0.39 (  0.58)	test_majacc   0.60 (  0.64)	Loss_d 0.648 (0.633)	test_acc_d   0.58 (  0.63)	test_minacc_d   0.39 (  0.58)	test_majacc_d   0.60 (  0.64)	test_corr_d   0.34 (  0.34)
Test: [  20/  26]	Loss 0.631 (0.635)	test_acc   0.66 (  0.62)	test_minacc   0.52 (  0.56)	test_majacc   0.68 (  0.64)	Loss_d 0.631 (0.635)	test_acc_d   0.66 (  0.62)	test_minacc_d   0.52 (  0.56)	test_majacc_d   0.68 (  0.64)	test_corr_d   0.32 (  0.34)
Test: [  26/  26]	Loss 0.671 (0.637)	test_acc   0.57 (  0.62)	test_minacc   0.47 (  0.55)	test_majacc   0.59 (  0.63)	Loss_d 0.671 (0.637)	test_acc_d   0.57 (  0.62)	test_minacc_d   0.47 (  0.55)	test_majacc_d   0.59 (  0.63)	test_corr_d   0.31 (  0.34)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.26it/s]
Test: [  0/  1]	Loss 0.666 (0.666)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.60 (  0.60)	Loss_d 0.666 (0.666)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.26 ( -0.26)
Test: [  1/  1]	Loss 0.666 (0.666)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.60 (  0.60)	Loss_d 0.666 (0.666)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.26 ( -0.26)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/63/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0359 (0.0387)	validation_time 0.0004 (0.0007)	train_time 0.0356 (0.0375)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.22it/s] 15%|#5        | 4/26 [00:00<00:01, 19.24it/s] 31%|###       | 8/26 [00:00<00:00, 25.76it/s] 46%|####6     | 12/26 [00:00<00:00, 29.40it/s] 62%|######1   | 16/26 [00:00<00:00, 31.28it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.37it/s] 92%|#########2| 24/26 [00:00<00:00, 32.97it/s]100%|##########| 26/26 [00:00<00:00, 28.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.001)	train_nll   0.69 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.13)	train_acc   0.47 (  0.54)	train_minacc   0.44 (  0.54)	train_majacc   0.48 (  0.54)	train_corr   0.00 (  0.00)	l1 16.6434 (16.7446)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.80it/s] 23%|##3       | 6/26 [00:00<00:00, 30.97it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.97it/s] 42%|####2     | 11/26 [00:00<00:00, 39.21it/s] 65%|######5   | 17/26 [00:00<00:00, 44.29it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.29it/s] 88%|########8 | 23/26 [00:00<00:00, 47.64it/s]100%|##########| 26/26 [00:00<00:00, 39.44it/s]
Test: [   0/  26]	Loss 0.680 (0.680)	test_acc   0.49 (  0.49)	test_minacc   0.61 (  0.61)	test_majacc   0.46 (  0.46)	Loss_d 0.680 (0.680)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.684 (0.673)	test_acc   0.48 (  0.52)	test_minacc   0.48 (  0.59)	test_majacc   0.48 (  0.51)	Loss_d 0.684 (0.673)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.48 (  0.59)	test_majacc_d   0.48 (  0.51)	test_corr_d   0.17 (  0.21)
Test: [  20/  26]	Loss 0.672 (0.674)	test_acc   0.54 (  0.52)	test_minacc   0.61 (  0.56)	test_majacc   0.52 (  0.51)	Loss_d 0.672 (0.674)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.61 (  0.56)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.15 (  0.21)
Test: [  26/  26]	Loss 0.684 (0.675)	test_acc   0.49 (  0.51)	test_minacc   0.51 (  0.56)	test_majacc   0.48 (  0.51)	Loss_d 0.684 (0.675)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.51 (  0.56)	test_majacc_d   0.48 (  0.51)	test_corr_d   0.18 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.64it/s]
Test: [  0/  1]	Loss 0.677 (0.677)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.47 (  0.47)	Loss_d 0.677 (0.677)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.22 ( -0.22)
Test: [  1/  1]	Loss 0.677 (0.677)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.47 (  0.47)	Loss_d 0.677 (0.677)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.22 ( -0.22)
Overall Timing[ 16/  1]	epoch_time 0.0369 (0.0386)	validation_time 0.0004 (0.0007)	train_time 0.0365 (0.0374)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5136000105142593, 0.5240000486373901)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.16it/s] 19%|#9        | 5/26 [00:00<00:00, 22.15it/s] 35%|###4      | 9/26 [00:00<00:00, 27.55it/s] 50%|#####     | 13/26 [00:00<00:00, 30.38it/s] 65%|######5   | 17/26 [00:00<00:00, 31.87it/s] 81%|########  | 21/26 [00:00<00:00, 32.99it/s] 96%|#########6| 25/26 [00:00<00:00, 33.70it/s]100%|##########| 26/26 [00:00<00:00, 28.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.51 (  0.53)	train_minacc   0.53 (  0.57)	train_majacc   0.50 (  0.53)	train_corr   0.00 (  0.00)	l1 16.5849 (16.6083)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.22it/s] 35%|###4      | 9/26 [00:00<00:00, 40.67it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.67it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.84it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.84it/s] 81%|########  | 21/26 [00:00<00:00, 48.27it/s]100%|##########| 26/26 [00:00<00:00, 43.62it/s]
Test: [   0/  26]	Loss 0.697 (0.697)	test_acc   0.53 (  0.53)	test_minacc   0.56 (  0.56)	test_majacc   0.53 (  0.53)	Loss_d 0.697 (0.697)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.699 (0.694)	test_acc   0.53 (  0.55)	test_minacc   0.50 (  0.58)	test_majacc   0.54 (  0.54)	Loss_d 0.699 (0.694)	test_acc_d   0.53 (  0.55)	test_minacc_d   0.50 (  0.58)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.05 ( -0.01)
Test: [  20/  26]	Loss 0.694 (0.695)	test_acc   0.55 (  0.54)	test_minacc   0.68 (  0.55)	test_majacc   0.53 (  0.54)	Loss_d 0.694 (0.695)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.68 (  0.55)	test_majacc_d   0.53 (  0.54)	test_corr_d  -0.11 ( -0.01)
Test: [  26/  26]	Loss 0.694 (0.695)	test_acc   0.52 (  0.54)	test_minacc   0.53 (  0.55)	test_majacc   0.51 (  0.54)	Loss_d 0.694 (0.695)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.53 (  0.55)	test_majacc_d   0.51 (  0.54)	test_corr_d   0.00 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.97it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.60 (  0.60)	Loss_d 0.696 (0.696)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.60 (  0.60)	Loss_d 0.696 (0.696)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.06 (  0.06)
Overall Timing[ 17/  1]	epoch_time 0.0361 (0.0385)	validation_time 0.0003 (0.0007)	train_time 0.0357 (0.0373)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5381000159978867, 0.5520000457763672)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.55it/s] 19%|#9        | 5/26 [00:00<00:00, 23.48it/s] 35%|###4      | 9/26 [00:00<00:00, 28.34it/s] 50%|#####     | 13/26 [00:00<00:00, 30.16it/s] 65%|######5   | 17/26 [00:00<00:00, 31.86it/s] 81%|########  | 21/26 [00:00<00:00, 33.11it/s] 96%|#########6| 25/26 [00:00<00:00, 33.97it/s]100%|##########| 26/26 [00:00<00:00, 28.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.54 (  0.54)	train_minacc   0.56 (  0.54)	train_majacc   0.54 (  0.54)	train_corr   0.00 (  0.00)	l1 16.5736 (16.5774)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.71it/s] 31%|###       | 8/26 [00:00<00:00, 38.10it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.10it/s] 50%|#####     | 13/26 [00:00<00:00, 41.20it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.62it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.62it/s] 96%|#########6| 25/26 [00:00<00:00, 46.19it/s]100%|##########| 26/26 [00:00<00:00, 39.53it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.695 (0.692)	test_acc   0.51 (  0.53)	test_minacc   0.48 (  0.52)	test_majacc   0.51 (  0.53)	Loss_d 0.695 (0.692)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.48 (  0.52)	test_majacc_d   0.51 (  0.53)	test_corr_d  -0.03 (  0.03)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.52)	test_minacc   0.71 (  0.51)	test_majacc   0.51 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.71 (  0.51)	test_majacc_d   0.51 (  0.52)	test_corr_d  -0.07 (  0.02)
Test: [  26/  26]	Loss 0.691 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.58 (  0.50)	test_majacc   0.55 (  0.52)	Loss_d 0.691 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.02 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.76it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 18/  1]	epoch_time 0.0357 (0.0383)	validation_time 0.0004 (0.0007)	train_time 0.0353 (0.0372)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5199000139832497, 0.5070000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.28it/s] 19%|#9        | 5/26 [00:00<00:00, 25.04it/s] 35%|###4      | 9/26 [00:00<00:00, 30.35it/s] 50%|#####     | 13/26 [00:00<00:00, 32.80it/s] 65%|######5   | 17/26 [00:00<00:00, 34.41it/s] 81%|########  | 21/26 [00:00<00:00, 35.64it/s] 96%|#########6| 25/26 [00:00<00:00, 35.46it/s]100%|##########| 26/26 [00:00<00:00, 30.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.55 (  0.52)	train_minacc   0.56 (  0.50)	train_majacc   0.55 (  0.52)	train_corr   0.00 (  0.00)	l1 16.5711 (16.5722)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.42it/s] 31%|###       | 8/26 [00:00<00:00, 37.54it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.54it/s] 50%|#####     | 13/26 [00:00<00:00, 40.29it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.33it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.33it/s] 96%|#########6| 25/26 [00:00<00:00, 47.72it/s]100%|##########| 26/26 [00:00<00:00, 39.46it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.695 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.52)	Loss_d 0.695 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.05 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.65 (  0.50)	test_majacc   0.50 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.65 (  0.50)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.08 (  0.01)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.51)	test_minacc   0.56 (  0.49)	test_majacc   0.55 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.56 (  0.49)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.00 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.07it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 19/  1]	epoch_time 0.0361 (0.0382)	validation_time 0.0003 (0.0007)	train_time 0.0357 (0.0372)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5072000124156475, 0.503000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.66it/s] 19%|#9        | 5/26 [00:00<00:00, 24.40it/s] 35%|###4      | 9/26 [00:00<00:00, 28.96it/s] 50%|#####     | 13/26 [00:00<00:00, 30.60it/s] 65%|######5   | 17/26 [00:00<00:00, 32.18it/s] 81%|########  | 21/26 [00:00<00:00, 33.44it/s] 96%|#########6| 25/26 [00:00<00:00, 34.34it/s]100%|##########| 26/26 [00:00<00:00, 29.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.55 (  0.51)	train_minacc   0.56 (  0.49)	train_majacc   0.55 (  0.52)	train_corr   0.00 (  0.00)	l1 16.5697 (16.5704)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.88it/s] 31%|###       | 8/26 [00:00<00:00, 40.96it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.96it/s] 50%|#####     | 13/26 [00:00<00:00, 39.68it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.93it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.93it/s] 96%|#########6| 25/26 [00:00<00:00, 46.55it/s]100%|##########| 26/26 [00:00<00:00, 40.56it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.695 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.48 (  0.49)	test_majacc   0.51 (  0.52)	Loss_d 0.695 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.51 (  0.52)	test_corr_d  -0.06 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.68 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.68 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.07 (  0.01)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.51)	test_minacc   0.56 (  0.49)	test_majacc   0.55 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.56 (  0.49)	test_majacc_d   0.55 (  0.51)	test_corr_d  -0.01 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.10it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 20/  1]	epoch_time 0.0350 (0.0381)	validation_time 0.0003 (0.0006)	train_time 0.0347 (0.0370)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5067000099122524, 0.5040000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.49it/s] 19%|#9        | 5/26 [00:00<00:00, 22.19it/s] 35%|###4      | 9/26 [00:00<00:00, 27.57it/s] 50%|#####     | 13/26 [00:00<00:00, 30.65it/s] 65%|######5   | 17/26 [00:00<00:00, 32.42it/s] 81%|########  | 21/26 [00:00<00:00, 33.57it/s] 96%|#########6| 25/26 [00:00<00:00, 34.32it/s]100%|##########| 26/26 [00:00<00:00, 29.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.54 (  0.51)	train_minacc   0.56 (  0.50)	train_majacc   0.54 (  0.52)	train_corr   0.00 (  0.00)	l1 16.5684 (16.5690)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.87it/s] 23%|##3       | 6/26 [00:00<00:00, 32.63it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.63it/s] 42%|####2     | 11/26 [00:00<00:00, 39.02it/s] 65%|######5   | 17/26 [00:00<00:00, 42.53it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.53it/s] 88%|########8 | 23/26 [00:00<00:00, 47.34it/s]100%|##########| 26/26 [00:00<00:00, 39.12it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.695 (0.693)	test_acc   0.50 (  0.52)	test_minacc   0.48 (  0.50)	test_majacc   0.50 (  0.52)	Loss_d 0.695 (0.693)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.06 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.68 (  0.50)	test_majacc   0.50 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.68 (  0.50)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.07 (  0.01)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.56 (  0.49)	test_majacc   0.54 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.56 (  0.49)	test_majacc_d   0.54 (  0.51)	test_corr_d  -0.01 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.93it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 21/  1]	epoch_time 0.0359 (0.0380)	validation_time 0.0003 (0.0006)	train_time 0.0355 (0.0370)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5080000140666961, 0.5080000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.09it/s] 19%|#9        | 5/26 [00:00<00:01, 20.67it/s] 35%|###4      | 9/26 [00:00<00:00, 25.29it/s] 50%|#####     | 13/26 [00:00<00:00, 28.36it/s] 65%|######5   | 17/26 [00:00<00:00, 30.34it/s] 81%|########  | 21/26 [00:00<00:00, 31.94it/s] 96%|#########6| 25/26 [00:00<00:00, 33.01it/s]100%|##########| 26/26 [00:00<00:00, 27.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.14 (  0.14)	train_acc   0.54 (  0.51)	train_minacc   0.56 (  0.50)	train_majacc   0.53 (  0.52)	train_corr   0.00 (  0.00)	l1 16.5672 (16.5678)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.98it/s] 31%|###       | 8/26 [00:00<00:00, 38.38it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.38it/s] 54%|#####3    | 14/26 [00:00<00:00, 42.82it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.37it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.37it/s]100%|##########| 26/26 [00:00<00:00, 51.68it/s]100%|##########| 26/26 [00:00<00:00, 41.85it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.695 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.48 (  0.50)	test_majacc   0.50 (  0.52)	Loss_d 0.695 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.07 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.68 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.68 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.07 (  0.01)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.56 (  0.49)	test_majacc   0.53 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.56 (  0.49)	test_majacc_d   0.53 (  0.51)	test_corr_d  -0.01 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.72it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 22/  1]	epoch_time 0.0355 (0.0379)	validation_time 0.0004 (0.0006)	train_time 0.0351 (0.0369)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5103000113964081, 0.503000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.08it/s] 15%|#5        | 4/26 [00:00<00:01, 17.41it/s] 31%|###       | 8/26 [00:00<00:00, 25.15it/s] 46%|####6     | 12/26 [00:00<00:00, 29.12it/s] 62%|######1   | 16/26 [00:00<00:00, 31.72it/s] 77%|#######6  | 20/26 [00:00<00:00, 33.22it/s] 92%|#########2| 24/26 [00:00<00:00, 33.51it/s]100%|##########| 26/26 [00:00<00:00, 27.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 393 tensor(-0.0184, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
Epoch: [23][  26/  26]	Loss 0.001 (0.008)	train_nll   0.71 (  0.71)	train_penalty   0.00 (  0.01)	weight_norm   0.19 (  0.16)	train_acc   0.47 (  0.52)	train_minacc   0.42 (  0.50)	train_majacc   0.48 (  0.52)	train_corr   0.00 (  0.00)	l1 14.8265 (15.1987)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.18it/s] 27%|##6       | 7/26 [00:00<00:00, 35.70it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.70it/s] 50%|#####     | 13/26 [00:00<00:00, 42.02it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.58it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.58it/s] 96%|#########6| 25/26 [00:00<00:00, 47.44it/s]100%|##########| 26/26 [00:00<00:00, 39.49it/s]
Test: [   0/  26]	Loss 0.698 (0.698)	test_acc   0.48 (  0.48)	test_minacc   0.56 (  0.56)	test_majacc   0.47 (  0.47)	Loss_d 0.698 (0.698)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.27 (  0.27)
Test: [  10/  26]	Loss 0.703 (0.690)	test_acc   0.47 (  0.51)	test_minacc   0.35 (  0.53)	test_majacc   0.48 (  0.50)	Loss_d 0.703 (0.690)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.35 (  0.53)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.26 (  0.29)
Test: [  20/  26]	Loss 0.686 (0.690)	test_acc   0.52 (  0.50)	test_minacc   0.48 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.686 (0.690)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.34 (  0.29)
Test: [  26/  26]	Loss 0.704 (0.692)	test_acc   0.47 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.48 (  0.50)	Loss_d 0.704 (0.692)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.33 (  0.30)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.56it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 23/  1]	epoch_time 0.0375 (0.0379)	validation_time 0.0005 (0.0006)	train_time 0.0370 (0.0369)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5000000087022781, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.50it/s] 19%|#9        | 5/26 [00:00<00:00, 23.41it/s] 35%|###4      | 9/26 [00:00<00:00, 28.43it/s] 50%|#####     | 13/26 [00:00<00:00, 31.10it/s] 65%|######5   | 17/26 [00:00<00:00, 32.66it/s] 81%|########  | 21/26 [00:00<00:00, 33.62it/s] 96%|#########6| 25/26 [00:00<00:00, 34.18it/s]100%|##########| 26/26 [00:00<00:00, 29.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.49 (  0.54)	train_minacc   0.42 (  0.52)	train_majacc   0.51 (  0.54)	train_corr   0.00 (  0.00)	l1 14.5404 (14.6255)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.66it/s] 31%|###       | 8/26 [00:00<00:00, 40.42it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.42it/s] 50%|#####     | 13/26 [00:00<00:00, 42.12it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.43it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.43it/s] 96%|#########6| 25/26 [00:00<00:00, 48.48it/s]100%|##########| 26/26 [00:00<00:00, 41.72it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.52 (  0.52)	test_minacc   0.58 (  0.58)	test_majacc   0.51 (  0.51)	Loss_d 0.688 (0.688)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.26 (  0.26)
Test: [  10/  26]	Loss 0.691 (0.681)	test_acc   0.51 (  0.54)	test_minacc   0.39 (  0.55)	test_majacc   0.52 (  0.54)	Loss_d 0.691 (0.681)	test_acc_d   0.51 (  0.54)	test_minacc_d   0.39 (  0.55)	test_majacc_d   0.52 (  0.54)	test_corr_d   0.28 (  0.28)
Test: [  20/  26]	Loss 0.677 (0.682)	test_acc   0.54 (  0.54)	test_minacc   0.48 (  0.52)	test_majacc   0.55 (  0.54)	Loss_d 0.677 (0.682)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.48 (  0.52)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.37 (  0.28)
Test: [  26/  26]	Loss 0.697 (0.683)	test_acc   0.49 (  0.53)	test_minacc   0.42 (  0.52)	test_majacc   0.51 (  0.53)	Loss_d 0.697 (0.683)	test_acc_d   0.49 (  0.53)	test_minacc_d   0.42 (  0.52)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.29 (  0.28)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.79it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 24/  1]	epoch_time 0.0361 (0.0378)	validation_time 0.0003 (0.0006)	train_time 0.0358 (0.0369)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5315000170469284, 0.5110000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.31it/s] 27%|##6       | 7/26 [00:00<00:00, 28.02it/s] 42%|####2     | 11/26 [00:00<00:00, 30.34it/s] 58%|#####7    | 15/26 [00:00<00:00, 31.34it/s] 73%|#######3  | 19/26 [00:00<00:00, 32.34it/s] 88%|########8 | 23/26 [00:00<00:00, 33.32it/s]100%|##########| 26/26 [00:00<00:00, 30.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.48 (  0.53)	train_minacc   0.38 (  0.52)	train_majacc   0.50 (  0.53)	train_corr   0.00 (  0.00)	l1 14.4807 (14.5069)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.56it/s] 31%|###       | 8/26 [00:00<00:00, 39.45it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.45it/s] 50%|#####     | 13/26 [00:00<00:00, 39.81it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.35it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.35it/s] 96%|#########6| 25/26 [00:00<00:00, 46.70it/s]100%|##########| 26/26 [00:00<00:00, 40.71it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.58 (  0.58)	test_majacc   0.49 (  0.49)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.694 (0.685)	test_acc   0.50 (  0.53)	test_minacc   0.39 (  0.55)	test_majacc   0.51 (  0.53)	Loss_d 0.694 (0.685)	test_acc_d   0.50 (  0.53)	test_minacc_d   0.39 (  0.55)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.24 (  0.24)
Test: [  20/  26]	Loss 0.681 (0.686)	test_acc   0.54 (  0.53)	test_minacc   0.48 (  0.52)	test_majacc   0.55 (  0.53)	Loss_d 0.681 (0.686)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.48 (  0.52)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.33 (  0.24)
Test: [  26/  26]	Loss 0.697 (0.687)	test_acc   0.48 (  0.52)	test_minacc   0.38 (  0.51)	test_majacc   0.50 (  0.52)	Loss_d 0.697 (0.687)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.38 (  0.51)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.26 (  0.25)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.46it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 25/  1]	epoch_time 0.0365 (0.0377)	validation_time 0.0003 (0.0006)	train_time 0.0362 (0.0368)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5219000189006329, 0.5090000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.45it/s] 19%|#9        | 5/26 [00:00<00:00, 21.20it/s] 35%|###4      | 9/26 [00:00<00:00, 27.07it/s] 50%|#####     | 13/26 [00:00<00:00, 30.11it/s] 65%|######5   | 17/26 [00:00<00:00, 31.62it/s] 81%|########  | 21/26 [00:00<00:00, 32.64it/s] 96%|#########6| 25/26 [00:00<00:00, 32.86it/s]100%|##########| 26/26 [00:00<00:00, 28.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.48 (  0.52)	train_minacc   0.38 (  0.51)	train_majacc   0.50 (  0.52)	train_corr   0.00 (  0.00)	l1 14.4434 (14.4584)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.00it/s] 31%|###       | 8/26 [00:00<00:00, 33.67it/s]                                               31%|###       | 8/26 [00:00<00:00, 33.67it/s] 50%|#####     | 13/26 [00:00<00:00, 37.83it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.11it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.11it/s] 96%|#########6| 25/26 [00:00<00:00, 45.90it/s]100%|##########| 26/26 [00:00<00:00, 37.26it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.58 (  0.58)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.694 (0.687)	test_acc   0.49 (  0.53)	test_minacc   0.37 (  0.55)	test_majacc   0.51 (  0.52)	Loss_d 0.694 (0.687)	test_acc_d   0.49 (  0.53)	test_minacc_d   0.37 (  0.55)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.21 (  0.22)
Test: [  20/  26]	Loss 0.684 (0.687)	test_acc   0.54 (  0.52)	test_minacc   0.48 (  0.52)	test_majacc   0.55 (  0.52)	Loss_d 0.684 (0.687)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.48 (  0.52)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.30 (  0.22)
Test: [  26/  26]	Loss 0.697 (0.688)	test_acc   0.48 (  0.52)	test_minacc   0.38 (  0.51)	test_majacc   0.50 (  0.52)	Loss_d 0.697 (0.688)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.38 (  0.51)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.25 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.77it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 26/  1]	epoch_time 0.0348 (0.0376)	validation_time 0.0003 (0.0006)	train_time 0.0345 (0.0367)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5189000167548656, 0.5110000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.68it/s] 19%|#9        | 5/26 [00:00<00:01, 20.40it/s] 35%|###4      | 9/26 [00:00<00:00, 25.63it/s] 50%|#####     | 13/26 [00:00<00:00, 29.19it/s] 65%|######5   | 17/26 [00:00<00:00, 30.72it/s] 81%|########  | 21/26 [00:00<00:00, 31.70it/s] 96%|#########6| 25/26 [00:00<00:00, 32.66it/s]100%|##########| 26/26 [00:00<00:00, 27.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.48 (  0.52)	train_minacc   0.38 (  0.51)	train_majacc   0.50 (  0.52)	train_corr   0.00 (  0.00)	l1 14.4222 (14.4314)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.51it/s] 23%|##3       | 6/26 [00:00<00:00, 32.76it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.76it/s] 42%|####2     | 11/26 [00:00<00:00, 40.21it/s] 65%|######5   | 17/26 [00:00<00:00, 43.65it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.65it/s] 88%|########8 | 23/26 [00:00<00:00, 48.44it/s]100%|##########| 26/26 [00:00<00:00, 39.87it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.56 (  0.56)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.695 (0.689)	test_acc   0.49 (  0.52)	test_minacc   0.37 (  0.54)	test_majacc   0.50 (  0.52)	Loss_d 0.695 (0.689)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.37 (  0.54)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.18 (  0.19)
Test: [  20/  26]	Loss 0.687 (0.689)	test_acc   0.53 (  0.52)	test_minacc   0.48 (  0.52)	test_majacc   0.54 (  0.52)	Loss_d 0.687 (0.689)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.48 (  0.52)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.26 (  0.19)
Test: [  26/  26]	Loss 0.696 (0.690)	test_acc   0.48 (  0.51)	test_minacc   0.38 (  0.51)	test_majacc   0.50 (  0.52)	Loss_d 0.696 (0.690)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.38 (  0.51)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.23 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.98it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 27/  1]	epoch_time 0.0382 (0.0376)	validation_time 0.0004 (0.0006)	train_time 0.0378 (0.0368)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5143000110089779, 0.5100000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.41it/s] 19%|#9        | 5/26 [00:00<00:01, 20.72it/s] 35%|###4      | 9/26 [00:00<00:00, 26.16it/s] 50%|#####     | 13/26 [00:00<00:00, 29.22it/s] 65%|######5   | 17/26 [00:00<00:00, 31.50it/s] 81%|########  | 21/26 [00:00<00:00, 32.70it/s] 96%|#########6| 25/26 [00:00<00:00, 32.93it/s]100%|##########| 26/26 [00:00<00:00, 27.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.47 (  0.51)	train_minacc   0.40 (  0.51)	train_majacc   0.49 (  0.51)	train_corr   0.00 (  0.00)	l1 14.4087 (14.4145)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.89it/s] 27%|##6       | 7/26 [00:00<00:00, 35.06it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.06it/s] 50%|#####     | 13/26 [00:00<00:00, 40.92it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.29it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.29it/s] 96%|#########6| 25/26 [00:00<00:00, 47.66it/s]100%|##########| 26/26 [00:00<00:00, 40.08it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.56 (  0.56)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.13 (  0.13)
Test: [  10/  26]	Loss 0.695 (0.690)	test_acc   0.48 (  0.52)	test_minacc   0.37 (  0.54)	test_majacc   0.50 (  0.51)	Loss_d 0.695 (0.690)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.37 (  0.54)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.14 (  0.15)
Test: [  20/  26]	Loss 0.688 (0.690)	test_acc   0.53 (  0.52)	test_minacc   0.48 (  0.51)	test_majacc   0.54 (  0.52)	Loss_d 0.688 (0.690)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.48 (  0.51)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.21 (  0.15)
Test: [  26/  26]	Loss 0.696 (0.691)	test_acc   0.48 (  0.51)	test_minacc   0.40 (  0.51)	test_majacc   0.49 (  0.51)	Loss_d 0.696 (0.691)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.40 (  0.51)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.22 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.24it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 28/  1]	epoch_time 0.0364 (0.0376)	validation_time 0.0003 (0.0006)	train_time 0.0360 (0.0368)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5122000088095665, 0.5080000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.47it/s] 19%|#9        | 5/26 [00:00<00:01, 20.04it/s] 35%|###4      | 9/26 [00:00<00:00, 25.95it/s] 50%|#####     | 13/26 [00:00<00:00, 29.71it/s] 65%|######5   | 17/26 [00:00<00:00, 31.94it/s] 81%|########  | 21/26 [00:00<00:00, 33.45it/s] 96%|#########6| 25/26 [00:00<00:00, 34.17it/s]100%|##########| 26/26 [00:00<00:00, 28.08it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.47 (  0.51)	train_minacc   0.40 (  0.51)	train_majacc   0.49 (  0.51)	train_corr   0.00 (  0.00)	l1 14.4007 (14.4041)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.50it/s] 31%|###       | 8/26 [00:00<00:00, 34.94it/s]                                               31%|###       | 8/26 [00:00<00:00, 34.94it/s] 50%|#####     | 13/26 [00:00<00:00, 39.39it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.04it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.04it/s] 96%|#########6| 25/26 [00:00<00:00, 46.64it/s]100%|##########| 26/26 [00:00<00:00, 38.66it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.56 (  0.56)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.695 (0.691)	test_acc   0.48 (  0.52)	test_minacc   0.37 (  0.54)	test_majacc   0.49 (  0.51)	Loss_d 0.695 (0.691)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.37 (  0.54)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.10 (  0.11)
Test: [  20/  26]	Loss 0.690 (0.691)	test_acc   0.53 (  0.51)	test_minacc   0.48 (  0.51)	test_majacc   0.54 (  0.52)	Loss_d 0.690 (0.691)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.48 (  0.51)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.15 (  0.11)
Test: [  26/  26]	Loss 0.695 (0.692)	test_acc   0.47 (  0.51)	test_minacc   0.40 (  0.51)	test_majacc   0.49 (  0.51)	Loss_d 0.695 (0.692)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.40 (  0.51)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.20 (  0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.16it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 29/  1]	epoch_time 0.0361 (0.0376)	validation_time 0.0003 (0.0006)	train_time 0.0358 (0.0367)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.510700012922287, 0.5049999952316284)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.76it/s] 19%|#9        | 5/26 [00:00<00:00, 21.30it/s] 35%|###4      | 9/26 [00:00<00:00, 26.46it/s] 50%|#####     | 13/26 [00:00<00:00, 29.28it/s] 62%|######1   | 16/26 [00:00<00:00, 28.64it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.35it/s] 92%|#########2| 24/26 [00:00<00:00, 31.37it/s]100%|##########| 26/26 [00:00<00:00, 26.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.47 (  0.51)	train_minacc   0.40 (  0.51)	train_majacc   0.48 (  0.51)	train_corr   0.00 (  0.00)	l1 14.3962 (14.3981)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.14it/s] 23%|##3       | 6/26 [00:00<00:00, 30.17it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.17it/s] 42%|####2     | 11/26 [00:00<00:00, 36.14it/s] 65%|######5   | 17/26 [00:00<00:00, 44.26it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.26it/s] 88%|########8 | 23/26 [00:00<00:00, 45.63it/s]100%|##########| 26/26 [00:00<00:00, 39.60it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.56 (  0.56)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.695 (0.692)	test_acc   0.48 (  0.52)	test_minacc   0.37 (  0.54)	test_majacc   0.49 (  0.51)	Loss_d 0.695 (0.692)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.37 (  0.54)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.05 (  0.07)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.53 (  0.51)	test_minacc   0.50 (  0.52)	test_majacc   0.54 (  0.51)	Loss_d 0.691 (0.692)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.09 (  0.07)
Test: [  26/  26]	Loss 0.695 (0.692)	test_acc   0.47 (  0.51)	test_minacc   0.40 (  0.51)	test_majacc   0.48 (  0.51)	Loss_d 0.695 (0.692)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.40 (  0.51)	test_majacc_d   0.48 (  0.51)	test_corr_d   0.17 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.84it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 30/  1]	epoch_time 0.0371 (0.0375)	validation_time 0.0004 (0.0006)	train_time 0.0367 (0.0367)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5090000081658363, 0.5040000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.94it/s] 19%|#9        | 5/26 [00:00<00:01, 19.44it/s] 35%|###4      | 9/26 [00:00<00:00, 25.40it/s] 50%|#####     | 13/26 [00:00<00:00, 28.92it/s] 65%|######5   | 17/26 [00:00<00:00, 30.08it/s] 81%|########  | 21/26 [00:00<00:00, 31.28it/s] 96%|#########6| 25/26 [00:00<00:00, 31.82it/s]100%|##########| 26/26 [00:00<00:00, 26.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.46 (  0.51)	train_minacc   0.42 (  0.52)	train_majacc   0.47 (  0.51)	train_corr   0.00 (  0.00)	l1 14.3937 (14.3947)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.35it/s] 27%|##6       | 7/26 [00:00<00:00, 29.94it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.94it/s] 50%|#####     | 13/26 [00:00<00:00, 38.13it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.09it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.09it/s] 96%|#########6| 25/26 [00:00<00:00, 46.65it/s]100%|##########| 26/26 [00:00<00:00, 37.71it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.58 (  0.58)	test_majacc   0.46 (  0.46)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.695 (0.692)	test_acc   0.48 (  0.52)	test_minacc   0.37 (  0.56)	test_majacc   0.49 (  0.51)	Loss_d 0.695 (0.692)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.37 (  0.56)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.02 (  0.03)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.52)	test_minacc   0.52 (  0.53)	test_majacc   0.54 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.52 (  0.53)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.04 (  0.03)
Test: [  26/  26]	Loss 0.694 (0.692)	test_acc   0.47 (  0.51)	test_minacc   0.42 (  0.53)	test_majacc   0.48 (  0.51)	Loss_d 0.694 (0.692)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.42 (  0.53)	test_majacc_d   0.48 (  0.51)	test_corr_d   0.15 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.21it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 31/  1]	epoch_time 0.0366 (0.0375)	validation_time 0.0003 (0.0005)	train_time 0.0363 (0.0367)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5130000104606152, 0.5170000195503235)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.40it/s] 19%|#9        | 5/26 [00:00<00:01, 20.93it/s] 35%|###4      | 9/26 [00:00<00:00, 25.94it/s] 50%|#####     | 13/26 [00:00<00:00, 28.77it/s] 65%|######5   | 17/26 [00:00<00:00, 31.02it/s] 81%|########  | 21/26 [00:00<00:00, 32.73it/s] 96%|#########6| 25/26 [00:00<00:00, 33.73it/s]100%|##########| 26/26 [00:00<00:00, 28.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.50 (  0.52)	train_minacc   0.42 (  0.54)	train_majacc   0.52 (  0.52)	train_corr   0.00 (  0.00)	l1 14.3923 (14.3929)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.50it/s] 27%|##6       | 7/26 [00:00<00:00, 37.66it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.66it/s] 50%|#####     | 13/26 [00:00<00:00, 42.59it/s] 77%|#######6  | 20/26 [00:00<00:00, 50.38it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 50.38it/s]100%|##########| 26/26 [00:00<00:00, 49.98it/s]100%|##########| 26/26 [00:00<00:00, 41.28it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.60 (  0.60)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.694 (0.692)	test_acc   0.48 (  0.53)	test_minacc   0.37 (  0.57)	test_majacc   0.50 (  0.53)	Loss_d 0.694 (0.692)	test_acc_d   0.48 (  0.53)	test_minacc_d   0.37 (  0.57)	test_majacc_d   0.50 (  0.53)	test_corr_d  -0.01 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.52 (  0.54)	test_majacc   0.55 (  0.53)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.52 (  0.54)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.00 (  0.00)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.50 (  0.53)	test_minacc   0.42 (  0.54)	test_majacc   0.52 (  0.53)	Loss_d 0.694 (0.693)	test_acc_d   0.50 (  0.53)	test_minacc_d   0.42 (  0.54)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.13 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.99it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.49 (  0.49)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.49 (  0.49)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 32/  1]	epoch_time 0.0366 (0.0375)	validation_time 0.0003 (0.0005)	train_time 0.0362 (0.0367)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5280000113248825, 0.5330000519752502)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.34it/s] 19%|#9        | 5/26 [00:00<00:00, 22.65it/s] 35%|###4      | 9/26 [00:00<00:00, 28.17it/s] 50%|#####     | 13/26 [00:00<00:00, 30.78it/s] 65%|######5   | 17/26 [00:00<00:00, 32.15it/s] 81%|########  | 21/26 [00:00<00:00, 33.24it/s] 96%|#########6| 25/26 [00:00<00:00, 34.03it/s]100%|##########| 26/26 [00:00<00:00, 28.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.50 (  0.53)	train_minacc   0.40 (  0.54)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 14.3916 (14.3919)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.19it/s] 23%|##3       | 6/26 [00:00<00:00, 30.60it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.60it/s] 50%|#####     | 13/26 [00:00<00:00, 43.34it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.86it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.86it/s] 96%|#########6| 25/26 [00:00<00:00, 49.32it/s]100%|##########| 26/26 [00:00<00:00, 41.05it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.60 (  0.60)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.54)	test_minacc   0.41 (  0.57)	test_majacc   0.51 (  0.54)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.54)	test_minacc_d   0.41 (  0.57)	test_majacc_d   0.51 (  0.54)	test_corr_d  -0.03 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.54)	test_minacc   0.53 (  0.56)	test_majacc   0.56 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.53 (  0.56)	test_majacc_d   0.56 (  0.54)	test_corr_d  -0.02 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.54)	test_minacc   0.40 (  0.55)	test_majacc   0.53 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.54)	test_minacc_d   0.40 (  0.55)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.12 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.60it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 33/  1]	epoch_time 0.0352 (0.0374)	validation_time 0.0003 (0.0005)	train_time 0.0348 (0.0366)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5409000128805638, 0.5400000214576721)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.35it/s] 19%|#9        | 5/26 [00:00<00:00, 22.20it/s] 35%|###4      | 9/26 [00:00<00:00, 27.80it/s] 50%|#####     | 13/26 [00:00<00:00, 30.71it/s] 65%|######5   | 17/26 [00:00<00:00, 32.45it/s] 81%|########  | 21/26 [00:00<00:00, 33.60it/s] 96%|#########6| 25/26 [00:00<00:00, 34.42it/s]100%|##########| 26/26 [00:00<00:00, 29.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.50 (  0.54)	train_minacc   0.38 (  0.55)	train_majacc   0.53 (  0.54)	train_corr   0.00 (  0.00)	l1 14.3912 (14.3914)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.34it/s] 27%|##6       | 7/26 [00:00<00:00, 30.07it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.07it/s] 50%|#####     | 13/26 [00:00<00:00, 37.37it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.53it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.53it/s] 96%|#########6| 25/26 [00:00<00:00, 46.17it/s]100%|##########| 26/26 [00:00<00:00, 37.49it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.60 (  0.60)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.51 (  0.55)	test_minacc   0.43 (  0.58)	test_majacc   0.52 (  0.54)	Loss_d 0.694 (0.693)	test_acc_d   0.51 (  0.55)	test_minacc_d   0.43 (  0.58)	test_majacc_d   0.52 (  0.54)	test_corr_d  -0.03 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.55)	test_minacc   0.53 (  0.56)	test_majacc   0.56 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.53 (  0.56)	test_majacc_d   0.56 (  0.55)	test_corr_d  -0.03 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.54)	test_minacc   0.38 (  0.55)	test_majacc   0.53 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.54)	test_minacc_d   0.38 (  0.55)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.12 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.21it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 34/  1]	epoch_time 0.0354 (0.0374)	validation_time 0.0005 (0.0005)	train_time 0.0349 (0.0366)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5448000079989433, 0.5440000295639038)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.58it/s] 19%|#9        | 5/26 [00:00<00:01, 19.36it/s] 35%|###4      | 9/26 [00:00<00:00, 25.90it/s] 50%|#####     | 13/26 [00:00<00:00, 29.51it/s] 65%|######5   | 17/26 [00:00<00:00, 31.70it/s] 81%|########  | 21/26 [00:00<00:00, 33.16it/s] 96%|#########6| 25/26 [00:00<00:00, 33.09it/s]100%|##########| 26/26 [00:00<00:00, 27.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.51 (  0.54)	train_minacc   0.38 (  0.55)	train_majacc   0.54 (  0.54)	train_corr   0.00 (  0.00)	l1 14.3908 (14.3910)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.41it/s] 23%|##3       | 6/26 [00:00<00:00, 32.37it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.37it/s] 46%|####6     | 12/26 [00:00<00:00, 42.60it/s] 65%|######5   | 17/26 [00:00<00:00, 42.97it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.97it/s] 88%|########8 | 23/26 [00:00<00:00, 47.99it/s]100%|##########| 26/26 [00:00<00:00, 39.48it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.53 (  0.53)	test_minacc   0.56 (  0.56)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.52 (  0.55)	test_minacc   0.46 (  0.58)	test_majacc   0.53 (  0.54)	Loss_d 0.694 (0.693)	test_acc_d   0.52 (  0.55)	test_minacc_d   0.46 (  0.58)	test_majacc_d   0.53 (  0.54)	test_corr_d  -0.04 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.55)	test_minacc   0.52 (  0.56)	test_majacc   0.57 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.52 (  0.56)	test_majacc_d   0.57 (  0.55)	test_corr_d  -0.04 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.55)	test_minacc   0.38 (  0.55)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.55)	test_minacc_d   0.38 (  0.55)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.11 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.05it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 35/  1]	epoch_time 0.0359 (0.0373)	validation_time 0.0003 (0.0005)	train_time 0.0355 (0.0366)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5458000199794769, 0.5480000376701355)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.37it/s] 19%|#9        | 5/26 [00:00<00:01, 18.59it/s] 35%|###4      | 9/26 [00:00<00:00, 24.63it/s] 50%|#####     | 13/26 [00:00<00:00, 28.01it/s] 65%|######5   | 17/26 [00:00<00:00, 30.35it/s] 81%|########  | 21/26 [00:00<00:00, 31.82it/s] 96%|#########6| 25/26 [00:00<00:00, 32.75it/s]100%|##########| 26/26 [00:00<00:00, 26.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.51 (  0.54)	train_minacc   0.40 (  0.55)	train_majacc   0.54 (  0.54)	train_corr   0.00 (  0.00)	l1 14.3905 (14.3907)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.36it/s] 23%|##3       | 6/26 [00:00<00:00, 28.47it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.47it/s] 42%|####2     | 11/26 [00:00<00:00, 36.98it/s] 65%|######5   | 17/26 [00:00<00:00, 45.17it/s]                                                65%|######5   | 17/26 [00:00<00:00, 45.17it/s] 85%|########4 | 22/26 [00:00<00:00, 45.30it/s]100%|##########| 26/26 [00:00<00:00, 39.61it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.53 (  0.53)	test_minacc   0.61 (  0.61)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.52 (  0.54)	test_minacc   0.48 (  0.58)	test_majacc   0.52 (  0.54)	Loss_d 0.694 (0.693)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.48 (  0.58)	test_majacc_d   0.52 (  0.54)	test_corr_d  -0.04 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.54)	test_minacc   0.48 (  0.55)	test_majacc   0.56 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.48 (  0.55)	test_majacc_d   0.56 (  0.54)	test_corr_d  -0.05 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.54)	test_minacc   0.40 (  0.55)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.54)	test_minacc_d   0.40 (  0.55)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.11 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.76it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 36/  1]	epoch_time 0.0359 (0.0373)	validation_time 0.0004 (0.0005)	train_time 0.0356 (0.0365)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.539300018042326, 0.5470000505447388)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.71it/s] 19%|#9        | 5/26 [00:00<00:00, 21.86it/s] 35%|###4      | 9/26 [00:00<00:00, 27.10it/s] 50%|#####     | 13/26 [00:00<00:00, 30.11it/s] 65%|######5   | 17/26 [00:00<00:00, 31.88it/s] 81%|########  | 21/26 [00:00<00:00, 33.02it/s] 96%|#########6| 25/26 [00:00<00:00, 32.52it/s]100%|##########| 26/26 [00:00<00:00, 28.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.52 (  0.54)	train_minacc   0.44 (  0.55)	train_majacc   0.54 (  0.54)	train_corr   0.00 (  0.00)	l1 14.3902 (14.3903)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.99it/s] 27%|##6       | 7/26 [00:00<00:00, 35.96it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.96it/s] 50%|#####     | 13/26 [00:00<00:00, 41.62it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.63it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.63it/s] 96%|#########6| 25/26 [00:00<00:00, 47.34it/s]100%|##########| 26/26 [00:00<00:00, 40.21it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.53 (  0.53)	test_minacc   0.63 (  0.63)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.51 (  0.54)	test_minacc   0.48 (  0.57)	test_majacc   0.52 (  0.53)	Loss_d 0.694 (0.693)	test_acc_d   0.51 (  0.54)	test_minacc_d   0.48 (  0.57)	test_majacc_d   0.52 (  0.53)	test_corr_d  -0.04 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.54)	test_minacc   0.50 (  0.55)	test_majacc   0.56 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.50 (  0.55)	test_majacc_d   0.56 (  0.53)	test_corr_d  -0.05 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.53)	test_minacc   0.44 (  0.54)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.44 (  0.54)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.12 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.18it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 37/  1]	epoch_time 0.0363 (0.0373)	validation_time 0.0003 (0.0005)	train_time 0.0359 (0.0365)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5340000106394291, 0.5410000085830688)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.12it/s] 15%|#5        | 4/26 [00:00<00:01, 18.52it/s] 31%|###       | 8/26 [00:00<00:00, 25.31it/s] 46%|####6     | 12/26 [00:00<00:00, 29.05it/s] 62%|######1   | 16/26 [00:00<00:00, 30.74it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.19it/s] 92%|#########2| 24/26 [00:00<00:00, 32.43it/s]100%|##########| 26/26 [00:00<00:00, 27.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.54 (  0.53)	train_minacc   0.49 (  0.55)	train_majacc   0.55 (  0.53)	train_corr   0.00 (  0.00)	l1 14.3898 (14.3900)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.56it/s] 27%|##6       | 7/26 [00:00<00:00, 31.96it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.96it/s] 50%|#####     | 13/26 [00:00<00:00, 39.95it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.21it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.21it/s] 96%|#########6| 25/26 [00:00<00:00, 46.52it/s]100%|##########| 26/26 [00:00<00:00, 38.54it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.53 (  0.53)	test_minacc   0.61 (  0.61)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.51 (  0.53)	test_minacc   0.48 (  0.56)	test_majacc   0.51 (  0.53)	Loss_d 0.694 (0.693)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.48 (  0.56)	test_majacc_d   0.51 (  0.53)	test_corr_d  -0.04 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.50 (  0.55)	test_majacc   0.55 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.50 (  0.55)	test_majacc_d   0.55 (  0.53)	test_corr_d  -0.05 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.49 (  0.54)	test_majacc   0.55 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.49 (  0.54)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.12 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.46it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 38/  1]	epoch_time 0.0365 (0.0372)	validation_time 0.0004 (0.0005)	train_time 0.0361 (0.0365)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.528900014936924, 0.5450000166893005)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.23it/s] 23%|##3       | 6/26 [00:00<00:00, 25.92it/s] 38%|###8      | 10/26 [00:00<00:00, 29.90it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.04it/s] 69%|######9   | 18/26 [00:00<00:00, 33.14it/s] 85%|########4 | 22/26 [00:00<00:00, 33.86it/s]100%|##########| 26/26 [00:00<00:00, 34.12it/s]100%|##########| 26/26 [00:00<00:00, 29.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.55 (  0.53)	train_minacc   0.51 (  0.55)	train_majacc   0.56 (  0.52)	train_corr   0.00 (  0.00)	l1 14.3895 (14.3897)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.75it/s] 27%|##6       | 7/26 [00:00<00:00, 38.39it/s]                                               27%|##6       | 7/26 [00:00<00:00, 38.39it/s] 50%|#####     | 13/26 [00:00<00:00, 42.33it/s] 77%|#######6  | 20/26 [00:00<00:00, 50.69it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 50.69it/s]100%|##########| 26/26 [00:00<00:00, 50.24it/s]100%|##########| 26/26 [00:00<00:00, 41.84it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.61 (  0.61)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.51 (  0.53)	test_minacc   0.52 (  0.56)	test_majacc   0.51 (  0.52)	Loss_d 0.694 (0.693)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.52 (  0.56)	test_majacc_d   0.51 (  0.52)	test_corr_d  -0.03 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.48 (  0.54)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.48 (  0.54)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.05 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.51 (  0.54)	test_majacc   0.56 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.51 (  0.54)	test_majacc_d   0.56 (  0.52)	test_corr_d   0.12 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.82it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 39/  1]	epoch_time 0.0373 (0.0372)	validation_time 0.0004 (0.0005)	train_time 0.0369 (0.0365)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5235000123977661, 0.5400000214576721)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.28it/s] 19%|#9        | 5/26 [00:00<00:00, 21.57it/s] 35%|###4      | 9/26 [00:00<00:00, 26.23it/s] 50%|#####     | 13/26 [00:00<00:00, 29.02it/s] 65%|######5   | 17/26 [00:00<00:00, 30.37it/s] 81%|########  | 21/26 [00:00<00:00, 31.40it/s] 96%|#########6| 25/26 [00:00<00:00, 32.54it/s]100%|##########| 26/26 [00:00<00:00, 27.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.54 (  0.52)	train_minacc   0.51 (  0.54)	train_majacc   0.55 (  0.52)	train_corr   0.00 (  0.00)	l1 14.3891 (14.3893)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.31it/s] 31%|###       | 8/26 [00:00<00:00, 40.81it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.81it/s] 50%|#####     | 13/26 [00:00<00:00, 42.24it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.22it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.22it/s] 96%|#########6| 25/26 [00:00<00:00, 48.31it/s]100%|##########| 26/26 [00:00<00:00, 41.65it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.60 (  0.60)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.50 (  0.52)	test_minacc   0.52 (  0.55)	test_majacc   0.50 (  0.52)	Loss_d 0.694 (0.693)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.52 (  0.55)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.03 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.47 (  0.53)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.47 (  0.53)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.05 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.51 (  0.53)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.12 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.83it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 40/  1]	epoch_time 0.0363 (0.0372)	validation_time 0.0004 (0.0005)	train_time 0.0359 (0.0365)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5220000111162663, 0.5380000472068787)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.57it/s] 19%|#9        | 5/26 [00:00<00:00, 23.82it/s] 35%|###4      | 9/26 [00:00<00:00, 27.87it/s] 50%|#####     | 13/26 [00:00<00:00, 29.40it/s] 65%|######5   | 17/26 [00:00<00:00, 31.54it/s] 81%|########  | 21/26 [00:00<00:00, 32.91it/s] 96%|#########6| 25/26 [00:00<00:00, 33.28it/s]100%|##########| 26/26 [00:00<00:00, 28.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.54 (  0.52)	train_minacc   0.51 (  0.53)	train_majacc   0.55 (  0.52)	train_corr   0.00 (  0.00)	l1 14.3888 (14.3889)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.95it/s] 27%|##6       | 7/26 [00:00<00:00, 32.66it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.66it/s] 50%|#####     | 13/26 [00:00<00:00, 40.55it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.95it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.95it/s] 96%|#########6| 25/26 [00:00<00:00, 47.36it/s]100%|##########| 26/26 [00:00<00:00, 39.66it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.61 (  0.61)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.50 (  0.54)	test_majacc   0.49 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.50 (  0.54)	test_majacc_d   0.49 (  0.52)	test_corr_d  -0.03 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.45 (  0.53)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.45 (  0.53)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.05 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.51 (  0.53)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.13 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.87it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 41/  1]	epoch_time 0.0368 (0.0372)	validation_time 0.0003 (0.0005)	train_time 0.0365 (0.0365)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5207000123560429, 0.534000039100647)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.43it/s] 19%|#9        | 5/26 [00:00<00:00, 21.50it/s] 35%|###4      | 9/26 [00:00<00:00, 26.49it/s] 50%|#####     | 13/26 [00:00<00:00, 29.13it/s] 65%|######5   | 17/26 [00:00<00:00, 30.86it/s] 81%|########  | 21/26 [00:00<00:00, 32.06it/s] 96%|#########6| 25/26 [00:00<00:00, 32.38it/s]100%|##########| 26/26 [00:00<00:00, 27.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.55 (  0.52)	train_minacc   0.51 (  0.53)	train_majacc   0.56 (  0.52)	train_corr   0.00 (  0.00)	l1 14.3884 (14.3886)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.18it/s] 23%|##3       | 6/26 [00:00<00:00, 30.30it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.30it/s] 46%|####6     | 12/26 [00:00<00:00, 42.30it/s] 69%|######9   | 18/26 [00:00<00:00, 44.67it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.67it/s] 92%|#########2| 24/26 [00:00<00:00, 49.01it/s]100%|##########| 26/26 [00:00<00:00, 40.21it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.61 (  0.61)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.52)	test_minacc   0.50 (  0.54)	test_majacc   0.48 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.50 (  0.54)	test_majacc_d   0.48 (  0.52)	test_corr_d  -0.03 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.45 (  0.53)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.45 (  0.53)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.04 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.51 (  0.53)	test_majacc   0.56 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.56 (  0.52)	test_corr_d   0.13 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.44it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 42/  1]	epoch_time 0.0361 (0.0372)	validation_time 0.0004 (0.0005)	train_time 0.0358 (0.0365)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5204000114202499, 0.5300000309944153)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.78it/s] 19%|#9        | 5/26 [00:00<00:01, 19.39it/s] 35%|###4      | 9/26 [00:00<00:00, 25.70it/s] 50%|#####     | 13/26 [00:00<00:00, 29.08it/s] 65%|######5   | 17/26 [00:00<00:00, 31.10it/s] 81%|########  | 21/26 [00:00<00:00, 32.23it/s] 96%|#########6| 25/26 [00:00<00:00, 32.94it/s]100%|##########| 26/26 [00:00<00:00, 27.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.55 (  0.52)	train_minacc   0.51 (  0.53)	train_majacc   0.56 (  0.52)	train_corr   0.00 (  0.00)	l1 14.3880 (14.3882)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.38it/s] 27%|##6       | 7/26 [00:00<00:00, 34.07it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.07it/s] 50%|#####     | 13/26 [00:00<00:00, 40.33it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.87it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.87it/s] 96%|#########6| 25/26 [00:00<00:00, 46.82it/s]100%|##########| 26/26 [00:00<00:00, 39.15it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.60 (  0.60)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.52)	test_minacc   0.50 (  0.54)	test_majacc   0.47 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.50 (  0.54)	test_majacc_d   0.47 (  0.51)	test_corr_d  -0.03 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.45 (  0.53)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.45 (  0.53)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.04 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.51 (  0.53)	test_majacc   0.56 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.56 (  0.52)	test_corr_d   0.13 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.45it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 43/  1]	epoch_time 0.0364 (0.0372)	validation_time 0.0003 (0.0005)	train_time 0.0360 (0.0365)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5194000114798546, 0.5270000100135803)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.64it/s] 19%|#9        | 5/26 [00:00<00:01, 18.75it/s] 35%|###4      | 9/26 [00:00<00:00, 24.93it/s] 50%|#####     | 13/26 [00:00<00:00, 28.73it/s] 65%|######5   | 17/26 [00:00<00:00, 30.93it/s] 81%|########  | 21/26 [00:00<00:00, 31.99it/s] 96%|#########6| 25/26 [00:00<00:00, 32.93it/s]100%|##########| 26/26 [00:00<00:00, 27.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.55 (  0.52)	train_minacc   0.51 (  0.53)	train_majacc   0.56 (  0.52)	train_corr   0.00 (  0.00)	l1 14.3876 (14.3878)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.03it/s] 27%|##6       | 7/26 [00:00<00:00, 34.50it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.50it/s] 50%|#####     | 13/26 [00:00<00:00, 39.77it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.42it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.42it/s] 96%|#########6| 25/26 [00:00<00:00, 47.02it/s]100%|##########| 26/26 [00:00<00:00, 40.16it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.60 (  0.60)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.52)	test_minacc   0.50 (  0.53)	test_majacc   0.48 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.50 (  0.53)	test_majacc_d   0.48 (  0.51)	test_corr_d  -0.03 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.45 (  0.53)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.45 (  0.53)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.04 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.51 (  0.53)	test_majacc   0.56 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.56 (  0.52)	test_corr_d   0.13 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.22it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 44/  1]	epoch_time 0.0365 (0.0371)	validation_time 0.0003 (0.0005)	train_time 0.0361 (0.0365)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5195000137984752, 0.5250000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.23it/s] 19%|#9        | 5/26 [00:00<00:00, 24.30it/s] 35%|###4      | 9/26 [00:00<00:00, 28.59it/s] 50%|#####     | 13/26 [00:00<00:00, 30.61it/s] 65%|######5   | 17/26 [00:00<00:00, 31.28it/s] 81%|########  | 21/26 [00:00<00:00, 32.30it/s] 96%|#########6| 25/26 [00:00<00:00, 33.11it/s]100%|##########| 26/26 [00:00<00:00, 28.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.55 (  0.52)	train_minacc   0.51 (  0.53)	train_majacc   0.56 (  0.52)	train_corr   0.00 (  0.00)	l1 14.3873 (14.3874)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.97it/s] 27%|##6       | 7/26 [00:00<00:00, 35.36it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.36it/s] 50%|#####     | 13/26 [00:00<00:00, 39.89it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.11it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.11it/s] 96%|#########6| 25/26 [00:00<00:00, 46.54it/s]100%|##########| 26/26 [00:00<00:00, 39.68it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.60 (  0.60)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.52)	test_minacc   0.50 (  0.53)	test_majacc   0.48 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.50 (  0.53)	test_majacc_d   0.48 (  0.51)	test_corr_d  -0.02 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.45 (  0.52)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.45 (  0.52)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.04 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.51 (  0.53)	test_majacc   0.56 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.56 (  0.52)	test_corr_d   0.13 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.56it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 45/  1]	epoch_time 0.0373 (0.0371)	validation_time 0.0004 (0.0005)	train_time 0.0369 (0.0365)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5189000115096569, 0.5270000100135803)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.77it/s] 19%|#9        | 5/26 [00:00<00:00, 24.51it/s] 35%|###4      | 9/26 [00:00<00:00, 29.68it/s] 50%|#####     | 13/26 [00:00<00:00, 32.34it/s] 65%|######5   | 17/26 [00:00<00:00, 33.53it/s] 81%|########  | 21/26 [00:00<00:00, 34.50it/s] 96%|#########6| 25/26 [00:00<00:00, 34.61it/s]100%|##########| 26/26 [00:00<00:00, 30.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.20)	train_acc   0.55 (  0.52)	train_minacc   0.51 (  0.53)	train_majacc   0.56 (  0.52)	train_corr   0.00 (  0.00)	l1 14.3869 (14.3871)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.66it/s] 35%|###4      | 9/26 [00:00<00:00, 40.91it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.91it/s] 54%|#####3    | 14/26 [00:00<00:00, 42.34it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.18it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.18it/s]100%|##########| 26/26 [00:00<00:00, 51.20it/s]100%|##########| 26/26 [00:00<00:00, 42.58it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.60 (  0.60)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.52)	test_minacc   0.50 (  0.53)	test_majacc   0.48 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.50 (  0.53)	test_majacc_d   0.48 (  0.51)	test_corr_d  -0.02 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.45 (  0.52)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.45 (  0.52)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.04 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.51 (  0.52)	test_majacc   0.56 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.56 (  0.52)	test_corr_d   0.13 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.32it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 46/  1]	epoch_time 0.0367 (0.0371)	validation_time 0.0018 (0.0005)	train_time 0.0350 (0.0364)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5199000128209591, 0.5250000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.19it/s] 15%|#5        | 4/26 [00:00<00:01, 16.66it/s] 31%|###       | 8/26 [00:00<00:00, 23.32it/s] 46%|####6     | 12/26 [00:00<00:00, 27.34it/s] 62%|######1   | 16/26 [00:00<00:00, 28.77it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.34it/s] 92%|#########2| 24/26 [00:00<00:00, 31.61it/s]100%|##########| 26/26 [00:00<00:00, 26.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.55 (  0.52)	train_minacc   0.51 (  0.52)	train_majacc   0.56 (  0.52)	train_corr   0.00 (  0.00)	l1 14.3865 (14.3867)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.65it/s] 27%|##6       | 7/26 [00:00<00:00, 36.95it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.95it/s] 46%|####6     | 12/26 [00:00<00:00, 42.38it/s] 65%|######5   | 17/26 [00:00<00:00, 43.27it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.27it/s] 88%|########8 | 23/26 [00:00<00:00, 48.06it/s]100%|##########| 26/26 [00:00<00:00, 40.52it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.58 (  0.58)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.52)	test_minacc   0.50 (  0.53)	test_majacc   0.48 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.50 (  0.53)	test_majacc_d   0.48 (  0.52)	test_corr_d  -0.02 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.45 (  0.52)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.45 (  0.52)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.04 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.51 (  0.52)	test_majacc   0.56 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.56 (  0.52)	test_corr_d   0.13 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.88it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 47/  1]	epoch_time 0.0367 (0.0371)	validation_time 0.0004 (0.0005)	train_time 0.0363 (0.0364)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5201000128090382, 0.5260000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.21it/s] 15%|#5        | 4/26 [00:00<00:01, 18.66it/s] 31%|###       | 8/26 [00:00<00:00, 24.74it/s] 46%|####6     | 12/26 [00:00<00:00, 28.88it/s] 62%|######1   | 16/26 [00:00<00:00, 30.93it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.59it/s] 92%|#########2| 24/26 [00:00<00:00, 33.70it/s]100%|##########| 26/26 [00:00<00:00, 27.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.55 (  0.52)	train_minacc   0.51 (  0.52)	train_majacc   0.56 (  0.52)	train_corr   0.00 (  0.00)	l1 14.3861 (14.3863)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.66it/s] 31%|###       | 8/26 [00:00<00:00, 39.42it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.42it/s] 50%|#####     | 13/26 [00:00<00:00, 40.98it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.76it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.76it/s] 96%|#########6| 25/26 [00:00<00:00, 48.00it/s]100%|##########| 26/26 [00:00<00:00, 41.32it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.58 (  0.58)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.52)	test_minacc   0.50 (  0.53)	test_majacc   0.48 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.50 (  0.53)	test_majacc_d   0.48 (  0.52)	test_corr_d  -0.02 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.45 (  0.52)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.45 (  0.52)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.04 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.51 (  0.52)	test_majacc   0.56 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.56 (  0.52)	test_corr_d   0.13 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.71it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 48/  1]	epoch_time 0.0361 (0.0371)	validation_time 0.0003 (0.0005)	train_time 0.0358 (0.0364)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5199000160992145, 0.5260000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.75it/s] 19%|#9        | 5/26 [00:00<00:00, 21.99it/s] 35%|###4      | 9/26 [00:00<00:00, 26.84it/s] 50%|#####     | 13/26 [00:00<00:00, 29.57it/s] 65%|######5   | 17/26 [00:00<00:00, 30.17it/s] 81%|########  | 21/26 [00:00<00:00, 31.27it/s] 96%|#########6| 25/26 [00:00<00:00, 32.06it/s]100%|##########| 26/26 [00:00<00:00, 27.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.55 (  0.52)	train_minacc   0.51 (  0.52)	train_majacc   0.56 (  0.52)	train_corr   0.00 (  0.00)	l1 14.3858 (14.3859)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.26it/s] 27%|##6       | 7/26 [00:00<00:00, 34.09it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.09it/s] 50%|#####     | 13/26 [00:00<00:00, 40.63it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.25it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.25it/s] 96%|#########6| 25/26 [00:00<00:00, 47.20it/s]100%|##########| 26/26 [00:00<00:00, 39.26it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.58 (  0.58)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.52)	test_minacc   0.50 (  0.53)	test_majacc   0.48 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.50 (  0.53)	test_majacc_d   0.48 (  0.52)	test_corr_d  -0.02 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.45 (  0.52)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.45 (  0.52)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.04 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.51 (  0.52)	test_majacc   0.56 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.56 (  0.52)	test_corr_d   0.14 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.31it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 49/  1]	epoch_time 0.0384 (0.0371)	validation_time 0.0003 (0.0005)	train_time 0.0380 (0.0365)
record: (train_acc, test_acc) (0.6176000133156776, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5201000114381313, 0.5230000019073486)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.097 MB of 0.097 MB uploadedwandb: \ 0.097 MB of 0.097 MB uploadedwandb: | 0.097 MB of 0.097 MB uploadedwandb: / 0.097 MB of 0.097 MB uploadedwandb: - 0.097 MB of 0.097 MB uploadedwandb: \ 0.119 MB of 0.127 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/diagnostics/epoch_time_val █▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▂▁▁▂▁▂▁▁▁▁▁▁▁▁▁▁▁▂▁▁▂
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/diagnostics/train_time_val █▂▁▂▁▁▁▁▂▂▁▁▁▂▂▁▁▁▁▂▂▁▂▂▂▂▂▁▁▁▂▂▂▂▂▂▂▁▂▂
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▃▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/Loss_avg █▆▇▇▆▆▆▆▆▆▅▇▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/Loss_d_avg █▆▇▇▆▆▆▆▆▆▅▇▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/Loss_d_val █▆▇▇▆▆▆▆▆▆▅▇▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/Loss_val █▆▇▇▆▆▆▆▆▆▅▇▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/test_acc_avg ▁▁▁▁▁▂▂▂▂▃▄▃█▇█▇▇▇▇▇▇▇▇▇▇▇▇█████▇▇▇▇▇▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/test_acc_d_avg ▁▁▁▁▁▂▂▂▂▃▄▃█▇█▇▇▇▇▇▇▇▇▇▇▇▇█████▇▇▇▇▇▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/test_acc_d_val ▁▁▁▁▁▂▂▂▂▃▄▃█▇█▇▇▇▇▇▇▇▇▇▇▇▇█████▇▇▇▇▇▇▇▇
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/test_acc_val ▁▁▁▁▁▂▂▂▂▃▄▃█▇█▇▇▇▇▇▇▇▇▇▇▇▇█████▇▇▇▇▇▇▇▇
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/test_corr_d_avg ████▇▇▇▇▇▇▆▇▁▁▃▂▂▂▂▁▂▂▂▂▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/test_corr_d_val ████▇▇▇▇▇▇▆▇▁▁▃▂▂▂▂▁▂▂▂▂▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/test_majacc_avg ████████████▃▁▃▂▂▂▂▁▂▂▂▂▂▁▁▂▁▂▂▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/test_majacc_d_avg ████████████▃▁▃▂▂▂▂▁▂▂▂▂▂▁▁▂▁▂▂▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/test_majacc_d_val ████████████▃▁▃▂▂▂▂▁▂▂▂▂▂▁▁▂▁▂▂▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/test_majacc_val ████████████▃▁▃▂▂▂▂▁▂▂▂▂▂▁▁▂▁▂▂▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/test_minacc_avg ▁▁▁▁▁▂▂▂▂▃▄▃███▇▇▇▇▇▇▇▇▇▇▇█████████████▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/test_minacc_d_avg ▁▁▁▁▁▂▂▂▂▃▄▃███▇▇▇▇▇▇▇▇▇▇▇█████████████▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/test_minacc_d_val ▁▁▁▁▁▂▂▂▂▃▄▃███▇▇▇▇▇▇▇▇▇▇▇█████████████▇
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/test_minacc_val ▁▁▁▁▁▂▂▂▂▃▄▃███▇▇▇▇▇▇▇▇▇▇▇█████████████▇
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/Loss_avg █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/Loss_val █▅▃▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/l1_avg ▃▂▁▁▁▂▃▄▅▆▇▇███████▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/l1_val ▂▂▁▁▂▂▃▄▅▆▇▇███████▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/train_acc_avg ▇███████████▇▂▁▂▁▁▁▁▁▁▁▁▁▁▁▂▂▂▂▁▁▁▁▁▁▁▁▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/train_acc_val ████████████▅▁▂▃▃▃▂▁▁▁▁▁▁▁▂▂▂▂▂▂▃▃▃▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/train_majacc_avg ▇███████████▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/train_majacc_val ████████████▄▁▁▂▂▂▂▁▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/train_minacc_avg ▂▁▂▂▂▂▂▃▃▃▃▃▆███▇▇▇▇▇▇▇▇▇▇██████████▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/train_minacc_val ▁▁▁▁▁▁▁▂▁▂▂▂▇▇█████▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇▇▇▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/train_nll_avg ▅▂▂▂▂▁▁▁▁▁▁▁▃▇██████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/train_nll_val ▃▂▂▂▁▂▁▂▂▁▁▂▇███████████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/train_penalty_avg █▃▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/train_penalty_val █▅▅▆▃▅▄▄▄▄▃▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/weight_norm_avg █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/weight_norm_val █▄▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/diagnostics/epoch_time_val 0.03839
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/diagnostics/train_time_val 0.03803
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/diagnostics/validation_time_val 0.00035
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/Loss_avg 0.6927
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/Loss_d_avg 0.6927
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/Loss_d_val 0.6927
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/Loss_val 0.6927
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/test_acc_avg 0.523
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/test_acc_d_avg 0.523
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/test_acc_d_val 0.523
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/test_acc_val 0.523
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/test_corr_d_avg -0.07351
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/test_corr_d_val -0.07351
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/test_majacc_avg 0.49
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/test_majacc_d_avg 0.49
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/test_majacc_d_val 0.49
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/test_majacc_val 0.49
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/test_minacc_avg 0.52667
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/test_minacc_d_avg 0.52667
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/test_minacc_d_val 0.52667
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/test/test_minacc_val 0.52667
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/Loss_avg 9e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/Loss_val 9e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/l1_avg 14.38595
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/l1_val 14.38577
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/train_acc_avg 0.5195
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/train_acc_val 0.548
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/train_majacc_avg 0.51865
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/train_majacc_val 0.5561
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/train_minacc_avg 0.52273
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/train_minacc_val 0.51111
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/train_nll_avg 0.69303
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/train_nll_val 0.69269
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/weight_norm_avg 0.19409
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/63/logs/train/weight_norm_val 0.19392
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/czbjeek5
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_125328-czbjeek5/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: - Waiting for wandb.init()...wandb: \ Waiting for wandb.init()...wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_125600-njtwdkvv
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/njtwdkvv
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=15.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1175
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6037, 3, 32, 32) (5963, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:39,  1.59s/it] 19%|#9        | 5/26 [00:01<00:05,  3.81it/s] 35%|###4      | 9/26 [00:01<00:02,  7.47it/s] 50%|#####     | 13/26 [00:01<00:01, 11.39it/s] 65%|######5   | 17/26 [00:02<00:00, 15.33it/s] 81%|########  | 21/26 [00:02<00:00, 19.03it/s] 96%|#########6| 25/26 [00:02<00:00, 22.31it/s]100%|##########| 26/26 [00:02<00:00,  9.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 9.274 (12.166)	train_nll   0.43 (  0.55)	train_penalty   0.09 (  0.29)	weight_norm   8.85 ( 11.62)	train_acc   0.84 (  0.81)	train_minacc   0.00 (  0.07)	train_majacc   0.99 (  0.94)	train_corr   0.00 (  0.00)	l1 6.9940 (8.2860)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.79it/s] 27%|##6       | 7/26 [00:00<00:00, 35.43it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.43it/s] 50%|#####     | 13/26 [00:00<00:00, 40.25it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.05it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.05it/s] 96%|#########6| 25/26 [00:00<00:00, 46.27it/s]100%|##########| 26/26 [00:00<00:00, 39.24it/s]
Test: [   0/  26]	Loss 0.425 (0.425)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.425 (0.425)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.455 (0.412)	test_acc   0.82 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  0.99)	Loss_d 0.455 (0.412)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.450 (0.418)	test_acc   0.83 (  0.84)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.450 (0.418)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.424 (0.412)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.424 (0.412)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.53it/s]100%|##########| 1/1 [00:00<00:00,  2.53it/s]
Test: [  0/  1]	Loss 2.038 (2.038)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 2.038 (2.038)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 2.038 (2.038)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 2.038 (2.038)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/64/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0768 (0.0768)	validation_time 0.0069 (0.0069)	train_time 0.0659 (0.0659)
record: (train_acc, test_acc) (0.8461000211834907, 0.1080000028014183)
last accs (train_acc, test_acc) (0.8461000211834907, 0.1080000028014183)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.79it/s] 19%|#9        | 5/26 [00:00<00:01, 20.70it/s] 35%|###4      | 9/26 [00:00<00:00, 26.22it/s] 50%|#####     | 13/26 [00:00<00:00, 29.06it/s] 65%|######5   | 17/26 [00:00<00:00, 30.48it/s] 81%|########  | 21/26 [00:00<00:00, 31.88it/s] 96%|#########6| 25/26 [00:00<00:00, 32.94it/s]100%|##########| 26/26 [00:00<00:00, 27.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 4.647 (6.537)	train_nll   0.42 (  0.41)	train_penalty   0.08 (  0.06)	weight_norm   4.23 (  6.13)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.02)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 6.1233 (6.4677)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.79it/s] 23%|##3       | 6/26 [00:00<00:00, 24.06it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.06it/s] 42%|####2     | 11/26 [00:00<00:00, 33.30it/s] 65%|######5   | 17/26 [00:00<00:00, 41.78it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.78it/s] 85%|########4 | 22/26 [00:00<00:00, 43.76it/s]100%|##########| 26/26 [00:00<00:00, 36.00it/s]
Test: [   0/  26]	Loss 0.407 (0.407)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.407 (0.407)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.442 (0.396)	test_acc   0.82 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.442 (0.396)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.422 (0.401)	test_acc   0.83 (  0.84)	test_minacc   0.01 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.422 (0.401)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.01 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.408 (0.396)	test_acc   0.84 (  0.85)	test_minacc   0.03 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.408 (0.396)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.03 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.46it/s]
Test: [  0/  1]	Loss 1.672 (1.672)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.672 (1.672)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.672 (1.672)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.672 (1.672)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/64/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0367 (0.0567)	validation_time 0.0004 (0.0037)	train_time 0.0362 (0.0511)
record: (train_acc, test_acc) (0.8469000271558762, 0.11600000411272049)
last accs (train_acc, test_acc) (0.8469000271558762, 0.11600000411272049)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.13it/s] 19%|#9        | 5/26 [00:00<00:01, 19.98it/s] 35%|###4      | 9/26 [00:00<00:00, 25.22it/s] 50%|#####     | 13/26 [00:00<00:00, 28.32it/s] 65%|######5   | 17/26 [00:00<00:00, 29.41it/s] 81%|########  | 21/26 [00:00<00:00, 30.80it/s] 96%|#########6| 25/26 [00:00<00:00, 31.17it/s]100%|##########| 26/26 [00:00<00:00, 26.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 2.815 (3.579)	train_nll   0.40 (  0.40)	train_penalty   0.06 (  0.06)	weight_norm   2.42 (  3.17)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.04)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.1184 (5.5679)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.07it/s] 27%|##6       | 7/26 [00:00<00:00, 33.32it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.32it/s] 50%|#####     | 13/26 [00:00<00:00, 38.91it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.50it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.50it/s] 96%|#########6| 25/26 [00:00<00:00, 45.93it/s]100%|##########| 26/26 [00:00<00:00, 38.35it/s]
Test: [   0/  26]	Loss 0.385 (0.385)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.385 (0.385)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.425 (0.374)	test_acc   0.83 (  0.85)	test_minacc   0.07 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.425 (0.374)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.07 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.416 (0.383)	test_acc   0.82 (  0.85)	test_minacc   0.03 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.416 (0.383)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.03 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  26/  26]	Loss 0.370 (0.379)	test_acc   0.84 (  0.85)	test_minacc   0.03 (  0.06)	test_majacc   1.00 (  0.99)	Loss_d 0.370 (0.379)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.03 (  0.06)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.91it/s]
Test: [  0/  1]	Loss 1.620 (1.620)	test_acc   0.13 (  0.13)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 1.620 (1.620)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
Test: [  1/  1]	Loss 1.620 (1.620)	test_acc   0.13 (  0.13)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 1.620 (1.620)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/64/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0381 (0.0505)	validation_time 0.0003 (0.0025)	train_time 0.0377 (0.0466)
record: (train_acc, test_acc) (0.848100021481514, 0.1290000081062317)
last accs (train_acc, test_acc) (0.848100021481514, 0.1290000081062317)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.22it/s] 19%|#9        | 5/26 [00:00<00:01, 19.99it/s] 35%|###4      | 9/26 [00:00<00:00, 25.46it/s] 50%|#####     | 13/26 [00:00<00:00, 29.02it/s] 65%|######5   | 17/26 [00:00<00:00, 31.24it/s] 81%|########  | 21/26 [00:00<00:00, 32.47it/s] 96%|#########6| 25/26 [00:00<00:00, 32.96it/s]100%|##########| 26/26 [00:00<00:00, 27.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 1.886 (2.309)	train_nll   0.36 (  0.38)	train_penalty   0.03 (  0.04)	weight_norm   1.53 (  1.93)	train_acc   0.85 (  0.85)	train_minacc   0.05 (  0.06)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 4.7746 (4.8856)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.21it/s] 27%|##6       | 7/26 [00:00<00:00, 32.72it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.72it/s] 46%|####6     | 12/26 [00:00<00:00, 39.66it/s] 65%|######5   | 17/26 [00:00<00:00, 40.75it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.75it/s] 88%|########8 | 23/26 [00:00<00:00, 45.82it/s]100%|##########| 26/26 [00:00<00:00, 37.18it/s]
Test: [   0/  26]	Loss 0.371 (0.371)	test_acc   0.84 (  0.84)	test_minacc   0.04 (  0.04)	test_majacc   0.98 (  0.98)	Loss_d 0.371 (0.371)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.399 (0.359)	test_acc   0.83 (  0.85)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.399 (0.359)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  20/  26]	Loss 0.387 (0.366)	test_acc   0.83 (  0.85)	test_minacc   0.15 (  0.12)	test_majacc   0.97 (  0.98)	Loss_d 0.387 (0.366)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.15 (  0.12)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  26/  26]	Loss 0.339 (0.361)	test_acc   0.84 (  0.85)	test_minacc   0.05 (  0.13)	test_majacc   0.99 (  0.98)	Loss_d 0.339 (0.361)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.05 (  0.13)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.90 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.78it/s]
Test: [  0/  1]	Loss 1.647 (1.647)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.98 (  0.98)	Loss_d 1.647 (1.647)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.81 (  0.81)
Test: [  1/  1]	Loss 1.647 (1.647)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.98 (  0.98)	Loss_d 1.647 (1.647)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.81 (  0.81)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/64/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0379 (0.0473)	validation_time 0.0004 (0.0020)	train_time 0.0374 (0.0443)
record: (train_acc, test_acc) (0.8494000211954117, 0.18800000846385956)
last accs (train_acc, test_acc) (0.8494000211954117, 0.18800000846385956)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.00it/s] 15%|#5        | 4/26 [00:00<00:01, 18.34it/s] 31%|###       | 8/26 [00:00<00:00, 24.41it/s] 42%|####2     | 11/26 [00:00<00:00, 26.32it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.43it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.97it/s] 88%|########8 | 23/26 [00:00<00:00, 31.18it/s]100%|##########| 26/26 [00:00<00:00, 26.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.359 (1.605)	train_nll   0.36 (  0.37)	train_penalty   0.03 (  0.04)	weight_norm   1.00 (  1.24)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.09)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 4.9886 (4.8852)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.02it/s] 31%|###       | 8/26 [00:00<00:00, 40.38it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.38it/s] 50%|#####     | 13/26 [00:00<00:00, 41.50it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.00it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.00it/s] 96%|#########6| 25/26 [00:00<00:00, 47.43it/s]100%|##########| 26/26 [00:00<00:00, 41.05it/s]
Test: [   0/  26]	Loss 0.354 (0.354)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.354 (0.354)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.412 (0.359)	test_acc   0.82 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.412 (0.359)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.92)
Test: [  20/  26]	Loss 0.387 (0.368)	test_acc   0.83 (  0.85)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.387 (0.368)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.338 (0.364)	test_acc   0.85 (  0.85)	test_minacc   0.03 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.338 (0.364)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.03 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.37it/s]
Test: [  0/  1]	Loss 1.613 (1.613)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.613 (1.613)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.86 (  0.86)
Test: [  1/  1]	Loss 1.613 (1.613)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.613 (1.613)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.86 (  0.86)
Overall Timing[  4/  1]	epoch_time 0.0375 (0.0454)	validation_time 0.0003 (0.0017)	train_time 0.0371 (0.0429)
record: (train_acc, test_acc) (0.8494000211954117, 0.18800000846385956)
last accs (train_acc, test_acc) (0.8487000251412392, 0.1120000034570694)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.19it/s] 19%|#9        | 5/26 [00:00<00:00, 23.87it/s] 35%|###4      | 9/26 [00:00<00:00, 28.12it/s] 50%|#####     | 13/26 [00:00<00:00, 29.58it/s] 65%|######5   | 17/26 [00:00<00:00, 31.09it/s] 81%|########  | 21/26 [00:00<00:00, 32.04it/s] 96%|#########6| 25/26 [00:00<00:00, 32.83it/s]100%|##########| 26/26 [00:00<00:00, 28.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.018 (1.181)	train_nll   0.35 (  0.36)	train_penalty   0.02 (  0.03)	weight_norm   0.67 (  0.82)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.13)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 5.6682 (5.4619)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.56it/s] 27%|##6       | 7/26 [00:00<00:00, 35.60it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.60it/s] 50%|#####     | 13/26 [00:00<00:00, 40.24it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.31it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.31it/s] 96%|#########6| 25/26 [00:00<00:00, 45.30it/s]100%|##########| 26/26 [00:00<00:00, 38.37it/s]
Test: [   0/  26]	Loss 0.366 (0.366)	test_acc   0.85 (  0.85)	test_minacc   0.07 (  0.07)	test_majacc   0.98 (  0.98)	Loss_d 0.366 (0.366)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.406 (0.364)	test_acc   0.82 (  0.85)	test_minacc   0.01 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.406 (0.364)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.01 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Test: [  20/  26]	Loss 0.393 (0.368)	test_acc   0.83 (  0.85)	test_minacc   0.03 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.393 (0.368)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.03 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.92 (  0.91)
Test: [  26/  26]	Loss 0.336 (0.364)	test_acc   0.84 (  0.85)	test_minacc   0.08 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.336 (0.364)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.08 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.53it/s]
Test: [  0/  1]	Loss 1.581 (1.581)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   1.00 (  1.00)	Loss_d 1.581 (1.581)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.82 (  0.82)
Test: [  1/  1]	Loss 1.581 (1.581)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   1.00 (  1.00)	Loss_d 1.581 (1.581)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.82 (  0.82)
Overall Timing[  5/  1]	epoch_time 0.0368 (0.0439)	validation_time 0.0004 (0.0015)	train_time 0.0363 (0.0418)
record: (train_acc, test_acc) (0.8494000211954117, 0.18800000846385956)
last accs (train_acc, test_acc) (0.8491000214219093, 0.17100000381469727)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.29it/s] 19%|#9        | 5/26 [00:00<00:00, 22.08it/s] 35%|###4      | 9/26 [00:00<00:00, 26.98it/s] 50%|#####     | 13/26 [00:00<00:00, 29.77it/s] 65%|######5   | 17/26 [00:00<00:00, 31.72it/s] 81%|########  | 21/26 [00:00<00:00, 33.11it/s] 96%|#########6| 25/26 [00:00<00:00, 33.59it/s]100%|##########| 26/26 [00:00<00:00, 28.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.839 (0.909)	train_nll   0.34 (  0.36)	train_penalty   0.03 (  0.03)	weight_norm   0.49 (  0.55)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.12)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 7.0337 (6.4125)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.28it/s] 27%|##6       | 7/26 [00:00<00:00, 34.37it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.37it/s] 50%|#####     | 13/26 [00:00<00:00, 39.70it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.24it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.24it/s] 96%|#########6| 25/26 [00:00<00:00, 46.54it/s]100%|##########| 26/26 [00:00<00:00, 38.88it/s]
Test: [   0/  26]	Loss 0.356 (0.356)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.356 (0.356)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.379 (0.345)	test_acc   0.83 (  0.85)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.379 (0.345)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.92)
Test: [  20/  26]	Loss 0.365 (0.352)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.365 (0.352)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.328 (0.347)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.328 (0.347)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.24it/s]
Test: [  0/  1]	Loss 1.597 (1.597)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 1.597 (1.597)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.82 (  0.82)
Test: [  1/  1]	Loss 1.597 (1.597)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 1.597 (1.597)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.82 (  0.82)
Overall Timing[  6/  1]	epoch_time 0.0375 (0.0430)	validation_time 0.0004 (0.0013)	train_time 0.0371 (0.0411)
record: (train_acc, test_acc) (0.8494000211954117, 0.18800000846385956)
last accs (train_acc, test_acc) (0.8497000223398209, 0.1340000033378601)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.75it/s] 19%|#9        | 5/26 [00:00<00:00, 21.58it/s] 35%|###4      | 9/26 [00:00<00:00, 26.78it/s] 50%|#####     | 13/26 [00:00<00:00, 29.11it/s] 65%|######5   | 17/26 [00:00<00:00, 31.19it/s] 81%|########  | 21/26 [00:00<00:00, 32.70it/s] 96%|#########6| 25/26 [00:00<00:00, 33.05it/s]100%|##########| 26/26 [00:00<00:00, 28.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.667 (0.748)	train_nll   0.35 (  0.34)	train_penalty   0.03 (  0.03)	weight_norm   0.32 (  0.41)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.18)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 8.8512 (8.1213)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.13it/s] 27%|##6       | 7/26 [00:00<00:00, 32.23it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.23it/s] 50%|#####     | 13/26 [00:00<00:00, 38.78it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.96it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.96it/s] 96%|#########6| 25/26 [00:00<00:00, 44.57it/s]100%|##########| 26/26 [00:00<00:00, 36.86it/s]
Test: [   0/  26]	Loss 0.356 (0.356)	test_acc   0.86 (  0.86)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.356 (0.356)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.358 (0.328)	test_acc   0.82 (  0.85)	test_minacc   0.01 (  0.03)	test_majacc   0.99 (  1.00)	Loss_d 0.358 (0.328)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.01 (  0.03)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.91 (  0.92)
Test: [  20/  26]	Loss 0.359 (0.333)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.359 (0.333)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.92)
Test: [  26/  26]	Loss 0.319 (0.329)	test_acc   0.84 (  0.85)	test_minacc   0.03 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.319 (0.329)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.03 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.46it/s]
Test: [  0/  1]	Loss 1.545 (1.545)	test_acc   0.14 (  0.14)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 1.545 (1.545)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.81 (  0.81)
Test: [  1/  1]	Loss 1.545 (1.545)	test_acc   0.14 (  0.14)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 1.545 (1.545)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.81 (  0.81)
Overall Timing[  7/  1]	epoch_time 0.0368 (0.0422)	validation_time 0.0003 (0.0012)	train_time 0.0364 (0.0405)
record: (train_acc, test_acc) (0.8494000211954117, 0.18800000846385956)
last accs (train_acc, test_acc) (0.850000027179718, 0.14000000059604645)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.45it/s] 19%|#9        | 5/26 [00:00<00:00, 23.13it/s] 35%|###4      | 9/26 [00:00<00:00, 28.24it/s] 50%|#####     | 13/26 [00:00<00:00, 30.66it/s] 65%|######5   | 17/26 [00:00<00:00, 32.18it/s] 81%|########  | 21/26 [00:00<00:00, 33.23it/s] 96%|#########6| 25/26 [00:00<00:00, 33.53it/s]100%|##########| 26/26 [00:00<00:00, 28.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.534 (0.600)	train_nll   0.32 (  0.34)	train_penalty   0.02 (  0.02)	weight_norm   0.22 (  0.26)	train_acc   0.85 (  0.85)	train_minacc   0.13 (  0.16)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 10.4414 (9.7403)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.92it/s] 27%|##6       | 7/26 [00:00<00:00, 32.08it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.08it/s] 50%|#####     | 13/26 [00:00<00:00, 39.33it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.70it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.70it/s] 96%|#########6| 25/26 [00:00<00:00, 46.17it/s]100%|##########| 26/26 [00:00<00:00, 37.89it/s]
Test: [   0/  26]	Loss 0.361 (0.361)	test_acc   0.84 (  0.84)	test_minacc   0.21 (  0.21)	test_majacc   0.95 (  0.95)	Loss_d 0.361 (0.361)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.392 (0.345)	test_acc   0.81 (  0.85)	test_minacc   0.12 (  0.20)	test_majacc   0.96 (  0.96)	Loss_d 0.392 (0.345)	test_acc_d   0.81 (  0.85)	test_minacc_d   0.12 (  0.20)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.85 (  0.86)
Test: [  20/  26]	Loss 0.361 (0.351)	test_acc   0.83 (  0.85)	test_minacc   0.13 (  0.21)	test_majacc   0.98 (  0.96)	Loss_d 0.361 (0.351)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.13 (  0.21)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.89 (  0.86)
Test: [  26/  26]	Loss 0.290 (0.347)	test_acc   0.86 (  0.85)	test_minacc   0.26 (  0.21)	test_majacc   0.97 (  0.96)	Loss_d 0.290 (0.347)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.26 (  0.21)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.86 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.72it/s]
Test: [  0/  1]	Loss 1.545 (1.545)	test_acc   0.26 (  0.26)	test_minacc   0.18 (  0.18)	test_majacc   0.96 (  0.96)	Loss_d 1.545 (1.545)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.63 (  0.63)
Test: [  1/  1]	Loss 1.545 (1.545)	test_acc   0.26 (  0.26)	test_minacc   0.18 (  0.18)	test_majacc   0.96 (  0.96)	Loss_d 1.545 (1.545)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.63 (  0.63)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/64/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0367 (0.0416)	validation_time 0.0004 (0.0011)	train_time 0.0363 (0.0401)
record: (train_acc, test_acc) (0.8496000218987465, 0.25699999928474426)
last accs (train_acc, test_acc) (0.8496000218987465, 0.25699999928474426)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.43it/s] 19%|#9        | 5/26 [00:00<00:00, 21.97it/s] 35%|###4      | 9/26 [00:00<00:00, 26.59it/s] 50%|#####     | 13/26 [00:00<00:00, 29.00it/s] 65%|######5   | 17/26 [00:00<00:00, 30.81it/s] 81%|########  | 21/26 [00:00<00:00, 31.78it/s] 96%|#########6| 25/26 [00:00<00:00, 32.24it/s]100%|##########| 26/26 [00:00<00:00, 27.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.509 (0.530)	train_nll   0.33 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.17 (  0.20)	train_acc   0.84 (  0.85)	train_minacc   0.08 (  0.17)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 12.4967 (11.4864)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.97it/s] 31%|###       | 8/26 [00:00<00:00, 39.01it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.01it/s] 50%|#####     | 13/26 [00:00<00:00, 40.92it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.69it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.69it/s] 96%|#########6| 25/26 [00:00<00:00, 46.87it/s]100%|##########| 26/26 [00:00<00:00, 40.32it/s]
Test: [   0/  26]	Loss 0.325 (0.325)	test_acc   0.86 (  0.86)	test_minacc   0.14 (  0.14)	test_majacc   0.98 (  0.98)	Loss_d 0.325 (0.325)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.349 (0.319)	test_acc   0.83 (  0.86)	test_minacc   0.10 (  0.14)	test_majacc   0.98 (  0.98)	Loss_d 0.349 (0.319)	test_acc_d   0.83 (  0.86)	test_minacc_d   0.10 (  0.14)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.89 (  0.90)
Test: [  20/  26]	Loss 0.352 (0.324)	test_acc   0.83 (  0.86)	test_minacc   0.10 (  0.16)	test_majacc   0.99 (  0.98)	Loss_d 0.352 (0.324)	test_acc_d   0.83 (  0.86)	test_minacc_d   0.10 (  0.16)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.91 (  0.90)
Test: [  26/  26]	Loss 0.290 (0.321)	test_acc   0.85 (  0.86)	test_minacc   0.15 (  0.16)	test_majacc   0.98 (  0.98)	Loss_d 0.290 (0.321)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.15 (  0.16)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.89 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.77it/s]
Test: [  0/  1]	Loss 1.559 (1.559)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.98 (  0.98)	Loss_d 1.559 (1.559)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.71 (  0.71)
Test: [  1/  1]	Loss 1.559 (1.559)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.98 (  0.98)	Loss_d 1.559 (1.559)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.71 (  0.71)
Overall Timing[  9/  1]	epoch_time 0.0362 (0.0411)	validation_time 0.0004 (0.0010)	train_time 0.0359 (0.0396)
record: (train_acc, test_acc) (0.8496000218987465, 0.25699999928474426)
last accs (train_acc, test_acc) (0.8591000189185143, 0.2290000170469284)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.90it/s] 19%|#9        | 5/26 [00:00<00:01, 20.74it/s] 35%|###4      | 9/26 [00:00<00:00, 26.60it/s] 50%|#####     | 13/26 [00:00<00:00, 29.36it/s] 65%|######5   | 17/26 [00:00<00:00, 31.15it/s] 81%|########  | 21/26 [00:00<00:00, 31.62it/s] 96%|#########6| 25/26 [00:00<00:00, 32.54it/s]100%|##########| 26/26 [00:00<00:00, 27.57it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.451 (0.490)	train_nll   0.31 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.14 (  0.16)	train_acc   0.85 (  0.85)	train_minacc   0.13 (  0.20)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 14.2581 (13.4495)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.22it/s] 27%|##6       | 7/26 [00:00<00:00, 30.34it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.34it/s] 46%|####6     | 12/26 [00:00<00:00, 38.06it/s] 65%|######5   | 17/26 [00:00<00:00, 39.90it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.90it/s] 88%|########8 | 23/26 [00:00<00:00, 45.35it/s]100%|##########| 26/26 [00:00<00:00, 36.18it/s]
Test: [   0/  26]	Loss 0.330 (0.330)	test_acc   0.85 (  0.85)	test_minacc   0.16 (  0.16)	test_majacc   0.97 (  0.97)	Loss_d 0.330 (0.330)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.377 (0.327)	test_acc   0.81 (  0.86)	test_minacc   0.10 (  0.15)	test_majacc   0.96 (  0.98)	Loss_d 0.377 (0.327)	test_acc_d   0.81 (  0.86)	test_minacc_d   0.10 (  0.15)	test_majacc_d   0.96 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  20/  26]	Loss 0.373 (0.336)	test_acc   0.84 (  0.85)	test_minacc   0.12 (  0.17)	test_majacc   0.99 (  0.98)	Loss_d 0.373 (0.336)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.12 (  0.17)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.92 (  0.90)
Test: [  26/  26]	Loss 0.292 (0.332)	test_acc   0.86 (  0.85)	test_minacc   0.21 (  0.16)	test_majacc   0.98 (  0.98)	Loss_d 0.292 (0.332)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.21 (  0.16)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.89 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.58it/s]
Test: [  0/  1]	Loss 1.634 (1.634)	test_acc   0.20 (  0.20)	test_minacc   0.12 (  0.12)	test_majacc   0.99 (  0.99)	Loss_d 1.634 (1.634)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.78 (  0.78)
Test: [  1/  1]	Loss 1.634 (1.634)	test_acc   0.20 (  0.20)	test_minacc   0.12 (  0.12)	test_majacc   0.99 (  0.99)	Loss_d 1.634 (1.634)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.78 (  0.78)
Overall Timing[ 10/  1]	epoch_time 0.0385 (0.0408)	validation_time 0.0004 (0.0010)	train_time 0.0380 (0.0395)
record: (train_acc, test_acc) (0.8496000218987465, 0.25699999928474426)
last accs (train_acc, test_acc) (0.8537000252604484, 0.20400001108646393)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.67it/s] 19%|#9        | 5/26 [00:00<00:01, 19.01it/s] 35%|###4      | 9/26 [00:00<00:00, 23.93it/s] 50%|#####     | 13/26 [00:00<00:00, 27.63it/s] 65%|######5   | 17/26 [00:00<00:00, 29.47it/s] 81%|########  | 21/26 [00:00<00:00, 31.26it/s] 96%|#########6| 25/26 [00:00<00:00, 32.34it/s]100%|##########| 26/26 [00:00<00:00, 26.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.452 (0.463)	train_nll   0.33 (  0.33)	train_penalty   0.03 (  0.02)	weight_norm   0.12 (  0.13)	train_acc   0.84 (  0.85)	train_minacc   0.08 (  0.24)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 15.8560 (15.1306)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.35it/s] 23%|##3       | 6/26 [00:00<00:00, 28.45it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.45it/s] 46%|####6     | 12/26 [00:00<00:00, 36.14it/s] 69%|######9   | 18/26 [00:00<00:00, 43.39it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.39it/s] 92%|#########2| 24/26 [00:00<00:00, 44.31it/s]100%|##########| 26/26 [00:00<00:00, 37.04it/s]
Test: [   0/  26]	Loss 0.333 (0.333)	test_acc   0.86 (  0.86)	test_minacc   0.21 (  0.21)	test_majacc   0.96 (  0.96)	Loss_d 0.333 (0.333)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.365 (0.317)	test_acc   0.82 (  0.86)	test_minacc   0.15 (  0.25)	test_majacc   0.97 (  0.96)	Loss_d 0.365 (0.317)	test_acc_d   0.82 (  0.86)	test_minacc_d   0.15 (  0.25)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.88 (  0.89)
Test: [  20/  26]	Loss 0.345 (0.321)	test_acc   0.84 (  0.86)	test_minacc   0.22 (  0.27)	test_majacc   0.97 (  0.97)	Loss_d 0.345 (0.321)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.22 (  0.27)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.89)
Test: [  26/  26]	Loss 0.294 (0.318)	test_acc   0.87 (  0.86)	test_minacc   0.28 (  0.27)	test_majacc   0.98 (  0.97)	Loss_d 0.294 (0.318)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.28 (  0.27)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.88 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.00it/s]
Test: [  0/  1]	Loss 1.451 (1.451)	test_acc   0.37 (  0.37)	test_minacc   0.31 (  0.31)	test_majacc   0.92 (  0.92)	Loss_d 1.451 (1.451)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.61 (  0.61)
Test: [  1/  1]	Loss 1.451 (1.451)	test_acc   0.37 (  0.37)	test_minacc   0.31 (  0.31)	test_majacc   0.92 (  0.92)	Loss_d 1.451 (1.451)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.61 (  0.61)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/64/checkpoints/model_best.pth
Overall Timing[ 11/  1]	epoch_time 0.0379 (0.0406)	validation_time 0.0003 (0.0009)	train_time 0.0376 (0.0393)
record: (train_acc, test_acc) (0.8606000193357468, 0.3700000047683716)
last accs (train_acc, test_acc) (0.8606000193357468, 0.3700000047683716)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.27it/s] 19%|#9        | 5/26 [00:00<00:00, 23.66it/s] 35%|###4      | 9/26 [00:00<00:00, 28.93it/s] 50%|#####     | 13/26 [00:00<00:00, 31.75it/s] 65%|######5   | 17/26 [00:00<00:00, 32.84it/s] 81%|########  | 21/26 [00:00<00:00, 33.50it/s] 96%|#########6| 25/26 [00:00<00:00, 33.75it/s]100%|##########| 26/26 [00:00<00:00, 29.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.418 (0.449)	train_nll   0.31 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.11 (  0.12)	train_acc   0.85 (  0.85)	train_minacc   0.10 (  0.22)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 17.3285 (16.6623)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.74it/s] 31%|###       | 8/26 [00:00<00:00, 39.38it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.38it/s] 50%|#####     | 13/26 [00:00<00:00, 42.68it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.96it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.96it/s] 96%|#########6| 25/26 [00:00<00:00, 47.39it/s]100%|##########| 26/26 [00:00<00:00, 40.88it/s]
Test: [   0/  26]	Loss 0.321 (0.321)	test_acc   0.86 (  0.86)	test_minacc   0.27 (  0.27)	test_majacc   0.96 (  0.96)	Loss_d 0.321 (0.321)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.356 (0.311)	test_acc   0.83 (  0.86)	test_minacc   0.19 (  0.29)	test_majacc   0.97 (  0.96)	Loss_d 0.356 (0.311)	test_acc_d   0.83 (  0.86)	test_minacc_d   0.19 (  0.29)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.87 (  0.88)
Test: [  20/  26]	Loss 0.348 (0.318)	test_acc   0.85 (  0.86)	test_minacc   0.29 (  0.31)	test_majacc   0.97 (  0.96)	Loss_d 0.348 (0.318)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.29 (  0.31)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.88 (  0.87)
Test: [  26/  26]	Loss 0.290 (0.315)	test_acc   0.87 (  0.86)	test_minacc   0.31 (  0.31)	test_majacc   0.97 (  0.96)	Loss_d 0.290 (0.315)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.87 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.05it/s]
Test: [  0/  1]	Loss 1.456 (1.456)	test_acc   0.36 (  0.36)	test_minacc   0.30 (  0.30)	test_majacc   0.94 (  0.94)	Loss_d 1.456 (1.456)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.60 (  0.60)
Test: [  1/  1]	Loss 1.456 (1.456)	test_acc   0.36 (  0.36)	test_minacc   0.30 (  0.30)	test_majacc   0.94 (  0.94)	Loss_d 1.456 (1.456)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.60 (  0.60)
Overall Timing[ 12/  1]	epoch_time 0.0370 (0.0403)	validation_time 0.0004 (0.0009)	train_time 0.0366 (0.0391)
record: (train_acc, test_acc) (0.8606000193357468, 0.3700000047683716)
last accs (train_acc, test_acc) (0.8585000229477883, 0.36400002241134644)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.18it/s] 19%|#9        | 5/26 [00:00<00:01, 20.65it/s] 35%|###4      | 9/26 [00:00<00:00, 25.64it/s] 50%|#####     | 13/26 [00:00<00:00, 28.58it/s] 65%|######5   | 17/26 [00:00<00:00, 30.33it/s] 81%|########  | 21/26 [00:00<00:00, 31.27it/s] 96%|#########6| 25/26 [00:00<00:00, 31.76it/s]100%|##########| 26/26 [00:00<00:00, 26.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.448 (0.447)	train_nll   0.35 (  0.34)	train_penalty   0.01 (  0.02)	weight_norm   0.10 (  0.11)	train_acc   0.84 (  0.85)	train_minacc   0.18 (  0.21)	train_majacc   0.96 (  0.97)	train_corr   0.00 (  0.00)	l1 18.2242 (17.8921)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.43it/s] 19%|#9        | 5/26 [00:00<00:00, 26.40it/s]                                               19%|#9        | 5/26 [00:00<00:00, 26.40it/s] 42%|####2     | 11/26 [00:00<00:00, 39.06it/s] 62%|######1   | 16/26 [00:00<00:00, 42.91it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.91it/s] 85%|########4 | 22/26 [00:00<00:00, 46.88it/s]100%|##########| 26/26 [00:00<00:00, 38.85it/s]
Test: [   0/  26]	Loss 0.348 (0.348)	test_acc   0.84 (  0.84)	test_minacc   0.21 (  0.21)	test_majacc   0.94 (  0.94)	Loss_d 0.348 (0.348)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.356 (0.325)	test_acc   0.83 (  0.85)	test_minacc   0.24 (  0.29)	test_majacc   0.95 (  0.95)	Loss_d 0.356 (0.325)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.24 (  0.29)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.87 (  0.87)
Test: [  20/  26]	Loss 0.352 (0.328)	test_acc   0.83 (  0.85)	test_minacc   0.25 (  0.32)	test_majacc   0.96 (  0.95)	Loss_d 0.352 (0.328)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.25 (  0.32)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.89 (  0.87)
Test: [  26/  26]	Loss 0.315 (0.325)	test_acc   0.85 (  0.85)	test_minacc   0.36 (  0.31)	test_majacc   0.94 (  0.95)	Loss_d 0.315 (0.325)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.36 (  0.31)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.84 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.39it/s]
Test: [  0/  1]	Loss 1.395 (1.395)	test_acc   0.34 (  0.34)	test_minacc   0.28 (  0.28)	test_majacc   0.93 (  0.93)	Loss_d 1.395 (1.395)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.60 (  0.60)
Test: [  1/  1]	Loss 1.395 (1.395)	test_acc   0.34 (  0.34)	test_minacc   0.28 (  0.28)	test_majacc   0.93 (  0.93)	Loss_d 1.395 (1.395)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.60 (  0.60)
Overall Timing[ 13/  1]	epoch_time 0.0383 (0.0402)	validation_time 0.0004 (0.0008)	train_time 0.0379 (0.0390)
record: (train_acc, test_acc) (0.8606000193357468, 0.3700000047683716)
last accs (train_acc, test_acc) (0.8520000274777413, 0.3410000205039978)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.23it/s] 15%|#5        | 4/26 [00:00<00:01, 17.41it/s] 31%|###       | 8/26 [00:00<00:00, 24.48it/s] 46%|####6     | 12/26 [00:00<00:00, 28.37it/s] 62%|######1   | 16/26 [00:00<00:00, 30.82it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.35it/s] 92%|#########2| 24/26 [00:00<00:00, 32.86it/s]100%|##########| 26/26 [00:00<00:00, 27.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.425 (0.431)	train_nll   0.33 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.09 (  0.10)	train_acc   0.85 (  0.85)	train_minacc   0.10 (  0.21)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 19.1266 (18.7851)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.68it/s] 27%|##6       | 7/26 [00:00<00:00, 36.40it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.40it/s] 50%|#####     | 13/26 [00:00<00:00, 40.60it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.54it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.54it/s] 96%|#########6| 25/26 [00:00<00:00, 46.51it/s]100%|##########| 26/26 [00:00<00:00, 39.04it/s]
Test: [   0/  26]	Loss 0.361 (0.361)	test_acc   0.85 (  0.85)	test_minacc   0.16 (  0.16)	test_majacc   0.97 (  0.97)	Loss_d 0.361 (0.361)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.352 (0.336)	test_acc   0.83 (  0.85)	test_minacc   0.13 (  0.19)	test_majacc   0.97 (  0.97)	Loss_d 0.352 (0.336)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.13 (  0.19)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.90)
Test: [  20/  26]	Loss 0.348 (0.338)	test_acc   0.85 (  0.85)	test_minacc   0.26 (  0.22)	test_majacc   0.97 (  0.97)	Loss_d 0.348 (0.338)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.26 (  0.22)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  26/  26]	Loss 0.315 (0.334)	test_acc   0.85 (  0.85)	test_minacc   0.18 (  0.22)	test_majacc   0.97 (  0.97)	Loss_d 0.315 (0.334)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.18 (  0.22)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.44it/s]
Test: [  0/  1]	Loss 1.443 (1.443)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.99 (  0.99)	Loss_d 1.443 (1.443)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.73 (  0.73)
Test: [  1/  1]	Loss 1.443 (1.443)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.99 (  0.99)	Loss_d 1.443 (1.443)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.73 (  0.73)
Overall Timing[ 14/  1]	epoch_time 0.0378 (0.0400)	validation_time 0.0003 (0.0008)	train_time 0.0374 (0.0389)
record: (train_acc, test_acc) (0.8606000193357468, 0.3700000047683716)
last accs (train_acc, test_acc) (0.8548000259399414, 0.2410000115633011)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.07it/s] 15%|#5        | 4/26 [00:00<00:01, 18.68it/s] 31%|###       | 8/26 [00:00<00:00, 25.01it/s] 46%|####6     | 12/26 [00:00<00:00, 28.50it/s] 62%|######1   | 16/26 [00:00<00:00, 30.80it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.04it/s] 92%|#########2| 24/26 [00:00<00:00, 32.89it/s]100%|##########| 26/26 [00:00<00:00, 27.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.004 (0.164)	train_nll   0.59 (  0.45)	train_penalty   0.00 (  0.01)	weight_norm   0.14 (  0.10)	train_acc   0.74 (  0.79)	train_minacc   0.77 (  0.51)	train_majacc   0.74 (  0.84)	train_corr   0.00 (  0.00)	l1 19.2526 (19.3522)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.37it/s] 31%|###       | 8/26 [00:00<00:00, 39.79it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.79it/s] 50%|#####     | 13/26 [00:00<00:00, 39.51it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.38it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.38it/s] 96%|#########6| 25/26 [00:00<00:00, 45.97it/s]100%|##########| 26/26 [00:00<00:00, 39.62it/s]
Test: [   0/  26]	Loss 0.635 (0.635)	test_acc   0.67 (  0.67)	test_minacc   0.66 (  0.66)	test_majacc   0.67 (  0.67)	Loss_d 0.635 (0.635)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.598 (0.611)	test_acc   0.72 (  0.70)	test_minacc   0.81 (  0.74)	test_majacc   0.70 (  0.69)	Loss_d 0.598 (0.611)	test_acc_d   0.72 (  0.70)	test_minacc_d   0.81 (  0.74)	test_majacc_d   0.70 (  0.69)	test_corr_d   0.26 (  0.27)
Test: [  20/  26]	Loss 0.596 (0.614)	test_acc   0.70 (  0.69)	test_minacc   0.74 (  0.74)	test_majacc   0.69 (  0.68)	Loss_d 0.596 (0.614)	test_acc_d   0.70 (  0.69)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.69 (  0.68)	test_corr_d   0.30 (  0.25)
Test: [  26/  26]	Loss 0.597 (0.615)	test_acc   0.74 (  0.69)	test_minacc   0.77 (  0.74)	test_majacc   0.73 (  0.68)	Loss_d 0.597 (0.615)	test_acc_d   0.74 (  0.69)	test_minacc_d   0.77 (  0.74)	test_majacc_d   0.73 (  0.68)	test_corr_d   0.30 (  0.25)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.44it/s]
Test: [  0/  1]	Loss 0.620 (0.620)	test_acc   0.69 (  0.69)	test_minacc   0.69 (  0.69)	test_majacc   0.66 (  0.66)	Loss_d 0.620 (0.620)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.33 ( -0.33)
Test: [  1/  1]	Loss 0.620 (0.620)	test_acc   0.69 (  0.69)	test_minacc   0.69 (  0.69)	test_majacc   0.66 (  0.66)	Loss_d 0.620 (0.620)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.33 ( -0.33)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/64/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0364 (0.0398)	validation_time 0.0004 (0.0008)	train_time 0.0360 (0.0387)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.58it/s] 19%|#9        | 5/26 [00:00<00:01, 20.50it/s] 35%|###4      | 9/26 [00:00<00:00, 26.04it/s] 50%|#####     | 13/26 [00:00<00:00, 29.55it/s] 65%|######5   | 17/26 [00:00<00:00, 31.54it/s] 81%|########  | 21/26 [00:00<00:00, 33.28it/s] 96%|#########6| 25/26 [00:00<00:00, 34.22it/s]100%|##########| 26/26 [00:00<00:00, 28.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.001)	train_nll   0.68 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.17)	train_acc   0.66 (  0.61)	train_minacc   0.51 (  0.60)	train_majacc   0.69 (  0.61)	train_corr   0.00 (  0.00)	l1 19.1030 (19.1596)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.21it/s] 27%|##6       | 7/26 [00:00<00:00, 33.84it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.84it/s] 50%|#####     | 13/26 [00:00<00:00, 39.60it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.85it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.85it/s] 96%|#########6| 25/26 [00:00<00:00, 46.30it/s]100%|##########| 26/26 [00:00<00:00, 38.63it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.58 (  0.58)	test_minacc   0.48 (  0.48)	test_majacc   0.60 (  0.60)	Loss_d 0.691 (0.691)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.685 (0.692)	test_acc   0.62 (  0.56)	test_minacc   0.38 (  0.46)	test_majacc   0.66 (  0.58)	Loss_d 0.685 (0.692)	test_acc_d   0.62 (  0.56)	test_minacc_d   0.38 (  0.46)	test_majacc_d   0.66 (  0.58)	test_corr_d   0.22 (  0.11)
Test: [  20/  26]	Loss 0.687 (0.692)	test_acc   0.61 (  0.55)	test_minacc   0.41 (  0.48)	test_majacc   0.65 (  0.57)	Loss_d 0.687 (0.692)	test_acc_d   0.61 (  0.55)	test_minacc_d   0.41 (  0.48)	test_majacc_d   0.65 (  0.57)	test_corr_d   0.17 (  0.09)
Test: [  26/  26]	Loss 0.684 (0.692)	test_acc   0.66 (  0.55)	test_minacc   0.51 (  0.48)	test_majacc   0.69 (  0.57)	Loss_d 0.684 (0.692)	test_acc_d   0.66 (  0.55)	test_minacc_d   0.51 (  0.48)	test_majacc_d   0.69 (  0.57)	test_corr_d   0.20 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.57it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 16/  1]	epoch_time 0.0373 (0.0396)	validation_time 0.0006 (0.0008)	train_time 0.0367 (0.0386)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5521000140607357, 0.5160000324249268)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.35it/s] 19%|#9        | 5/26 [00:00<00:00, 21.94it/s] 35%|###4      | 9/26 [00:00<00:00, 27.70it/s] 50%|#####     | 13/26 [00:00<00:00, 29.87it/s] 65%|######5   | 17/26 [00:00<00:00, 31.42it/s] 81%|########  | 21/26 [00:00<00:00, 32.45it/s] 96%|#########6| 25/26 [00:00<00:00, 32.70it/s]100%|##########| 26/26 [00:00<00:00, 28.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.54 (  0.54)	train_minacc   0.46 (  0.50)	train_majacc   0.56 (  0.55)	train_corr   0.00 (  0.00)	l1 19.0804 (19.0878)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.04it/s] 23%|##3       | 6/26 [00:00<00:00, 31.46it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.46it/s] 42%|####2     | 11/26 [00:00<00:00, 38.38it/s] 62%|######1   | 16/26 [00:00<00:00, 40.06it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.06it/s] 85%|########4 | 22/26 [00:00<00:00, 45.60it/s]100%|##########| 26/26 [00:00<00:00, 38.36it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.695 (0.695)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.692 (0.695)	test_acc   0.55 (  0.54)	test_minacc   0.44 (  0.42)	test_majacc   0.58 (  0.56)	Loss_d 0.692 (0.695)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.44 (  0.42)	test_majacc_d   0.58 (  0.56)	test_corr_d   0.03 ( -0.03)
Test: [  20/  26]	Loss 0.692 (0.695)	test_acc   0.56 (  0.54)	test_minacc   0.54 (  0.43)	test_majacc   0.57 (  0.56)	Loss_d 0.692 (0.695)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.54 (  0.43)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.01 ( -0.04)
Test: [  26/  26]	Loss 0.691 (0.695)	test_acc   0.55 (  0.54)	test_minacc   0.44 (  0.44)	test_majacc   0.57 (  0.56)	Loss_d 0.691 (0.695)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.00 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.84it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 17/  1]	epoch_time 0.0373 (0.0395)	validation_time 0.0004 (0.0008)	train_time 0.0369 (0.0385)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5372000210881234, 0.5450000166893005)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.63it/s] 19%|#9        | 5/26 [00:00<00:00, 21.42it/s] 35%|###4      | 9/26 [00:00<00:00, 27.12it/s] 50%|#####     | 13/26 [00:00<00:00, 30.20it/s] 65%|######5   | 17/26 [00:00<00:00, 32.19it/s] 81%|########  | 21/26 [00:00<00:00, 33.28it/s] 96%|#########6| 25/26 [00:00<00:00, 33.27it/s]100%|##########| 26/26 [00:00<00:00, 28.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.61 (  0.55)	train_minacc   0.51 (  0.47)	train_majacc   0.63 (  0.57)	train_corr   0.00 (  0.00)	l1 19.0755 (19.0774)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.11it/s] 31%|###       | 8/26 [00:00<00:00, 37.62it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.62it/s] 54%|#####3    | 14/26 [00:00<00:00, 45.15it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.82it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.82it/s] 92%|#########2| 24/26 [00:00<00:00, 45.85it/s]100%|##########| 26/26 [00:00<00:00, 40.93it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.59 (  0.59)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.692 (0.694)	test_acc   0.58 (  0.53)	test_minacc   0.40 (  0.42)	test_majacc   0.62 (  0.55)	Loss_d 0.692 (0.694)	test_acc_d   0.58 (  0.53)	test_minacc_d   0.40 (  0.42)	test_majacc_d   0.62 (  0.55)	test_corr_d   0.11 (  0.02)
Test: [  20/  26]	Loss 0.691 (0.694)	test_acc   0.55 (  0.52)	test_minacc   0.41 (  0.43)	test_majacc   0.57 (  0.54)	Loss_d 0.691 (0.694)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.41 (  0.43)	test_majacc_d   0.57 (  0.54)	test_corr_d   0.09 (  0.01)
Test: [  26/  26]	Loss 0.690 (0.694)	test_acc   0.58 (  0.52)	test_minacc   0.51 (  0.44)	test_majacc   0.60 (  0.54)	Loss_d 0.690 (0.694)	test_acc_d   0.58 (  0.52)	test_minacc_d   0.51 (  0.44)	test_majacc_d   0.60 (  0.54)	test_corr_d   0.09 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.14it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.46 (  0.46)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.46 (  0.46)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 18/  1]	epoch_time 0.0374 (0.0394)	validation_time 0.0003 (0.0007)	train_time 0.0370 (0.0384)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5241000150740147, 0.46300002932548523)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.68it/s] 19%|#9        | 5/26 [00:00<00:01, 20.27it/s] 35%|###4      | 9/26 [00:00<00:00, 25.66it/s] 50%|#####     | 13/26 [00:00<00:00, 29.06it/s] 65%|######5   | 17/26 [00:00<00:00, 31.05it/s] 81%|########  | 21/26 [00:00<00:00, 32.49it/s] 96%|#########6| 25/26 [00:00<00:00, 32.90it/s]100%|##########| 26/26 [00:00<00:00, 27.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.58 (  0.54)	train_minacc   0.49 (  0.45)	train_majacc   0.60 (  0.56)	train_corr   0.00 (  0.00)	l1 19.0735 (19.0743)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.74it/s] 27%|##6       | 7/26 [00:00<00:00, 38.21it/s]                                               27%|##6       | 7/26 [00:00<00:00, 38.21it/s] 50%|#####     | 13/26 [00:00<00:00, 42.76it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.65it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.65it/s] 96%|#########6| 25/26 [00:00<00:00, 47.43it/s]100%|##########| 26/26 [00:00<00:00, 40.40it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.61 (  0.61)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.692 (0.694)	test_acc   0.58 (  0.51)	test_minacc   0.40 (  0.42)	test_majacc   0.62 (  0.52)	Loss_d 0.692 (0.694)	test_acc_d   0.58 (  0.51)	test_minacc_d   0.40 (  0.42)	test_majacc_d   0.62 (  0.52)	test_corr_d   0.11 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.694)	test_acc   0.54 (  0.50)	test_minacc   0.38 (  0.43)	test_majacc   0.57 (  0.52)	Loss_d 0.692 (0.694)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.38 (  0.43)	test_majacc_d   0.57 (  0.52)	test_corr_d   0.09 ( -0.00)
Test: [  26/  26]	Loss 0.691 (0.694)	test_acc   0.57 (  0.50)	test_minacc   0.49 (  0.43)	test_majacc   0.59 (  0.52)	Loss_d 0.691 (0.694)	test_acc_d   0.57 (  0.50)	test_minacc_d   0.49 (  0.43)	test_majacc_d   0.59 (  0.52)	test_corr_d   0.10 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.88it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.56 (  0.56)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.56 (  0.56)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.02 (  0.02)
Overall Timing[ 19/  1]	epoch_time 0.0383 (0.0393)	validation_time 0.0004 (0.0007)	train_time 0.0378 (0.0384)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.503400007545948, 0.4390000104904175)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.71it/s] 19%|#9        | 5/26 [00:00<00:01, 20.36it/s] 35%|###4      | 9/26 [00:00<00:00, 26.30it/s] 50%|#####     | 13/26 [00:00<00:00, 29.73it/s] 65%|######5   | 17/26 [00:00<00:00, 31.08it/s] 81%|########  | 21/26 [00:00<00:00, 31.19it/s] 96%|#########6| 25/26 [00:00<00:00, 31.97it/s]100%|##########| 26/26 [00:00<00:00, 27.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.60 (  0.53)	train_minacc   0.49 (  0.45)	train_majacc   0.62 (  0.55)	train_corr   0.00 (  0.00)	l1 19.0721 (19.0727)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.38it/s] 27%|##6       | 7/26 [00:00<00:00, 36.20it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.20it/s] 50%|#####     | 13/26 [00:00<00:00, 42.87it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.32it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.32it/s] 96%|#########6| 25/26 [00:00<00:00, 48.43it/s]100%|##########| 26/26 [00:00<00:00, 40.74it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.61 (  0.61)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.694)	test_acc   0.56 (  0.50)	test_minacc   0.38 (  0.43)	test_majacc   0.59 (  0.52)	Loss_d 0.693 (0.694)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.38 (  0.43)	test_majacc_d   0.59 (  0.52)	test_corr_d   0.09 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.694)	test_acc   0.53 (  0.50)	test_minacc   0.40 (  0.43)	test_majacc   0.56 (  0.51)	Loss_d 0.692 (0.694)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.40 (  0.43)	test_majacc_d   0.56 (  0.51)	test_corr_d   0.08 ( -0.02)
Test: [  26/  26]	Loss 0.691 (0.694)	test_acc   0.57 (  0.50)	test_minacc   0.49 (  0.43)	test_majacc   0.59 (  0.51)	Loss_d 0.691 (0.694)	test_acc_d   0.57 (  0.50)	test_minacc_d   0.49 (  0.43)	test_majacc_d   0.59 (  0.51)	test_corr_d   0.10 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.40it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.41 (  0.41)	test_majacc   0.57 (  0.57)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.41 (  0.41)	test_majacc   0.57 (  0.57)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.02 (  0.02)
Overall Timing[ 20/  1]	epoch_time 0.0380 (0.0393)	validation_time 0.0004 (0.0007)	train_time 0.0376 (0.0384)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.49970001125335695, 0.4280000329017639)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.64it/s] 19%|#9        | 5/26 [00:00<00:01, 20.94it/s] 35%|###4      | 9/26 [00:00<00:00, 27.14it/s] 50%|#####     | 13/26 [00:00<00:00, 30.48it/s] 65%|######5   | 17/26 [00:00<00:00, 31.71it/s] 81%|########  | 21/26 [00:00<00:00, 32.86it/s] 96%|#########6| 25/26 [00:00<00:00, 33.82it/s]100%|##########| 26/26 [00:00<00:00, 28.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.58 (  0.53)	train_minacc   0.46 (  0.44)	train_majacc   0.61 (  0.55)	train_corr   0.00 (  0.00)	l1 19.0709 (19.0715)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.69it/s] 23%|##3       | 6/26 [00:00<00:00, 30.71it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.71it/s] 46%|####6     | 12/26 [00:00<00:00, 38.74it/s] 69%|######9   | 18/26 [00:00<00:00, 45.46it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.46it/s] 92%|#########2| 24/26 [00:00<00:00, 45.74it/s]100%|##########| 26/26 [00:00<00:00, 38.66it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.59 (  0.59)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.694)	test_acc   0.54 (  0.51)	test_minacc   0.37 (  0.42)	test_majacc   0.57 (  0.52)	Loss_d 0.693 (0.694)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.37 (  0.42)	test_majacc_d   0.57 (  0.52)	test_corr_d   0.09 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.694)	test_acc   0.53 (  0.50)	test_minacc   0.37 (  0.42)	test_majacc   0.56 (  0.52)	Loss_d 0.692 (0.694)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.37 (  0.42)	test_majacc_d   0.56 (  0.52)	test_corr_d   0.08 ( -0.01)
Test: [  26/  26]	Loss 0.691 (0.694)	test_acc   0.56 (  0.50)	test_minacc   0.46 (  0.42)	test_majacc   0.57 (  0.52)	Loss_d 0.691 (0.694)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.46 (  0.42)	test_majacc_d   0.57 (  0.52)	test_corr_d   0.10 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.88it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.41 (  0.41)	test_minacc   0.39 (  0.39)	test_majacc   0.58 (  0.58)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.41 (  0.41)	test_minacc   0.39 (  0.39)	test_majacc   0.58 (  0.58)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.02 (  0.02)
Overall Timing[ 21/  1]	epoch_time 0.0366 (0.0392)	validation_time 0.0004 (0.0007)	train_time 0.0362 (0.0383)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5025000140666962, 0.40700000524520874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.29it/s] 19%|#9        | 5/26 [00:00<00:00, 22.80it/s] 35%|###4      | 9/26 [00:00<00:00, 28.05it/s] 50%|#####     | 13/26 [00:00<00:00, 30.92it/s] 65%|######5   | 17/26 [00:00<00:00, 31.80it/s] 81%|########  | 21/26 [00:00<00:00, 32.83it/s] 96%|#########6| 25/26 [00:00<00:00, 33.12it/s]100%|##########| 26/26 [00:00<00:00, 28.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.58 (  0.53)	train_minacc   0.46 (  0.44)	train_majacc   0.61 (  0.55)	train_corr   0.00 (  0.00)	l1 19.0700 (19.0704)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.08it/s] 27%|##6       | 7/26 [00:00<00:00, 32.42it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.42it/s] 50%|#####     | 13/26 [00:00<00:00, 40.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.69it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.69it/s] 96%|#########6| 25/26 [00:00<00:00, 46.86it/s]100%|##########| 26/26 [00:00<00:00, 38.65it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.59 (  0.59)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.694)	test_acc   0.53 (  0.51)	test_minacc   0.35 (  0.40)	test_majacc   0.57 (  0.53)	Loss_d 0.693 (0.694)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.35 (  0.40)	test_majacc_d   0.57 (  0.53)	test_corr_d   0.08 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.694)	test_acc   0.53 (  0.50)	test_minacc   0.37 (  0.40)	test_majacc   0.57 (  0.52)	Loss_d 0.692 (0.694)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.37 (  0.40)	test_majacc_d   0.57 (  0.52)	test_corr_d   0.08 ( -0.02)
Test: [  26/  26]	Loss 0.691 (0.694)	test_acc   0.57 (  0.51)	test_minacc   0.46 (  0.41)	test_majacc   0.59 (  0.52)	Loss_d 0.691 (0.694)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.46 (  0.41)	test_majacc_d   0.59 (  0.52)	test_corr_d   0.11 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.54it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.41 (  0.41)	test_minacc   0.39 (  0.39)	test_majacc   0.57 (  0.57)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.41 (  0.41)	test_minacc   0.39 (  0.39)	test_majacc   0.57 (  0.57)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.02 (  0.02)
Overall Timing[ 22/  1]	epoch_time 0.0353 (0.0390)	validation_time 0.0003 (0.0007)	train_time 0.0350 (0.0381)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5068000094592571, 0.40700000524520874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 22.47it/s] 23%|##3       | 6/26 [00:00<00:00, 24.85it/s] 35%|###4      | 9/26 [00:00<00:00, 20.62it/s] 46%|####6     | 12/26 [00:00<00:00, 19.13it/s] 54%|#####3    | 14/26 [00:00<00:00, 18.43it/s] 62%|######1   | 16/26 [00:00<00:00, 17.94it/s] 69%|######9   | 18/26 [00:00<00:00, 17.61it/s] 77%|#######6  | 20/26 [00:01<00:00, 17.23it/s] 85%|########4 | 22/26 [00:01<00:00, 17.05it/s] 92%|#########2| 24/26 [00:01<00:00, 16.84it/s]100%|##########| 26/26 [00:01<00:00, 16.93it/s]100%|##########| 26/26 [00:01<00:00, 17.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 340 tensor(-0.0155, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
rho, theta 445 tensor(-0.0010, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
rho, theta 488 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
rho, theta 491 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
rho, theta 494 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
rho, theta 498 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
rho, theta 500 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
rho, theta 502 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
rho, theta 506 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
rho, theta 507 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
rho, theta 509 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
rho, theta 510 tensor(-9.9529e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
rho, theta 510 tensor(-8.7070e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
rho, theta 510 tensor(-7.8433e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
rho, theta 505 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
rho, theta 508 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
rho, theta 510 tensor(-9.1422e-05, device='cuda:0')
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [23][  26/  26]	Loss 0.000 (0.004)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.20)	train_acc   0.72 (  0.50)	train_minacc   0.51 (  0.64)	train_majacc   0.76 (  0.47)	train_corr   0.00 (  0.00)	l1 15.0242 (15.6524)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.25it/s] 27%|##6       | 7/26 [00:00<00:00, 34.81it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.81it/s] 50%|#####     | 13/26 [00:00<00:00, 39.91it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.57it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.57it/s] 96%|#########6| 25/26 [00:00<00:00, 45.70it/s]100%|##########| 26/26 [00:00<00:00, 38.54it/s]
Test: [   0/  26]	Loss 0.684 (0.684)	test_acc   0.71 (  0.71)	test_minacc   0.34 (  0.34)	test_majacc   0.77 (  0.77)	Loss_d 0.684 (0.684)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.43 (  0.43)
Test: [  10/  26]	Loss 0.687 (0.686)	test_acc   0.66 (  0.60)	test_minacc   0.65 (  0.49)	test_majacc   0.66 (  0.62)	Loss_d 0.687 (0.686)	test_acc_d   0.66 (  0.60)	test_minacc_d   0.65 (  0.49)	test_majacc_d   0.66 (  0.62)	test_corr_d   0.10 (  0.16)
Test: [  20/  26]	Loss 0.686 (0.686)	test_acc   0.62 (  0.61)	test_minacc   0.59 (  0.49)	test_majacc   0.62 (  0.63)	Loss_d 0.686 (0.686)	test_acc_d   0.62 (  0.61)	test_minacc_d   0.59 (  0.49)	test_majacc_d   0.62 (  0.63)	test_corr_d   0.14 (  0.15)
Test: [  26/  26]	Loss 0.685 (0.686)	test_acc   0.69 (  0.61)	test_minacc   0.51 (  0.49)	test_majacc   0.72 (  0.64)	Loss_d 0.685 (0.686)	test_acc_d   0.69 (  0.61)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.72 (  0.64)	test_corr_d   0.19 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.42it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.48 (  0.48)	test_majacc   0.69 (  0.69)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.48 (  0.48)	test_majacc   0.69 (  0.69)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 23/  1]	epoch_time 0.0489 (0.0394)	validation_time 0.0006 (0.0007)	train_time 0.0483 (0.0386)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.6142000254392624, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.45it/s] 12%|#1        | 3/26 [00:00<00:02, 11.37it/s] 19%|#9        | 5/26 [00:00<00:01, 13.75it/s] 27%|##6       | 7/26 [00:00<00:01, 15.11it/s] 35%|###4      | 9/26 [00:00<00:01, 15.85it/s] 42%|####2     | 11/26 [00:00<00:00, 16.43it/s] 50%|#####     | 13/26 [00:00<00:00, 16.64it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.86it/s] 65%|######5   | 17/26 [00:01<00:00, 17.00it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.14it/s] 81%|########  | 21/26 [00:01<00:00, 16.97it/s] 88%|########8 | 23/26 [00:01<00:00, 17.02it/s] 96%|#########6| 25/26 [00:01<00:00, 17.03it/s]100%|##########| 26/26 [00:01<00:00, 15.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
rho, theta 508 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
rho, theta 510 tensor(-8.1070e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
rho, theta 509 tensor(-9.6482e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
rho, theta 510 tensor(-7.2276e-05, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.23 (  0.22)	train_acc   0.54 (  0.52)	train_minacc   0.56 (  0.53)	train_majacc   0.54 (  0.52)	train_corr   0.00 (  0.00)	l1 15.0190 (15.0273)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.05it/s] 23%|##3       | 6/26 [00:00<00:00, 29.26it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.26it/s] 42%|####2     | 11/26 [00:00<00:00, 37.98it/s] 65%|######5   | 17/26 [00:00<00:00, 43.76it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.76it/s] 85%|########4 | 22/26 [00:00<00:00, 44.96it/s]100%|##########| 26/26 [00:00<00:00, 38.99it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.39 (  0.39)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.57 (  0.52)	test_minacc   0.65 (  0.49)	test_majacc   0.56 (  0.52)	Loss_d 0.690 (0.692)	test_acc_d   0.57 (  0.52)	test_minacc_d   0.65 (  0.49)	test_majacc_d   0.56 (  0.52)	test_corr_d   0.00 (  0.01)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.54 (  0.52)	test_minacc   0.62 (  0.50)	test_majacc   0.52 (  0.53)	Loss_d 0.691 (0.692)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.62 (  0.50)	test_majacc_d   0.52 (  0.53)	test_corr_d  -0.02 (  0.01)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.54 (  0.52)	test_minacc   0.56 (  0.51)	test_majacc   0.54 (  0.53)	Loss_d 0.690 (0.692)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.04 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.26it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 24/  1]	epoch_time 0.0500 (0.0398)	validation_time 0.0004 (0.0007)	train_time 0.0496 (0.0390)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5237000142931938, 0.49000000953674316)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.22it/s] 12%|#1        | 3/26 [00:00<00:02, 11.50it/s] 19%|#9        | 5/26 [00:00<00:01, 13.80it/s] 27%|##6       | 7/26 [00:00<00:01, 14.85it/s] 35%|###4      | 9/26 [00:00<00:01, 15.61it/s] 42%|####2     | 11/26 [00:00<00:00, 15.62it/s] 50%|#####     | 13/26 [00:00<00:00, 15.91it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.33it/s] 65%|######5   | 17/26 [00:01<00:00, 16.60it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.86it/s] 81%|########  | 21/26 [00:01<00:00, 17.02it/s] 88%|########8 | 23/26 [00:01<00:00, 17.13it/s] 96%|#########6| 25/26 [00:01<00:00, 17.14it/s]100%|##########| 26/26 [00:01<00:00, 15.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.23 (  0.23)	train_acc   0.54 (  0.52)	train_minacc   0.56 (  0.51)	train_majacc   0.54 (  0.52)	train_corr   0.00 (  0.00)	l1 15.0142 (15.0144)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.74it/s] 19%|#9        | 5/26 [00:00<00:00, 26.73it/s]                                               19%|#9        | 5/26 [00:00<00:00, 26.73it/s] 42%|####2     | 11/26 [00:00<00:00, 41.41it/s] 62%|######1   | 16/26 [00:00<00:00, 42.07it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.07it/s] 85%|########4 | 22/26 [00:00<00:00, 47.26it/s]100%|##########| 26/26 [00:00<00:00, 38.78it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.39 (  0.39)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.11 ( -0.11)
Test: [  10/  26]	Loss 0.690 (0.693)	test_acc   0.57 (  0.51)	test_minacc   0.65 (  0.49)	test_majacc   0.56 (  0.52)	Loss_d 0.690 (0.693)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.65 (  0.49)	test_majacc_d   0.56 (  0.52)	test_corr_d  -0.05 ( -0.08)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.62 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.62 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.10 ( -0.08)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.56 (  0.51)	test_majacc   0.54 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.06 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.44it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.24 ( -0.24)
Overall Timing[ 25/  1]	epoch_time 0.0500 (0.0402)	validation_time 0.0004 (0.0006)	train_time 0.0496 (0.0394)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5162000149488449, 0.49800002574920654)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.32it/s] 12%|#1        | 3/26 [00:00<00:01, 12.04it/s] 19%|#9        | 5/26 [00:00<00:01, 14.06it/s] 27%|##6       | 7/26 [00:00<00:01, 15.22it/s] 35%|###4      | 9/26 [00:00<00:01, 15.77it/s] 42%|####2     | 11/26 [00:00<00:00, 16.19it/s] 50%|#####     | 13/26 [00:00<00:00, 16.44it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.49it/s] 65%|######5   | 17/26 [00:01<00:00, 16.47it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.54it/s] 81%|########  | 21/26 [00:01<00:00, 16.55it/s] 88%|########8 | 23/26 [00:01<00:00, 16.70it/s] 96%|#########6| 25/26 [00:01<00:00, 16.92it/s]100%|##########| 26/26 [00:01<00:00, 15.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.23 (  0.23)	train_acc   0.55 (  0.52)	train_minacc   0.56 (  0.50)	train_majacc   0.55 (  0.52)	train_corr   0.00 (  0.00)	l1 15.0120 (15.0103)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.96it/s] 27%|##6       | 7/26 [00:00<00:00, 34.96it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.96it/s] 46%|####6     | 12/26 [00:00<00:00, 41.14it/s] 65%|######5   | 17/26 [00:00<00:00, 41.21it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.21it/s] 88%|########8 | 23/26 [00:00<00:00, 45.86it/s]100%|##########| 26/26 [00:00<00:00, 38.21it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.39 (  0.39)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.690 (0.693)	test_acc   0.57 (  0.51)	test_minacc   0.65 (  0.49)	test_majacc   0.56 (  0.52)	Loss_d 0.690 (0.693)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.65 (  0.49)	test_majacc_d   0.56 (  0.52)	test_corr_d  -0.03 ( -0.06)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.62 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.62 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.08 ( -0.06)
Test: [  26/  26]	Loss 0.691 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.56 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.691 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.04 ( -0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.52it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 26/  1]	epoch_time 0.0511 (0.0406)	validation_time 0.0004 (0.0006)	train_time 0.0507 (0.0398)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5182000103890896, 0.49800002574920654)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.87it/s] 12%|#1        | 3/26 [00:00<00:02, 10.05it/s] 19%|#9        | 5/26 [00:00<00:01, 12.75it/s] 27%|##6       | 7/26 [00:00<00:01, 14.27it/s] 35%|###4      | 9/26 [00:00<00:01, 15.13it/s] 42%|####2     | 11/26 [00:00<00:00, 15.80it/s] 50%|#####     | 13/26 [00:00<00:00, 16.25it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.25it/s] 65%|######5   | 17/26 [00:01<00:00, 16.30it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.24it/s] 81%|########  | 21/26 [00:01<00:00, 16.39it/s] 88%|########8 | 23/26 [00:01<00:00, 16.59it/s] 96%|#########6| 25/26 [00:01<00:00, 16.74it/s]100%|##########| 26/26 [00:01<00:00, 14.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.23 (  0.23)	train_acc   0.55 (  0.52)	train_minacc   0.56 (  0.50)	train_majacc   0.55 (  0.52)	train_corr   0.00 (  0.00)	l1 15.0155 (15.0132)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.81it/s] 27%|##6       | 7/26 [00:00<00:00, 34.12it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.12it/s] 50%|#####     | 13/26 [00:00<00:00, 40.11it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.24it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.24it/s] 96%|#########6| 25/26 [00:00<00:00, 46.40it/s]100%|##########| 26/26 [00:00<00:00, 38.92it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.39 (  0.39)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.691 (0.693)	test_acc   0.58 (  0.51)	test_minacc   0.65 (  0.49)	test_majacc   0.56 (  0.52)	Loss_d 0.691 (0.693)	test_acc_d   0.58 (  0.51)	test_minacc_d   0.65 (  0.49)	test_majacc_d   0.56 (  0.52)	test_corr_d  -0.03 ( -0.06)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.60 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.60 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.09 ( -0.06)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.56 (  0.50)	test_majacc   0.55 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.56 (  0.50)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.05 ( -0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.55it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.24 ( -0.24)
Overall Timing[ 27/  1]	epoch_time 0.0509 (0.0410)	validation_time 0.0004 (0.0006)	train_time 0.0505 (0.0402)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5183000103831291, 0.49800002574920654)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.16it/s] 12%|#1        | 3/26 [00:00<00:02, 11.01it/s] 19%|#9        | 5/26 [00:00<00:01, 13.34it/s] 27%|##6       | 7/26 [00:00<00:01, 14.73it/s] 35%|###4      | 9/26 [00:00<00:01, 15.50it/s] 42%|####2     | 11/26 [00:00<00:00, 16.07it/s] 50%|#####     | 13/26 [00:00<00:00, 16.28it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.52it/s] 65%|######5   | 17/26 [00:01<00:00, 16.63it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.77it/s] 81%|########  | 21/26 [00:01<00:00, 16.89it/s] 88%|########8 | 23/26 [00:01<00:00, 16.93it/s] 96%|#########6| 25/26 [00:01<00:00, 17.05it/s]100%|##########| 26/26 [00:01<00:00, 15.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.54 (  0.52)	train_minacc   0.56 (  0.50)	train_majacc   0.54 (  0.52)	train_corr   0.00 (  0.00)	l1 15.0199 (15.0179)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.89it/s] 19%|#9        | 5/26 [00:00<00:00, 24.59it/s]                                               19%|#9        | 5/26 [00:00<00:00, 24.59it/s] 42%|####2     | 11/26 [00:00<00:00, 37.35it/s] 62%|######1   | 16/26 [00:00<00:00, 41.53it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.53it/s] 85%|########4 | 22/26 [00:00<00:00, 46.60it/s]100%|##########| 26/26 [00:00<00:00, 37.65it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.39 (  0.39)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.691 (0.693)	test_acc   0.58 (  0.51)	test_minacc   0.65 (  0.49)	test_majacc   0.57 (  0.52)	Loss_d 0.691 (0.693)	test_acc_d   0.58 (  0.51)	test_minacc_d   0.65 (  0.49)	test_majacc_d   0.57 (  0.52)	test_corr_d  -0.03 ( -0.07)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.62 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.62 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.09 ( -0.07)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.56 (  0.51)	test_majacc   0.54 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.05 ( -0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.60it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 28/  1]	epoch_time 0.0510 (0.0413)	validation_time 0.0004 (0.0006)	train_time 0.0505 (0.0406)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5189000136256218, 0.4970000088214874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.06it/s] 12%|#1        | 3/26 [00:00<00:01, 12.17it/s] 19%|#9        | 5/26 [00:00<00:01, 13.95it/s] 27%|##6       | 7/26 [00:00<00:01, 14.87it/s] 35%|###4      | 9/26 [00:00<00:01, 15.45it/s] 42%|####2     | 11/26 [00:00<00:00, 15.93it/s] 50%|#####     | 13/26 [00:00<00:00, 16.31it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.56it/s] 65%|######5   | 17/26 [00:01<00:00, 16.67it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.80it/s] 81%|########  | 21/26 [00:01<00:00, 16.94it/s] 88%|########8 | 23/26 [00:01<00:00, 17.15it/s] 96%|#########6| 25/26 [00:01<00:00, 17.31it/s]100%|##########| 26/26 [00:01<00:00, 15.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.54 (  0.52)	train_minacc   0.56 (  0.50)	train_majacc   0.54 (  0.53)	train_corr   0.00 (  0.00)	l1 15.0244 (15.0228)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.44it/s] 15%|#5        | 4/26 [00:00<00:01, 20.10it/s] 35%|###4      | 9/26 [00:00<00:00, 32.92it/s]                                               35%|###4      | 9/26 [00:00<00:00, 32.92it/s] 58%|#####7    | 15/26 [00:00<00:00, 42.25it/s] 77%|#######6  | 20/26 [00:00<00:00, 42.82it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 42.82it/s]100%|##########| 26/26 [00:00<00:00, 47.83it/s]100%|##########| 26/26 [00:00<00:00, 37.24it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.39 (  0.39)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.09 ( -0.09)
Test: [  10/  26]	Loss 0.691 (0.693)	test_acc   0.58 (  0.51)	test_minacc   0.65 (  0.49)	test_majacc   0.57 (  0.52)	Loss_d 0.691 (0.693)	test_acc_d   0.58 (  0.51)	test_minacc_d   0.65 (  0.49)	test_majacc_d   0.57 (  0.52)	test_corr_d  -0.03 ( -0.07)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.63 (  0.50)	test_majacc   0.51 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.63 (  0.50)	test_majacc_d   0.51 (  0.52)	test_corr_d  -0.10 ( -0.07)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.56 (  0.51)	test_majacc   0.54 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.06 ( -0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.79it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.26 ( -0.26)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.26 ( -0.26)
Overall Timing[ 29/  1]	epoch_time 0.0502 (0.0416)	validation_time 0.0003 (0.0006)	train_time 0.0499 (0.0409)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5193000182509422, 0.49900001287460327)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.94it/s] 12%|#1        | 3/26 [00:00<00:01, 12.14it/s] 19%|#9        | 5/26 [00:00<00:01, 13.94it/s] 27%|##6       | 7/26 [00:00<00:01, 14.87it/s] 35%|###4      | 9/26 [00:00<00:01, 15.55it/s] 42%|####2     | 11/26 [00:00<00:00, 15.98it/s] 50%|#####     | 13/26 [00:00<00:00, 16.09it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.22it/s] 65%|######5   | 17/26 [00:01<00:00, 16.42it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.30it/s] 81%|########  | 21/26 [00:01<00:00, 16.25it/s] 88%|########8 | 23/26 [00:01<00:00, 16.43it/s] 96%|#########6| 25/26 [00:01<00:00, 16.62it/s]100%|##########| 26/26 [00:01<00:00, 15.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.54 (  0.52)	train_minacc   0.56 (  0.51)	train_majacc   0.54 (  0.53)	train_corr   0.00 (  0.00)	l1 15.0291 (15.0277)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.07it/s] 19%|#9        | 5/26 [00:00<00:00, 26.12it/s]                                               19%|#9        | 5/26 [00:00<00:00, 26.12it/s] 50%|#####     | 13/26 [00:00<00:00, 42.90it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.09it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.09it/s] 96%|#########6| 25/26 [00:00<00:00, 47.17it/s]100%|##########| 26/26 [00:00<00:00, 39.48it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.39 (  0.39)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.09 ( -0.09)
Test: [  10/  26]	Loss 0.691 (0.693)	test_acc   0.58 (  0.51)	test_minacc   0.65 (  0.49)	test_majacc   0.57 (  0.52)	Loss_d 0.691 (0.693)	test_acc_d   0.58 (  0.51)	test_minacc_d   0.65 (  0.49)	test_majacc_d   0.57 (  0.52)	test_corr_d  -0.03 ( -0.07)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.63 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.63 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.10 ( -0.07)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.56 (  0.51)	test_majacc   0.54 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.06 ( -0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.64it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.27 ( -0.27)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.27 ( -0.27)
Overall Timing[ 30/  1]	epoch_time 0.0508 (0.0419)	validation_time 0.0004 (0.0006)	train_time 0.0504 (0.0412)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5201000182032585, 0.5010000467300415)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.72it/s] 12%|#1        | 3/26 [00:00<00:02, 10.96it/s] 19%|#9        | 5/26 [00:00<00:01, 13.46it/s] 27%|##6       | 7/26 [00:00<00:01, 14.67it/s] 35%|###4      | 9/26 [00:00<00:01, 15.47it/s] 42%|####2     | 11/26 [00:00<00:00, 15.92it/s] 50%|#####     | 13/26 [00:00<00:00, 16.22it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.24it/s] 65%|######5   | 17/26 [00:01<00:00, 16.48it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.68it/s] 81%|########  | 21/26 [00:01<00:00, 16.66it/s] 88%|########8 | 23/26 [00:01<00:00, 16.74it/s] 96%|#########6| 25/26 [00:01<00:00, 16.86it/s]100%|##########| 26/26 [00:01<00:00, 15.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.54 (  0.52)	train_minacc   0.56 (  0.51)	train_majacc   0.54 (  0.53)	train_corr   0.00 (  0.00)	l1 15.0338 (15.0326)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.56it/s] 27%|##6       | 7/26 [00:00<00:00, 34.13it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.13it/s] 50%|#####     | 13/26 [00:00<00:00, 40.38it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.73it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.73it/s] 96%|#########6| 25/26 [00:00<00:00, 45.73it/s]100%|##########| 26/26 [00:00<00:00, 38.58it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.39 (  0.39)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Test: [  10/  26]	Loss 0.691 (0.693)	test_acc   0.58 (  0.52)	test_minacc   0.66 (  0.49)	test_majacc   0.57 (  0.52)	Loss_d 0.691 (0.693)	test_acc_d   0.58 (  0.52)	test_minacc_d   0.66 (  0.49)	test_majacc_d   0.57 (  0.52)	test_corr_d  -0.03 ( -0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.63 (  0.50)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.63 (  0.50)	test_majacc_d   0.52 (  0.53)	test_corr_d  -0.11 ( -0.07)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.56 (  0.51)	test_majacc   0.54 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.07 ( -0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.03it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.28 ( -0.28)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.28 ( -0.28)
Overall Timing[ 31/  1]	epoch_time 0.0499 (0.0422)	validation_time 0.0004 (0.0006)	train_time 0.0494 (0.0414)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5220000157654285, 0.5090000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.61it/s] 12%|#1        | 3/26 [00:00<00:02, 10.95it/s] 19%|#9        | 5/26 [00:00<00:01, 13.44it/s] 27%|##6       | 7/26 [00:00<00:01, 14.59it/s] 35%|###4      | 9/26 [00:00<00:01, 15.38it/s] 42%|####2     | 11/26 [00:00<00:00, 15.65it/s] 50%|#####     | 13/26 [00:00<00:00, 16.04it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.15it/s] 65%|######5   | 17/26 [00:01<00:00, 16.41it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.57it/s] 81%|########  | 21/26 [00:01<00:00, 16.62it/s] 88%|########8 | 23/26 [00:01<00:00, 16.67it/s] 96%|#########6| 25/26 [00:01<00:00, 16.72it/s]100%|##########| 26/26 [00:01<00:00, 15.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.55 (  0.53)	train_minacc   0.56 (  0.51)	train_majacc   0.55 (  0.53)	train_corr   0.00 (  0.00)	l1 15.0384 (15.0373)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.17it/s] 27%|##6       | 7/26 [00:00<00:00, 35.97it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.97it/s] 46%|####6     | 12/26 [00:00<00:00, 41.43it/s] 65%|######5   | 17/26 [00:00<00:00, 42.93it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.93it/s] 88%|########8 | 23/26 [00:00<00:00, 47.70it/s]100%|##########| 26/26 [00:00<00:00, 39.30it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.39 (  0.39)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Test: [  10/  26]	Loss 0.691 (0.693)	test_acc   0.58 (  0.52)	test_minacc   0.66 (  0.49)	test_majacc   0.57 (  0.52)	Loss_d 0.691 (0.693)	test_acc_d   0.58 (  0.52)	test_minacc_d   0.66 (  0.49)	test_majacc_d   0.57 (  0.52)	test_corr_d  -0.03 ( -0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.63 (  0.50)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.63 (  0.50)	test_majacc_d   0.52 (  0.53)	test_corr_d  -0.11 ( -0.08)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.56 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.07 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.50it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.29 ( -0.29)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.29 ( -0.29)
Overall Timing[ 32/  1]	epoch_time 0.0523 (0.0425)	validation_time 0.0004 (0.0006)	train_time 0.0518 (0.0417)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5223000182807446, 0.5120000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.45it/s] 12%|#1        | 3/26 [00:00<00:02, 11.43it/s] 19%|#9        | 5/26 [00:00<00:01, 13.63it/s] 27%|##6       | 7/26 [00:00<00:01, 14.80it/s] 35%|###4      | 9/26 [00:00<00:01, 15.49it/s] 42%|####2     | 11/26 [00:00<00:00, 15.93it/s] 50%|#####     | 13/26 [00:00<00:00, 16.23it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.44it/s] 65%|######5   | 17/26 [00:01<00:00, 16.54it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.56it/s] 81%|########  | 21/26 [00:01<00:00, 16.41it/s] 88%|########8 | 23/26 [00:01<00:00, 16.49it/s] 96%|#########6| 25/26 [00:01<00:00, 16.70it/s]100%|##########| 26/26 [00:01<00:00, 15.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.54 (  0.53)	train_minacc   0.56 (  0.50)	train_majacc   0.54 (  0.53)	train_corr   0.00 (  0.00)	l1 15.0428 (15.0419)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.74it/s] 27%|##6       | 7/26 [00:00<00:00, 35.39it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.39it/s] 46%|####6     | 12/26 [00:00<00:00, 38.67it/s] 69%|######9   | 18/26 [00:00<00:00, 45.13it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.13it/s] 92%|#########2| 24/26 [00:00<00:00, 45.44it/s]100%|##########| 26/26 [00:00<00:00, 39.85it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.39 (  0.39)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.09 ( -0.09)
Test: [  10/  26]	Loss 0.691 (0.693)	test_acc   0.58 (  0.52)	test_minacc   0.66 (  0.49)	test_majacc   0.57 (  0.52)	Loss_d 0.691 (0.693)	test_acc_d   0.58 (  0.52)	test_minacc_d   0.66 (  0.49)	test_majacc_d   0.57 (  0.52)	test_corr_d  -0.03 ( -0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.63 (  0.50)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.63 (  0.50)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.11 ( -0.08)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.56 (  0.51)	test_majacc   0.54 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.07 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.67it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.30 ( -0.30)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.30 ( -0.30)
Overall Timing[ 33/  1]	epoch_time 0.0491 (0.0427)	validation_time 0.0004 (0.0006)	train_time 0.0486 (0.0420)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5220000122785569, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.25it/s] 12%|#1        | 3/26 [00:00<00:01, 11.53it/s] 19%|#9        | 5/26 [00:00<00:01, 13.77it/s] 27%|##6       | 7/26 [00:00<00:01, 15.07it/s] 35%|###4      | 9/26 [00:00<00:01, 15.75it/s] 42%|####2     | 11/26 [00:00<00:00, 16.16it/s] 50%|#####     | 13/26 [00:00<00:00, 16.39it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.34it/s] 65%|######5   | 17/26 [00:01<00:00, 16.50it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.57it/s] 81%|########  | 21/26 [00:01<00:00, 16.39it/s] 88%|########8 | 23/26 [00:01<00:00, 16.48it/s] 96%|#########6| 25/26 [00:01<00:00, 16.50it/s]100%|##########| 26/26 [00:01<00:00, 15.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.54 (  0.53)	train_minacc   0.56 (  0.51)	train_majacc   0.54 (  0.53)	train_corr   0.00 (  0.00)	l1 15.0470 (15.0462)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.00it/s] 31%|###       | 8/26 [00:00<00:00, 37.25it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.25it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.91it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.40it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.40it/s]100%|##########| 26/26 [00:00<00:00, 50.13it/s]100%|##########| 26/26 [00:00<00:00, 41.88it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.38 (  0.38)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.09 ( -0.09)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.58 (  0.52)	test_minacc   0.66 (  0.49)	test_majacc   0.56 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.58 (  0.52)	test_minacc_d   0.66 (  0.49)	test_majacc_d   0.56 (  0.52)	test_corr_d  -0.03 ( -0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.62 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.62 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.12 ( -0.08)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.56 (  0.51)	test_majacc   0.54 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.07 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.96it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.30 ( -0.30)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.30 ( -0.30)
Overall Timing[ 34/  1]	epoch_time 0.0500 (0.0429)	validation_time 0.0004 (0.0006)	train_time 0.0495 (0.0422)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5228000168800354, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.68it/s] 12%|#1        | 3/26 [00:00<00:02, 10.80it/s] 19%|#9        | 5/26 [00:00<00:01, 12.93it/s] 27%|##6       | 7/26 [00:00<00:01, 14.23it/s] 35%|###4      | 9/26 [00:00<00:01, 15.00it/s] 42%|####2     | 11/26 [00:00<00:00, 15.64it/s] 50%|#####     | 13/26 [00:00<00:00, 15.94it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.33it/s] 65%|######5   | 17/26 [00:01<00:00, 16.50it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.74it/s] 81%|########  | 21/26 [00:01<00:00, 16.69it/s] 88%|########8 | 23/26 [00:01<00:00, 16.81it/s] 96%|#########6| 25/26 [00:01<00:00, 16.88it/s]100%|##########| 26/26 [00:01<00:00, 15.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.55 (  0.53)	train_minacc   0.56 (  0.51)	train_majacc   0.55 (  0.53)	train_corr   0.00 (  0.00)	l1 15.0510 (15.0502)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.71it/s] 19%|#9        | 5/26 [00:00<00:00, 26.97it/s] 38%|###8      | 10/26 [00:00<00:00, 36.16it/s]                                                38%|###8      | 10/26 [00:00<00:00, 36.16it/s] 58%|#####7    | 15/26 [00:00<00:00, 39.77it/s] 77%|#######6  | 20/26 [00:00<00:00, 43.08it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 43.08it/s]100%|##########| 26/26 [00:00<00:00, 48.05it/s]100%|##########| 26/26 [00:00<00:00, 37.73it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.39 (  0.39)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.09 ( -0.09)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.58 (  0.51)	test_minacc   0.66 (  0.49)	test_majacc   0.56 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.58 (  0.51)	test_minacc_d   0.66 (  0.49)	test_majacc_d   0.56 (  0.52)	test_corr_d  -0.03 ( -0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.65 (  0.50)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.65 (  0.50)	test_majacc_d   0.52 (  0.53)	test_corr_d  -0.12 ( -0.08)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.52)	test_minacc   0.56 (  0.51)	test_majacc   0.56 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.56 (  0.52)	test_corr_d  -0.07 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.61it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.46 (  0.46)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.46 (  0.46)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.31 ( -0.31)
Overall Timing[ 35/  1]	epoch_time 0.0512 (0.0431)	validation_time 0.0003 (0.0006)	train_time 0.0509 (0.0424)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.522600011587143, 0.5240000486373901)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.86it/s] 12%|#1        | 3/26 [00:00<00:02, 10.58it/s] 19%|#9        | 5/26 [00:00<00:01, 13.01it/s] 27%|##6       | 7/26 [00:00<00:01, 14.50it/s] 35%|###4      | 9/26 [00:00<00:01, 15.40it/s] 42%|####2     | 11/26 [00:00<00:00, 15.72it/s] 50%|#####     | 13/26 [00:00<00:00, 15.92it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.25it/s] 65%|######5   | 17/26 [00:01<00:00, 16.32it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.25it/s] 81%|########  | 21/26 [00:01<00:00, 16.49it/s] 88%|########8 | 23/26 [00:01<00:00, 16.72it/s] 96%|#########6| 25/26 [00:01<00:00, 16.94it/s]100%|##########| 26/26 [00:01<00:00, 15.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.55 (  0.53)	train_minacc   0.56 (  0.51)	train_majacc   0.55 (  0.53)	train_corr   0.00 (  0.00)	l1 15.0547 (15.0541)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.18it/s] 27%|##6       | 7/26 [00:00<00:00, 36.10it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.10it/s] 50%|#####     | 13/26 [00:00<00:00, 40.18it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.17it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.17it/s] 96%|#########6| 25/26 [00:00<00:00, 46.38it/s]100%|##########| 26/26 [00:00<00:00, 39.80it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.39 (  0.39)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.09 ( -0.09)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.57 (  0.51)	test_minacc   0.65 (  0.49)	test_majacc   0.56 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.65 (  0.49)	test_majacc_d   0.56 (  0.52)	test_corr_d  -0.03 ( -0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.65 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.65 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.12 ( -0.08)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.56 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.07 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.56it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.47 (  0.47)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.47 (  0.47)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.31 ( -0.31)
Overall Timing[ 36/  1]	epoch_time 0.0517 (0.0434)	validation_time 0.0004 (0.0006)	train_time 0.0513 (0.0426)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5209000137150288, 0.5250000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.08it/s] 12%|#1        | 3/26 [00:00<00:02, 10.04it/s] 19%|#9        | 5/26 [00:00<00:01, 12.71it/s] 27%|##6       | 7/26 [00:00<00:01, 14.24it/s] 35%|###4      | 9/26 [00:00<00:01, 15.13it/s] 42%|####2     | 11/26 [00:00<00:00, 15.63it/s] 50%|#####     | 13/26 [00:00<00:00, 16.03it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.26it/s] 65%|######5   | 17/26 [00:01<00:00, 16.43it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.39it/s] 81%|########  | 21/26 [00:01<00:00, 16.57it/s] 88%|########8 | 23/26 [00:01<00:00, 16.64it/s] 96%|#########6| 25/26 [00:01<00:00, 16.75it/s]100%|##########| 26/26 [00:01<00:00, 14.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.54 (  0.53)	train_minacc   0.56 (  0.51)	train_majacc   0.54 (  0.53)	train_corr   0.00 (  0.00)	l1 15.0582 (15.0576)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.94it/s] 31%|###       | 8/26 [00:00<00:00, 39.20it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.20it/s] 50%|#####     | 13/26 [00:00<00:00, 42.30it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.06it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.06it/s] 96%|#########6| 25/26 [00:00<00:00, 47.72it/s]100%|##########| 26/26 [00:00<00:00, 41.74it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.39 (  0.39)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.58 (  0.51)	test_minacc   0.66 (  0.49)	test_majacc   0.56 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.58 (  0.51)	test_minacc_d   0.66 (  0.49)	test_majacc_d   0.56 (  0.52)	test_corr_d  -0.03 ( -0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.63 (  0.51)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.63 (  0.51)	test_majacc_d   0.51 (  0.52)	test_corr_d  -0.12 ( -0.08)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.56 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.06 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.76it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.32 ( -0.32)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.32 ( -0.32)
Overall Timing[ 37/  1]	epoch_time 0.0513 (0.0436)	validation_time 0.0004 (0.0006)	train_time 0.0508 (0.0429)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5208000162541866, 0.5290000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.07it/s] 12%|#1        | 3/26 [00:00<00:02, 11.31it/s] 19%|#9        | 5/26 [00:00<00:01, 13.23it/s] 27%|##6       | 7/26 [00:00<00:01, 14.54it/s] 35%|###4      | 9/26 [00:00<00:01, 15.29it/s] 42%|####2     | 11/26 [00:00<00:00, 15.82it/s] 50%|#####     | 13/26 [00:00<00:00, 16.11it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.37it/s] 65%|######5   | 17/26 [00:01<00:00, 16.61it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.69it/s] 81%|########  | 21/26 [00:01<00:00, 16.79it/s] 88%|########8 | 23/26 [00:01<00:00, 16.73it/s] 96%|#########6| 25/26 [00:01<00:00, 16.87it/s]100%|##########| 26/26 [00:01<00:00, 15.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.55 (  0.52)	train_minacc   0.56 (  0.50)	train_majacc   0.55 (  0.53)	train_corr   0.00 (  0.00)	l1 15.0614 (15.0609)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.35it/s] 35%|###4      | 9/26 [00:00<00:00, 39.55it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.55it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.78it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.78it/s] 81%|########  | 21/26 [00:00<00:00, 46.47it/s]100%|##########| 26/26 [00:00<00:00, 41.38it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.43 (  0.43)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.57 (  0.51)	test_minacc   0.63 (  0.50)	test_majacc   0.56 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.63 (  0.50)	test_majacc_d   0.56 (  0.52)	test_corr_d  -0.03 ( -0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.63 (  0.51)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.63 (  0.51)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.12 ( -0.08)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.56 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.06 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.15it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.48 (  0.48)	Loss_d 0.691 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.32 ( -0.32)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.48 (  0.48)	Loss_d 0.691 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.32 ( -0.32)
Overall Timing[ 38/  1]	epoch_time 0.0501 (0.0437)	validation_time 0.0004 (0.0006)	train_time 0.0497 (0.0430)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5198000151515006, 0.5360000133514404)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.54it/s] 12%|#1        | 3/26 [00:00<00:02,  9.54it/s] 19%|#9        | 5/26 [00:00<00:01, 12.29it/s] 27%|##6       | 7/26 [00:00<00:01, 13.79it/s] 35%|###4      | 9/26 [00:00<00:01, 14.76it/s] 42%|####2     | 11/26 [00:00<00:00, 15.22it/s] 50%|#####     | 13/26 [00:00<00:00, 15.77it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.12it/s] 65%|######5   | 17/26 [00:01<00:00, 16.34it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.58it/s] 81%|########  | 21/26 [00:01<00:00, 16.63it/s] 88%|########8 | 23/26 [00:01<00:00, 16.81it/s] 96%|#########6| 25/26 [00:01<00:00, 16.94it/s]100%|##########| 26/26 [00:01<00:00, 14.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.56 (  0.52)	train_minacc   0.56 (  0.50)	train_majacc   0.56 (  0.53)	train_corr   0.00 (  0.00)	l1 15.0643 (15.0639)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.94it/s] 27%|##6       | 7/26 [00:00<00:00, 32.98it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.98it/s] 50%|#####     | 13/26 [00:00<00:00, 38.58it/s] 69%|######9   | 18/26 [00:00<00:00, 42.22it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.22it/s] 92%|#########2| 24/26 [00:00<00:00, 47.41it/s]100%|##########| 26/26 [00:00<00:00, 37.59it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.46 (  0.46)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.57 (  0.51)	test_minacc   0.65 (  0.50)	test_majacc   0.55 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.65 (  0.50)	test_majacc_d   0.55 (  0.51)	test_corr_d  -0.02 ( -0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.65 (  0.52)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.65 (  0.52)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.12 ( -0.07)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.52)	test_minacc   0.56 (  0.52)	test_majacc   0.56 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.56 (  0.52)	test_majacc_d   0.56 (  0.52)	test_corr_d  -0.06 ( -0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.59it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.47 (  0.47)	Loss_d 0.691 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.32 ( -0.32)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.47 (  0.47)	Loss_d 0.691 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.32 ( -0.32)
Overall Timing[ 39/  1]	epoch_time 0.0507 (0.0439)	validation_time 0.0004 (0.0006)	train_time 0.0503 (0.0432)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5173000095784664, 0.5410000085830688)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.27it/s] 12%|#1        | 3/26 [00:00<00:02,  9.33it/s] 19%|#9        | 5/26 [00:00<00:01, 12.09it/s] 27%|##6       | 7/26 [00:00<00:01, 13.83it/s] 35%|###4      | 9/26 [00:00<00:01, 14.78it/s] 42%|####2     | 11/26 [00:00<00:00, 15.53it/s] 50%|#####     | 13/26 [00:00<00:00, 15.98it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.38it/s] 65%|######5   | 17/26 [00:01<00:00, 16.54it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.81it/s] 81%|########  | 21/26 [00:01<00:00, 16.81it/s] 88%|########8 | 23/26 [00:01<00:00, 16.92it/s] 96%|#########6| 25/26 [00:01<00:00, 17.05it/s]100%|##########| 26/26 [00:01<00:00, 14.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.55 (  0.52)	train_minacc   0.56 (  0.51)	train_majacc   0.55 (  0.52)	train_corr   0.00 (  0.00)	l1 15.0670 (15.0666)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.64it/s] 27%|##6       | 7/26 [00:00<00:00, 33.30it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.30it/s] 46%|####6     | 12/26 [00:00<00:00, 38.34it/s] 69%|######9   | 18/26 [00:00<00:00, 44.85it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.85it/s] 92%|#########2| 24/26 [00:00<00:00, 45.96it/s]100%|##########| 26/26 [00:00<00:00, 38.85it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.07 ( -0.07)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.57 (  0.51)	test_minacc   0.65 (  0.52)	test_majacc   0.55 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.65 (  0.52)	test_majacc_d   0.55 (  0.51)	test_corr_d  -0.02 ( -0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.65 (  0.52)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.65 (  0.52)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.11 ( -0.07)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.51)	test_minacc   0.56 (  0.52)	test_majacc   0.55 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.56 (  0.52)	test_majacc_d   0.55 (  0.51)	test_corr_d  -0.05 ( -0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.04it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.45 (  0.45)	Loss_d 0.691 (0.691)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.32 ( -0.32)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.45 (  0.45)	Loss_d 0.691 (0.691)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.32 ( -0.32)
Overall Timing[ 40/  1]	epoch_time 0.0493 (0.0440)	validation_time 0.0003 (0.0006)	train_time 0.0490 (0.0434)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5139000141322613, 0.5509999990463257)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.23it/s] 12%|#1        | 3/26 [00:00<00:02, 10.65it/s] 19%|#9        | 5/26 [00:00<00:01, 13.16it/s] 27%|##6       | 7/26 [00:00<00:01, 14.34it/s] 35%|###4      | 9/26 [00:00<00:01, 15.27it/s] 42%|####2     | 11/26 [00:00<00:00, 15.85it/s] 50%|#####     | 13/26 [00:00<00:00, 16.14it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.08it/s] 65%|######5   | 17/26 [00:01<00:00, 16.29it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.43it/s] 81%|########  | 21/26 [00:01<00:00, 16.33it/s] 88%|########8 | 23/26 [00:01<00:00, 16.34it/s] 96%|#########6| 25/26 [00:01<00:00, 16.52it/s]100%|##########| 26/26 [00:01<00:00, 14.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.54 (  0.52)	train_minacc   0.54 (  0.51)	train_majacc   0.54 (  0.52)	train_corr   0.00 (  0.00)	l1 15.0694 (15.0691)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.25it/s] 27%|##6       | 7/26 [00:00<00:00, 37.88it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.88it/s] 50%|#####     | 13/26 [00:00<00:00, 42.63it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.31it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.31it/s] 96%|#########6| 25/26 [00:00<00:00, 48.09it/s]100%|##########| 26/26 [00:00<00:00, 41.07it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.57 (  0.51)	test_minacc   0.65 (  0.52)	test_majacc   0.55 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.65 (  0.52)	test_majacc_d   0.55 (  0.50)	test_corr_d  -0.02 ( -0.07)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.65 (  0.52)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.65 (  0.52)	test_majacc_d   0.49 (  0.51)	test_corr_d  -0.11 ( -0.07)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.51)	test_minacc   0.54 (  0.52)	test_majacc   0.55 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.55 (  0.51)	test_corr_d  -0.05 ( -0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.29it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.44 (  0.44)	Loss_d 0.691 (0.691)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.33 ( -0.33)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.44 (  0.44)	Loss_d 0.691 (0.691)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.33 ( -0.33)
Overall Timing[ 41/  1]	epoch_time 0.0500 (0.0442)	validation_time 0.0004 (0.0006)	train_time 0.0497 (0.0435)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5120000084340572, 0.5640000104904175)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.11it/s] 12%|#1        | 3/26 [00:00<00:02, 11.33it/s] 19%|#9        | 5/26 [00:00<00:01, 13.48it/s] 27%|##6       | 7/26 [00:00<00:01, 14.71it/s] 35%|###4      | 9/26 [00:00<00:01, 15.35it/s] 42%|####2     | 11/26 [00:00<00:00, 15.83it/s] 50%|#####     | 13/26 [00:00<00:00, 16.17it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.35it/s] 65%|######5   | 17/26 [00:01<00:00, 16.55it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.61it/s] 81%|########  | 21/26 [00:01<00:00, 16.48it/s] 88%|########8 | 23/26 [00:01<00:00, 16.54it/s] 96%|#########6| 25/26 [00:01<00:00, 16.70it/s]100%|##########| 26/26 [00:01<00:00, 15.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.54 (  0.52)	train_minacc   0.54 (  0.52)	train_majacc   0.54 (  0.52)	train_corr   0.00 (  0.00)	l1 15.0717 (15.0714)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.81it/s] 27%|##6       | 7/26 [00:00<00:00, 32.12it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.12it/s] 50%|#####     | 13/26 [00:00<00:00, 38.91it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.12it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.12it/s] 96%|#########6| 25/26 [00:00<00:00, 45.97it/s]100%|##########| 26/26 [00:00<00:00, 37.95it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.57 (  0.51)	test_minacc   0.65 (  0.53)	test_majacc   0.56 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.65 (  0.53)	test_majacc_d   0.56 (  0.50)	test_corr_d  -0.01 ( -0.07)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.66 (  0.53)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.66 (  0.53)	test_majacc_d   0.49 (  0.51)	test_corr_d  -0.10 ( -0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.54 (  0.53)	test_majacc   0.55 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.54 (  0.53)	test_majacc_d   0.55 (  0.51)	test_corr_d  -0.04 ( -0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.30it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.57 (  0.57)	test_minacc   0.59 (  0.59)	test_majacc   0.42 (  0.42)	Loss_d 0.691 (0.691)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.33 ( -0.33)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.57 (  0.57)	test_minacc   0.59 (  0.59)	test_majacc   0.42 (  0.42)	Loss_d 0.691 (0.691)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.33 ( -0.33)
Overall Timing[ 42/  1]	epoch_time 0.0511 (0.0443)	validation_time 0.0004 (0.0005)	train_time 0.0506 (0.0437)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.511800010561943, 0.5730000138282776)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.42it/s] 12%|#1        | 3/26 [00:00<00:01, 11.51it/s] 19%|#9        | 5/26 [00:00<00:01, 13.59it/s] 27%|##6       | 7/26 [00:00<00:01, 14.94it/s] 35%|###4      | 9/26 [00:00<00:01, 15.46it/s] 42%|####2     | 11/26 [00:00<00:00, 15.83it/s] 50%|#####     | 13/26 [00:00<00:00, 16.15it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.31it/s] 65%|######5   | 17/26 [00:01<00:00, 16.57it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.72it/s] 81%|########  | 21/26 [00:01<00:00, 16.88it/s] 88%|########8 | 23/26 [00:01<00:00, 17.03it/s] 96%|#########6| 25/26 [00:01<00:00, 17.14it/s]100%|##########| 26/26 [00:01<00:00, 15.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.54 (  0.52)	train_minacc   0.54 (  0.52)	train_majacc   0.54 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0736 (15.0733)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.60it/s] 27%|##6       | 7/26 [00:00<00:00, 33.59it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.59it/s] 46%|####6     | 12/26 [00:00<00:00, 38.56it/s] 65%|######5   | 17/26 [00:00<00:00, 42.20it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.20it/s] 88%|########8 | 23/26 [00:00<00:00, 47.53it/s]100%|##########| 26/26 [00:00<00:00, 38.38it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.57 (  0.51)	test_minacc   0.66 (  0.53)	test_majacc   0.55 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.66 (  0.53)	test_majacc_d   0.55 (  0.50)	test_corr_d  -0.01 ( -0.06)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.66 (  0.53)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.66 (  0.53)	test_majacc_d   0.49 (  0.51)	test_corr_d  -0.10 ( -0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.54 (  0.53)	test_majacc   0.54 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.54 (  0.53)	test_majacc_d   0.54 (  0.51)	test_corr_d  -0.03 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.96it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.41 (  0.41)	Loss_d 0.691 (0.691)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.32 ( -0.32)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.41 (  0.41)	Loss_d 0.691 (0.691)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.32 ( -0.32)
Overall Timing[ 43/  1]	epoch_time 0.0506 (0.0445)	validation_time 0.0004 (0.0005)	train_time 0.0502 (0.0438)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5105000113844872, 0.5800000429153442)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.78it/s] 12%|#1        | 3/26 [00:00<00:02, 10.97it/s] 19%|#9        | 5/26 [00:00<00:01, 13.17it/s] 27%|##6       | 7/26 [00:00<00:01, 14.50it/s] 35%|###4      | 9/26 [00:00<00:01, 15.17it/s] 42%|####2     | 11/26 [00:00<00:00, 15.54it/s] 50%|#####     | 13/26 [00:00<00:00, 16.05it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.44it/s] 65%|######5   | 17/26 [00:01<00:00, 16.64it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.73it/s] 81%|########  | 21/26 [00:01<00:00, 16.64it/s] 88%|########8 | 23/26 [00:01<00:00, 16.72it/s] 96%|#########6| 25/26 [00:01<00:00, 16.89it/s]100%|##########| 26/26 [00:01<00:00, 15.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.54 (  0.51)	train_minacc   0.54 (  0.52)	train_majacc   0.54 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0754 (15.0751)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.25it/s] 31%|###       | 8/26 [00:00<00:00, 41.54it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.54it/s] 50%|#####     | 13/26 [00:00<00:00, 41.48it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.14it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.14it/s] 96%|#########6| 25/26 [00:00<00:00, 46.58it/s]100%|##########| 26/26 [00:00<00:00, 40.56it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.57 (  0.51)	test_minacc   0.66 (  0.53)	test_majacc   0.55 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.66 (  0.53)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.00 ( -0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.66 (  0.53)	test_majacc   0.48 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.66 (  0.53)	test_majacc_d   0.48 (  0.51)	test_corr_d  -0.09 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.51 (  0.53)	test_majacc   0.54 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.54 (  0.51)	test_corr_d  -0.01 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.20it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.59 (  0.59)	test_minacc   0.61 (  0.61)	test_majacc   0.41 (  0.41)	Loss_d 0.691 (0.691)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.32 ( -0.32)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.59 (  0.59)	test_minacc   0.61 (  0.61)	test_majacc   0.41 (  0.41)	Loss_d 0.691 (0.691)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.32 ( -0.32)
Overall Timing[ 44/  1]	epoch_time 0.0512 (0.0446)	validation_time 0.0006 (0.0005)	train_time 0.0506 (0.0440)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.510100007712841, 0.5860000252723694)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.05it/s] 12%|#1        | 3/26 [00:00<00:02, 11.12it/s] 19%|#9        | 5/26 [00:00<00:01, 12.91it/s] 27%|##6       | 7/26 [00:00<00:01, 14.25it/s] 35%|###4      | 9/26 [00:00<00:01, 15.01it/s] 42%|####2     | 11/26 [00:00<00:00, 15.72it/s] 50%|#####     | 13/26 [00:00<00:00, 16.20it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.38it/s] 65%|######5   | 17/26 [00:01<00:00, 16.57it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.76it/s] 81%|########  | 21/26 [00:01<00:00, 16.91it/s] 88%|########8 | 23/26 [00:01<00:00, 16.96it/s] 96%|#########6| 25/26 [00:01<00:00, 17.07it/s]100%|##########| 26/26 [00:01<00:00, 15.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.53 (  0.51)	train_minacc   0.51 (  0.52)	train_majacc   0.53 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0770 (15.0766)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.24it/s] 23%|##3       | 6/26 [00:00<00:01, 19.74it/s]                                               23%|##3       | 6/26 [00:00<00:01, 19.74it/s] 42%|####2     | 11/26 [00:00<00:00, 29.45it/s] 65%|######5   | 17/26 [00:00<00:00, 38.22it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.22it/s] 85%|########4 | 22/26 [00:00<00:00, 39.84it/s]100%|##########| 26/26 [00:00<00:00, 32.40it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.57 (  0.51)	test_minacc   0.65 (  0.53)	test_majacc   0.56 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.65 (  0.53)	test_majacc_d   0.56 (  0.51)	test_corr_d   0.01 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.66 (  0.53)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.66 (  0.53)	test_majacc_d   0.49 (  0.51)	test_corr_d  -0.08 ( -0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.51 (  0.53)	test_majacc   0.54 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.00 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.81it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.41 (  0.41)	Loss_d 0.691 (0.691)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.32 ( -0.32)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.41 (  0.41)	Loss_d 0.691 (0.691)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.32 ( -0.32)
Overall Timing[ 45/  1]	epoch_time 0.0507 (0.0448)	validation_time 0.0003 (0.0005)	train_time 0.0503 (0.0441)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5115000157654286, 0.5950000286102295)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.34it/s] 12%|#1        | 3/26 [00:00<00:02, 10.18it/s] 19%|#9        | 5/26 [00:00<00:01, 12.68it/s] 27%|##6       | 7/26 [00:00<00:01, 14.06it/s] 35%|###4      | 9/26 [00:00<00:01, 14.93it/s] 42%|####2     | 11/26 [00:00<00:00, 15.42it/s] 50%|#####     | 13/26 [00:00<00:00, 15.80it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.03it/s] 65%|######5   | 17/26 [00:01<00:00, 16.27it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.44it/s] 81%|########  | 21/26 [00:01<00:00, 16.65it/s] 88%|########8 | 23/26 [00:01<00:00, 16.77it/s] 96%|#########6| 25/26 [00:01<00:00, 16.99it/s]100%|##########| 26/26 [00:01<00:00, 14.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.53 (  0.51)	train_minacc   0.51 (  0.53)	train_majacc   0.54 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0784 (15.0780)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.51it/s] 27%|##6       | 7/26 [00:00<00:00, 35.12it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.12it/s] 50%|#####     | 13/26 [00:00<00:00, 40.91it/s] 69%|######9   | 18/26 [00:00<00:00, 43.98it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.98it/s] 92%|#########2| 24/26 [00:00<00:00, 48.25it/s]100%|##########| 26/26 [00:00<00:00, 39.88it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.57 (  0.51)	test_minacc   0.63 (  0.52)	test_majacc   0.56 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.63 (  0.52)	test_majacc_d   0.56 (  0.51)	test_corr_d   0.02 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.66 (  0.52)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.66 (  0.52)	test_majacc_d   0.49 (  0.51)	test_corr_d  -0.06 ( -0.02)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.51 (  0.52)	test_majacc   0.55 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.02 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.07it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.41 (  0.41)	Loss_d 0.691 (0.691)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.32 ( -0.32)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.41 (  0.41)	Loss_d 0.691 (0.691)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.32 ( -0.32)
Overall Timing[ 46/  1]	epoch_time 0.0521 (0.0449)	validation_time 0.0004 (0.0005)	train_time 0.0517 (0.0443)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5130000104904174, 0.5980000495910645)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.38it/s] 12%|#1        | 3/26 [00:00<00:02, 10.42it/s] 19%|#9        | 5/26 [00:00<00:01, 12.88it/s] 27%|##6       | 7/26 [00:00<00:01, 14.28it/s] 35%|###4      | 9/26 [00:00<00:01, 15.07it/s] 42%|####2     | 11/26 [00:00<00:00, 15.58it/s] 50%|#####     | 13/26 [00:00<00:00, 16.02it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.24it/s] 65%|######5   | 17/26 [00:01<00:00, 16.51it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.54it/s] 81%|########  | 21/26 [00:01<00:00, 16.54it/s] 88%|########8 | 23/26 [00:01<00:00, 16.60it/s] 96%|#########6| 25/26 [00:01<00:00, 16.74it/s]100%|##########| 26/26 [00:01<00:00, 14.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.53 (  0.51)	train_minacc   0.51 (  0.53)	train_majacc   0.54 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0796 (15.0792)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.73it/s] 35%|###4      | 9/26 [00:00<00:00, 40.00it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.00it/s] 58%|#####7    | 15/26 [00:00<00:00, 44.78it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 44.78it/s] 81%|########  | 21/26 [00:00<00:00, 47.56it/s]100%|##########| 26/26 [00:00<00:00, 41.80it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.57 (  0.51)	test_minacc   0.62 (  0.51)	test_majacc   0.56 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.62 (  0.51)	test_majacc_d   0.56 (  0.51)	test_corr_d   0.03 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.66 (  0.52)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.66 (  0.52)	test_majacc_d   0.51 (  0.52)	test_corr_d  -0.05 ( -0.01)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.51 (  0.52)	test_majacc   0.55 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.03 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.80it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.41 (  0.41)	Loss_d 0.692 (0.692)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.41 (  0.41)	Loss_d 0.692 (0.692)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.31 ( -0.31)
Overall Timing[ 47/  1]	epoch_time 0.0507 (0.0450)	validation_time 0.0004 (0.0005)	train_time 0.0502 (0.0444)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.518200009226799, 0.5990000367164612)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.10it/s] 12%|#1        | 3/26 [00:00<00:01, 11.82it/s] 19%|#9        | 5/26 [00:00<00:01, 13.95it/s] 27%|##6       | 7/26 [00:00<00:01, 15.14it/s] 35%|###4      | 9/26 [00:00<00:01, 15.78it/s] 42%|####2     | 11/26 [00:00<00:00, 16.19it/s] 50%|#####     | 13/26 [00:00<00:00, 16.19it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.32it/s] 65%|######5   | 17/26 [00:01<00:00, 16.58it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.86it/s] 81%|########  | 21/26 [00:01<00:00, 16.81it/s] 88%|########8 | 23/26 [00:01<00:00, 16.95it/s] 96%|#########6| 25/26 [00:01<00:00, 16.98it/s]100%|##########| 26/26 [00:01<00:00, 15.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.55 (  0.51)	train_minacc   0.51 (  0.53)	train_majacc   0.55 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0808 (15.0803)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.01it/s] 27%|##6       | 7/26 [00:00<00:00, 27.41it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.41it/s] 50%|#####     | 13/26 [00:00<00:00, 36.79it/s] 73%|#######3  | 19/26 [00:00<00:00, 42.39it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 42.39it/s] 96%|#########6| 25/26 [00:00<00:00, 44.15it/s]100%|##########| 26/26 [00:00<00:00, 35.48it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.58 (  0.52)	test_minacc   0.62 (  0.51)	test_majacc   0.57 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.58 (  0.52)	test_minacc_d   0.62 (  0.51)	test_majacc_d   0.57 (  0.52)	test_corr_d   0.04 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.65 (  0.52)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.65 (  0.52)	test_majacc_d   0.52 (  0.53)	test_corr_d  -0.04 ( -0.00)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.52)	test_minacc   0.51 (  0.52)	test_majacc   0.56 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.56 (  0.52)	test_corr_d   0.04 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.78it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.40 (  0.40)	Loss_d 0.692 (0.692)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.40 (  0.40)	Loss_d 0.692 (0.692)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.31 ( -0.31)
Overall Timing[ 48/  1]	epoch_time 0.0507 (0.0452)	validation_time 0.0004 (0.0005)	train_time 0.0502 (0.0445)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5209000129699707, 0.5990000367164612)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.00it/s] 12%|#1        | 3/26 [00:00<00:01, 11.94it/s] 19%|#9        | 5/26 [00:00<00:01, 13.74it/s] 27%|##6       | 7/26 [00:00<00:01, 14.74it/s] 35%|###4      | 9/26 [00:00<00:01, 15.44it/s] 42%|####2     | 11/26 [00:00<00:00, 15.97it/s] 50%|#####     | 13/26 [00:00<00:00, 16.18it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.49it/s] 65%|######5   | 17/26 [00:01<00:00, 16.69it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.72it/s] 81%|########  | 21/26 [00:01<00:00, 16.69it/s] 88%|########8 | 23/26 [00:01<00:00, 16.77it/s] 96%|#########6| 25/26 [00:01<00:00, 16.88it/s]100%|##########| 26/26 [00:01<00:00, 15.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.55 (  0.51)	train_minacc   0.51 (  0.53)	train_majacc   0.56 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0818 (15.0813)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.42it/s] 23%|##3       | 6/26 [00:00<00:00, 28.90it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.90it/s] 42%|####2     | 11/26 [00:00<00:00, 37.62it/s] 65%|######5   | 17/26 [00:00<00:00, 42.05it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.05it/s] 85%|########4 | 22/26 [00:00<00:00, 42.88it/s]100%|##########| 26/26 [00:00<00:00, 37.70it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.48 (  0.48)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.59 (  0.52)	test_minacc   0.62 (  0.51)	test_majacc   0.58 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.59 (  0.52)	test_minacc_d   0.62 (  0.51)	test_majacc_d   0.58 (  0.52)	test_corr_d   0.05 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.65 (  0.52)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.65 (  0.52)	test_majacc_d   0.52 (  0.53)	test_corr_d  -0.03 (  0.01)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.52)	test_minacc   0.51 (  0.52)	test_majacc   0.57 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.57 (  0.52)	test_corr_d   0.06 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.86it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.60 (  0.60)	test_minacc   0.63 (  0.63)	test_majacc   0.37 (  0.37)	Loss_d 0.692 (0.692)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.60 (  0.60)	test_minacc   0.63 (  0.63)	test_majacc   0.37 (  0.37)	Loss_d 0.692 (0.692)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.31 ( -0.31)
Overall Timing[ 49/  1]	epoch_time 0.0512 (0.0453)	validation_time 0.0004 (0.0005)	train_time 0.0508 (0.0446)
record: (train_acc, test_acc) (0.6928000287413597, 0.6850000619888306)
last accs (train_acc, test_acc) (0.5231000080704689, 0.6030000448226929)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.155 MB of 0.155 MB uploadedwandb: \ 0.155 MB of 0.155 MB uploadedwandb: | 0.155 MB of 0.155 MB uploadedwandb: / 0.155 MB of 0.155 MB uploadedwandb: - 0.177 MB of 0.185 MB uploaded (0.003 MB deduped)wandb: \ 0.515 MB of 0.515 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/diagnostics/epoch_time_val █▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▃▃▄▄▄▄▃▄▃▄▄▄▃▃▃▄▄▄▄▄▄
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/diagnostics/train_time_val █▁▂▂▁▁▁▁▂▂▁▂▁▁▁▁▂▁▁▄▄▅▅▅▄▄▅▄▅▅▅▄▄▄▅▄▄▅▄▅
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/Loss_avg █▆▆▆▆▆▆▆▆▅▅▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/Loss_d_avg █▆▆▆▆▆▆▆▆▅▅▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/Loss_d_val █▆▆▆▆▆▆▆▆▅▅▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/Loss_val █▆▆▆▆▆▆▆▆▅▅▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/test_acc_avg ▁▁▁▂▂▁▁▃▂▄▄▄█▆▆▅▅▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/test_acc_d_avg ▁▁▁▂▂▁▁▃▂▄▄▄█▆▆▅▅▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇▇▇
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/test_acc_d_val ▁▁▁▂▂▁▁▃▂▄▄▄█▆▆▅▅▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇▇▇
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/test_acc_val ▁▁▁▂▂▁▁▃▂▄▄▄█▆▆▅▅▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇▇▇
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/test_corr_d_avg ███▇▇▇▇▆▇▆▆▆▁▃▂▃▃▃▃▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/test_corr_d_val ███▇▇▇▇▆▇▆▆▆▁▃▂▃▃▃▃▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/test_majacc_avg █████████▇▇▇▄▃▂▃▃▃▃▅▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/test_majacc_d_avg █████████▇▇▇▄▃▂▃▃▃▃▅▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/test_majacc_d_val █████████▇▇▇▄▃▂▃▃▃▃▅▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/test_majacc_val █████████▇▇▇▄▃▂▃▃▃▃▅▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/test_minacc_avg ▁▁▁▂▂▁▁▃▂▄▄▄█▆▇▆▅▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/test_minacc_d_avg ▁▁▁▂▂▁▁▃▂▄▄▄█▆▇▆▅▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/test_minacc_d_val ▁▁▁▂▂▁▁▃▂▄▄▄█▆▇▆▅▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇▇▇▇
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/test_minacc_val ▁▁▁▂▂▁▁▃▂▄▄▄█▆▇▆▅▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▇▇▇▇▇▇▇▇
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/Loss_avg █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/Loss_val █▅▃▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/l1_avg ▃▂▁▁▁▂▃▃▅▆▇▇███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/l1_val ▂▂▁▁▁▂▃▄▆▆▇████████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/train_acc_avg ▇███████████▇▃▂▂▂▂▂▁▁▁▁▁▁▁▂▂▂▂▂▁▁▁▁▁▁▁▁▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/train_acc_val ████████████▆▄▁▃▂▂▂▅▁▁▁▁▁▁▁▁▂▁▁▂▁▁▁▁▁▁▁▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/train_majacc_avg ▇███████████▆▃▂▂▂▂▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/train_majacc_val ███████████▇▄▃▁▂▂▂▂▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/train_minacc_avg ▂▁▁▁▂▂▃▃▃▄▃▃▇█▆▆▆▆▆█▇▆▆▆▇▇▇▆▇▇▇▆▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/train_minacc_val ▁▁▁▁▁▁▁▂▂▂▂▃█▆▅▆▅▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/train_nll_avg ▅▂▂▂▂▂▁▁▁▁▁▁▃███████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/train_nll_val ▃▃▃▂▂▂▂▁▁▁▁▂▆███████████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/train_penalty_avg █▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/train_penalty_val █▇▆▃▃▃▃▃▂▃▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/weight_norm_avg █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/weight_norm_val █▄▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/diagnostics/epoch_time_val 0.05125
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/diagnostics/train_time_val 0.05079
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/diagnostics/validation_time_val 0.00043
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/Loss_avg 0.69163
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/Loss_d_avg 0.69163
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/Loss_d_val 0.69163
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/Loss_val 0.69163
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/test_acc_avg 0.603
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/test_acc_d_avg 0.603
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/test_acc_d_val 0.603
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/test_acc_val 0.603
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/test_corr_d_avg -0.31008
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/test_corr_d_val -0.31008
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/test_majacc_avg 0.37
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/test_majacc_d_avg 0.37
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/test_majacc_d_val 0.37
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/test_majacc_val 0.37
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/test_minacc_avg 0.62889
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/test_minacc_d_avg 0.62889
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/test_minacc_d_val 0.62889
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/test/test_minacc_val 0.62889
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/Loss_avg 9e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/Loss_val 9e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/l1_avg 15.0813
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/l1_val 15.08178
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/train_acc_avg 0.5112
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/train_acc_val 0.552
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/train_majacc_avg 0.50731
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/train_majacc_val 0.55924
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/train_minacc_avg 0.53052
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/train_minacc_val 0.51282
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/train_nll_avg 0.69302
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/train_nll_val 0.69257
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/weight_norm_avg 0.21841
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/64/logs/train/weight_norm_val 0.21823
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/njtwdkvv
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_125600-njtwdkvv/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_125852-7v9tgber
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/7v9tgber
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=15.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1218
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6008, 3, 32, 32) (5992, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:41,  1.66s/it] 19%|#9        | 5/26 [00:01<00:05,  3.68it/s] 35%|###4      | 9/26 [00:01<00:02,  7.24it/s] 50%|#####     | 13/26 [00:02<00:01, 11.12it/s] 65%|######5   | 17/26 [00:02<00:00, 15.08it/s] 81%|########  | 21/26 [00:02<00:00, 18.87it/s] 96%|#########6| 25/26 [00:02<00:00, 22.19it/s]100%|##########| 26/26 [00:02<00:00,  9.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 9.066 (12.050)	train_nll   0.40 (  0.55)	train_penalty   0.05 (  0.30)	weight_norm   8.67 ( 11.50)	train_acc   0.85 (  0.81)	train_minacc   0.00 (  0.07)	train_majacc   1.00 (  0.94)	train_corr   0.00 (  0.00)	l1 7.4789 (8.6562)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.83it/s] 23%|##3       | 6/26 [00:00<00:00, 31.99it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.99it/s] 46%|####6     | 12/26 [00:00<00:00, 38.89it/s] 69%|######9   | 18/26 [00:00<00:00, 45.84it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.84it/s] 92%|#########2| 24/26 [00:00<00:00, 46.50it/s]100%|##########| 26/26 [00:00<00:00, 39.26it/s]
Test: [   0/  26]	Loss 0.381 (0.381)	test_acc   0.86 (  0.86)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 0.381 (0.381)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.399 (0.410)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.399 (0.410)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.98)
Test: [  20/  26]	Loss 0.368 (0.407)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.368 (0.407)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.98)
Test: [  26/  26]	Loss 0.392 (0.406)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.392 (0.406)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.55it/s]100%|##########| 1/1 [00:00<00:00,  2.55it/s]
Test: [  0/  1]	Loss 1.828 (1.828)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 1.828 (1.828)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 1.828 (1.828)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 1.828 (1.828)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/65/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0742 (0.0742)	validation_time 0.0066 (0.0066)	train_time 0.0645 (0.0645)
record: (train_acc, test_acc) (0.8480000216960907, 0.10300000756978989)
last accs (train_acc, test_acc) (0.8480000216960907, 0.10300000756978989)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.50it/s] 19%|#9        | 5/26 [00:00<00:00, 22.59it/s] 35%|###4      | 9/26 [00:00<00:00, 28.30it/s] 50%|#####     | 13/26 [00:00<00:00, 31.09it/s] 65%|######5   | 17/26 [00:00<00:00, 32.66it/s] 81%|########  | 21/26 [00:00<00:00, 33.70it/s] 96%|#########6| 25/26 [00:00<00:00, 33.63it/s]100%|##########| 26/26 [00:00<00:00, 28.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 4.566 (6.423)	train_nll   0.38 (  0.40)	train_penalty   0.05 (  0.05)	weight_norm   4.19 (  6.02)	train_acc   0.85 (  0.85)	train_minacc   0.00 (  0.02)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 7.0631 (7.2592)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.23it/s] 27%|##6       | 7/26 [00:00<00:00, 32.23it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.23it/s] 50%|#####     | 13/26 [00:00<00:00, 40.36it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.01it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.01it/s] 96%|#########6| 25/26 [00:00<00:00, 47.10it/s]100%|##########| 26/26 [00:00<00:00, 38.82it/s]
Test: [   0/  26]	Loss 0.374 (0.374)	test_acc   0.87 (  0.87)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 0.374 (0.374)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.400 (0.408)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.400 (0.408)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.346 (0.404)	test_acc   0.87 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.346 (0.404)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.362 (0.401)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.362 (0.401)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.80it/s]
Test: [  0/  1]	Loss 2.008 (2.008)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 2.008 (2.008)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 2.008 (2.008)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 2.008 (2.008)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/65/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0360 (0.0551)	validation_time 0.0004 (0.0035)	train_time 0.0355 (0.0500)
record: (train_acc, test_acc) (0.8489000228047371, 0.10500000417232513)
last accs (train_acc, test_acc) (0.8489000228047371, 0.10500000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.37it/s] 19%|#9        | 5/26 [00:00<00:00, 21.37it/s] 35%|###4      | 9/26 [00:00<00:00, 26.26it/s] 50%|#####     | 13/26 [00:00<00:00, 29.28it/s] 65%|######5   | 17/26 [00:00<00:00, 30.45it/s] 81%|########  | 21/26 [00:00<00:00, 31.69it/s] 96%|#########6| 25/26 [00:00<00:00, 32.33it/s]100%|##########| 26/26 [00:00<00:00, 27.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 2.805 (3.558)	train_nll   0.38 (  0.39)	train_penalty   0.06 (  0.05)	weight_norm   2.43 (  3.17)	train_acc   0.85 (  0.84)	train_minacc   0.00 (  0.07)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 6.3329 (6.5958)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.42it/s] 31%|###       | 8/26 [00:00<00:00, 39.69it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.69it/s] 50%|#####     | 13/26 [00:00<00:00, 41.25it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.27it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.27it/s] 96%|#########6| 25/26 [00:00<00:00, 47.47it/s]100%|##########| 26/26 [00:00<00:00, 41.31it/s]
Test: [   0/  26]	Loss 0.378 (0.378)	test_acc   0.86 (  0.86)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.378 (0.378)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.396 (0.408)	test_acc   0.85 (  0.84)	test_minacc   0.00 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.396 (0.408)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.00 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.96)
Test: [  20/  26]	Loss 0.361 (0.404)	test_acc   0.86 (  0.84)	test_minacc   0.00 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.361 (0.404)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.00 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.365 (0.403)	test_acc   0.85 (  0.85)	test_minacc   0.03 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.365 (0.403)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.03 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.27it/s]
Test: [  0/  1]	Loss 1.886 (1.886)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.886 (1.886)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.886 (1.886)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.886 (1.886)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Overall Timing[  2/  1]	epoch_time 0.0350 (0.0484)	validation_time 0.0004 (0.0025)	train_time 0.0346 (0.0449)
record: (train_acc, test_acc) (0.8489000228047371, 0.10500000417232513)
last accs (train_acc, test_acc) (0.8458000218272209, 0.10400000214576721)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.16it/s] 19%|#9        | 5/26 [00:00<00:01, 20.98it/s] 35%|###4      | 9/26 [00:00<00:00, 25.81it/s] 50%|#####     | 13/26 [00:00<00:00, 28.36it/s] 65%|######5   | 17/26 [00:00<00:00, 29.99it/s] 81%|########  | 21/26 [00:00<00:00, 31.00it/s] 96%|#########6| 25/26 [00:00<00:00, 31.86it/s]100%|##########| 26/26 [00:00<00:00, 26.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 1.935 (2.330)	train_nll   0.37 (  0.38)	train_penalty   0.08 (  0.04)	weight_norm   1.56 (  1.95)	train_acc   0.85 (  0.84)	train_minacc   0.00 (  0.09)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 5.9009 (5.9935)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.10it/s] 27%|##6       | 7/26 [00:00<00:00, 34.20it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.20it/s] 50%|#####     | 13/26 [00:00<00:00, 41.63it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.31it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.31it/s] 96%|#########6| 25/26 [00:00<00:00, 46.87it/s]100%|##########| 26/26 [00:00<00:00, 39.52it/s]
Test: [   0/  26]	Loss 0.374 (0.374)	test_acc   0.86 (  0.86)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.374 (0.374)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.358 (0.389)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.358 (0.389)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.333 (0.383)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.333 (0.383)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.98)
Test: [  26/  26]	Loss 0.339 (0.378)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.339 (0.378)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.69it/s]
Test: [  0/  1]	Loss 2.071 (2.071)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 2.071 (2.071)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 2.071 (2.071)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 2.071 (2.071)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Overall Timing[  3/  1]	epoch_time 0.0367 (0.0455)	validation_time 0.0004 (0.0020)	train_time 0.0363 (0.0428)
record: (train_acc, test_acc) (0.8489000228047371, 0.10500000417232513)
last accs (train_acc, test_acc) (0.8491000251173974, 0.10100000351667404)
current lr:  0.006
current prune rate:  1
slurmstepd: error: *** JOB 13981456 ON ccc0284 CANCELLED AT 2024-09-07T12:59:19 ***
